
COMMANDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000db30  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000db30  0000db30  0001db30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000001fc  20000000  0000db38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000064c  20000200  0000dd40  00020200  2**4
                  ALLOC
  4 .stack        00002004  2000084c  0000e38c  00020200  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
  7 .debug_info   00084317  00000000  00000000  0002027d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000a8c8  00000000  00000000  000a4594  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000145e2  00000000  00000000  000aee5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001790  00000000  00000000  000c343e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002d50  00000000  00000000  000c4bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000286ee  00000000  00000000  000c791e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00027466  00000000  00000000  000f000c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a1e06  00000000  00000000  00117472  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004b50  00000000  00000000  001b9278  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	50 28 00 20 55 a0 00 00 51 a0 00 00 51 a0 00 00     P(. U...Q...Q...
	...
      2c:	45 70 00 00 00 00 00 00 00 00 00 00 31 71 00 00     Ep..........1q..
      3c:	75 71 00 00 51 a0 00 00 51 a0 00 00 39 87 00 00     uq..Q...Q...9...
      4c:	85 6c 00 00 6d 8e 00 00 51 a0 00 00 e5 68 00 00     .l..m...Q....h..
      5c:	51 a0 00 00 ad 8e 00 00 c5 8d 00 00 d5 8d 00 00     Q...............
      6c:	e5 8d 00 00 f5 8d 00 00 05 8e 00 00 15 8e 00 00     ................
      7c:	91 87 00 00 a1 87 00 00 b1 87 00 00 1d 88 00 00     ................
      8c:	2d 88 00 00 3d 88 00 00 4d 88 00 00 5d 88 00 00     -...=...M...]...
      9c:	b5 67 00 00 39 90 00 00 61 68 00 00 51 a0 00 00     .g..9...ah..Q...
      ac:	51 a0 00 00 00 00 00 00                             Q.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000200 	.word	0x20000200
      d4:	00000000 	.word	0x00000000
      d8:	0000db38 	.word	0x0000db38

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000204 	.word	0x20000204
     108:	0000db38 	.word	0x0000db38
     10c:	0000db38 	.word	0x0000db38
     110:	00000000 	.word	0x00000000

00000114 <configure_eeprom>:
#include "eeprom_driver.h"

void configure_eeprom(void)
{
     114:	b510      	push	{r4, lr}
	enum status_code error_code = eeprom_emulator_init();
     116:	4c05      	ldr	r4, [pc, #20]	; (12c <configure_eeprom+0x18>)
     118:	47a0      	blx	r4
	if (error_code == STATUS_ERR_NO_MEMORY)
     11a:	2816      	cmp	r0, #22
     11c:	d100      	bne.n	120 <configure_eeprom+0xc>
     11e:	e7fe      	b.n	11e <configure_eeprom+0xa>
	{
		while (true);
	}
	else if (error_code != STATUS_OK)
     120:	2800      	cmp	r0, #0
     122:	d002      	beq.n	12a <configure_eeprom+0x16>
	{
		eeprom_emulator_erase_memory();
     124:	4b02      	ldr	r3, [pc, #8]	; (130 <configure_eeprom+0x1c>)
     126:	4798      	blx	r3
		eeprom_emulator_init();
     128:	47a0      	blx	r4
	}
}
     12a:	bd10      	pop	{r4, pc}
     12c:	000094d9 	.word	0x000094d9
     130:	000095a5 	.word	0x000095a5

00000134 <config_mobile_no_ee>:
		eeprom_emulator_commit_page_buffer();
	}
}

void config_mobile_no_ee(const uint8_t page_loc,const char *mobile_number)
{
     134:	b5f0      	push	{r4, r5, r6, r7, lr}
     136:	0005      	movs	r5, r0
	struct mobile_no_struct mobile_no;
	memset(page_data, '\0', sizeof(page_data));
     138:	4c17      	ldr	r4, [pc, #92]	; (198 <config_mobile_no_ee+0x64>)
{
     13a:	b089      	sub	sp, #36	; 0x24
	memset(page_data, '\0', sizeof(page_data));
     13c:	223c      	movs	r2, #60	; 0x3c
{
     13e:	9101      	str	r1, [sp, #4]
	memset(page_data, '\0', sizeof(page_data));
     140:	0020      	movs	r0, r4
     142:	2100      	movs	r1, #0
     144:	4e15      	ldr	r6, [pc, #84]	; (19c <config_mobile_no_ee+0x68>)
     146:	47b0      	blx	r6
	eeprom_emulator_read_page(page_loc, page_data);
     148:	4b15      	ldr	r3, [pc, #84]	; (1a0 <config_mobile_no_ee+0x6c>)
     14a:	0021      	movs	r1, r4
     14c:	0028      	movs	r0, r5
     14e:	4798      	blx	r3
	memcpy(&mobile_no,page_data,sizeof(mobile_no));
     150:	2218      	movs	r2, #24
     152:	0021      	movs	r1, r4
     154:	a802      	add	r0, sp, #8
     156:	4f13      	ldr	r7, [pc, #76]	; (1a4 <config_mobile_no_ee+0x70>)
     158:	47b8      	blx	r7
	if (mobile_no.u8tfirst_time_write_ee != 85)
     15a:	ab02      	add	r3, sp, #8
     15c:	781b      	ldrb	r3, [r3, #0]
     15e:	2b55      	cmp	r3, #85	; 0x55
     160:	d017      	beq.n	192 <config_mobile_no_ee+0x5e>
	{
		mobile_no.u8tfirst_time_write_ee = 85;
		mobile_no.dummy1 = 0;
     162:	2100      	movs	r1, #0
		mobile_no.u8tfirst_time_write_ee = 85;
     164:	2355      	movs	r3, #85	; 0x55
     166:	aa02      	add	r2, sp, #8
     168:	7013      	strb	r3, [r2, #0]
		mobile_no.dummy1 = 0;
     16a:	7051      	strb	r1, [r2, #1]
		mobile_no.dummy2 = 0;
     16c:	7091      	strb	r1, [r2, #2]
		mobile_no.dummy3 = 0;
     16e:	70d1      	strb	r1, [r2, #3]
		memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
     170:	a803      	add	r0, sp, #12
     172:	2214      	movs	r2, #20
     174:	47b0      	blx	r6
		strcpy(mobile_no.mobile_no_ee,mobile_number);
     176:	4b0c      	ldr	r3, [pc, #48]	; (1a8 <config_mobile_no_ee+0x74>)
     178:	9901      	ldr	r1, [sp, #4]
     17a:	a803      	add	r0, sp, #12
     17c:	4798      	blx	r3
		
		memcpy(page_data,&mobile_no,sizeof(mobile_no));
     17e:	2218      	movs	r2, #24
     180:	a902      	add	r1, sp, #8
     182:	0020      	movs	r0, r4
     184:	47b8      	blx	r7
		eeprom_emulator_write_page(page_loc, page_data);
     186:	4b09      	ldr	r3, [pc, #36]	; (1ac <config_mobile_no_ee+0x78>)
     188:	0021      	movs	r1, r4
     18a:	0028      	movs	r0, r5
     18c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     18e:	4b08      	ldr	r3, [pc, #32]	; (1b0 <config_mobile_no_ee+0x7c>)
     190:	4798      	blx	r3
	}
}
     192:	b009      	add	sp, #36	; 0x24
     194:	bdf0      	pop	{r4, r5, r6, r7, pc}
     196:	46c0      	nop			; (mov r8, r8)
     198:	20000538 	.word	0x20000538
     19c:	0000c3f7 	.word	0x0000c3f7
     1a0:	00009679 	.word	0x00009679
     1a4:	0000c3c1 	.word	0x0000c3c1
     1a8:	0000c677 	.word	0x0000c677
     1ac:	00009701 	.word	0x00009701
     1b0:	000096d5 	.word	0x000096d5

000001b4 <init_eeprom>:
{
     1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configure_eeprom();
     1b6:	4b91      	ldr	r3, [pc, #580]	; (3fc <init_eeprom+0x248>)
     1b8:	4798      	blx	r3
	eeprom_emulator_read_page(USER_COUNTER_PAGE, page_data);
     1ba:	4d91      	ldr	r5, [pc, #580]	; (400 <init_eeprom+0x24c>)
     1bc:	2005      	movs	r0, #5
     1be:	0029      	movs	r1, r5
     1c0:	4f90      	ldr	r7, [pc, #576]	; (404 <init_eeprom+0x250>)
     1c2:	47b8      	blx	r7
	memcpy(&user_count_struct,page_data,sizeof(user_count_struct));
     1c4:	4c90      	ldr	r4, [pc, #576]	; (408 <init_eeprom+0x254>)
     1c6:	2206      	movs	r2, #6
     1c8:	0029      	movs	r1, r5
     1ca:	0020      	movs	r0, r4
     1cc:	4e8f      	ldr	r6, [pc, #572]	; (40c <init_eeprom+0x258>)
     1ce:	47b0      	blx	r6
	if (user_count_struct.u8tfirst_time_write_ee != 85)
     1d0:	7823      	ldrb	r3, [r4, #0]
     1d2:	2b55      	cmp	r3, #85	; 0x55
     1d4:	d012      	beq.n	1fc <init_eeprom+0x48>
		user_count_struct.u8tfirst_time_write_ee = 85;
     1d6:	2355      	movs	r3, #85	; 0x55
     1d8:	7023      	strb	r3, [r4, #0]
		user_count_struct.total_user_no_count    = 15;
     1da:	3b46      	subs	r3, #70	; 0x46
     1dc:	7063      	strb	r3, [r4, #1]
		user_count_struct.current_user_no_count  = 0;
     1de:	2300      	movs	r3, #0
		memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
     1e0:	2206      	movs	r2, #6
		user_count_struct.current_user_no_count  = 0;
     1e2:	70a3      	strb	r3, [r4, #2]
		user_count_struct.primaryNumberIndex = 0;
     1e4:	7123      	strb	r3, [r4, #4]
		memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
     1e6:	0021      	movs	r1, r4
		user_count_struct.secondaryNumberIndex = 1;
     1e8:	3301      	adds	r3, #1
		memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
     1ea:	0028      	movs	r0, r5
		user_count_struct.secondaryNumberIndex = 1;
     1ec:	7163      	strb	r3, [r4, #5]
		memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
     1ee:	47b0      	blx	r6
		eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
     1f0:	4b87      	ldr	r3, [pc, #540]	; (410 <init_eeprom+0x25c>)
     1f2:	0029      	movs	r1, r5
     1f4:	2005      	movs	r0, #5
     1f6:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     1f8:	4b86      	ldr	r3, [pc, #536]	; (414 <init_eeprom+0x260>)
     1fa:	4798      	blx	r3
	config_mobile_no_ee(ADMIN_1_MOBILE_NUMBER_PAGE,"7041196959");
     1fc:	4e86      	ldr	r6, [pc, #536]	; (418 <init_eeprom+0x264>)
     1fe:	4987      	ldr	r1, [pc, #540]	; (41c <init_eeprom+0x268>)
     200:	2000      	movs	r0, #0
     202:	47b0      	blx	r6
	config_mobile_no_ee(ADMIN_2_MOBILE_NUMBER_PAGE,"7698439201");
     204:	4986      	ldr	r1, [pc, #536]	; (420 <init_eeprom+0x26c>)
     206:	2001      	movs	r0, #1
     208:	47b0      	blx	r6
	config_mobile_no_ee(ADMIN_3_MOBILE_NUMBER_PAGE,"7383614214");
     20a:	4986      	ldr	r1, [pc, #536]	; (424 <init_eeprom+0x270>)
     20c:	2002      	movs	r0, #2
     20e:	47b0      	blx	r6
	config_mobile_no_ee(ADMIN_4_MOBILE_NUMBER_PAGE,"7383622678");
     210:	4985      	ldr	r1, [pc, #532]	; (428 <init_eeprom+0x274>)
     212:	2003      	movs	r0, #3
     214:	47b0      	blx	r6
	config_mobile_no_ee(ADMIN_5_MOBILE_NUMBER_PAGE,"8140200752");
     216:	4985      	ldr	r1, [pc, #532]	; (42c <init_eeprom+0x278>)
     218:	2004      	movs	r0, #4
     21a:	47b0      	blx	r6
	config_mobile_no_ee(USER_1_MOBILE_NUMBER_PAGE ,"0000000000");
     21c:	4c84      	ldr	r4, [pc, #528]	; (430 <init_eeprom+0x27c>)
     21e:	2006      	movs	r0, #6
     220:	0021      	movs	r1, r4
     222:	47b0      	blx	r6
	config_mobile_no_ee(USER_2_MOBILE_NUMBER_PAGE ,"0000000000");
     224:	0021      	movs	r1, r4
     226:	2007      	movs	r0, #7
     228:	47b0      	blx	r6
	config_mobile_no_ee(USER_3_MOBILE_NUMBER_PAGE ,"0000000000");
     22a:	0021      	movs	r1, r4
     22c:	2008      	movs	r0, #8
     22e:	47b0      	blx	r6
	config_mobile_no_ee(USER_4_MOBILE_NUMBER_PAGE ,"0000000000");
     230:	0021      	movs	r1, r4
     232:	2009      	movs	r0, #9
     234:	47b0      	blx	r6
	config_mobile_no_ee(USER_5_MOBILE_NUMBER_PAGE ,"0000000000");
     236:	0021      	movs	r1, r4
     238:	200a      	movs	r0, #10
     23a:	47b0      	blx	r6
	config_mobile_no_ee(USER_6_MOBILE_NUMBER_PAGE ,"0000000000");
     23c:	0021      	movs	r1, r4
     23e:	200b      	movs	r0, #11
     240:	47b0      	blx	r6
	config_mobile_no_ee(USER_7_MOBILE_NUMBER_PAGE ,"0000000000");
     242:	0021      	movs	r1, r4
     244:	200c      	movs	r0, #12
     246:	47b0      	blx	r6
	config_mobile_no_ee(USER_8_MOBILE_NUMBER_PAGE ,"0000000000");
     248:	0021      	movs	r1, r4
     24a:	200d      	movs	r0, #13
     24c:	47b0      	blx	r6
	config_mobile_no_ee(USER_9_MOBILE_NUMBER_PAGE ,"0000000000");
     24e:	0021      	movs	r1, r4
     250:	200e      	movs	r0, #14
     252:	47b0      	blx	r6
	config_mobile_no_ee(USER_10_MOBILE_NUMBER_PAGE,"0000000000");
     254:	0021      	movs	r1, r4
     256:	200f      	movs	r0, #15
     258:	47b0      	blx	r6
	config_mobile_no_ee(USER_11_MOBILE_NUMBER_PAGE,"0000000000");
     25a:	0021      	movs	r1, r4
     25c:	2010      	movs	r0, #16
     25e:	47b0      	blx	r6
	config_mobile_no_ee(USER_12_MOBILE_NUMBER_PAGE,"0000000000");
     260:	0021      	movs	r1, r4
     262:	2011      	movs	r0, #17
     264:	47b0      	blx	r6
	config_mobile_no_ee(USER_13_MOBILE_NUMBER_PAGE,"0000000000");
     266:	0021      	movs	r1, r4
     268:	2012      	movs	r0, #18
     26a:	47b0      	blx	r6
	config_mobile_no_ee(USER_14_MOBILE_NUMBER_PAGE,"0000000000");
     26c:	0021      	movs	r1, r4
     26e:	2013      	movs	r0, #19
     270:	47b0      	blx	r6
	config_mobile_no_ee(USER_15_MOBILE_NUMBER_PAGE,"0000000000");
     272:	0021      	movs	r1, r4
     274:	2014      	movs	r0, #20
     276:	47b0      	blx	r6
	eeprom_emulator_read_page(ALTARNATE_NUMBERS_PAGE, page_data);
     278:	0029      	movs	r1, r5
     27a:	2015      	movs	r0, #21
     27c:	47b8      	blx	r7
	memcpy(&alternateNumber_struct,page_data,sizeof(alternateNumber_struct));
     27e:	4e6d      	ldr	r6, [pc, #436]	; (434 <init_eeprom+0x280>)
     280:	4b62      	ldr	r3, [pc, #392]	; (40c <init_eeprom+0x258>)
     282:	2218      	movs	r2, #24
     284:	0029      	movs	r1, r5
     286:	0030      	movs	r0, r6
     288:	4798      	blx	r3
	if (alternateNumber_struct.u8tfirst_time_write_ee != 85)
     28a:	7833      	ldrb	r3, [r6, #0]
     28c:	2b55      	cmp	r3, #85	; 0x55
     28e:	d018      	beq.n	2c2 <init_eeprom+0x10e>
		alternateNumber_struct.u8tfirst_time_write_ee = 85;
     290:	2355      	movs	r3, #85	; 0x55
		alternateNumber_struct.alterNumberPresent = false;
     292:	2100      	movs	r1, #0
		memset(alternateNumber_struct.alternateNumber_ee, '\0', sizeof(alternateNumber_struct.alternateNumber_ee));
     294:	4f68      	ldr	r7, [pc, #416]	; (438 <init_eeprom+0x284>)
     296:	2214      	movs	r2, #20
		alternateNumber_struct.u8tfirst_time_write_ee = 85;
     298:	7033      	strb	r3, [r6, #0]
		memset(alternateNumber_struct.alternateNumber_ee, '\0', sizeof(alternateNumber_struct.alternateNumber_ee));
     29a:	0038      	movs	r0, r7
     29c:	4b67      	ldr	r3, [pc, #412]	; (43c <init_eeprom+0x288>)
		alternateNumber_struct.alterNumberPresent = false;
     29e:	70b1      	strb	r1, [r6, #2]
		alternateNumber_struct.alterNumberSetting = false;
     2a0:	7071      	strb	r1, [r6, #1]
		memset(alternateNumber_struct.alternateNumber_ee, '\0', sizeof(alternateNumber_struct.alternateNumber_ee));
     2a2:	4798      	blx	r3
		strcpy(alternateNumber_struct.alternateNumber_ee,"0000000000");
     2a4:	0021      	movs	r1, r4
     2a6:	4b66      	ldr	r3, [pc, #408]	; (440 <init_eeprom+0x28c>)
     2a8:	0038      	movs	r0, r7
     2aa:	4798      	blx	r3
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
     2ac:	2218      	movs	r2, #24
     2ae:	0031      	movs	r1, r6
     2b0:	4b56      	ldr	r3, [pc, #344]	; (40c <init_eeprom+0x258>)
     2b2:	0028      	movs	r0, r5
     2b4:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
     2b6:	4b56      	ldr	r3, [pc, #344]	; (410 <init_eeprom+0x25c>)
     2b8:	0029      	movs	r1, r5
     2ba:	2015      	movs	r0, #21
     2bc:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     2be:	4b55      	ldr	r3, [pc, #340]	; (414 <init_eeprom+0x260>)
     2c0:	4798      	blx	r3
	eeprom_emulator_read_page(M2M_NUMBERS_PAGE, page_data);
     2c2:	4d4f      	ldr	r5, [pc, #316]	; (400 <init_eeprom+0x24c>)
     2c4:	4b4f      	ldr	r3, [pc, #316]	; (404 <init_eeprom+0x250>)
     2c6:	0029      	movs	r1, r5
     2c8:	2016      	movs	r0, #22
     2ca:	4798      	blx	r3
	memcpy(&m2m_Numbers_struct,page_data,sizeof(m2m_Numbers_struct));
     2cc:	4c5d      	ldr	r4, [pc, #372]	; (444 <init_eeprom+0x290>)
     2ce:	4b4f      	ldr	r3, [pc, #316]	; (40c <init_eeprom+0x258>)
     2d0:	2230      	movs	r2, #48	; 0x30
     2d2:	0029      	movs	r1, r5
     2d4:	0020      	movs	r0, r4
     2d6:	4798      	blx	r3
	if (m2m_Numbers_struct.u8tfirst_time_write_ee != 85)
     2d8:	7823      	ldrb	r3, [r4, #0]
     2da:	2b55      	cmp	r3, #85	; 0x55
     2dc:	d025      	beq.n	32a <init_eeprom+0x176>
		m2m_Numbers_struct.u8tfirst_time_write_ee = 85;
     2de:	2355      	movs	r3, #85	; 0x55
		memset(m2m_Numbers_struct.m2mNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mNumber_ee));
     2e0:	4e59      	ldr	r6, [pc, #356]	; (448 <init_eeprom+0x294>)
     2e2:	2214      	movs	r2, #20
		m2m_Numbers_struct.u8tfirst_time_write_ee = 85;
     2e4:	7023      	strb	r3, [r4, #0]
		memset(m2m_Numbers_struct.m2mNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mNumber_ee));
     2e6:	2100      	movs	r1, #0
     2e8:	4b54      	ldr	r3, [pc, #336]	; (43c <init_eeprom+0x288>)
     2ea:	0030      	movs	r0, r6
     2ec:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mNumber_ee,"0000000000");
     2ee:	4f50      	ldr	r7, [pc, #320]	; (430 <init_eeprom+0x27c>)
     2f0:	0030      	movs	r0, r6
     2f2:	0039      	movs	r1, r7
     2f4:	4e52      	ldr	r6, [pc, #328]	; (440 <init_eeprom+0x28c>)
     2f6:	47b0      	blx	r6
		memset(m2m_Numbers_struct.m2mremoteNumber_ee, '\0', sizeof(m2m_Numbers_struct.m2mremoteNumber_ee));
     2f8:	2214      	movs	r2, #20
     2fa:	4b50      	ldr	r3, [pc, #320]	; (43c <init_eeprom+0x288>)
     2fc:	2100      	movs	r1, #0
     2fe:	4853      	ldr	r0, [pc, #332]	; (44c <init_eeprom+0x298>)
     300:	4798      	blx	r3
		strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,"0000000000");
     302:	0039      	movs	r1, r7
     304:	4851      	ldr	r0, [pc, #324]	; (44c <init_eeprom+0x298>)
     306:	47b0      	blx	r6
		m2m_Numbers_struct.m2mPresent			= false;
     308:	2300      	movs	r3, #0
		memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     30a:	2230      	movs	r2, #48	; 0x30
		m2m_Numbers_struct.m2mPresent			= false;
     30c:	7063      	strb	r3, [r4, #1]
		m2m_Numbers_struct.m2mVerified			= false;
     30e:	70a3      	strb	r3, [r4, #2]
		m2m_Numbers_struct.m2mRemotePresent		= false;
     310:	70e3      	strb	r3, [r4, #3]
		m2m_Numbers_struct.m2mRemoteVerified	= false;
     312:	7123      	strb	r3, [r4, #4]
		m2m_Numbers_struct.m2mSetting			= false;
     314:	7163      	strb	r3, [r4, #5]
		memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     316:	0021      	movs	r1, r4
     318:	4b3c      	ldr	r3, [pc, #240]	; (40c <init_eeprom+0x258>)
     31a:	0028      	movs	r0, r5
     31c:	4798      	blx	r3
		eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     31e:	4b3c      	ldr	r3, [pc, #240]	; (410 <init_eeprom+0x25c>)
     320:	0029      	movs	r1, r5
     322:	2016      	movs	r0, #22
     324:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     326:	4b3b      	ldr	r3, [pc, #236]	; (414 <init_eeprom+0x260>)
     328:	4798      	blx	r3
	eeprom_emulator_read_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     32a:	4d35      	ldr	r5, [pc, #212]	; (400 <init_eeprom+0x24c>)
     32c:	2017      	movs	r0, #23
     32e:	0029      	movs	r1, r5
     330:	4f34      	ldr	r7, [pc, #208]	; (404 <init_eeprom+0x250>)
     332:	47b8      	blx	r7
	memcpy(&user_settings_parameter_struct,page_data,sizeof(user_settings_parameter_struct));
     334:	4c46      	ldr	r4, [pc, #280]	; (450 <init_eeprom+0x29c>)
     336:	222c      	movs	r2, #44	; 0x2c
     338:	0029      	movs	r1, r5
     33a:	0020      	movs	r0, r4
     33c:	4e33      	ldr	r6, [pc, #204]	; (40c <init_eeprom+0x258>)
     33e:	47b0      	blx	r6
	if (user_settings_parameter_struct.u8tfirst_time_write_ee != 85)
     340:	7823      	ldrb	r3, [r4, #0]
     342:	2b55      	cmp	r3, #85	; 0x55
     344:	d030      	beq.n	3a8 <init_eeprom+0x1f4>
		user_settings_parameter_struct.autoStartTimeAddress			= 50;
     346:	2132      	movs	r1, #50	; 0x32
		user_settings_parameter_struct.u8tfirst_time_write_ee		= 85;
     348:	2255      	movs	r2, #85	; 0x55
		user_settings_parameter_struct.autoStartAddress				= false;
     34a:	2300      	movs	r3, #0
		user_settings_parameter_struct.autoStartTimeAddress			= 50;
     34c:	8061      	strh	r1, [r4, #2]
		user_settings_parameter_struct.dndAddress					= DND_OFF;
     34e:	311d      	adds	r1, #29
     350:	7121      	strb	r1, [r4, #4]
		user_settings_parameter_struct.responseAddress				= 'T';
     352:	3105      	adds	r1, #5
     354:	7161      	strb	r1, [r4, #5]
		user_settings_parameter_struct.starDeltaTimerAddress		= 2;
     356:	3952      	subs	r1, #82	; 0x52
		user_settings_parameter_struct.u8tfirst_time_write_ee		= 85;
     358:	7022      	strb	r2, [r4, #0]
		user_settings_parameter_struct.starDeltaTimerAddress		= 2;
     35a:	80e1      	strh	r1, [r4, #6]
		user_settings_parameter_struct.underloadPerAddress			= 85;
     35c:	7722      	strb	r2, [r4, #28]
		user_settings_parameter_struct.jumperSettingAddress			= 1;
     35e:	3901      	subs	r1, #1
		user_settings_parameter_struct.overloadPerAddress			= 120;
     360:	3223      	adds	r2, #35	; 0x23
     362:	7762      	strb	r2, [r4, #29]
		user_settings_parameter_struct.preventOverFlowAddress		= false;
     364:	1862      	adds	r2, r4, r1
		user_settings_parameter_struct.waterBypassAddress			= false;
     366:	1850      	adds	r0, r2, r1
		user_settings_parameter_struct.preventOverFlowAddress		= false;
     368:	77d3      	strb	r3, [r2, #31]
		user_settings_parameter_struct.waterBypassAddress			= false;
     36a:	77c3      	strb	r3, [r0, #31]
		user_settings_parameter_struct.autoStartAddress				= false;
     36c:	7063      	strb	r3, [r4, #1]
		user_settings_parameter_struct.eventStageAddress			= 0;
     36e:	7223      	strb	r3, [r4, #8]
		user_settings_parameter_struct.noCallAddress				= false;
     370:	7263      	strb	r3, [r4, #9]
		user_settings_parameter_struct.noCallStartTimeHourAddress	= 0;
     372:	72a3      	strb	r3, [r4, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = 0;
     374:	72e3      	strb	r3, [r4, #11]
		user_settings_parameter_struct.noCallStopTimeHourAddress	= 0;
     376:	7323      	strb	r3, [r4, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress	= 0;
     378:	7363      	strb	r3, [r4, #13]
		user_settings_parameter_struct.lowVoltAddress				= 0;
     37a:	73a3      	strb	r3, [r4, #14]
		user_settings_parameter_struct.currentDetectionAddress		= false;
     37c:	73e3      	strb	r3, [r4, #15]
		user_settings_parameter_struct.normalLoadAddress			= 0;
     37e:	6123      	str	r3, [r4, #16]
		user_settings_parameter_struct.overloadAddress				= 0;
     380:	6163      	str	r3, [r4, #20]
		user_settings_parameter_struct.underloadAddress				= 0;
     382:	61a3      	str	r3, [r4, #24]
		user_settings_parameter_struct.singlePhasingVoltage			= 80;
     384:	3350      	adds	r3, #80	; 0x50
     386:	84e3      	strh	r3, [r4, #38]	; 0x26
		user_settings_parameter_struct.detectPhaseSequence			= true;
     388:	0023      	movs	r3, r4
		user_settings_parameter_struct.detectSinglePhasing			= true;
     38a:	3204      	adds	r2, #4
		user_settings_parameter_struct.detectPhaseSequence			= true;
     38c:	3328      	adds	r3, #40	; 0x28
		user_settings_parameter_struct.detectSinglePhasing			= true;
     38e:	77d1      	strb	r1, [r2, #31]
		user_settings_parameter_struct.detectPhaseSequence			= true;
     390:	7019      	strb	r1, [r3, #0]
		user_settings_parameter_struct.jumperSettingAddress			= 1;
     392:	77a1      	strb	r1, [r4, #30]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     394:	222c      	movs	r2, #44	; 0x2c
     396:	0021      	movs	r1, r4
     398:	0028      	movs	r0, r5
     39a:	47b0      	blx	r6
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     39c:	4b1c      	ldr	r3, [pc, #112]	; (410 <init_eeprom+0x25c>)
     39e:	0029      	movs	r1, r5
     3a0:	2017      	movs	r0, #23
     3a2:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     3a4:	4b1b      	ldr	r3, [pc, #108]	; (414 <init_eeprom+0x260>)
     3a6:	4798      	blx	r3
	eeprom_emulator_read_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
     3a8:	0029      	movs	r1, r5
     3aa:	2018      	movs	r0, #24
     3ac:	47b8      	blx	r7
	memcpy(&factory_settings_parameter_struct,page_data,sizeof(factory_settings_parameter_struct));
     3ae:	4c29      	ldr	r4, [pc, #164]	; (454 <init_eeprom+0x2a0>)
     3b0:	221c      	movs	r2, #28
     3b2:	0029      	movs	r1, r5
     3b4:	0020      	movs	r0, r4
     3b6:	47b0      	blx	r6
	if (factory_settings_parameter_struct.u8tfirst_time_write_ee != 85)
     3b8:	7823      	ldrb	r3, [r4, #0]
     3ba:	2b55      	cmp	r3, #85	; 0x55
     3bc:	d01d      	beq.n	3fa <init_eeprom+0x246>
		factory_settings_parameter_struct.u8tfirst_time_write_ee	= 85;
     3be:	2355      	movs	r3, #85	; 0x55
		factory_settings_parameter_struct.ENABLE_M2M				= false;
     3c0:	2100      	movs	r1, #0
		memset(factory_settings_parameter_struct.DeviceID_ee, '\0', sizeof(factory_settings_parameter_struct.DeviceID_ee));
     3c2:	4f25      	ldr	r7, [pc, #148]	; (458 <init_eeprom+0x2a4>)
		factory_settings_parameter_struct.u8tfirst_time_write_ee	= 85;
     3c4:	7023      	strb	r3, [r4, #0]
		factory_settings_parameter_struct.AMPERE_SPEAK				= true;
     3c6:	3b54      	subs	r3, #84	; 0x54
		memset(factory_settings_parameter_struct.DeviceID_ee, '\0', sizeof(factory_settings_parameter_struct.DeviceID_ee));
     3c8:	2214      	movs	r2, #20
		factory_settings_parameter_struct.AMPERE_SPEAK				= true;
     3ca:	70a3      	strb	r3, [r4, #2]
		factory_settings_parameter_struct.ENABLE_CURRENT			= true;
     3cc:	7063      	strb	r3, [r4, #1]
		factory_settings_parameter_struct.DUAL_LEVEL			    = true;
     3ce:	71a3      	strb	r3, [r4, #6]
		factory_settings_parameter_struct.ENABLE_WATER				= true;
     3d0:	7163      	strb	r3, [r4, #5]
		factory_settings_parameter_struct.ENABLE_GP					= true;
     3d2:	7123      	strb	r3, [r4, #4]
		memset(factory_settings_parameter_struct.DeviceID_ee, '\0', sizeof(factory_settings_parameter_struct.DeviceID_ee));
     3d4:	0038      	movs	r0, r7
     3d6:	4b19      	ldr	r3, [pc, #100]	; (43c <init_eeprom+0x288>)
		factory_settings_parameter_struct.ENABLE_M2M				= false;
     3d8:	70e1      	strb	r1, [r4, #3]
		factory_settings_parameter_struct.NOLEVELCHANGECALL			= false;
     3da:	71e1      	strb	r1, [r4, #7]
		memset(factory_settings_parameter_struct.DeviceID_ee, '\0', sizeof(factory_settings_parameter_struct.DeviceID_ee));
     3dc:	4798      	blx	r3
		strcpy(factory_settings_parameter_struct.DeviceID_ee,"0000000000");
     3de:	4b18      	ldr	r3, [pc, #96]	; (440 <init_eeprom+0x28c>)
     3e0:	4913      	ldr	r1, [pc, #76]	; (430 <init_eeprom+0x27c>)
     3e2:	0038      	movs	r0, r7
     3e4:	4798      	blx	r3
		memcpy(page_data,&factory_settings_parameter_struct,sizeof(factory_settings_parameter_struct));
     3e6:	221c      	movs	r2, #28
     3e8:	0021      	movs	r1, r4
     3ea:	0028      	movs	r0, r5
     3ec:	47b0      	blx	r6
		eeprom_emulator_write_page(FACTORY_SETTING_PARAMETERS_PAGE, page_data);
     3ee:	4b08      	ldr	r3, [pc, #32]	; (410 <init_eeprom+0x25c>)
     3f0:	0029      	movs	r1, r5
     3f2:	2018      	movs	r0, #24
     3f4:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     3f6:	4b07      	ldr	r3, [pc, #28]	; (414 <init_eeprom+0x260>)
     3f8:	4798      	blx	r3
}
     3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3fc:	00000115 	.word	0x00000115
     400:	20000538 	.word	0x20000538
     404:	00009679 	.word	0x00009679
     408:	20000574 	.word	0x20000574
     40c:	0000c3c1 	.word	0x0000c3c1
     410:	00009701 	.word	0x00009701
     414:	000096d5 	.word	0x000096d5
     418:	00000135 	.word	0x00000135
     41c:	0000cffe 	.word	0x0000cffe
     420:	0000d009 	.word	0x0000d009
     424:	0000d014 	.word	0x0000d014
     428:	0000d01f 	.word	0x0000d01f
     42c:	0000d02a 	.word	0x0000d02a
     430:	0000d035 	.word	0x0000d035
     434:	20000596 	.word	0x20000596
     438:	2000059a 	.word	0x2000059a
     43c:	0000c3f7 	.word	0x0000c3f7
     440:	0000c677 	.word	0x0000c677
     444:	20000508 	.word	0x20000508
     448:	20000510 	.word	0x20000510
     44c:	20000524 	.word	0x20000524
     450:	200005b0 	.word	0x200005b0
     454:	2000057a 	.word	0x2000057a
     458:	20000582 	.word	0x20000582

0000045c <getNumbers>:


void getNumbers(char *string)
{
     45c:	b5f0      	push	{r4, r5, r6, r7, lr}
	strcpy(string,"");
     45e:	4918      	ldr	r1, [pc, #96]	; (4c0 <getNumbers+0x64>)
{
     460:	b087      	sub	sp, #28
	strcpy(string,"");
     462:	4b18      	ldr	r3, [pc, #96]	; (4c4 <getNumbers+0x68>)
{
     464:	0005      	movs	r5, r0
	
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
     466:	2400      	movs	r4, #0
	strcpy(string,"");
     468:	4798      	blx	r3
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
     46a:	4f17      	ldr	r7, [pc, #92]	; (4c8 <getNumbers+0x6c>)
     46c:	78bb      	ldrb	r3, [r7, #2]
     46e:	42a3      	cmp	r3, r4
     470:	d801      	bhi.n	476 <getNumbers+0x1a>
			strcat(string,"S:");
		}
		strcat(string,mobile_no.mobile_no_ee);
		strcat(string,"\n");
	}
}
     472:	b007      	add	sp, #28
     474:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(page_data, '\0', sizeof(page_data));
     476:	4e15      	ldr	r6, [pc, #84]	; (4cc <getNumbers+0x70>)
     478:	223c      	movs	r2, #60	; 0x3c
     47a:	2100      	movs	r1, #0
     47c:	0030      	movs	r0, r6
     47e:	4b14      	ldr	r3, [pc, #80]	; (4d0 <getNumbers+0x74>)
     480:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
     482:	1da0      	adds	r0, r4, #6
     484:	0031      	movs	r1, r6
     486:	4b13      	ldr	r3, [pc, #76]	; (4d4 <getNumbers+0x78>)
     488:	b2c0      	uxtb	r0, r0
     48a:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
     48c:	0031      	movs	r1, r6
     48e:	4b12      	ldr	r3, [pc, #72]	; (4d8 <getNumbers+0x7c>)
     490:	2218      	movs	r2, #24
     492:	4668      	mov	r0, sp
     494:	4798      	blx	r3
		if(i==user_count_struct.primaryNumberIndex)
     496:	793b      	ldrb	r3, [r7, #4]
     498:	4e10      	ldr	r6, [pc, #64]	; (4dc <getNumbers+0x80>)
			strcat(string,"P:");
     49a:	4911      	ldr	r1, [pc, #68]	; (4e0 <getNumbers+0x84>)
		if(i==user_count_struct.primaryNumberIndex)
     49c:	42a3      	cmp	r3, r4
     49e:	d003      	beq.n	4a8 <getNumbers+0x4c>
		else if(i==user_count_struct.secondaryNumberIndex)
     4a0:	797b      	ldrb	r3, [r7, #5]
     4a2:	42a3      	cmp	r3, r4
     4a4:	d102      	bne.n	4ac <getNumbers+0x50>
			strcat(string,"S:");
     4a6:	490f      	ldr	r1, [pc, #60]	; (4e4 <getNumbers+0x88>)
     4a8:	0028      	movs	r0, r5
     4aa:	47b0      	blx	r6
		strcat(string,mobile_no.mobile_no_ee);
     4ac:	a901      	add	r1, sp, #4
     4ae:	0028      	movs	r0, r5
     4b0:	47b0      	blx	r6
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
     4b2:	3401      	adds	r4, #1
		strcat(string,"\n");
     4b4:	490c      	ldr	r1, [pc, #48]	; (4e8 <getNumbers+0x8c>)
     4b6:	0028      	movs	r0, r5
     4b8:	47b0      	blx	r6
	for(uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
     4ba:	b2e4      	uxtb	r4, r4
     4bc:	e7d5      	b.n	46a <getNumbers+0xe>
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	0000cffd 	.word	0x0000cffd
     4c4:	0000c677 	.word	0x0000c677
     4c8:	20000574 	.word	0x20000574
     4cc:	20000538 	.word	0x20000538
     4d0:	0000c3f7 	.word	0x0000c3f7
     4d4:	00009679 	.word	0x00009679
     4d8:	0000c3c1 	.word	0x0000c3c1
     4dc:	0000c641 	.word	0x0000c641
     4e0:	0000cff6 	.word	0x0000cff6
     4e4:	0000cff9 	.word	0x0000cff9
     4e8:	0000cffc 	.word	0x0000cffc

000004ec <getIndexedNumber>:

char *getIndexedNumber(char *IndexNo, uint8_t index)
{
     4ec:	b570      	push	{r4, r5, r6, lr}
	strcpy(IndexNo,"");
     4ee:	4b10      	ldr	r3, [pc, #64]	; (530 <getIndexedNumber+0x44>)
{
     4f0:	b086      	sub	sp, #24
     4f2:	000c      	movs	r4, r1
	strcpy(IndexNo,"");
     4f4:	490f      	ldr	r1, [pc, #60]	; (534 <getIndexedNumber+0x48>)
{
     4f6:	0005      	movs	r5, r0
	strcpy(IndexNo,"");
     4f8:	4798      	blx	r3
	if(user_count_struct.current_user_no_count>index)
     4fa:	4b0f      	ldr	r3, [pc, #60]	; (538 <getIndexedNumber+0x4c>)
     4fc:	789b      	ldrb	r3, [r3, #2]
     4fe:	42a3      	cmp	r3, r4
     500:	d913      	bls.n	52a <getIndexedNumber+0x3e>
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
     502:	4e0e      	ldr	r6, [pc, #56]	; (53c <getIndexedNumber+0x50>)
     504:	223c      	movs	r2, #60	; 0x3c
     506:	2100      	movs	r1, #0
     508:	4b0d      	ldr	r3, [pc, #52]	; (540 <getIndexedNumber+0x54>)
     50a:	0030      	movs	r0, r6
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index, page_data);
     50c:	3406      	adds	r4, #6
		memset(page_data, '\0', sizeof(page_data));
     50e:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index, page_data);
     510:	0031      	movs	r1, r6
     512:	4b0c      	ldr	r3, [pc, #48]	; (544 <getIndexedNumber+0x58>)
     514:	b2e0      	uxtb	r0, r4
     516:	4798      	blx	r3
		//eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+index-1, page_data);
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
     518:	0031      	movs	r1, r6
     51a:	4b0b      	ldr	r3, [pc, #44]	; (548 <getIndexedNumber+0x5c>)
     51c:	2218      	movs	r2, #24
     51e:	4668      	mov	r0, sp
     520:	4798      	blx	r3
		strcat(IndexNo,mobile_no.mobile_no_ee);
     522:	a901      	add	r1, sp, #4
     524:	0028      	movs	r0, r5
     526:	4b09      	ldr	r3, [pc, #36]	; (54c <getIndexedNumber+0x60>)
     528:	4798      	blx	r3
	}
	return IndexNo;
}
     52a:	0028      	movs	r0, r5
     52c:	b006      	add	sp, #24
     52e:	bd70      	pop	{r4, r5, r6, pc}
     530:	0000c677 	.word	0x0000c677
     534:	0000cffd 	.word	0x0000cffd
     538:	20000574 	.word	0x20000574
     53c:	20000538 	.word	0x20000538
     540:	0000c3f7 	.word	0x0000c3f7
     544:	00009679 	.word	0x00009679
     548:	0000c3c1 	.word	0x0000c3c1
     54c:	0000c641 	.word	0x0000c641

00000550 <isAlterNumber>:
	}
	return false;
}

bool isAlterNumber(char *number)
{
     550:	b510      	push	{r4, lr}
	if(user_count_struct.current_user_no_count > 0)
     552:	4b08      	ldr	r3, [pc, #32]	; (574 <isAlterNumber+0x24>)
     554:	789a      	ldrb	r2, [r3, #2]
		if ((alternateNumber_struct.alterNumberPresent) && (strstr(number, alternateNumber_struct.alternateNumber_ee)))
		{
			return true;
		}
	}
	return false;
     556:	2300      	movs	r3, #0
	if(user_count_struct.current_user_no_count > 0)
     558:	429a      	cmp	r2, r3
     55a:	d009      	beq.n	570 <isAlterNumber+0x20>
		if ((alternateNumber_struct.alterNumberPresent) && (strstr(number, alternateNumber_struct.alternateNumber_ee)))
     55c:	4a06      	ldr	r2, [pc, #24]	; (578 <isAlterNumber+0x28>)
     55e:	7892      	ldrb	r2, [r2, #2]
     560:	429a      	cmp	r2, r3
     562:	d005      	beq.n	570 <isAlterNumber+0x20>
     564:	4b05      	ldr	r3, [pc, #20]	; (57c <isAlterNumber+0x2c>)
     566:	4906      	ldr	r1, [pc, #24]	; (580 <isAlterNumber+0x30>)
     568:	4798      	blx	r3
     56a:	1e43      	subs	r3, r0, #1
     56c:	4198      	sbcs	r0, r3
     56e:	b2c3      	uxtb	r3, r0
}
     570:	0018      	movs	r0, r3
     572:	bd10      	pop	{r4, pc}
     574:	20000574 	.word	0x20000574
     578:	20000596 	.word	0x20000596
     57c:	0000c6b7 	.word	0x0000c6b7
     580:	2000059a 	.word	0x2000059a

00000584 <isPrimaryNumber>:
	return false;
     584:	2100      	movs	r1, #0
{
     586:	b530      	push	{r4, r5, lr}
	if(user_count_struct.current_user_no_count > 0)
     588:	4d0d      	ldr	r5, [pc, #52]	; (5c0 <isPrimaryNumber+0x3c>)
{
     58a:	b087      	sub	sp, #28
	if(user_count_struct.current_user_no_count > 0)
     58c:	78ab      	ldrb	r3, [r5, #2]
{
     58e:	0004      	movs	r4, r0
	if(user_count_struct.current_user_no_count > 0)
     590:	428b      	cmp	r3, r1
     592:	d012      	beq.n	5ba <isPrimaryNumber+0x36>
		char primaryNumber[20] = {0};
     594:	2214      	movs	r2, #20
     596:	4b0b      	ldr	r3, [pc, #44]	; (5c4 <isPrimaryNumber+0x40>)
     598:	a801      	add	r0, sp, #4
     59a:	4798      	blx	r3
		getIndexedNumber(&primaryNumber,user_count_struct.primaryNumberIndex);
     59c:	7929      	ldrb	r1, [r5, #4]
     59e:	4b0a      	ldr	r3, [pc, #40]	; (5c8 <isPrimaryNumber+0x44>)
     5a0:	a801      	add	r0, sp, #4
     5a2:	4798      	blx	r3
		if(strstr(number,primaryNumber))
     5a4:	a901      	add	r1, sp, #4
     5a6:	0020      	movs	r0, r4
     5a8:	4b08      	ldr	r3, [pc, #32]	; (5cc <isPrimaryNumber+0x48>)
     5aa:	4798      	blx	r3
			return true;
     5ac:	2101      	movs	r1, #1
		if(strstr(number,primaryNumber))
     5ae:	2800      	cmp	r0, #0
     5b0:	d103      	bne.n	5ba <isPrimaryNumber+0x36>
			return isAlterNumber(number);
     5b2:	0020      	movs	r0, r4
     5b4:	4b06      	ldr	r3, [pc, #24]	; (5d0 <isPrimaryNumber+0x4c>)
     5b6:	4798      	blx	r3
     5b8:	0001      	movs	r1, r0
}
     5ba:	0008      	movs	r0, r1
     5bc:	b007      	add	sp, #28
     5be:	bd30      	pop	{r4, r5, pc}
     5c0:	20000574 	.word	0x20000574
     5c4:	0000c3f7 	.word	0x0000c3f7
     5c8:	000004ed 	.word	0x000004ed
     5cc:	0000c6b7 	.word	0x0000c6b7
     5d0:	00000551 	.word	0x00000551

000005d4 <isM2MNumber>:

bool isM2MNumber(char *number)
{
     5d4:	b510      	push	{r4, lr}
	if ((m2m_Numbers_struct.m2mPresent) && strstr(number,m2m_Numbers_struct.m2mNumber_ee))
     5d6:	4b06      	ldr	r3, [pc, #24]	; (5f0 <isM2MNumber+0x1c>)
     5d8:	785a      	ldrb	r2, [r3, #1]
	{
		return true;
	}
	return false;
     5da:	2300      	movs	r3, #0
	if ((m2m_Numbers_struct.m2mPresent) && strstr(number,m2m_Numbers_struct.m2mNumber_ee))
     5dc:	429a      	cmp	r2, r3
     5de:	d005      	beq.n	5ec <isM2MNumber+0x18>
     5e0:	4b04      	ldr	r3, [pc, #16]	; (5f4 <isM2MNumber+0x20>)
     5e2:	4905      	ldr	r1, [pc, #20]	; (5f8 <isM2MNumber+0x24>)
     5e4:	4798      	blx	r3
     5e6:	1e43      	subs	r3, r0, #1
     5e8:	4198      	sbcs	r0, r3
     5ea:	b2c3      	uxtb	r3, r0
}
     5ec:	0018      	movs	r0, r3
     5ee:	bd10      	pop	{r4, pc}
     5f0:	20000508 	.word	0x20000508
     5f4:	0000c6b7 	.word	0x0000c6b7
     5f8:	20000510 	.word	0x20000510

000005fc <isM2MRemoteNumber>:

bool isM2MRemoteNumber(char *number)
{
     5fc:	b510      	push	{r4, lr}
	if ((m2m_Numbers_struct.m2mRemotePresent) && strstr(number,m2m_Numbers_struct.m2mremoteNumber_ee))
     5fe:	4b06      	ldr	r3, [pc, #24]	; (618 <isM2MRemoteNumber+0x1c>)
     600:	78da      	ldrb	r2, [r3, #3]
	{
		return true;
	}
	return false;
     602:	2300      	movs	r3, #0
	if ((m2m_Numbers_struct.m2mRemotePresent) && strstr(number,m2m_Numbers_struct.m2mremoteNumber_ee))
     604:	429a      	cmp	r2, r3
     606:	d005      	beq.n	614 <isM2MRemoteNumber+0x18>
     608:	4b04      	ldr	r3, [pc, #16]	; (61c <isM2MRemoteNumber+0x20>)
     60a:	4905      	ldr	r1, [pc, #20]	; (620 <isM2MRemoteNumber+0x24>)
     60c:	4798      	blx	r3
     60e:	1e43      	subs	r3, r0, #1
     610:	4198      	sbcs	r0, r3
     612:	b2c3      	uxtb	r3, r0
}
     614:	0018      	movs	r0, r3
     616:	bd10      	pop	{r4, pc}
     618:	20000508 	.word	0x20000508
     61c:	0000c6b7 	.word	0x0000c6b7
     620:	20000524 	.word	0x20000524

00000624 <getM2MNumber>:

char *getM2MNumber(char *m2mNo)
{
     624:	b510      	push	{r4, lr}
	if (m2m_Numbers_struct.m2mPresent)
     626:	4b06      	ldr	r3, [pc, #24]	; (640 <getM2MNumber+0x1c>)
{
     628:	0004      	movs	r4, r0
	if (m2m_Numbers_struct.m2mPresent)
     62a:	785a      	ldrb	r2, [r3, #1]
	{
		//strstr(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
		strcpy(m2mNo,m2m_Numbers_struct.m2mNumber_ee);
     62c:	4905      	ldr	r1, [pc, #20]	; (644 <getM2MNumber+0x20>)
     62e:	4b06      	ldr	r3, [pc, #24]	; (648 <getM2MNumber+0x24>)
	if (m2m_Numbers_struct.m2mPresent)
     630:	2a00      	cmp	r2, #0
     632:	d100      	bne.n	636 <getM2MNumber+0x12>
	}
	else
	{
		strcpy(m2mNo,"");
     634:	4905      	ldr	r1, [pc, #20]	; (64c <getM2MNumber+0x28>)
     636:	0020      	movs	r0, r4
     638:	4798      	blx	r3
	}
	return m2mNo;
}
     63a:	0020      	movs	r0, r4
     63c:	bd10      	pop	{r4, pc}
     63e:	46c0      	nop			; (mov r8, r8)
     640:	20000508 	.word	0x20000508
     644:	20000510 	.word	0x20000510
     648:	0000c677 	.word	0x0000c677
     64c:	0000cffd 	.word	0x0000cffd

00000650 <getM2MRemoteNumber>:

char *getM2MRemoteNumber(char *m2mNoRemotNo)
{
     650:	b510      	push	{r4, lr}
	if (m2m_Numbers_struct.m2mRemotePresent)
     652:	4b06      	ldr	r3, [pc, #24]	; (66c <getM2MRemoteNumber+0x1c>)
{
     654:	0004      	movs	r4, r0
	if (m2m_Numbers_struct.m2mRemotePresent)
     656:	78da      	ldrb	r2, [r3, #3]
	{
		strcpy(m2mNoRemotNo,m2m_Numbers_struct.m2mremoteNumber_ee);
     658:	4905      	ldr	r1, [pc, #20]	; (670 <getM2MRemoteNumber+0x20>)
     65a:	4b06      	ldr	r3, [pc, #24]	; (674 <getM2MRemoteNumber+0x24>)
	if (m2m_Numbers_struct.m2mRemotePresent)
     65c:	2a00      	cmp	r2, #0
     65e:	d100      	bne.n	662 <getM2MRemoteNumber+0x12>
	}
	else
	{
		strcpy(m2mNoRemotNo,"");
     660:	4905      	ldr	r1, [pc, #20]	; (678 <getM2MRemoteNumber+0x28>)
     662:	0020      	movs	r0, r4
     664:	4798      	blx	r3
	}
	return m2mNoRemotNo;
}
     666:	0020      	movs	r0, r4
     668:	bd10      	pop	{r4, pc}
     66a:	46c0      	nop			; (mov r8, r8)
     66c:	20000508 	.word	0x20000508
     670:	20000524 	.word	0x20000524
     674:	0000c677 	.word	0x0000c677
     678:	0000cffd 	.word	0x0000cffd

0000067c <setM2MVerify>:

void setM2MVerify(bool flag)
{
     67c:	b510      	push	{r4, lr}
	m2m_Numbers_struct.m2mVerified = (uint8_t)flag;
     67e:	4907      	ldr	r1, [pc, #28]	; (69c <setM2MVerify+0x20>)
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     680:	4c07      	ldr	r4, [pc, #28]	; (6a0 <setM2MVerify+0x24>)
     682:	2230      	movs	r2, #48	; 0x30
	m2m_Numbers_struct.m2mVerified = (uint8_t)flag;
     684:	7088      	strb	r0, [r1, #2]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     686:	4b07      	ldr	r3, [pc, #28]	; (6a4 <setM2MVerify+0x28>)
     688:	0020      	movs	r0, r4
     68a:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     68c:	0021      	movs	r1, r4
     68e:	4b06      	ldr	r3, [pc, #24]	; (6a8 <setM2MVerify+0x2c>)
     690:	2016      	movs	r0, #22
     692:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     694:	4b05      	ldr	r3, [pc, #20]	; (6ac <setM2MVerify+0x30>)
     696:	4798      	blx	r3
}
     698:	bd10      	pop	{r4, pc}
     69a:	46c0      	nop			; (mov r8, r8)
     69c:	20000508 	.word	0x20000508
     6a0:	20000538 	.word	0x20000538
     6a4:	0000c3c1 	.word	0x0000c3c1
     6a8:	00009701 	.word	0x00009701
     6ac:	000096d5 	.word	0x000096d5

000006b0 <setM2MRemoteVerified>:

void setM2MRemoteVerified(bool flag)
{
     6b0:	b510      	push	{r4, lr}
	m2m_Numbers_struct.m2mRemoteVerified = (uint8_t)flag;
     6b2:	4907      	ldr	r1, [pc, #28]	; (6d0 <setM2MRemoteVerified+0x20>)
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     6b4:	4c07      	ldr	r4, [pc, #28]	; (6d4 <setM2MRemoteVerified+0x24>)
     6b6:	2230      	movs	r2, #48	; 0x30
	m2m_Numbers_struct.m2mRemoteVerified = (uint8_t)flag;
     6b8:	7108      	strb	r0, [r1, #4]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     6ba:	4b07      	ldr	r3, [pc, #28]	; (6d8 <setM2MRemoteVerified+0x28>)
     6bc:	0020      	movs	r0, r4
     6be:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     6c0:	0021      	movs	r1, r4
     6c2:	4b06      	ldr	r3, [pc, #24]	; (6dc <setM2MRemoteVerified+0x2c>)
     6c4:	2016      	movs	r0, #22
     6c6:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     6c8:	4b05      	ldr	r3, [pc, #20]	; (6e0 <setM2MRemoteVerified+0x30>)
     6ca:	4798      	blx	r3
}
     6cc:	bd10      	pop	{r4, pc}
     6ce:	46c0      	nop			; (mov r8, r8)
     6d0:	20000508 	.word	0x20000508
     6d4:	20000538 	.word	0x20000538
     6d8:	0000c3c1 	.word	0x0000c3c1
     6dc:	00009701 	.word	0x00009701
     6e0:	000096d5 	.word	0x000096d5

000006e4 <saveM2MSettings>:

void saveM2MSettings(bool flag)
{
     6e4:	b510      	push	{r4, lr}
	m2m_Numbers_struct.m2mSetting = (uint8_t)flag;
     6e6:	4907      	ldr	r1, [pc, #28]	; (704 <saveM2MSettings+0x20>)
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     6e8:	4c07      	ldr	r4, [pc, #28]	; (708 <saveM2MSettings+0x24>)
     6ea:	2230      	movs	r2, #48	; 0x30
	m2m_Numbers_struct.m2mSetting = (uint8_t)flag;
     6ec:	7148      	strb	r0, [r1, #5]
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     6ee:	4b07      	ldr	r3, [pc, #28]	; (70c <saveM2MSettings+0x28>)
     6f0:	0020      	movs	r0, r4
     6f2:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     6f4:	0021      	movs	r1, r4
     6f6:	4b06      	ldr	r3, [pc, #24]	; (710 <saveM2MSettings+0x2c>)
     6f8:	2016      	movs	r0, #22
     6fa:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     6fc:	4b05      	ldr	r3, [pc, #20]	; (714 <saveM2MSettings+0x30>)
     6fe:	4798      	blx	r3
}
     700:	bd10      	pop	{r4, pc}
     702:	46c0      	nop			; (mov r8, r8)
     704:	20000508 	.word	0x20000508
     708:	20000538 	.word	0x20000538
     70c:	0000c3c1 	.word	0x0000c3c1
     710:	00009701 	.word	0x00009701
     714:	000096d5 	.word	0x000096d5

00000718 <addM2MNumber>:

void addM2MNumber(char *no)
{
	m2m_Numbers_struct.m2mPresent = true;
     718:	2301      	movs	r3, #1
{
     71a:	b570      	push	{r4, r5, r6, lr}
	m2m_Numbers_struct.m2mPresent = true;
     71c:	4d0a      	ldr	r5, [pc, #40]	; (748 <addM2MNumber+0x30>)
{
     71e:	0001      	movs	r1, r0
	m2m_Numbers_struct.m2mPresent = true;
     720:	706b      	strb	r3, [r5, #1]
	strcpy(m2m_Numbers_struct.m2mNumber_ee,no);
     722:	480a      	ldr	r0, [pc, #40]	; (74c <addM2MNumber+0x34>)
     724:	4b0a      	ldr	r3, [pc, #40]	; (750 <addM2MNumber+0x38>)
     726:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     728:	4c0a      	ldr	r4, [pc, #40]	; (754 <addM2MNumber+0x3c>)
     72a:	2230      	movs	r2, #48	; 0x30
     72c:	0029      	movs	r1, r5
     72e:	0020      	movs	r0, r4
     730:	4b09      	ldr	r3, [pc, #36]	; (758 <addM2MNumber+0x40>)
     732:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     734:	0021      	movs	r1, r4
     736:	4b09      	ldr	r3, [pc, #36]	; (75c <addM2MNumber+0x44>)
     738:	2016      	movs	r0, #22
     73a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     73c:	4b08      	ldr	r3, [pc, #32]	; (760 <addM2MNumber+0x48>)
     73e:	4798      	blx	r3
	setM2MVerify(false);
     740:	2000      	movs	r0, #0
     742:	4b08      	ldr	r3, [pc, #32]	; (764 <addM2MNumber+0x4c>)
     744:	4798      	blx	r3
}
     746:	bd70      	pop	{r4, r5, r6, pc}
     748:	20000508 	.word	0x20000508
     74c:	20000510 	.word	0x20000510
     750:	0000c677 	.word	0x0000c677
     754:	20000538 	.word	0x20000538
     758:	0000c3c1 	.word	0x0000c3c1
     75c:	00009701 	.word	0x00009701
     760:	000096d5 	.word	0x000096d5
     764:	0000067d 	.word	0x0000067d

00000768 <addM2MRemoteNumber>:

void addM2MRemoteNumber(char *no)
{
	m2m_Numbers_struct.m2mRemotePresent = true;
     768:	2301      	movs	r3, #1
{
     76a:	b570      	push	{r4, r5, r6, lr}
	m2m_Numbers_struct.m2mRemotePresent = true;
     76c:	4d0c      	ldr	r5, [pc, #48]	; (7a0 <addM2MRemoteNumber+0x38>)
{
     76e:	0001      	movs	r1, r0
	m2m_Numbers_struct.m2mRemotePresent = true;
     770:	70eb      	strb	r3, [r5, #3]
	strcpy(m2m_Numbers_struct.m2mremoteNumber_ee,no);
     772:	480c      	ldr	r0, [pc, #48]	; (7a4 <addM2MRemoteNumber+0x3c>)
     774:	4b0c      	ldr	r3, [pc, #48]	; (7a8 <addM2MRemoteNumber+0x40>)
     776:	4798      	blx	r3
	memcpy(page_data,&m2m_Numbers_struct,sizeof(m2m_Numbers_struct));
     778:	4c0c      	ldr	r4, [pc, #48]	; (7ac <addM2MRemoteNumber+0x44>)
     77a:	2230      	movs	r2, #48	; 0x30
     77c:	0029      	movs	r1, r5
     77e:	0020      	movs	r0, r4
     780:	4b0b      	ldr	r3, [pc, #44]	; (7b0 <addM2MRemoteNumber+0x48>)
     782:	4798      	blx	r3
	eeprom_emulator_write_page(M2M_NUMBERS_PAGE, page_data);
     784:	0021      	movs	r1, r4
     786:	4b0b      	ldr	r3, [pc, #44]	; (7b4 <addM2MRemoteNumber+0x4c>)
     788:	2016      	movs	r0, #22
     78a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     78c:	4b0a      	ldr	r3, [pc, #40]	; (7b8 <addM2MRemoteNumber+0x50>)
     78e:	4798      	blx	r3
	setM2MRemoteVerified(false);
     790:	2000      	movs	r0, #0
     792:	4b0a      	ldr	r3, [pc, #40]	; (7bc <addM2MRemoteNumber+0x54>)
     794:	4798      	blx	r3
	saveM2MSettings(false);
     796:	2000      	movs	r0, #0
     798:	4b09      	ldr	r3, [pc, #36]	; (7c0 <addM2MRemoteNumber+0x58>)
     79a:	4798      	blx	r3
}
     79c:	bd70      	pop	{r4, r5, r6, pc}
     79e:	46c0      	nop			; (mov r8, r8)
     7a0:	20000508 	.word	0x20000508
     7a4:	20000524 	.word	0x20000524
     7a8:	0000c677 	.word	0x0000c677
     7ac:	20000538 	.word	0x20000538
     7b0:	0000c3c1 	.word	0x0000c3c1
     7b4:	00009701 	.word	0x00009701
     7b8:	000096d5 	.word	0x000096d5
     7bc:	000006b1 	.word	0x000006b1
     7c0:	000006e5 	.word	0x000006e5

000007c4 <getActiveNumber>:

char *getActiveNumber(char *ActiveNo)
{
     7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (user_count_struct.current_user_no_count > 0)
     7c6:	4f18      	ldr	r7, [pc, #96]	; (828 <getActiveNumber+0x64>)
{
     7c8:	b087      	sub	sp, #28
	if (user_count_struct.current_user_no_count > 0)
     7ca:	78be      	ldrb	r6, [r7, #2]
{
     7cc:	0004      	movs	r4, r0
     7ce:	4d17      	ldr	r5, [pc, #92]	; (82c <getActiveNumber+0x68>)
	if (user_count_struct.current_user_no_count > 0)
     7d0:	2e00      	cmp	r6, #0
     7d2:	d01b      	beq.n	80c <getActiveNumber+0x48>
	{
		if ((alternateNumber_struct.alterNumberSetting))
     7d4:	4b16      	ldr	r3, [pc, #88]	; (830 <getActiveNumber+0x6c>)
     7d6:	7859      	ldrb	r1, [r3, #1]
     7d8:	2900      	cmp	r1, #0
     7da:	d005      	beq.n	7e8 <getActiveNumber+0x24>
		{
			strcpy(ActiveNo,alternateNumber_struct.alternateNumber_ee);
     7dc:	4915      	ldr	r1, [pc, #84]	; (834 <getActiveNumber+0x70>)
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
		strcpy(ActiveNo,mobile_no.mobile_no_ee);
     7de:	0020      	movs	r0, r4
     7e0:	47a8      	blx	r5
	}
	
	return ActiveNo;
}
     7e2:	0020      	movs	r0, r4
     7e4:	b007      	add	sp, #28
     7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			memset(page_data, '\0', sizeof(page_data));
     7e8:	4e13      	ldr	r6, [pc, #76]	; (838 <getActiveNumber+0x74>)
     7ea:	223c      	movs	r2, #60	; 0x3c
     7ec:	4b13      	ldr	r3, [pc, #76]	; (83c <getActiveNumber+0x78>)
     7ee:	0030      	movs	r0, r6
     7f0:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
     7f2:	7938      	ldrb	r0, [r7, #4]
     7f4:	0031      	movs	r1, r6
     7f6:	3006      	adds	r0, #6
     7f8:	b2c0      	uxtb	r0, r0
     7fa:	4b11      	ldr	r3, [pc, #68]	; (840 <getActiveNumber+0x7c>)
     7fc:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
     7fe:	2218      	movs	r2, #24
     800:	0031      	movs	r1, r6
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
     802:	4668      	mov	r0, sp
     804:	4b0f      	ldr	r3, [pc, #60]	; (844 <getActiveNumber+0x80>)
     806:	4798      	blx	r3
		strcpy(ActiveNo,mobile_no.mobile_no_ee);
     808:	a901      	add	r1, sp, #4
     80a:	e7e8      	b.n	7de <getActiveNumber+0x1a>
		memset(page_data, '\0', sizeof(page_data));
     80c:	4f0a      	ldr	r7, [pc, #40]	; (838 <getActiveNumber+0x74>)
     80e:	223c      	movs	r2, #60	; 0x3c
     810:	0031      	movs	r1, r6
     812:	4b0a      	ldr	r3, [pc, #40]	; (83c <getActiveNumber+0x78>)
     814:	0038      	movs	r0, r7
     816:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
     818:	0039      	movs	r1, r7
     81a:	0030      	movs	r0, r6
     81c:	4b08      	ldr	r3, [pc, #32]	; (840 <getActiveNumber+0x7c>)
     81e:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
     820:	2218      	movs	r2, #24
     822:	0039      	movs	r1, r7
     824:	e7ed      	b.n	802 <getActiveNumber+0x3e>
     826:	46c0      	nop			; (mov r8, r8)
     828:	20000574 	.word	0x20000574
     82c:	0000c677 	.word	0x0000c677
     830:	20000596 	.word	0x20000596
     834:	2000059a 	.word	0x2000059a
     838:	20000538 	.word	0x20000538
     83c:	0000c3f7 	.word	0x0000c3f7
     840:	00009679 	.word	0x00009679
     844:	0000c3c1 	.word	0x0000c3c1

00000848 <checkExists>:
uint8_t checkExists(char *number)
{
     848:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (user_count_struct.current_user_no_count > 0)
     84a:	4f22      	ldr	r7, [pc, #136]	; (8d4 <checkExists+0x8c>)
{
     84c:	b087      	sub	sp, #28
	if (user_count_struct.current_user_no_count > 0)
     84e:	78bb      	ldrb	r3, [r7, #2]
{
     850:	0005      	movs	r5, r0
     852:	2400      	movs	r4, #0
	if (user_count_struct.current_user_no_count > 0)
     854:	2b00      	cmp	r3, #0
     856:	d138      	bne.n	8ca <checkExists+0x82>
				return i;
			}
		}
	}

	if(isAlterNumber(number))
     858:	0028      	movs	r0, r5
     85a:	4b1f      	ldr	r3, [pc, #124]	; (8d8 <checkExists+0x90>)
     85c:	4798      	blx	r3
	{
		return 0xFD;
     85e:	24fd      	movs	r4, #253	; 0xfd
	if(isAlterNumber(number))
     860:	2800      	cmp	r0, #0
     862:	d117      	bne.n	894 <checkExists+0x4c>
	}

	if((m2m_Numbers_struct.m2mVerified) && isM2MNumber(number))
     864:	4e1d      	ldr	r6, [pc, #116]	; (8dc <checkExists+0x94>)
     866:	78b3      	ldrb	r3, [r6, #2]
     868:	2b00      	cmp	r3, #0
     86a:	d005      	beq.n	878 <checkExists+0x30>
     86c:	0028      	movs	r0, r5
     86e:	4b1c      	ldr	r3, [pc, #112]	; (8e0 <checkExists+0x98>)
     870:	4798      	blx	r3
	{
		return 0xFE;
     872:	24fe      	movs	r4, #254	; 0xfe
	if((m2m_Numbers_struct.m2mVerified) && isM2MNumber(number))
     874:	2800      	cmp	r0, #0
     876:	d10d      	bne.n	894 <checkExists+0x4c>
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
     878:	4b1a      	ldr	r3, [pc, #104]	; (8e4 <checkExists+0x9c>)
		if ((m2m_Numbers_struct.m2mRemoteVerified) && isM2MRemoteNumber(number))
		{
			return 0xFE;
		}
	}
	return 0xFF;
     87a:	24ff      	movs	r4, #255	; 0xff
	if (factory_settings_parameter_struct.ENABLE_M2M)
     87c:	78db      	ldrb	r3, [r3, #3]
     87e:	2b00      	cmp	r3, #0
     880:	d008      	beq.n	894 <checkExists+0x4c>
		if ((m2m_Numbers_struct.m2mRemoteVerified) && isM2MRemoteNumber(number))
     882:	7933      	ldrb	r3, [r6, #4]
     884:	2b00      	cmp	r3, #0
     886:	d005      	beq.n	894 <checkExists+0x4c>
     888:	0028      	movs	r0, r5
     88a:	4b17      	ldr	r3, [pc, #92]	; (8e8 <checkExists+0xa0>)
     88c:	4798      	blx	r3
		return 0xFE;
     88e:	4244      	negs	r4, r0
     890:	4144      	adcs	r4, r0
     892:	34fe      	adds	r4, #254	; 0xfe
}
     894:	0020      	movs	r0, r4
     896:	b007      	add	sp, #28
     898:	bdf0      	pop	{r4, r5, r6, r7, pc}
			memset(page_data, '\0', sizeof(page_data));
     89a:	4e14      	ldr	r6, [pc, #80]	; (8ec <checkExists+0xa4>)
     89c:	223c      	movs	r2, #60	; 0x3c
     89e:	2100      	movs	r1, #0
     8a0:	4b13      	ldr	r3, [pc, #76]	; (8f0 <checkExists+0xa8>)
     8a2:	0030      	movs	r0, r6
     8a4:	4798      	blx	r3
			eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
     8a6:	1da0      	adds	r0, r4, #6
     8a8:	0031      	movs	r1, r6
     8aa:	4b12      	ldr	r3, [pc, #72]	; (8f4 <checkExists+0xac>)
     8ac:	b2c0      	uxtb	r0, r0
     8ae:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
     8b0:	0031      	movs	r1, r6
     8b2:	4b11      	ldr	r3, [pc, #68]	; (8f8 <checkExists+0xb0>)
     8b4:	2218      	movs	r2, #24
     8b6:	4668      	mov	r0, sp
     8b8:	4798      	blx	r3
			if (strstr(number,mobile_no.mobile_no_ee))
     8ba:	a901      	add	r1, sp, #4
     8bc:	0028      	movs	r0, r5
     8be:	4b0f      	ldr	r3, [pc, #60]	; (8fc <checkExists+0xb4>)
     8c0:	4798      	blx	r3
     8c2:	2800      	cmp	r0, #0
     8c4:	d1e6      	bne.n	894 <checkExists+0x4c>
		for (uint8_t i=0;i<user_count_struct.current_user_no_count;i++)
     8c6:	3401      	adds	r4, #1
     8c8:	b2e4      	uxtb	r4, r4
     8ca:	78bb      	ldrb	r3, [r7, #2]
     8cc:	42a3      	cmp	r3, r4
     8ce:	d8e4      	bhi.n	89a <checkExists+0x52>
     8d0:	e7c2      	b.n	858 <checkExists+0x10>
     8d2:	46c0      	nop			; (mov r8, r8)
     8d4:	20000574 	.word	0x20000574
     8d8:	00000551 	.word	0x00000551
     8dc:	20000508 	.word	0x20000508
     8e0:	000005d5 	.word	0x000005d5
     8e4:	2000057a 	.word	0x2000057a
     8e8:	000005fd 	.word	0x000005fd
     8ec:	20000538 	.word	0x20000538
     8f0:	0000c3f7 	.word	0x0000c3f7
     8f4:	00009679 	.word	0x00009679
     8f8:	0000c3c1 	.word	0x0000c3c1
     8fc:	0000c6b7 	.word	0x0000c6b7

00000900 <addNumber>:

bool addNumber(char *number)
{
     900:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (user_count_struct.current_user_no_count == user_count_struct.total_user_no_count)
     902:	4d21      	ldr	r5, [pc, #132]	; (988 <addNumber+0x88>)
{
     904:	b087      	sub	sp, #28
	if (user_count_struct.current_user_no_count == user_count_struct.total_user_no_count)
     906:	78aa      	ldrb	r2, [r5, #2]
     908:	786b      	ldrb	r3, [r5, #1]
{
     90a:	0007      	movs	r7, r0
	if (user_count_struct.current_user_no_count == user_count_struct.total_user_no_count)
     90c:	429a      	cmp	r2, r3
     90e:	d102      	bne.n	916 <addNumber+0x16>
	{
		return false;
     910:	2000      	movs	r0, #0
			
			return true;
		}
	}
	return false;
}
     912:	b007      	add	sp, #28
     914:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (checkExists(number) > 0xF0)
     916:	4b1d      	ldr	r3, [pc, #116]	; (98c <addNumber+0x8c>)
     918:	4798      	blx	r3
     91a:	28f0      	cmp	r0, #240	; 0xf0
     91c:	d9f8      	bls.n	910 <addNumber+0x10>
			memset(page_data, '\0', sizeof(page_data));
     91e:	4c1c      	ldr	r4, [pc, #112]	; (990 <addNumber+0x90>)
     920:	223c      	movs	r2, #60	; 0x3c
     922:	2100      	movs	r1, #0
     924:	4b1b      	ldr	r3, [pc, #108]	; (994 <addNumber+0x94>)
     926:	0020      	movs	r0, r4
     928:	4798      	blx	r3
			eeprom_emulator_read_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
     92a:	78a8      	ldrb	r0, [r5, #2]
     92c:	4b1a      	ldr	r3, [pc, #104]	; (998 <addNumber+0x98>)
     92e:	3006      	adds	r0, #6
     930:	0021      	movs	r1, r4
     932:	b2c0      	uxtb	r0, r0
     934:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
     936:	4e19      	ldr	r6, [pc, #100]	; (99c <addNumber+0x9c>)
     938:	2218      	movs	r2, #24
     93a:	0021      	movs	r1, r4
     93c:	4668      	mov	r0, sp
     93e:	47b0      	blx	r6
			memset(mobile_no.mobile_no_ee, '\0', sizeof(mobile_no.mobile_no_ee));
     940:	2214      	movs	r2, #20
     942:	2100      	movs	r1, #0
     944:	4b13      	ldr	r3, [pc, #76]	; (994 <addNumber+0x94>)
     946:	a801      	add	r0, sp, #4
     948:	4798      	blx	r3
			strcpy(mobile_no.mobile_no_ee,number);
     94a:	4b15      	ldr	r3, [pc, #84]	; (9a0 <addNumber+0xa0>)
     94c:	0039      	movs	r1, r7
     94e:	a801      	add	r0, sp, #4
     950:	4798      	blx	r3
			memcpy(page_data,&mobile_no,sizeof(mobile_no));
     952:	2218      	movs	r2, #24
     954:	4669      	mov	r1, sp
     956:	0020      	movs	r0, r4
     958:	47b0      	blx	r6
			eeprom_emulator_write_page((USER_1_MOBILE_NUMBER_PAGE+user_count_struct.current_user_no_count), page_data);
     95a:	78a8      	ldrb	r0, [r5, #2]
     95c:	0021      	movs	r1, r4
     95e:	3006      	adds	r0, #6
     960:	4f10      	ldr	r7, [pc, #64]	; (9a4 <addNumber+0xa4>)
     962:	b2c0      	uxtb	r0, r0
     964:	47b8      	blx	r7
			eeprom_emulator_commit_page_buffer();
     966:	4b10      	ldr	r3, [pc, #64]	; (9a8 <addNumber+0xa8>)
     968:	4798      	blx	r3
			user_count_struct.current_user_no_count++;
     96a:	78ab      	ldrb	r3, [r5, #2]
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
     96c:	2206      	movs	r2, #6
			user_count_struct.current_user_no_count++;
     96e:	3301      	adds	r3, #1
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
     970:	0029      	movs	r1, r5
     972:	0020      	movs	r0, r4
			user_count_struct.current_user_no_count++;
     974:	70ab      	strb	r3, [r5, #2]
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
     976:	47b0      	blx	r6
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
     978:	0021      	movs	r1, r4
     97a:	2005      	movs	r0, #5
     97c:	47b8      	blx	r7
			eeprom_emulator_commit_page_buffer();
     97e:	4b0a      	ldr	r3, [pc, #40]	; (9a8 <addNumber+0xa8>)
     980:	4798      	blx	r3
     982:	2001      	movs	r0, #1
     984:	e7c5      	b.n	912 <addNumber+0x12>
     986:	46c0      	nop			; (mov r8, r8)
     988:	20000574 	.word	0x20000574
     98c:	00000849 	.word	0x00000849
     990:	20000538 	.word	0x20000538
     994:	0000c3f7 	.word	0x0000c3f7
     998:	00009679 	.word	0x00009679
     99c:	0000c3c1 	.word	0x0000c3c1
     9a0:	0000c677 	.word	0x0000c677
     9a4:	00009701 	.word	0x00009701
     9a8:	000096d5 	.word	0x000096d5

000009ac <removeNumber>:

bool removeNumber(char *numer)
{
     9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (user_count_struct.current_user_no_count < 2)
     9ae:	4c1f      	ldr	r4, [pc, #124]	; (a2c <removeNumber+0x80>)
     9b0:	78a3      	ldrb	r3, [r4, #2]
     9b2:	2b01      	cmp	r3, #1
     9b4:	d801      	bhi.n	9ba <removeNumber+0xe>
	{
		return false;
     9b6:	2000      	movs	r0, #0
			eeprom_emulator_commit_page_buffer();
			return true;
		}
	}
	return false;
}
     9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint8_t loc =  checkExists(numer);
     9ba:	4b1d      	ldr	r3, [pc, #116]	; (a30 <removeNumber+0x84>)
     9bc:	4798      	blx	r3
		if ((loc < user_count_struct.total_user_no_count) && (loc != user_count_struct.primaryNumberIndex))	//number is not special number(i.e. alter,m2m,m2mRemote) and not primary number
     9be:	7863      	ldrb	r3, [r4, #1]
		uint8_t loc =  checkExists(numer);
     9c0:	0006      	movs	r6, r0
		if ((loc < user_count_struct.total_user_no_count) && (loc != user_count_struct.primaryNumberIndex))	//number is not special number(i.e. alter,m2m,m2mRemote) and not primary number
     9c2:	4283      	cmp	r3, r0
     9c4:	d9f7      	bls.n	9b6 <removeNumber+0xa>
     9c6:	7923      	ldrb	r3, [r4, #4]
     9c8:	0007      	movs	r7, r0
     9ca:	4283      	cmp	r3, r0
     9cc:	d0f3      	beq.n	9b6 <removeNumber+0xa>
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
     9ce:	78a3      	ldrb	r3, [r4, #2]
     9d0:	4d18      	ldr	r5, [pc, #96]	; (a34 <removeNumber+0x88>)
     9d2:	3b01      	subs	r3, #1
     9d4:	429f      	cmp	r7, r3
     9d6:	db15      	blt.n	a04 <removeNumber+0x58>
			if(loc==user_count_struct.secondaryNumberIndex || loc>user_count_struct.current_user_no_count-1)
     9d8:	7962      	ldrb	r2, [r4, #5]
			user_count_struct.current_user_no_count--;
     9da:	b2db      	uxtb	r3, r3
     9dc:	70a3      	strb	r3, [r4, #2]
			if(loc==user_count_struct.secondaryNumberIndex || loc>user_count_struct.current_user_no_count-1)
     9de:	42b2      	cmp	r2, r6
     9e0:	d001      	beq.n	9e6 <removeNumber+0x3a>
     9e2:	42b3      	cmp	r3, r6
     9e4:	dc01      	bgt.n	9ea <removeNumber+0x3e>
				user_count_struct.secondaryNumberIndex= 1;
     9e6:	2301      	movs	r3, #1
     9e8:	7163      	strb	r3, [r4, #5]
			memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
     9ea:	2206      	movs	r2, #6
     9ec:	0021      	movs	r1, r4
     9ee:	4b12      	ldr	r3, [pc, #72]	; (a38 <removeNumber+0x8c>)
     9f0:	0028      	movs	r0, r5
     9f2:	4798      	blx	r3
			eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
     9f4:	0029      	movs	r1, r5
     9f6:	4b11      	ldr	r3, [pc, #68]	; (a3c <removeNumber+0x90>)
     9f8:	2005      	movs	r0, #5
     9fa:	4798      	blx	r3
			eeprom_emulator_commit_page_buffer();
     9fc:	4b10      	ldr	r3, [pc, #64]	; (a40 <removeNumber+0x94>)
     9fe:	4798      	blx	r3
			return true;
     a00:	2001      	movs	r0, #1
     a02:	e7d9      	b.n	9b8 <removeNumber+0xc>
				memset(page_data, '\0', sizeof(page_data));
     a04:	223c      	movs	r2, #60	; 0x3c
     a06:	2100      	movs	r1, #0
     a08:	4b0e      	ldr	r3, [pc, #56]	; (a44 <removeNumber+0x98>)
     a0a:	0028      	movs	r0, r5
     a0c:	4798      	blx	r3
				eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+i+1, page_data);
     a0e:	1df8      	adds	r0, r7, #7
     a10:	0029      	movs	r1, r5
     a12:	4b0d      	ldr	r3, [pc, #52]	; (a48 <removeNumber+0x9c>)
     a14:	b2c0      	uxtb	r0, r0
     a16:	4798      	blx	r3
				eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE+i, page_data);
     a18:	1db8      	adds	r0, r7, #6
     a1a:	0029      	movs	r1, r5
     a1c:	4b07      	ldr	r3, [pc, #28]	; (a3c <removeNumber+0x90>)
     a1e:	b2c0      	uxtb	r0, r0
     a20:	4798      	blx	r3
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
     a22:	3701      	adds	r7, #1
				eeprom_emulator_commit_page_buffer();
     a24:	4b06      	ldr	r3, [pc, #24]	; (a40 <removeNumber+0x94>)
     a26:	4798      	blx	r3
			for (uint8_t i=loc;i<(user_count_struct.current_user_no_count-1);i++)
     a28:	b2ff      	uxtb	r7, r7
     a2a:	e7d0      	b.n	9ce <removeNumber+0x22>
     a2c:	20000574 	.word	0x20000574
     a30:	00000849 	.word	0x00000849
     a34:	20000538 	.word	0x20000538
     a38:	0000c3c1 	.word	0x0000c3c1
     a3c:	00009701 	.word	0x00009701
     a40:	000096d5 	.word	0x000096d5
     a44:	0000c3f7 	.word	0x0000c3f7
     a48:	00009679 	.word	0x00009679

00000a4c <saveAlterNumberSetting>:
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
	eeprom_emulator_commit_page_buffer();
}

void saveAlterNumberSetting(bool flag)
{
     a4c:	b510      	push	{r4, lr}
	alternateNumber_struct.alterNumberSetting = flag;
     a4e:	4907      	ldr	r1, [pc, #28]	; (a6c <saveAlterNumberSetting+0x20>)
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
     a50:	4c07      	ldr	r4, [pc, #28]	; (a70 <saveAlterNumberSetting+0x24>)
     a52:	2218      	movs	r2, #24
	alternateNumber_struct.alterNumberSetting = flag;
     a54:	7048      	strb	r0, [r1, #1]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
     a56:	4b07      	ldr	r3, [pc, #28]	; (a74 <saveAlterNumberSetting+0x28>)
     a58:	0020      	movs	r0, r4
     a5a:	4798      	blx	r3
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
     a5c:	0021      	movs	r1, r4
     a5e:	4b06      	ldr	r3, [pc, #24]	; (a78 <saveAlterNumberSetting+0x2c>)
     a60:	2015      	movs	r0, #21
     a62:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     a64:	4b05      	ldr	r3, [pc, #20]	; (a7c <saveAlterNumberSetting+0x30>)
     a66:	4798      	blx	r3
}
     a68:	bd10      	pop	{r4, pc}
     a6a:	46c0      	nop			; (mov r8, r8)
     a6c:	20000596 	.word	0x20000596
     a70:	20000538 	.word	0x20000538
     a74:	0000c3c1 	.word	0x0000c3c1
     a78:	00009701 	.word	0x00009701
     a7c:	000096d5 	.word	0x000096d5

00000a80 <clearNumbers>:
{
     a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a82:	0001      	movs	r1, r0
     a84:	4e19      	ldr	r6, [pc, #100]	; (aec <clearNumbers+0x6c>)
     a86:	4c1a      	ldr	r4, [pc, #104]	; (af0 <clearNumbers+0x70>)
		user_count_struct.current_user_no_count = 0;
     a88:	2300      	movs	r3, #0
	if (admin)
     a8a:	2800      	cmp	r0, #0
     a8c:	d110      	bne.n	ab0 <clearNumbers+0x30>
		memset(page_data, '\0', sizeof(page_data));
     a8e:	223c      	movs	r2, #60	; 0x3c
     a90:	4b18      	ldr	r3, [pc, #96]	; (af4 <clearNumbers+0x74>)
     a92:	0020      	movs	r0, r4
     a94:	4798      	blx	r3
		eeprom_emulator_read_page(USER_1_MOBILE_NUMBER_PAGE+user_count_struct.primaryNumberIndex, page_data);
     a96:	7930      	ldrb	r0, [r6, #4]
     a98:	0021      	movs	r1, r4
     a9a:	3006      	adds	r0, #6
     a9c:	4b16      	ldr	r3, [pc, #88]	; (af8 <clearNumbers+0x78>)
     a9e:	b2c0      	uxtb	r0, r0
     aa0:	4798      	blx	r3
		eeprom_emulator_write_page(USER_1_MOBILE_NUMBER_PAGE, page_data);
     aa2:	0021      	movs	r1, r4
     aa4:	4b15      	ldr	r3, [pc, #84]	; (afc <clearNumbers+0x7c>)
     aa6:	2006      	movs	r0, #6
     aa8:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     aaa:	4b15      	ldr	r3, [pc, #84]	; (b00 <clearNumbers+0x80>)
     aac:	4798      	blx	r3
		user_count_struct.current_user_no_count = 1;
     aae:	2301      	movs	r3, #1
	user_count_struct.primaryNumberIndex=0;
     ab0:	2500      	movs	r5, #0
		user_count_struct.current_user_no_count = 1;
     ab2:	70b3      	strb	r3, [r6, #2]
	user_count_struct.secondaryNumberIndex=1;
     ab4:	2301      	movs	r3, #1
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
     ab6:	2206      	movs	r2, #6
     ab8:	4f12      	ldr	r7, [pc, #72]	; (b04 <clearNumbers+0x84>)
     aba:	0031      	movs	r1, r6
     abc:	0020      	movs	r0, r4
	user_count_struct.primaryNumberIndex=0;
     abe:	7135      	strb	r5, [r6, #4]
	user_count_struct.secondaryNumberIndex=1;
     ac0:	7173      	strb	r3, [r6, #5]
	memcpy(page_data,&user_count_struct,sizeof(user_count_struct));
     ac2:	47b8      	blx	r7
	eeprom_emulator_write_page(USER_COUNTER_PAGE, page_data);
     ac4:	0021      	movs	r1, r4
     ac6:	4e0d      	ldr	r6, [pc, #52]	; (afc <clearNumbers+0x7c>)
     ac8:	2005      	movs	r0, #5
     aca:	47b0      	blx	r6
	eeprom_emulator_commit_page_buffer();
     acc:	4b0c      	ldr	r3, [pc, #48]	; (b00 <clearNumbers+0x80>)
     ace:	4798      	blx	r3
	saveAlterNumberSetting(false);
     ad0:	0028      	movs	r0, r5
     ad2:	4b0d      	ldr	r3, [pc, #52]	; (b08 <clearNumbers+0x88>)
     ad4:	4798      	blx	r3
	alternateNumber_struct.alterNumberPresent = false;
     ad6:	490d      	ldr	r1, [pc, #52]	; (b0c <clearNumbers+0x8c>)
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
     ad8:	2218      	movs	r2, #24
     ada:	0020      	movs	r0, r4
	alternateNumber_struct.alterNumberPresent = false;
     adc:	708d      	strb	r5, [r1, #2]
	memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
     ade:	47b8      	blx	r7
	eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
     ae0:	0021      	movs	r1, r4
     ae2:	2015      	movs	r0, #21
     ae4:	47b0      	blx	r6
	eeprom_emulator_commit_page_buffer();
     ae6:	4b06      	ldr	r3, [pc, #24]	; (b00 <clearNumbers+0x80>)
     ae8:	4798      	blx	r3
}
     aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     aec:	20000574 	.word	0x20000574
     af0:	20000538 	.word	0x20000538
     af4:	0000c3f7 	.word	0x0000c3f7
     af8:	00009679 	.word	0x00009679
     afc:	00009701 	.word	0x00009701
     b00:	000096d5 	.word	0x000096d5
     b04:	0000c3c1 	.word	0x0000c3c1
     b08:	00000a4d 	.word	0x00000a4d
     b0c:	20000596 	.word	0x20000596

00000b10 <addAlternateNumber>:

bool addAlternateNumber(char *numer)
{
     b10:	0001      	movs	r1, r0
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
		eeprom_emulator_commit_page_buffer();
		
		return true;
	}
	return false;
     b12:	2000      	movs	r0, #0
{
     b14:	b570      	push	{r4, r5, r6, lr}
	if (user_count_struct.current_user_no_count > 0)
     b16:	4b0c      	ldr	r3, [pc, #48]	; (b48 <addAlternateNumber+0x38>)
     b18:	789b      	ldrb	r3, [r3, #2]
     b1a:	4283      	cmp	r3, r0
     b1c:	d012      	beq.n	b44 <addAlternateNumber+0x34>
		alternateNumber_struct.alterNumberPresent = true;
     b1e:	2401      	movs	r4, #1
     b20:	4e0a      	ldr	r6, [pc, #40]	; (b4c <addAlternateNumber+0x3c>)
		strcpy(alternateNumber_struct.alternateNumber_ee,numer);
     b22:	4b0b      	ldr	r3, [pc, #44]	; (b50 <addAlternateNumber+0x40>)
     b24:	480b      	ldr	r0, [pc, #44]	; (b54 <addAlternateNumber+0x44>)
		alternateNumber_struct.alterNumberPresent = true;
     b26:	70b4      	strb	r4, [r6, #2]
		strcpy(alternateNumber_struct.alternateNumber_ee,numer);
     b28:	4798      	blx	r3
		memcpy(page_data,&alternateNumber_struct,sizeof(alternateNumber_struct));
     b2a:	4d0b      	ldr	r5, [pc, #44]	; (b58 <addAlternateNumber+0x48>)
     b2c:	2218      	movs	r2, #24
     b2e:	0031      	movs	r1, r6
     b30:	4b0a      	ldr	r3, [pc, #40]	; (b5c <addAlternateNumber+0x4c>)
     b32:	0028      	movs	r0, r5
     b34:	4798      	blx	r3
		eeprom_emulator_write_page(ALTARNATE_NUMBERS_PAGE, page_data);
     b36:	0029      	movs	r1, r5
     b38:	4b09      	ldr	r3, [pc, #36]	; (b60 <addAlternateNumber+0x50>)
     b3a:	2015      	movs	r0, #21
     b3c:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     b3e:	4b09      	ldr	r3, [pc, #36]	; (b64 <addAlternateNumber+0x54>)
     b40:	4798      	blx	r3
		return true;
     b42:	0020      	movs	r0, r4
}
     b44:	bd70      	pop	{r4, r5, r6, pc}
     b46:	46c0      	nop			; (mov r8, r8)
     b48:	20000574 	.word	0x20000574
     b4c:	20000596 	.word	0x20000596
     b50:	0000c677 	.word	0x0000c677
     b54:	2000059a 	.word	0x2000059a
     b58:	20000538 	.word	0x20000538
     b5c:	0000c3c1 	.word	0x0000c3c1
     b60:	00009701 	.word	0x00009701
     b64:	000096d5 	.word	0x000096d5

00000b68 <saveAutoStartSettings>:

void saveAutoStartSettings(bool flag)
{
     b68:	b510      	push	{r4, lr}
	user_settings_parameter_struct.autoStartAddress = (uint8_t)flag;
     b6a:	4907      	ldr	r1, [pc, #28]	; (b88 <saveAutoStartSettings+0x20>)
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     b6c:	4c07      	ldr	r4, [pc, #28]	; (b8c <saveAutoStartSettings+0x24>)
     b6e:	222c      	movs	r2, #44	; 0x2c
	user_settings_parameter_struct.autoStartAddress = (uint8_t)flag;
     b70:	7048      	strb	r0, [r1, #1]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     b72:	4b07      	ldr	r3, [pc, #28]	; (b90 <saveAutoStartSettings+0x28>)
     b74:	0020      	movs	r0, r4
     b76:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     b78:	0021      	movs	r1, r4
     b7a:	4b06      	ldr	r3, [pc, #24]	; (b94 <saveAutoStartSettings+0x2c>)
     b7c:	2017      	movs	r0, #23
     b7e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     b80:	4b05      	ldr	r3, [pc, #20]	; (b98 <saveAutoStartSettings+0x30>)
     b82:	4798      	blx	r3
}
     b84:	bd10      	pop	{r4, pc}
     b86:	46c0      	nop			; (mov r8, r8)
     b88:	200005b0 	.word	0x200005b0
     b8c:	20000538 	.word	0x20000538
     b90:	0000c3c1 	.word	0x0000c3c1
     b94:	00009701 	.word	0x00009701
     b98:	000096d5 	.word	0x000096d5

00000b9c <saveAutoStartTimeSettings>:

void saveAutoStartTimeSettings(uint16_t value)
{
     b9c:	b510      	push	{r4, lr}
	user_settings_parameter_struct.autoStartTimeAddress = value;
     b9e:	4907      	ldr	r1, [pc, #28]	; (bbc <saveAutoStartTimeSettings+0x20>)
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     ba0:	4c07      	ldr	r4, [pc, #28]	; (bc0 <saveAutoStartTimeSettings+0x24>)
     ba2:	222c      	movs	r2, #44	; 0x2c
	user_settings_parameter_struct.autoStartTimeAddress = value;
     ba4:	8048      	strh	r0, [r1, #2]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     ba6:	4b07      	ldr	r3, [pc, #28]	; (bc4 <saveAutoStartTimeSettings+0x28>)
     ba8:	0020      	movs	r0, r4
     baa:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     bac:	0021      	movs	r1, r4
     bae:	4b06      	ldr	r3, [pc, #24]	; (bc8 <saveAutoStartTimeSettings+0x2c>)
     bb0:	2017      	movs	r0, #23
     bb2:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     bb4:	4b05      	ldr	r3, [pc, #20]	; (bcc <saveAutoStartTimeSettings+0x30>)
     bb6:	4798      	blx	r3
}
     bb8:	bd10      	pop	{r4, pc}
     bba:	46c0      	nop			; (mov r8, r8)
     bbc:	200005b0 	.word	0x200005b0
     bc0:	20000538 	.word	0x20000538
     bc4:	0000c3c1 	.word	0x0000c3c1
     bc8:	00009701 	.word	0x00009701
     bcc:	000096d5 	.word	0x000096d5

00000bd0 <saveDNDSettings>:

void saveDNDSettings(char flag)
{
     bd0:	b510      	push	{r4, lr}
	user_settings_parameter_struct.dndAddress = flag;
     bd2:	4907      	ldr	r1, [pc, #28]	; (bf0 <saveDNDSettings+0x20>)
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     bd4:	4c07      	ldr	r4, [pc, #28]	; (bf4 <saveDNDSettings+0x24>)
     bd6:	222c      	movs	r2, #44	; 0x2c
	user_settings_parameter_struct.dndAddress = flag;
     bd8:	7108      	strb	r0, [r1, #4]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     bda:	4b07      	ldr	r3, [pc, #28]	; (bf8 <saveDNDSettings+0x28>)
     bdc:	0020      	movs	r0, r4
     bde:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     be0:	0021      	movs	r1, r4
     be2:	4b06      	ldr	r3, [pc, #24]	; (bfc <saveDNDSettings+0x2c>)
     be4:	2017      	movs	r0, #23
     be6:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     be8:	4b05      	ldr	r3, [pc, #20]	; (c00 <saveDNDSettings+0x30>)
     bea:	4798      	blx	r3
}
     bec:	bd10      	pop	{r4, pc}
     bee:	46c0      	nop			; (mov r8, r8)
     bf0:	200005b0 	.word	0x200005b0
     bf4:	20000538 	.word	0x20000538
     bf8:	0000c3c1 	.word	0x0000c3c1
     bfc:	00009701 	.word	0x00009701
     c00:	000096d5 	.word	0x000096d5

00000c04 <saveResponseSettings>:
//eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
//eeprom_emulator_commit_page_buffer();
//}

void saveResponseSettings(char response)
{
     c04:	b510      	push	{r4, lr}
	user_settings_parameter_struct.responseAddress = response;
     c06:	4907      	ldr	r1, [pc, #28]	; (c24 <saveResponseSettings+0x20>)
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     c08:	4c07      	ldr	r4, [pc, #28]	; (c28 <saveResponseSettings+0x24>)
     c0a:	222c      	movs	r2, #44	; 0x2c
	user_settings_parameter_struct.responseAddress = response;
     c0c:	7148      	strb	r0, [r1, #5]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     c0e:	4b07      	ldr	r3, [pc, #28]	; (c2c <saveResponseSettings+0x28>)
     c10:	0020      	movs	r0, r4
     c12:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     c14:	0021      	movs	r1, r4
     c16:	4b06      	ldr	r3, [pc, #24]	; (c30 <saveResponseSettings+0x2c>)
     c18:	2017      	movs	r0, #23
     c1a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     c1c:	4b05      	ldr	r3, [pc, #20]	; (c34 <saveResponseSettings+0x30>)
     c1e:	4798      	blx	r3
}
     c20:	bd10      	pop	{r4, pc}
     c22:	46c0      	nop			; (mov r8, r8)
     c24:	200005b0 	.word	0x200005b0
     c28:	20000538 	.word	0x20000538
     c2c:	0000c3c1 	.word	0x0000c3c1
     c30:	00009701 	.word	0x00009701
     c34:	000096d5 	.word	0x000096d5

00000c38 <saveNoCallSettings>:

void saveNoCallSettings(bool flag,uint8_t startHour,uint8_t startMinute,uint8_t stopHour,uint8_t stopMinute)
{
     c38:	b570      	push	{r4, r5, r6, lr}
     c3a:	000d      	movs	r5, r1
     c3c:	a904      	add	r1, sp, #16
     c3e:	780c      	ldrb	r4, [r1, #0]
	user_settings_parameter_struct.noCallAddress = (uint8_t)flag;
     c40:	4909      	ldr	r1, [pc, #36]	; (c68 <saveNoCallSettings+0x30>)
     c42:	7248      	strb	r0, [r1, #9]
	if (user_settings_parameter_struct.noCallAddress)
     c44:	2800      	cmp	r0, #0
     c46:	d003      	beq.n	c50 <saveNoCallSettings+0x18>
	{
		user_settings_parameter_struct.noCallStartTimeHourAddress = startHour;
     c48:	728d      	strb	r5, [r1, #10]
		user_settings_parameter_struct.noCallStartTimeMinuteAddress = startMinute;
     c4a:	72ca      	strb	r2, [r1, #11]
		
		user_settings_parameter_struct.noCallStopTimeHourAddress = stopHour;
     c4c:	730b      	strb	r3, [r1, #12]
		user_settings_parameter_struct.noCallStopTimeMinuteAddress = stopMinute;
     c4e:	734c      	strb	r4, [r1, #13]
	}
	
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     c50:	4c06      	ldr	r4, [pc, #24]	; (c6c <saveNoCallSettings+0x34>)
     c52:	222c      	movs	r2, #44	; 0x2c
     c54:	0020      	movs	r0, r4
     c56:	4b06      	ldr	r3, [pc, #24]	; (c70 <saveNoCallSettings+0x38>)
     c58:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     c5a:	0021      	movs	r1, r4
     c5c:	4b05      	ldr	r3, [pc, #20]	; (c74 <saveNoCallSettings+0x3c>)
     c5e:	2017      	movs	r0, #23
     c60:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     c62:	4b05      	ldr	r3, [pc, #20]	; (c78 <saveNoCallSettings+0x40>)
     c64:	4798      	blx	r3
}
     c66:	bd70      	pop	{r4, r5, r6, pc}
     c68:	200005b0 	.word	0x200005b0
     c6c:	20000538 	.word	0x20000538
     c70:	0000c3c1 	.word	0x0000c3c1
     c74:	00009701 	.word	0x00009701
     c78:	000096d5 	.word	0x000096d5

00000c7c <saveWaterBypassSettings>:

void saveWaterBypassSettings(bool flag)
{
	user_settings_parameter_struct.waterBypassAddress = (uint8_t)flag;
     c7c:	4907      	ldr	r1, [pc, #28]	; (c9c <saveWaterBypassSettings+0x20>)
{
     c7e:	b510      	push	{r4, lr}
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     c80:	4c07      	ldr	r4, [pc, #28]	; (ca0 <saveWaterBypassSettings+0x24>)
	user_settings_parameter_struct.waterBypassAddress = (uint8_t)flag;
     c82:	1c8b      	adds	r3, r1, #2
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     c84:	222c      	movs	r2, #44	; 0x2c
	user_settings_parameter_struct.waterBypassAddress = (uint8_t)flag;
     c86:	77d8      	strb	r0, [r3, #31]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     c88:	0020      	movs	r0, r4
     c8a:	4b06      	ldr	r3, [pc, #24]	; (ca4 <saveWaterBypassSettings+0x28>)
     c8c:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     c8e:	0021      	movs	r1, r4
     c90:	4b05      	ldr	r3, [pc, #20]	; (ca8 <saveWaterBypassSettings+0x2c>)
     c92:	2017      	movs	r0, #23
     c94:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     c96:	4b05      	ldr	r3, [pc, #20]	; (cac <saveWaterBypassSettings+0x30>)
     c98:	4798      	blx	r3
}
     c9a:	bd10      	pop	{r4, pc}
     c9c:	200005b0 	.word	0x200005b0
     ca0:	20000538 	.word	0x20000538
     ca4:	0000c3c1 	.word	0x0000c3c1
     ca8:	00009701 	.word	0x00009701
     cac:	000096d5 	.word	0x000096d5

00000cb0 <savePreventOverFlowSettings>:

void savePreventOverFlowSettings(bool flag)
{
	user_settings_parameter_struct.preventOverFlowAddress = (uint8_t)flag;
     cb0:	4907      	ldr	r1, [pc, #28]	; (cd0 <savePreventOverFlowSettings+0x20>)
{
     cb2:	b510      	push	{r4, lr}
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     cb4:	4c07      	ldr	r4, [pc, #28]	; (cd4 <savePreventOverFlowSettings+0x24>)
	user_settings_parameter_struct.preventOverFlowAddress = (uint8_t)flag;
     cb6:	1c4b      	adds	r3, r1, #1
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     cb8:	222c      	movs	r2, #44	; 0x2c
	user_settings_parameter_struct.preventOverFlowAddress = (uint8_t)flag;
     cba:	77d8      	strb	r0, [r3, #31]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     cbc:	0020      	movs	r0, r4
     cbe:	4b06      	ldr	r3, [pc, #24]	; (cd8 <savePreventOverFlowSettings+0x28>)
     cc0:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     cc2:	0021      	movs	r1, r4
     cc4:	4b05      	ldr	r3, [pc, #20]	; (cdc <savePreventOverFlowSettings+0x2c>)
     cc6:	2017      	movs	r0, #23
     cc8:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     cca:	4b05      	ldr	r3, [pc, #20]	; (ce0 <savePreventOverFlowSettings+0x30>)
     ccc:	4798      	blx	r3
}
     cce:	bd10      	pop	{r4, pc}
     cd0:	200005b0 	.word	0x200005b0
     cd4:	20000538 	.word	0x20000538
     cd8:	0000c3c1 	.word	0x0000c3c1
     cdc:	00009701 	.word	0x00009701
     ce0:	000096d5 	.word	0x000096d5

00000ce4 <saveSinglePhasingSettings>:
	return false;
}

void saveSinglePhasingSettings(bool singlePhasing)
{
	user_settings_parameter_struct.detectSinglePhasing=singlePhasing;
     ce4:	4907      	ldr	r1, [pc, #28]	; (d04 <saveSinglePhasingSettings+0x20>)
{
     ce6:	b510      	push	{r4, lr}
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     ce8:	4c07      	ldr	r4, [pc, #28]	; (d08 <saveSinglePhasingSettings+0x24>)
	user_settings_parameter_struct.detectSinglePhasing=singlePhasing;
     cea:	1d4b      	adds	r3, r1, #5
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     cec:	222c      	movs	r2, #44	; 0x2c
	user_settings_parameter_struct.detectSinglePhasing=singlePhasing;
     cee:	77d8      	strb	r0, [r3, #31]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     cf0:	0020      	movs	r0, r4
     cf2:	4b06      	ldr	r3, [pc, #24]	; (d0c <saveSinglePhasingSettings+0x28>)
     cf4:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     cf6:	0021      	movs	r1, r4
     cf8:	4b05      	ldr	r3, [pc, #20]	; (d10 <saveSinglePhasingSettings+0x2c>)
     cfa:	2017      	movs	r0, #23
     cfc:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     cfe:	4b05      	ldr	r3, [pc, #20]	; (d14 <saveSinglePhasingSettings+0x30>)
     d00:	4798      	blx	r3
}
     d02:	bd10      	pop	{r4, pc}
     d04:	200005b0 	.word	0x200005b0
     d08:	20000538 	.word	0x20000538
     d0c:	0000c3c1 	.word	0x0000c3c1
     d10:	00009701 	.word	0x00009701
     d14:	000096d5 	.word	0x000096d5

00000d18 <saveSinglePhasingVoltage>:

void saveSinglePhasingVoltage(uint16_t voltage)
{
     d18:	b510      	push	{r4, lr}
	user_settings_parameter_struct.singlePhasingVoltage= voltage;
     d1a:	4907      	ldr	r1, [pc, #28]	; (d38 <saveSinglePhasingVoltage+0x20>)
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     d1c:	4c07      	ldr	r4, [pc, #28]	; (d3c <saveSinglePhasingVoltage+0x24>)
     d1e:	222c      	movs	r2, #44	; 0x2c
	user_settings_parameter_struct.singlePhasingVoltage= voltage;
     d20:	84c8      	strh	r0, [r1, #38]	; 0x26
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     d22:	4b07      	ldr	r3, [pc, #28]	; (d40 <saveSinglePhasingVoltage+0x28>)
     d24:	0020      	movs	r0, r4
     d26:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     d28:	0021      	movs	r1, r4
     d2a:	4b06      	ldr	r3, [pc, #24]	; (d44 <saveSinglePhasingVoltage+0x2c>)
     d2c:	2017      	movs	r0, #23
     d2e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     d30:	4b05      	ldr	r3, [pc, #20]	; (d48 <saveSinglePhasingVoltage+0x30>)
     d32:	4798      	blx	r3
}
     d34:	bd10      	pop	{r4, pc}
     d36:	46c0      	nop			; (mov r8, r8)
     d38:	200005b0 	.word	0x200005b0
     d3c:	20000538 	.word	0x20000538
     d40:	0000c3c1 	.word	0x0000c3c1
     d44:	00009701 	.word	0x00009701
     d48:	000096d5 	.word	0x000096d5

00000d4c <savePhaseSequenceProtectionSettings>:

void savePhaseSequenceProtectionSettings(bool phaseSequenceSetting)
{
	user_settings_parameter_struct.detectPhaseSequence= phaseSequenceSetting;
     d4c:	4908      	ldr	r1, [pc, #32]	; (d70 <savePhaseSequenceProtectionSettings+0x24>)
{
     d4e:	b510      	push	{r4, lr}
	user_settings_parameter_struct.detectPhaseSequence= phaseSequenceSetting;
     d50:	000b      	movs	r3, r1
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     d52:	4c08      	ldr	r4, [pc, #32]	; (d74 <savePhaseSequenceProtectionSettings+0x28>)
	user_settings_parameter_struct.detectPhaseSequence= phaseSequenceSetting;
     d54:	3328      	adds	r3, #40	; 0x28
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     d56:	222c      	movs	r2, #44	; 0x2c
	user_settings_parameter_struct.detectPhaseSequence= phaseSequenceSetting;
     d58:	7018      	strb	r0, [r3, #0]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     d5a:	0020      	movs	r0, r4
     d5c:	4b06      	ldr	r3, [pc, #24]	; (d78 <savePhaseSequenceProtectionSettings+0x2c>)
     d5e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     d60:	0021      	movs	r1, r4
     d62:	4b06      	ldr	r3, [pc, #24]	; (d7c <savePhaseSequenceProtectionSettings+0x30>)
     d64:	2017      	movs	r0, #23
     d66:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     d68:	4b05      	ldr	r3, [pc, #20]	; (d80 <savePhaseSequenceProtectionSettings+0x34>)
     d6a:	4798      	blx	r3
}
     d6c:	bd10      	pop	{r4, pc}
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	200005b0 	.word	0x200005b0
     d74:	20000538 	.word	0x20000538
     d78:	0000c3c1 	.word	0x0000c3c1
     d7c:	00009701 	.word	0x00009701
     d80:	000096d5 	.word	0x000096d5

00000d84 <setUnderloadValue>:
	temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.overloadPerAddress) / 100.0;
	setOverloadValue(temp);
}

void setUnderloadValue(uint32_t underValue)
{
     d84:	b510      	push	{r4, lr}
	user_settings_parameter_struct.underloadAddress = underValue;
     d86:	4907      	ldr	r1, [pc, #28]	; (da4 <setUnderloadValue+0x20>)
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     d88:	4c07      	ldr	r4, [pc, #28]	; (da8 <setUnderloadValue+0x24>)
     d8a:	222c      	movs	r2, #44	; 0x2c
	user_settings_parameter_struct.underloadAddress = underValue;
     d8c:	6188      	str	r0, [r1, #24]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     d8e:	4b07      	ldr	r3, [pc, #28]	; (dac <setUnderloadValue+0x28>)
     d90:	0020      	movs	r0, r4
     d92:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     d94:	0021      	movs	r1, r4
     d96:	4b06      	ldr	r3, [pc, #24]	; (db0 <setUnderloadValue+0x2c>)
     d98:	2017      	movs	r0, #23
     d9a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     d9c:	4b05      	ldr	r3, [pc, #20]	; (db4 <setUnderloadValue+0x30>)
     d9e:	4798      	blx	r3
}
     da0:	bd10      	pop	{r4, pc}
     da2:	46c0      	nop			; (mov r8, r8)
     da4:	200005b0 	.word	0x200005b0
     da8:	20000538 	.word	0x20000538
     dac:	0000c3c1 	.word	0x0000c3c1
     db0:	00009701 	.word	0x00009701
     db4:	000096d5 	.word	0x000096d5

00000db8 <setOverloadValue>:

void setOverloadValue(uint32_t overValue)
{
     db8:	b510      	push	{r4, lr}
	user_settings_parameter_struct.overloadAddress = overValue;
     dba:	4907      	ldr	r1, [pc, #28]	; (dd8 <setOverloadValue+0x20>)
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     dbc:	4c07      	ldr	r4, [pc, #28]	; (ddc <setOverloadValue+0x24>)
     dbe:	222c      	movs	r2, #44	; 0x2c
	user_settings_parameter_struct.overloadAddress = overValue;
     dc0:	6148      	str	r0, [r1, #20]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     dc2:	4b07      	ldr	r3, [pc, #28]	; (de0 <setOverloadValue+0x28>)
     dc4:	0020      	movs	r0, r4
     dc6:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     dc8:	0021      	movs	r1, r4
     dca:	4b06      	ldr	r3, [pc, #24]	; (de4 <setOverloadValue+0x2c>)
     dcc:	2017      	movs	r0, #23
     dce:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     dd0:	4b05      	ldr	r3, [pc, #20]	; (de8 <setOverloadValue+0x30>)
     dd2:	4798      	blx	r3
}
     dd4:	bd10      	pop	{r4, pc}
     dd6:	46c0      	nop			; (mov r8, r8)
     dd8:	200005b0 	.word	0x200005b0
     ddc:	20000538 	.word	0x20000538
     de0:	0000c3c1 	.word	0x0000c3c1
     de4:	00009701 	.word	0x00009701
     de8:	000096d5 	.word	0x000096d5

00000dec <calcCurrentValues>:
{
     dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.underloadPerAddress) / 100.0;
     dee:	4d14      	ldr	r5, [pc, #80]	; (e40 <calcCurrentValues+0x54>)
     df0:	4c14      	ldr	r4, [pc, #80]	; (e44 <calcCurrentValues+0x58>)
     df2:	6928      	ldr	r0, [r5, #16]
     df4:	47a0      	blx	r4
     df6:	1c06      	adds	r6, r0, #0
     df8:	7f28      	ldrb	r0, [r5, #28]
     dfa:	47a0      	blx	r4
     dfc:	4b12      	ldr	r3, [pc, #72]	; (e48 <calcCurrentValues+0x5c>)
     dfe:	1c01      	adds	r1, r0, #0
     e00:	1c30      	adds	r0, r6, #0
     e02:	4798      	blx	r3
     e04:	4b11      	ldr	r3, [pc, #68]	; (e4c <calcCurrentValues+0x60>)
     e06:	4798      	blx	r3
     e08:	2200      	movs	r2, #0
     e0a:	4f11      	ldr	r7, [pc, #68]	; (e50 <calcCurrentValues+0x64>)
     e0c:	4b11      	ldr	r3, [pc, #68]	; (e54 <calcCurrentValues+0x68>)
     e0e:	47b8      	blx	r7
     e10:	4e11      	ldr	r6, [pc, #68]	; (e58 <calcCurrentValues+0x6c>)
     e12:	47b0      	blx	r6
	setUnderloadValue(temp);
     e14:	4b11      	ldr	r3, [pc, #68]	; (e5c <calcCurrentValues+0x70>)
     e16:	b280      	uxth	r0, r0
     e18:	4798      	blx	r3
	temp = (user_settings_parameter_struct.normalLoadAddress * (float)user_settings_parameter_struct.overloadPerAddress) / 100.0;
     e1a:	6928      	ldr	r0, [r5, #16]
     e1c:	47a0      	blx	r4
     e1e:	9001      	str	r0, [sp, #4]
     e20:	7f68      	ldrb	r0, [r5, #29]
     e22:	47a0      	blx	r4
     e24:	4b08      	ldr	r3, [pc, #32]	; (e48 <calcCurrentValues+0x5c>)
     e26:	1c01      	adds	r1, r0, #0
     e28:	9801      	ldr	r0, [sp, #4]
     e2a:	4798      	blx	r3
     e2c:	4b07      	ldr	r3, [pc, #28]	; (e4c <calcCurrentValues+0x60>)
     e2e:	4798      	blx	r3
     e30:	2200      	movs	r2, #0
     e32:	4b08      	ldr	r3, [pc, #32]	; (e54 <calcCurrentValues+0x68>)
     e34:	47b8      	blx	r7
     e36:	47b0      	blx	r6
	setOverloadValue(temp);
     e38:	4b09      	ldr	r3, [pc, #36]	; (e60 <calcCurrentValues+0x74>)
     e3a:	b280      	uxth	r0, r0
     e3c:	4798      	blx	r3
}
     e3e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     e40:	200005b0 	.word	0x200005b0
     e44:	0000ad69 	.word	0x0000ad69
     e48:	0000ab29 	.word	0x0000ab29
     e4c:	0000c1f1 	.word	0x0000c1f1
     e50:	0000adf5 	.word	0x0000adf5
     e54:	40590000 	.word	0x40590000
     e58:	0000a6dd 	.word	0x0000a6dd
     e5c:	00000d85 	.word	0x00000d85
     e60:	00000db9 	.word	0x00000db9

00000e64 <setOverloadPer>:
{
     e64:	b570      	push	{r4, r5, r6, lr}
	return false;
     e66:	2400      	movs	r4, #0
	if(overloadPerValue>100)
     e68:	2864      	cmp	r0, #100	; 0x64
     e6a:	d913      	bls.n	e94 <setOverloadPer+0x30>
		user_settings_parameter_struct.overloadPerAddress = overloadPerValue;
     e6c:	4c0a      	ldr	r4, [pc, #40]	; (e98 <setOverloadPer+0x34>)
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     e6e:	4d0b      	ldr	r5, [pc, #44]	; (e9c <setOverloadPer+0x38>)
		user_settings_parameter_struct.overloadPerAddress = overloadPerValue;
     e70:	7760      	strb	r0, [r4, #29]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     e72:	222c      	movs	r2, #44	; 0x2c
     e74:	0021      	movs	r1, r4
     e76:	4b0a      	ldr	r3, [pc, #40]	; (ea0 <setOverloadPer+0x3c>)
     e78:	0028      	movs	r0, r5
     e7a:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     e7c:	0029      	movs	r1, r5
     e7e:	4b09      	ldr	r3, [pc, #36]	; (ea4 <setOverloadPer+0x40>)
     e80:	2017      	movs	r0, #23
     e82:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     e84:	4b08      	ldr	r3, [pc, #32]	; (ea8 <setOverloadPer+0x44>)
     e86:	4798      	blx	r3
		if (user_settings_parameter_struct.currentDetectionAddress)
     e88:	7be3      	ldrb	r3, [r4, #15]
		return true;
     e8a:	2401      	movs	r4, #1
		if (user_settings_parameter_struct.currentDetectionAddress)
     e8c:	2b00      	cmp	r3, #0
     e8e:	d001      	beq.n	e94 <setOverloadPer+0x30>
			calcCurrentValues();
     e90:	4b06      	ldr	r3, [pc, #24]	; (eac <setOverloadPer+0x48>)
     e92:	4798      	blx	r3
}
     e94:	0020      	movs	r0, r4
     e96:	bd70      	pop	{r4, r5, r6, pc}
     e98:	200005b0 	.word	0x200005b0
     e9c:	20000538 	.word	0x20000538
     ea0:	0000c3c1 	.word	0x0000c3c1
     ea4:	00009701 	.word	0x00009701
     ea8:	000096d5 	.word	0x000096d5
     eac:	00000ded 	.word	0x00000ded

00000eb0 <setUnderloadPer>:
	if(underloadPerValue>0 && underloadPerValue <100)
     eb0:	1e43      	subs	r3, r0, #1
{
     eb2:	b570      	push	{r4, r5, r6, lr}
	return false;
     eb4:	2400      	movs	r4, #0
	if(underloadPerValue>0 && underloadPerValue <100)
     eb6:	2b62      	cmp	r3, #98	; 0x62
     eb8:	d813      	bhi.n	ee2 <setUnderloadPer+0x32>
		user_settings_parameter_struct.underloadPerAddress = underloadPerValue;
     eba:	4c0b      	ldr	r4, [pc, #44]	; (ee8 <setUnderloadPer+0x38>)
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     ebc:	4d0b      	ldr	r5, [pc, #44]	; (eec <setUnderloadPer+0x3c>)
		user_settings_parameter_struct.underloadPerAddress = underloadPerValue;
     ebe:	7720      	strb	r0, [r4, #28]
		memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     ec0:	222c      	movs	r2, #44	; 0x2c
     ec2:	0021      	movs	r1, r4
     ec4:	4b0a      	ldr	r3, [pc, #40]	; (ef0 <setUnderloadPer+0x40>)
     ec6:	0028      	movs	r0, r5
     ec8:	4798      	blx	r3
		eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     eca:	0029      	movs	r1, r5
     ecc:	4b09      	ldr	r3, [pc, #36]	; (ef4 <setUnderloadPer+0x44>)
     ece:	2017      	movs	r0, #23
     ed0:	4798      	blx	r3
		eeprom_emulator_commit_page_buffer();
     ed2:	4b09      	ldr	r3, [pc, #36]	; (ef8 <setUnderloadPer+0x48>)
     ed4:	4798      	blx	r3
		if (user_settings_parameter_struct.currentDetectionAddress)
     ed6:	7be3      	ldrb	r3, [r4, #15]
		return true;
     ed8:	2401      	movs	r4, #1
		if (user_settings_parameter_struct.currentDetectionAddress)
     eda:	2b00      	cmp	r3, #0
     edc:	d001      	beq.n	ee2 <setUnderloadPer+0x32>
			calcCurrentValues();
     ede:	4b07      	ldr	r3, [pc, #28]	; (efc <setUnderloadPer+0x4c>)
     ee0:	4798      	blx	r3
}
     ee2:	0020      	movs	r0, r4
     ee4:	bd70      	pop	{r4, r5, r6, pc}
     ee6:	46c0      	nop			; (mov r8, r8)
     ee8:	200005b0 	.word	0x200005b0
     eec:	20000538 	.word	0x20000538
     ef0:	0000c3c1 	.word	0x0000c3c1
     ef4:	00009701 	.word	0x00009701
     ef8:	000096d5 	.word	0x000096d5
     efc:	00000ded 	.word	0x00000ded

00000f00 <setNormalLoadValue>:

void setNormalLoadValue(uint32_t normalVal)
{
     f00:	b510      	push	{r4, lr}
	user_settings_parameter_struct.normalLoadAddress = normalVal;
     f02:	4907      	ldr	r1, [pc, #28]	; (f20 <setNormalLoadValue+0x20>)
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     f04:	4c07      	ldr	r4, [pc, #28]	; (f24 <setNormalLoadValue+0x24>)
     f06:	222c      	movs	r2, #44	; 0x2c
	user_settings_parameter_struct.normalLoadAddress = normalVal;
     f08:	6108      	str	r0, [r1, #16]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     f0a:	4b07      	ldr	r3, [pc, #28]	; (f28 <setNormalLoadValue+0x28>)
     f0c:	0020      	movs	r0, r4
     f0e:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     f10:	0021      	movs	r1, r4
     f12:	4b06      	ldr	r3, [pc, #24]	; (f2c <setNormalLoadValue+0x2c>)
     f14:	2017      	movs	r0, #23
     f16:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     f18:	4b05      	ldr	r3, [pc, #20]	; (f30 <setNormalLoadValue+0x30>)
     f1a:	4798      	blx	r3
}
     f1c:	bd10      	pop	{r4, pc}
     f1e:	46c0      	nop			; (mov r8, r8)
     f20:	200005b0 	.word	0x200005b0
     f24:	20000538 	.word	0x20000538
     f28:	0000c3c1 	.word	0x0000c3c1
     f2c:	00009701 	.word	0x00009701
     f30:	000096d5 	.word	0x000096d5

00000f34 <setCurrentDetection>:

void setCurrentDetection(bool cValue)
{
     f34:	b510      	push	{r4, lr}
	user_settings_parameter_struct.currentDetectionAddress = cValue;
     f36:	4907      	ldr	r1, [pc, #28]	; (f54 <setCurrentDetection+0x20>)
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     f38:	4c07      	ldr	r4, [pc, #28]	; (f58 <setCurrentDetection+0x24>)
     f3a:	222c      	movs	r2, #44	; 0x2c
	user_settings_parameter_struct.currentDetectionAddress = cValue;
     f3c:	73c8      	strb	r0, [r1, #15]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     f3e:	4b07      	ldr	r3, [pc, #28]	; (f5c <setCurrentDetection+0x28>)
     f40:	0020      	movs	r0, r4
     f42:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     f44:	0021      	movs	r1, r4
     f46:	4b06      	ldr	r3, [pc, #24]	; (f60 <setCurrentDetection+0x2c>)
     f48:	2017      	movs	r0, #23
     f4a:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     f4c:	4b05      	ldr	r3, [pc, #20]	; (f64 <setCurrentDetection+0x30>)
     f4e:	4798      	blx	r3
}
     f50:	bd10      	pop	{r4, pc}
     f52:	46c0      	nop			; (mov r8, r8)
     f54:	200005b0 	.word	0x200005b0
     f58:	20000538 	.word	0x20000538
     f5c:	0000c3c1 	.word	0x0000c3c1
     f60:	00009701 	.word	0x00009701
     f64:	000096d5 	.word	0x000096d5

00000f68 <saveStarDeltaTimer>:
	strcpy(deviceID,factory_settings_parameter_struct.DeviceID_ee);
	return deviceID;
}

void saveStarDeltaTimer(uint16_t StartDeltaTime)
{
     f68:	b510      	push	{r4, lr}
	user_settings_parameter_struct.starDeltaTimerAddress = StartDeltaTime;
     f6a:	4907      	ldr	r1, [pc, #28]	; (f88 <saveStarDeltaTimer+0x20>)
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     f6c:	4c07      	ldr	r4, [pc, #28]	; (f8c <saveStarDeltaTimer+0x24>)
     f6e:	222c      	movs	r2, #44	; 0x2c
	user_settings_parameter_struct.starDeltaTimerAddress = StartDeltaTime;
     f70:	80c8      	strh	r0, [r1, #6]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     f72:	4b07      	ldr	r3, [pc, #28]	; (f90 <saveStarDeltaTimer+0x28>)
     f74:	0020      	movs	r0, r4
     f76:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     f78:	0021      	movs	r1, r4
     f7a:	4b06      	ldr	r3, [pc, #24]	; (f94 <saveStarDeltaTimer+0x2c>)
     f7c:	2017      	movs	r0, #23
     f7e:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     f80:	4b05      	ldr	r3, [pc, #20]	; (f98 <saveStarDeltaTimer+0x30>)
     f82:	4798      	blx	r3
}
     f84:	bd10      	pop	{r4, pc}
     f86:	46c0      	nop			; (mov r8, r8)
     f88:	200005b0 	.word	0x200005b0
     f8c:	20000538 	.word	0x20000538
     f90:	0000c3c1 	.word	0x0000c3c1
     f94:	00009701 	.word	0x00009701
     f98:	000096d5 	.word	0x000096d5

00000f9c <saveEventStageSettings>:

void saveEventStageSettings(uint8_t data)
{
     f9c:	b510      	push	{r4, lr}
	user_settings_parameter_struct.eventStageAddress = data;
     f9e:	4907      	ldr	r1, [pc, #28]	; (fbc <saveEventStageSettings+0x20>)
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     fa0:	4c07      	ldr	r4, [pc, #28]	; (fc0 <saveEventStageSettings+0x24>)
     fa2:	222c      	movs	r2, #44	; 0x2c
	user_settings_parameter_struct.eventStageAddress = data;
     fa4:	7208      	strb	r0, [r1, #8]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
     fa6:	4b07      	ldr	r3, [pc, #28]	; (fc4 <saveEventStageSettings+0x28>)
     fa8:	0020      	movs	r0, r4
     faa:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
     fac:	0021      	movs	r1, r4
     fae:	4b06      	ldr	r3, [pc, #24]	; (fc8 <saveEventStageSettings+0x2c>)
     fb0:	2017      	movs	r0, #23
     fb2:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
     fb4:	4b05      	ldr	r3, [pc, #20]	; (fcc <saveEventStageSettings+0x30>)
     fb6:	4798      	blx	r3
}
     fb8:	bd10      	pop	{r4, pc}
     fba:	46c0      	nop			; (mov r8, r8)
     fbc:	200005b0 	.word	0x200005b0
     fc0:	20000538 	.word	0x20000538
     fc4:	0000c3c1 	.word	0x0000c3c1
     fc8:	00009701 	.word	0x00009701
     fcc:	000096d5 	.word	0x000096d5

00000fd0 <isAdmin>:

bool isAdmin(char *number)
{
     fd0:	b570      	push	{r4, r5, r6, lr}
     fd2:	0006      	movs	r6, r0
	for (uint8_t i=0;i<5;i++)
     fd4:	2400      	movs	r4, #0
{
     fd6:	b086      	sub	sp, #24
	{
		struct mobile_no_struct mobile_no;
		memset(page_data, '\0', sizeof(page_data));
     fd8:	4d0e      	ldr	r5, [pc, #56]	; (1014 <isAdmin+0x44>)
     fda:	223c      	movs	r2, #60	; 0x3c
     fdc:	2100      	movs	r1, #0
     fde:	4b0e      	ldr	r3, [pc, #56]	; (1018 <isAdmin+0x48>)
     fe0:	0028      	movs	r0, r5
     fe2:	4798      	blx	r3
		eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE+i, page_data);
     fe4:	0029      	movs	r1, r5
     fe6:	4b0d      	ldr	r3, [pc, #52]	; (101c <isAdmin+0x4c>)
     fe8:	0020      	movs	r0, r4
     fea:	4798      	blx	r3
		memcpy(&mobile_no,page_data,sizeof(mobile_no));
     fec:	0029      	movs	r1, r5
     fee:	4b0c      	ldr	r3, [pc, #48]	; (1020 <isAdmin+0x50>)
     ff0:	2218      	movs	r2, #24
     ff2:	4668      	mov	r0, sp
     ff4:	4798      	blx	r3
		
		if (strstr(number,mobile_no.mobile_no_ee))
     ff6:	a901      	add	r1, sp, #4
     ff8:	0030      	movs	r0, r6
     ffa:	4b0a      	ldr	r3, [pc, #40]	; (1024 <isAdmin+0x54>)
     ffc:	4798      	blx	r3
     ffe:	2800      	cmp	r0, #0
    1000:	d002      	beq.n	1008 <isAdmin+0x38>
		{
			return true;
    1002:	2001      	movs	r0, #1
		}
	}
	return false;
}
    1004:	b006      	add	sp, #24
    1006:	bd70      	pop	{r4, r5, r6, pc}
	for (uint8_t i=0;i<5;i++)
    1008:	3401      	adds	r4, #1
    100a:	b2e4      	uxtb	r4, r4
    100c:	2c05      	cmp	r4, #5
    100e:	d1e3      	bne.n	fd8 <isAdmin+0x8>
    1010:	e7f8      	b.n	1004 <isAdmin+0x34>
    1012:	46c0      	nop			; (mov r8, r8)
    1014:	20000538 	.word	0x20000538
    1018:	0000c3f7 	.word	0x0000c3f7
    101c:	00009679 	.word	0x00009679
    1020:	0000c3c1 	.word	0x0000c3c1
    1024:	0000c6b7 	.word	0x0000c6b7

00001028 <setPrimaryNumberIndex>:


void setPrimaryNumberIndex(uint8_t index)
{
    1028:	b510      	push	{r4, lr}
	user_count_struct.primaryNumberIndex = index;
    102a:	4b07      	ldr	r3, [pc, #28]	; (1048 <setPrimaryNumberIndex+0x20>)
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    102c:	4c07      	ldr	r4, [pc, #28]	; (104c <setPrimaryNumberIndex+0x24>)
    102e:	222c      	movs	r2, #44	; 0x2c
	user_count_struct.primaryNumberIndex = index;
    1030:	7118      	strb	r0, [r3, #4]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1032:	4907      	ldr	r1, [pc, #28]	; (1050 <setPrimaryNumberIndex+0x28>)
    1034:	0020      	movs	r0, r4
    1036:	4b07      	ldr	r3, [pc, #28]	; (1054 <setPrimaryNumberIndex+0x2c>)
    1038:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    103a:	0021      	movs	r1, r4
    103c:	4b06      	ldr	r3, [pc, #24]	; (1058 <setPrimaryNumberIndex+0x30>)
    103e:	2017      	movs	r0, #23
    1040:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    1042:	4b06      	ldr	r3, [pc, #24]	; (105c <setPrimaryNumberIndex+0x34>)
    1044:	4798      	blx	r3
}
    1046:	bd10      	pop	{r4, pc}
    1048:	20000574 	.word	0x20000574
    104c:	20000538 	.word	0x20000538
    1050:	200005b0 	.word	0x200005b0
    1054:	0000c3c1 	.word	0x0000c3c1
    1058:	00009701 	.word	0x00009701
    105c:	000096d5 	.word	0x000096d5

00001060 <setSecondaryNumberIndex>:

void setSecondaryNumberIndex(uint8_t index)
{
    1060:	b510      	push	{r4, lr}
	user_count_struct.secondaryNumberIndex = index;
    1062:	4b07      	ldr	r3, [pc, #28]	; (1080 <setSecondaryNumberIndex+0x20>)
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    1064:	4c07      	ldr	r4, [pc, #28]	; (1084 <setSecondaryNumberIndex+0x24>)
    1066:	222c      	movs	r2, #44	; 0x2c
	user_count_struct.secondaryNumberIndex = index;
    1068:	7158      	strb	r0, [r3, #5]
	memcpy(page_data,&user_settings_parameter_struct,sizeof(user_settings_parameter_struct));
    106a:	4907      	ldr	r1, [pc, #28]	; (1088 <setSecondaryNumberIndex+0x28>)
    106c:	0020      	movs	r0, r4
    106e:	4b07      	ldr	r3, [pc, #28]	; (108c <setSecondaryNumberIndex+0x2c>)
    1070:	4798      	blx	r3
	eeprom_emulator_write_page(USER_SETTING_PARAMETERS_PAGE, page_data);
    1072:	0021      	movs	r1, r4
    1074:	4b06      	ldr	r3, [pc, #24]	; (1090 <setSecondaryNumberIndex+0x30>)
    1076:	2017      	movs	r0, #23
    1078:	4798      	blx	r3
	eeprom_emulator_commit_page_buffer();
    107a:	4b06      	ldr	r3, [pc, #24]	; (1094 <setSecondaryNumberIndex+0x34>)
    107c:	4798      	blx	r3
}
    107e:	bd10      	pop	{r4, pc}
    1080:	20000574 	.word	0x20000574
    1084:	20000538 	.word	0x20000538
    1088:	200005b0 	.word	0x200005b0
    108c:	0000c3c1 	.word	0x0000c3c1
    1090:	00009701 	.word	0x00009701
    1094:	000096d5 	.word	0x000096d5

00001098 <addPrimaryIndexedNumber>:

bool addPrimaryIndexedNumber(char *number)
{
    1098:	b570      	push	{r4, r5, r6, lr}
	//checkUserExists would return a 1 based index,starting at 1 and not at 0
	uint8_t index = checkExists(number);
    109a:	4b0a      	ldr	r3, [pc, #40]	; (10c4 <addPrimaryIndexedNumber+0x2c>)
{
    109c:	0006      	movs	r6, r0
	uint8_t index = checkExists(number);
    109e:	4798      	blx	r3

	uint8_t newPrimaryIndex=0xFF;
	if(index >= user_count_struct.total_user_no_count)								//the numebr does not exists, need to add it
    10a0:	4d09      	ldr	r5, [pc, #36]	; (10c8 <addPrimaryIndexedNumber+0x30>)
	uint8_t index = checkExists(number);
    10a2:	0004      	movs	r4, r0
	if(index >= user_count_struct.total_user_no_count)								//the numebr does not exists, need to add it
    10a4:	786b      	ldrb	r3, [r5, #1]
    10a6:	4283      	cmp	r3, r0
    10a8:	d803      	bhi.n	10b2 <addPrimaryIndexedNumber+0x1a>
	{
		newPrimaryIndex = user_count_struct.current_user_no_count;
		addNumber(number);
    10aa:	0030      	movs	r0, r6
    10ac:	4b07      	ldr	r3, [pc, #28]	; (10cc <addPrimaryIndexedNumber+0x34>)
		newPrimaryIndex = user_count_struct.current_user_no_count;
    10ae:	78ac      	ldrb	r4, [r5, #2]
		addNumber(number);
    10b0:	4798      	blx	r3
	else if(index<user_count_struct.total_user_no_count)
	{
		newPrimaryIndex = index;
	}

	if(newPrimaryIndex < user_count_struct.total_user_no_count)
    10b2:	786b      	ldrb	r3, [r5, #1]
	{
		setPrimaryNumberIndex(newPrimaryIndex);
		return true;
	}

	return false;
    10b4:	2000      	movs	r0, #0
	if(newPrimaryIndex < user_count_struct.total_user_no_count)
    10b6:	42a3      	cmp	r3, r4
    10b8:	d903      	bls.n	10c2 <addPrimaryIndexedNumber+0x2a>
		setPrimaryNumberIndex(newPrimaryIndex);
    10ba:	0020      	movs	r0, r4
    10bc:	4b04      	ldr	r3, [pc, #16]	; (10d0 <addPrimaryIndexedNumber+0x38>)
    10be:	4798      	blx	r3
		return true;
    10c0:	2001      	movs	r0, #1
}
    10c2:	bd70      	pop	{r4, r5, r6, pc}
    10c4:	00000849 	.word	0x00000849
    10c8:	20000574 	.word	0x20000574
    10cc:	00000901 	.word	0x00000901
    10d0:	00001029 	.word	0x00001029

000010d4 <addSecondaryIndexedNumber>:

bool addSecondaryIndexedNumber(char *number)
{
    10d4:	b570      	push	{r4, r5, r6, lr}
	//check if any 2 numbers are present in system one of which would be primary, than only allow to add secondary number
	if(user_count_struct.current_user_no_count<2)
    10d6:	4d0c      	ldr	r5, [pc, #48]	; (1108 <addSecondaryIndexedNumber+0x34>)
{
    10d8:	0006      	movs	r6, r0
	if(user_count_struct.current_user_no_count<2)
    10da:	78ab      	ldrb	r3, [r5, #2]
    10dc:	2b01      	cmp	r3, #1
    10de:	d801      	bhi.n	10e4 <addSecondaryIndexedNumber+0x10>
	return false;
    10e0:	2000      	movs	r0, #0
	{
		setSecondaryNumberIndex(newSecondaryIndex);
		return true;
	}
	return false;
}
    10e2:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t index = checkExists(number);
    10e4:	4b09      	ldr	r3, [pc, #36]	; (110c <addSecondaryIndexedNumber+0x38>)
    10e6:	4798      	blx	r3
	if(index >= user_count_struct.total_user_no_count)								//number not present, need to add the number
    10e8:	786b      	ldrb	r3, [r5, #1]
	uint8_t index = checkExists(number);
    10ea:	0004      	movs	r4, r0
	if(index >= user_count_struct.total_user_no_count)								//number not present, need to add the number
    10ec:	4283      	cmp	r3, r0
    10ee:	d803      	bhi.n	10f8 <addSecondaryIndexedNumber+0x24>
		addNumber(number);
    10f0:	0030      	movs	r0, r6
    10f2:	4b07      	ldr	r3, [pc, #28]	; (1110 <addSecondaryIndexedNumber+0x3c>)
		newSecondaryIndex = user_count_struct.current_user_no_count;
    10f4:	78ac      	ldrb	r4, [r5, #2]
		addNumber(number);
    10f6:	4798      	blx	r3
	if(newSecondaryIndex < user_count_struct.total_user_no_count)
    10f8:	786b      	ldrb	r3, [r5, #1]
    10fa:	42a3      	cmp	r3, r4
    10fc:	d9f0      	bls.n	10e0 <addSecondaryIndexedNumber+0xc>
		setSecondaryNumberIndex(newSecondaryIndex);
    10fe:	0020      	movs	r0, r4
    1100:	4b04      	ldr	r3, [pc, #16]	; (1114 <addSecondaryIndexedNumber+0x40>)
    1102:	4798      	blx	r3
		return true;
    1104:	2001      	movs	r0, #1
    1106:	e7ec      	b.n	10e2 <addSecondaryIndexedNumber+0xe>
    1108:	20000574 	.word	0x20000574
    110c:	00000849 	.word	0x00000849
    1110:	00000901 	.word	0x00000901
    1114:	00001061 	.word	0x00001061

00001118 <gsm_timer_callback>:
 *
 *  \param[in]  timer  ID of the timer that has expired.
 */
static void gsm_timer_callback(TimerHandle_t timer)
{
}
    1118:	4770      	bx	lr

0000111a <gsm_ring_detect_pin_callback>:
}

static void gsm_ring_detect_pin_callback(void)
{
	
}
    111a:	4770      	bx	lr

0000111c <gsm_rx_handler>:
{
    111c:	b513      	push	{r0, r1, r4, lr}
	if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) 
    111e:	4b0a      	ldr	r3, [pc, #40]	; (1148 <gsm_rx_handler+0x2c>)
    1120:	7e1a      	ldrb	r2, [r3, #24]
    1122:	0752      	lsls	r2, r2, #29
    1124:	d505      	bpl.n	1132 <gsm_rx_handler+0x16>
		uint8_t rx_error = usart_hw->STATUS.reg &
    1126:	2106      	movs	r1, #6
    1128:	8b5a      	ldrh	r2, [r3, #26]
    112a:	400a      	ands	r2, r1
		if (rx_error) 
    112c:	d002      	beq.n	1134 <gsm_rx_handler+0x18>
			usart_hw->STATUS.reg = rx_error;
    112e:	b292      	uxth	r2, r2
    1130:	835a      	strh	r2, [r3, #26]
}
    1132:	bd13      	pop	{r0, r1, r4, pc}
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1134:	4669      	mov	r1, sp
    1136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
    1138:	4804      	ldr	r0, [pc, #16]	; (114c <gsm_rx_handler+0x30>)
			uint8_t data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    113a:	3107      	adds	r1, #7
    113c:	700b      	strb	r3, [r1, #0]
			xQueueSendFromISR(gsm_rx_queue, &data, NULL);
    113e:	4c04      	ldr	r4, [pc, #16]	; (1150 <gsm_rx_handler+0x34>)
    1140:	0013      	movs	r3, r2
    1142:	6800      	ldr	r0, [r0, #0]
    1144:	47a0      	blx	r4
}
    1146:	e7f4      	b.n	1132 <gsm_rx_handler+0x16>
    1148:	42001400 	.word	0x42001400
    114c:	20000224 	.word	0x20000224
    1150:	00007641 	.word	0x00007641

00001154 <Flush_RX_Buffer>:
{
    1154:	b507      	push	{r0, r1, r2, lr}
		xStatus=xQueueReceive(gsm_rx_queue,&ucharTemp_Value,0);
    1156:	466b      	mov	r3, sp
    1158:	1dd9      	adds	r1, r3, #7
    115a:	4b04      	ldr	r3, [pc, #16]	; (116c <Flush_RX_Buffer+0x18>)
    115c:	2200      	movs	r2, #0
    115e:	6818      	ldr	r0, [r3, #0]
    1160:	4b03      	ldr	r3, [pc, #12]	; (1170 <Flush_RX_Buffer+0x1c>)
    1162:	4798      	blx	r3
		if (xStatus==errQUEUE_EMPTY)
    1164:	2800      	cmp	r0, #0
    1166:	d1f6      	bne.n	1156 <Flush_RX_Buffer+0x2>
}
    1168:	bd07      	pop	{r0, r1, r2, pc}
    116a:	46c0      	nop			; (mov r8, r8)
    116c:	20000224 	.word	0x20000224
    1170:	000076f9 	.word	0x000076f9

00001174 <gsm_init>:

void gsm_init(void)	
{
    1174:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    1176:	2501      	movs	r5, #1
	config->powersave  = false;
    1178:	2400      	movs	r4, #0
    117a:	b097      	sub	sp, #92	; 0x5c
	config->input_pull = PORT_PIN_PULL_UP;
    117c:	a902      	add	r1, sp, #8
	struct port_config gsm_pin_config;
	port_get_config_defaults(&gsm_pin_config);
	
	/* Configure pin to control the GSM module sleep state */
	gsm_pin_config.direction = PORT_PIN_DIR_OUTPUT;
	port_pin_set_config(GSM_DTR_PIN, &gsm_pin_config);
    117e:	2014      	movs	r0, #20
    1180:	4b56      	ldr	r3, [pc, #344]	; (12dc <gsm_init+0x168>)
    1182:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
    1184:	708c      	strb	r4, [r1, #2]
	gsm_pin_config.direction = PORT_PIN_DIR_OUTPUT;
    1186:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(GSM_DTR_PIN, &gsm_pin_config);
    1188:	4798      	blx	r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    118a:	2280      	movs	r2, #128	; 0x80
    118c:	4b54      	ldr	r3, [pc, #336]	; (12e0 <gsm_init+0x16c>)
	port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
	
	//////////////////////////////////////////////////////////////////////////
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    118e:	ae03      	add	r6, sp, #12
    1190:	0352      	lsls	r2, r2, #13
    1192:	615a      	str	r2, [r3, #20]
    1194:	0030      	movs	r0, r6
    1196:	4b53      	ldr	r3, [pc, #332]	; (12e4 <gsm_init+0x170>)
    1198:	4798      	blx	r3
	config_extint_chan.gpio_pin = GSM_RING_EIC_PIN;
    119a:	2331      	movs	r3, #49	; 0x31
    119c:	9303      	str	r3, [sp, #12]
	config_extint_chan.gpio_pin_mux = GSM_RING_EIC_MUX;
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    119e:	3b2f      	subs	r3, #47	; 0x2f
    11a0:	72f3      	strb	r3, [r6, #11]
	extint_chan_set_config(GSM_RING_EIC_LINE, &config_extint_chan);
    11a2:	0031      	movs	r1, r6
    11a4:	0028      	movs	r0, r5
    11a6:	4b50      	ldr	r3, [pc, #320]	; (12e8 <gsm_init+0x174>)
	config_extint_chan.gpio_pin_mux = GSM_RING_EIC_MUX;
    11a8:	6074      	str	r4, [r6, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    11aa:	7235      	strb	r5, [r6, #8]
	extint_chan_set_config(GSM_RING_EIC_LINE, &config_extint_chan);
    11ac:	4798      	blx	r3
		
	extint_chan_enable_callback(GSM_RING_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    11ae:	0021      	movs	r1, r4
    11b0:	4b4e      	ldr	r3, [pc, #312]	; (12ec <gsm_init+0x178>)
    11b2:	0028      	movs	r0, r5
    11b4:	4798      	blx	r3
	extint_register_callback(gsm_ring_detect_pin_callback,GSM_RING_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    11b6:	4b4e      	ldr	r3, [pc, #312]	; (12f0 <gsm_init+0x17c>)
    11b8:	0022      	movs	r2, r4
    11ba:	0029      	movs	r1, r5
    11bc:	484d      	ldr	r0, [pc, #308]	; (12f4 <gsm_init+0x180>)
    11be:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	
	gsm_rx_queue = xQueueCreate(240, sizeof(uint8_t));
    11c0:	0022      	movs	r2, r4
    11c2:	0029      	movs	r1, r5
    11c4:	4e4c      	ldr	r6, [pc, #304]	; (12f8 <gsm_init+0x184>)
    11c6:	20f0      	movs	r0, #240	; 0xf0
    11c8:	47b0      	blx	r6
    11ca:	4b4c      	ldr	r3, [pc, #304]	; (12fc <gsm_init+0x188>)
	gsm_cmd_timeout_timer = xTimerCreate((const char *)"GSM Timeout",GSM_TIMEOUT_PERIOD_TICKS, pdFALSE, NULL, gsm_timer_callback);
    11cc:	0022      	movs	r2, r4
	gsm_rx_queue = xQueueCreate(240, sizeof(uint8_t));
    11ce:	6018      	str	r0, [r3, #0]
	gsm_cmd_timeout_timer = xTimerCreate((const char *)"GSM Timeout",GSM_TIMEOUT_PERIOD_TICKS, pdFALSE, NULL, gsm_timer_callback);
    11d0:	4b4b      	ldr	r3, [pc, #300]	; (1300 <gsm_init+0x18c>)
    11d2:	494c      	ldr	r1, [pc, #304]	; (1304 <gsm_init+0x190>)
    11d4:	9300      	str	r3, [sp, #0]
    11d6:	484c      	ldr	r0, [pc, #304]	; (1308 <gsm_init+0x194>)
    11d8:	0023      	movs	r3, r4
    11da:	4f4c      	ldr	r7, [pc, #304]	; (130c <gsm_init+0x198>)
    11dc:	47b8      	blx	r7
    11de:	4b4c      	ldr	r3, [pc, #304]	; (1310 <gsm_init+0x19c>)
	vSemaphoreCreateBinary(gsm_busy_semaphore);
    11e0:	2203      	movs	r2, #3
	gsm_cmd_timeout_timer = xTimerCreate((const char *)"GSM Timeout",GSM_TIMEOUT_PERIOD_TICKS, pdFALSE, NULL, gsm_timer_callback);
    11e2:	6018      	str	r0, [r3, #0]
	vSemaphoreCreateBinary(gsm_busy_semaphore);
    11e4:	0021      	movs	r1, r4
    11e6:	0028      	movs	r0, r5
    11e8:	47b0      	blx	r6
    11ea:	4b4a      	ldr	r3, [pc, #296]	; (1314 <gsm_init+0x1a0>)
    11ec:	6018      	str	r0, [r3, #0]
    11ee:	42a0      	cmp	r0, r4
    11f0:	d004      	beq.n	11fc <gsm_init+0x88>
    11f2:	0023      	movs	r3, r4
    11f4:	0022      	movs	r2, r4
    11f6:	0021      	movs	r1, r4
    11f8:	4c47      	ldr	r4, [pc, #284]	; (1318 <gsm_init+0x1a4>)
    11fa:	47a0      	blx	r4
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
	config->parity           = USART_PARITY_NONE;
    11fc:	22ff      	movs	r2, #255	; 0xff
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    11fe:	211d      	movs	r1, #29
	config->data_order       = USART_DATAORDER_LSB;
    1200:	ac06      	add	r4, sp, #24
	config->receiver_enable  = true;
    1202:	4469      	add	r1, sp
	config->parity           = USART_PARITY_NONE;
    1204:	8122      	strh	r2, [r4, #8]
	config->receiver_enable  = true;
    1206:	3afe      	subs	r2, #254	; 0xfe
    1208:	77ca      	strb	r2, [r1, #31]
	config->transmitter_enable = true;
    120a:	211e      	movs	r1, #30
	config->data_order       = USART_DATAORDER_LSB;
    120c:	2380      	movs	r3, #128	; 0x80
	config->transmitter_enable = true;
    120e:	4469      	add	r1, sp
    1210:	77ca      	strb	r2, [r1, #31]
	config->data_order       = USART_DATAORDER_LSB;
    1212:	05db      	lsls	r3, r3, #23
	config->clock_polarity_inverted = false;
    1214:	211f      	movs	r1, #31
	config->data_order       = USART_DATAORDER_LSB;
    1216:	9306      	str	r3, [sp, #24]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1218:	2300      	movs	r3, #0
	config->clock_polarity_inverted = false;
    121a:	4469      	add	r1, sp
    121c:	77cb      	strb	r3, [r1, #31]
	config->use_external_clock = false;
    121e:	a908      	add	r1, sp, #32
    1220:	77cb      	strb	r3, [r1, #31]
	config->ext_clock_freq   = 0;
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
	config->generator_source = GCLK_GENERATOR_0;
    1222:	2145      	movs	r1, #69	; 0x45
    1224:	4469      	add	r1, sp
    1226:	700b      	strb	r3, [r1, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1228:	6063      	str	r3, [r4, #4]
	config->stopbits         = USART_STOPBITS_1;
    122a:	72a3      	strb	r3, [r4, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    122c:	72e3      	strb	r3, [r4, #11]
	config->ext_clock_freq   = 0;
    122e:	62a3      	str	r3, [r4, #40]	; 0x28
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1230:	6163      	str	r3, [r4, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1232:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1234:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1236:	7623      	strb	r3, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1238:	7723      	strb	r3, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    123a:	7663      	strb	r3, [r4, #25]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    123c:	7763      	strb	r3, [r4, #29]
	
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate		= GSM_BAUDRATE;
    123e:	23e1      	movs	r3, #225	; 0xe1
    1240:	025b      	lsls	r3, r3, #9
    1242:	6223      	str	r3, [r4, #32]
	config_usart.mux_setting	= GSM_SERCOM_MUX;
    1244:	2380      	movs	r3, #128	; 0x80
    1246:	035b      	lsls	r3, r3, #13
    1248:	60e3      	str	r3, [r4, #12]
	config_usart.pinmux_pad0	= GSM_SERCOM_PAD0_MUX;
    124a:	4b34      	ldr	r3, [pc, #208]	; (131c <gsm_init+0x1a8>)
	config->receive_pulse_length                    = 19;
    124c:	2113      	movs	r1, #19
    124e:	6323      	str	r3, [r4, #48]	; 0x30
	config_usart.pinmux_pad1	= GSM_SERCOM_PAD1_MUX;
    1250:	4b33      	ldr	r3, [pc, #204]	; (1320 <gsm_init+0x1ac>)
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1252:	271f      	movs	r7, #31
    1254:	6363      	str	r3, [r4, #52]	; 0x34
	config_usart.pinmux_pad2	= GSM_SERCOM_PAD2_MUX;
    1256:	2301      	movs	r3, #1
    1258:	425b      	negs	r3, r3
    125a:	63a3      	str	r3, [r4, #56]	; 0x38
	config_usart.pinmux_pad3	= GSM_SERCOM_PAD3_MUX;
    125c:	63e3      	str	r3, [r4, #60]	; 0x3c
	config_usart.run_in_standby = true;
    125e:	ab11      	add	r3, sp, #68	; 0x44
    1260:	76a1      	strb	r1, [r4, #26]
    1262:	701a      	strb	r2, [r3, #0]
	while (usart_init(&gsm_usart,GSM_SERCOM, &config_usart) != STATUS_OK)
    1264:	4d2f      	ldr	r5, [pc, #188]	; (1324 <gsm_init+0x1b0>)
    1266:	4b30      	ldr	r3, [pc, #192]	; (1328 <gsm_init+0x1b4>)
    1268:	0022      	movs	r2, r4
    126a:	4930      	ldr	r1, [pc, #192]	; (132c <gsm_init+0x1b8>)
    126c:	0028      	movs	r0, r5
    126e:	4798      	blx	r3
    1270:	4b2f      	ldr	r3, [pc, #188]	; (1330 <gsm_init+0x1bc>)
    1272:	2800      	cmp	r0, #0
    1274:	d11b      	bne.n	12ae <gsm_init+0x13a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1276:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1278:	0020      	movs	r0, r4
    127a:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    127c:	231f      	movs	r3, #31
    127e:	4018      	ands	r0, r3
    1280:	3b1e      	subs	r3, #30
    1282:	4083      	lsls	r3, r0
    1284:	4a2b      	ldr	r2, [pc, #172]	; (1334 <gsm_init+0x1c0>)
    1286:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1288:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    128a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    128c:	2b00      	cmp	r3, #0
    128e:	d1fc      	bne.n	128a <gsm_init+0x116>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1290:	6822      	ldr	r2, [r4, #0]
    1292:	3302      	adds	r3, #2
    1294:	4313      	orrs	r3, r2
    1296:	6023      	str	r3, [r4, #0]
	{
		usart_reset(&gsm_usart);
	}
	usart_enable(&gsm_usart);
	_sercom_set_handler(_sercom_get_sercom_inst_index(GSM_SERCOM),gsm_rx_handler);
    1298:	4c24      	ldr	r4, [pc, #144]	; (132c <gsm_init+0x1b8>)
    129a:	4b27      	ldr	r3, [pc, #156]	; (1338 <gsm_init+0x1c4>)
    129c:	0020      	movs	r0, r4
    129e:	4798      	blx	r3
    12a0:	4926      	ldr	r1, [pc, #152]	; (133c <gsm_init+0x1c8>)
    12a2:	4b27      	ldr	r3, [pc, #156]	; (1340 <gsm_init+0x1cc>)
    12a4:	4798      	blx	r3
	GSM_SERCOM->USART.INTENSET.reg=SERCOM_USART_INTFLAG_RXC;
    12a6:	2304      	movs	r3, #4
    12a8:	75a3      	strb	r3, [r4, #22]
}
    12aa:	b017      	add	sp, #92	; 0x5c
    12ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    12ae:	682e      	ldr	r6, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    12b0:	0030      	movs	r0, r6
    12b2:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    12b4:	2301      	movs	r3, #1
    12b6:	4038      	ands	r0, r7
    12b8:	4083      	lsls	r3, r0
    12ba:	4a22      	ldr	r2, [pc, #136]	; (1344 <gsm_init+0x1d0>)
    12bc:	67d3      	str	r3, [r2, #124]	; 0x7c
	SercomUsart *const usart_hw = &(module->hw->USART);
    12be:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    12c0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    12c2:	2b00      	cmp	r3, #0
    12c4:	d1fc      	bne.n	12c0 <gsm_init+0x14c>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    12c6:	2202      	movs	r2, #2
    12c8:	6833      	ldr	r3, [r6, #0]
    12ca:	4393      	bics	r3, r2
    12cc:	6033      	str	r3, [r6, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    12ce:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    12d0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    12d2:	2b00      	cmp	r3, #0
    12d4:	d1fc      	bne.n	12d0 <gsm_init+0x15c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Reset module */
	usart_hw->CTRLA.reg = SERCOM_USART_CTRLA_SWRST;
    12d6:	3301      	adds	r3, #1
    12d8:	6033      	str	r3, [r6, #0]
    12da:	e7c3      	b.n	1264 <gsm_init+0xf0>
    12dc:	00009345 	.word	0x00009345
    12e0:	41004400 	.word	0x41004400
    12e4:	00006a1d 	.word	0x00006a1d
    12e8:	00006a31 	.word	0x00006a31
    12ec:	00008e4d 	.word	0x00008e4d
    12f0:	00008e25 	.word	0x00008e25
    12f4:	0000111b 	.word	0x0000111b
    12f8:	0000749d 	.word	0x0000749d
    12fc:	20000224 	.word	0x20000224
    1300:	00001119 	.word	0x00001119
    1304:	00001388 	.word	0x00001388
    1308:	0000d113 	.word	0x0000d113
    130c:	00008459 	.word	0x00008459
    1310:	20000220 	.word	0x20000220
    1314:	2000021c 	.word	0x2000021c
    1318:	000074e5 	.word	0x000074e5
    131c:	00160002 	.word	0x00160002
    1320:	00170002 	.word	0x00170002
    1324:	200005e4 	.word	0x200005e4
    1328:	00008879 	.word	0x00008879
    132c:	42001400 	.word	0x42001400
    1330:	00008d99 	.word	0x00008d99
    1334:	e000e100 	.word	0xe000e100
    1338:	00006f9d 	.word	0x00006f9d
    133c:	0000111d 	.word	0x0000111d
    1340:	00008d61 	.word	0x00008d61
    1344:	e000e104 	.word	0xe000e104

00001348 <gsm_send_at_command>:

enum gsm_error gsm_send_at_command(const char *const atcommand,const char* aResponExit,const uint32_t aTimeoutMax,const uint8_t aLenOut, char *aResponOut)
{
    1348:	b5f0      	push	{r4, r5, r6, r7, lr}
    134a:	b089      	sub	sp, #36	; 0x24
    134c:	9304      	str	r3, [sp, #16]
	
	/* Try to acquire the command lock; if already busy with a command, abort */
	if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE) 
    134e:	4b41      	ldr	r3, [pc, #260]	; (1454 <gsm_send_at_command+0x10c>)
{
    1350:	9103      	str	r1, [sp, #12]
    1352:	0006      	movs	r6, r0
	if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE) 
    1354:	2101      	movs	r1, #1
    1356:	6818      	ldr	r0, [r3, #0]
    1358:	4b3f      	ldr	r3, [pc, #252]	; (1458 <gsm_send_at_command+0x110>)
{
    135a:	9205      	str	r2, [sp, #20]
	if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE) 
    135c:	4798      	blx	r3
	{
		return GSM_ERROR_OPERATION_IN_PROGRESS;
    135e:	2402      	movs	r4, #2
	if (xSemaphoreTake(gsm_busy_semaphore, 1) == pdFALSE) 
    1360:	2800      	cmp	r0, #0
    1362:	d071      	beq.n	1448 <gsm_send_at_command+0x100>
	/* Enable DTR and wait for the module to be ready to accept a command */
	//port_pin_set_output_level(GSM_DTR_PIN, GSM_DTR_PIN_ACTIVE);
	//vTaskDelay(100 / portTICK_PERIOD_MS);
	
	//////////////////////////////////////////////////////////////////////////
	Flush_RX_Buffer();
    1364:	4b3d      	ldr	r3, [pc, #244]	; (145c <gsm_send_at_command+0x114>)
    1366:	4798      	blx	r3
	//////////////////////////////////////////////////////////////////////////
	enum gsm_error err_no=GSM_ERROR_NONE;
	
	uint8_t u8tRx_Index=0;
	char u8tTemp_Char=0;
    1368:	230f      	movs	r3, #15
    136a:	2700      	movs	r7, #0
    136c:	aa04      	add	r2, sp, #16
    136e:	189b      	adds	r3, r3, r2
    1370:	701f      	strb	r7, [r3, #0]
	portBASE_TYPE xStatus;

	char *aDataBuffer = (char*) calloc(MAX_BUFFER_TMP,sizeof(char));
    1372:	2101      	movs	r1, #1
    1374:	20f0      	movs	r0, #240	; 0xf0
    1376:	4b3a      	ldr	r3, [pc, #232]	; (1460 <gsm_send_at_command+0x118>)
    1378:	4798      	blx	r3
    137a:	0005      	movs	r5, r0
	
	//buffer created???
	if (aDataBuffer == NULL)
	{
		//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
		return 0;
    137c:	0004      	movs	r4, r0
	if (aDataBuffer == NULL)
    137e:	42b8      	cmp	r0, r7
    1380:	d062      	beq.n	1448 <gsm_send_at_command+0x100>
	}

	//reset to all 0
	memset(aDataBuffer, '\0', MAX_BUFFER_TMP);
    1382:	22f0      	movs	r2, #240	; 0xf0
    1384:	0039      	movs	r1, r7
    1386:	4b37      	ldr	r3, [pc, #220]	; (1464 <gsm_send_at_command+0x11c>)
    1388:	4798      	blx	r3
	
	/* Send the command to the GSM module when it is ready */
	usart_write_buffer_wait(&gsm_usart, (uint8_t *)atcommand, strlen(atcommand));	
    138a:	4b37      	ldr	r3, [pc, #220]	; (1468 <gsm_send_at_command+0x120>)
    138c:	0030      	movs	r0, r6
    138e:	4798      	blx	r3
    1390:	0031      	movs	r1, r6
    1392:	b282      	uxth	r2, r0
    1394:	4b35      	ldr	r3, [pc, #212]	; (146c <gsm_send_at_command+0x124>)
    1396:	4836      	ldr	r0, [pc, #216]	; (1470 <gsm_send_at_command+0x128>)
    1398:	4798      	blx	r3
	
	/* Start the timeout timer to ensure a timely response from the module */
	xTimerChangePeriod(gsm_cmd_timeout_timer,(aTimeoutMax / portTICK_PERIOD_MS),portMAX_DELAY);
    139a:	2301      	movs	r3, #1
    139c:	4c35      	ldr	r4, [pc, #212]	; (1474 <gsm_send_at_command+0x12c>)
    139e:	425b      	negs	r3, r3
    13a0:	9300      	str	r3, [sp, #0]
    13a2:	4e35      	ldr	r6, [pc, #212]	; (1478 <gsm_send_at_command+0x130>)
    13a4:	003b      	movs	r3, r7
    13a6:	9a05      	ldr	r2, [sp, #20]
    13a8:	2104      	movs	r1, #4
    13aa:	6820      	ldr	r0, [r4, #0]
    13ac:	47b0      	blx	r6
	uint8_t u8tRx_Index=0;
    13ae:	003e      	movs	r6, r7
	
	while (true)
	{
		if(xTimerIsTimerActive(gsm_cmd_timeout_timer))
    13b0:	6820      	ldr	r0, [r4, #0]
    13b2:	4b32      	ldr	r3, [pc, #200]	; (147c <gsm_send_at_command+0x134>)
    13b4:	4798      	blx	r3
    13b6:	1e02      	subs	r2, r0, #0
    13b8:	d020      	beq.n	13fc <gsm_send_at_command+0xb4>
		{
			if (u8tRx_Index<240)
    13ba:	2eef      	cmp	r6, #239	; 0xef
    13bc:	d80e      	bhi.n	13dc <gsm_send_at_command+0x94>
			{
				xStatus=xQueueReceive(gsm_rx_queue,&u8tTemp_Char, 0);
    13be:	270f      	movs	r7, #15
    13c0:	ab04      	add	r3, sp, #16
    13c2:	18ff      	adds	r7, r7, r3
    13c4:	4b2e      	ldr	r3, [pc, #184]	; (1480 <gsm_send_at_command+0x138>)
    13c6:	2200      	movs	r2, #0
    13c8:	6818      	ldr	r0, [r3, #0]
    13ca:	0039      	movs	r1, r7
    13cc:	4b2d      	ldr	r3, [pc, #180]	; (1484 <gsm_send_at_command+0x13c>)
    13ce:	4798      	blx	r3
				if(xStatus!=errQUEUE_EMPTY)
    13d0:	2800      	cmp	r0, #0
    13d2:	d003      	beq.n	13dc <gsm_send_at_command+0x94>
				{
					aDataBuffer[u8tRx_Index] = u8tTemp_Char;
    13d4:	783b      	ldrb	r3, [r7, #0]
    13d6:	55ab      	strb	r3, [r5, r6]
					u8tRx_Index++;
    13d8:	3601      	adds	r6, #1
    13da:	b2f6      	uxtb	r6, r6
				}
			}
			if (aResponExit != NULL)
    13dc:	9b03      	ldr	r3, [sp, #12]
    13de:	4f2a      	ldr	r7, [pc, #168]	; (1488 <gsm_send_at_command+0x140>)
    13e0:	2b00      	cmp	r3, #0
    13e2:	d004      	beq.n	13ee <gsm_send_at_command+0xa6>
			{
				if (strstr((const char*)aDataBuffer, (const char*)aResponExit) != NULL)
    13e4:	0019      	movs	r1, r3
    13e6:	0028      	movs	r0, r5
    13e8:	47b8      	blx	r7
    13ea:	2800      	cmp	r0, #0
    13ec:	d12f      	bne.n	144e <gsm_send_at_command+0x106>
				{
					err_no = GSM_ERROR_NONE;
					break;
				}
			}
			if (strstr((const char*)aDataBuffer, (const char*)RESPONS_ERROR) != NULL)
    13ee:	4927      	ldr	r1, [pc, #156]	; (148c <gsm_send_at_command+0x144>)
    13f0:	0028      	movs	r0, r5
    13f2:	47b8      	blx	r7
    13f4:	2800      	cmp	r0, #0
    13f6:	d0db      	beq.n	13b0 <gsm_send_at_command+0x68>
			{
				err_no = GSM_ERROR_COMMAND_ERROR;
    13f8:	240b      	movs	r4, #11
    13fa:	e00b      	b.n	1414 <gsm_send_at_command+0xcc>
				break;
			}
		}
		else
		{
			xTimerStop(gsm_cmd_timeout_timer, portMAX_DELAY);
    13fc:	2301      	movs	r3, #1
    13fe:	425b      	negs	r3, r3
    1400:	9300      	str	r3, [sp, #0]
    1402:	2103      	movs	r1, #3
    1404:	0003      	movs	r3, r0
    1406:	6820      	ldr	r0, [r4, #0]
    1408:	4c1b      	ldr	r4, [pc, #108]	; (1478 <gsm_send_at_command+0x130>)
    140a:	47a0      	blx	r4
				err_no = GSM_ERROR_TIMEOUT;
				break;
			}
			else
			{
				err_no = GSM_ERROR_UNKWON;
    140c:	0034      	movs	r4, r6
    140e:	1e63      	subs	r3, r4, #1
    1410:	419c      	sbcs	r4, r3
    1412:	3407      	adds	r4, #7
			}
		}
	}
	
	//copy it to the out
	if ((aLenOut != 0) && (aResponOut != NULL) && (aLenOut > u8tRx_Index) && (err_no==GSM_ERROR_NONE))
    1414:	9b04      	ldr	r3, [sp, #16]
    1416:	2b00      	cmp	r3, #0
    1418:	d00c      	beq.n	1434 <gsm_send_at_command+0xec>
    141a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    141c:	2b00      	cmp	r3, #0
    141e:	d009      	beq.n	1434 <gsm_send_at_command+0xec>
    1420:	9b04      	ldr	r3, [sp, #16]
    1422:	42b3      	cmp	r3, r6
    1424:	d906      	bls.n	1434 <gsm_send_at_command+0xec>
    1426:	2c00      	cmp	r4, #0
    1428:	d104      	bne.n	1434 <gsm_send_at_command+0xec>
	{
		memcpy(aResponOut, aDataBuffer, u8tRx_Index *sizeof(uint8_t));
    142a:	0032      	movs	r2, r6
    142c:	0029      	movs	r1, r5
    142e:	980e      	ldr	r0, [sp, #56]	; 0x38
    1430:	4b17      	ldr	r3, [pc, #92]	; (1490 <gsm_send_at_command+0x148>)
    1432:	4798      	blx	r3
	}
	
	//port_pin_set_output_level(GSM_DTR_PIN, !GSM_DTR_PIN_ACTIVE);
	
	xSemaphoreGive(gsm_busy_semaphore);
    1434:	2300      	movs	r3, #0
    1436:	4807      	ldr	r0, [pc, #28]	; (1454 <gsm_send_at_command+0x10c>)
    1438:	001a      	movs	r2, r3
    143a:	0019      	movs	r1, r3
    143c:	6800      	ldr	r0, [r0, #0]
    143e:	4e15      	ldr	r6, [pc, #84]	; (1494 <gsm_send_at_command+0x14c>)
    1440:	47b0      	blx	r6
	free(aDataBuffer);
    1442:	0028      	movs	r0, r5
    1444:	4b14      	ldr	r3, [pc, #80]	; (1498 <gsm_send_at_command+0x150>)
    1446:	4798      	blx	r3
	return err_no;
}
    1448:	0020      	movs	r0, r4
    144a:	b009      	add	sp, #36	; 0x24
    144c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					err_no = GSM_ERROR_NONE;
    144e:	2400      	movs	r4, #0
    1450:	e7e0      	b.n	1414 <gsm_send_at_command+0xcc>
    1452:	46c0      	nop			; (mov r8, r8)
    1454:	2000021c 	.word	0x2000021c
    1458:	00007825 	.word	0x00007825
    145c:	00001155 	.word	0x00001155
    1460:	0000c2f5 	.word	0x0000c2f5
    1464:	0000c3f7 	.word	0x0000c3f7
    1468:	0000c687 	.word	0x0000c687
    146c:	00008b6d 	.word	0x00008b6d
    1470:	200005e4 	.word	0x200005e4
    1474:	20000220 	.word	0x20000220
    1478:	0000849d 	.word	0x0000849d
    147c:	00008715 	.word	0x00008715
    1480:	20000224 	.word	0x20000224
    1484:	000076f9 	.word	0x000076f9
    1488:	0000c6b7 	.word	0x0000c6b7
    148c:	0000d3f4 	.word	0x0000d3f4
    1490:	0000c3c1 	.word	0x0000c3c1
    1494:	000074e5 	.word	0x000074e5
    1498:	0000c389 	.word	0x0000c389

0000149c <gsm_check_module>:


enum gsm_error gsm_check_module(void)
{
	return gsm_send_at_command((const char*)("AT\r"),(const char*)RESPONS_OK,5000,0, NULL);
    149c:	2300      	movs	r3, #0
{
    149e:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT\r"),(const char*)RESPONS_OK,5000,0, NULL);
    14a0:	4a03      	ldr	r2, [pc, #12]	; (14b0 <gsm_check_module+0x14>)
    14a2:	9300      	str	r3, [sp, #0]
    14a4:	4903      	ldr	r1, [pc, #12]	; (14b4 <gsm_check_module+0x18>)
    14a6:	4c04      	ldr	r4, [pc, #16]	; (14b8 <gsm_check_module+0x1c>)
    14a8:	4804      	ldr	r0, [pc, #16]	; (14bc <gsm_check_module+0x20>)
    14aa:	47a0      	blx	r4
}
    14ac:	bd16      	pop	{r1, r2, r4, pc}
    14ae:	46c0      	nop			; (mov r8, r8)
    14b0:	00001388 	.word	0x00001388
    14b4:	0000d42f 	.word	0x0000d42f
    14b8:	00001349 	.word	0x00001349
    14bc:	0000d05f 	.word	0x0000d05f

000014c0 <gsm_is_network_registered>:
{
	return gsm_send_at_command((const char*)("AT+IFC=0,0\r"), (const char*)RESPONS_OK,5000,0, NULL);
}

enum gsm_error gsm_is_network_registered(void)
{
    14c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	enum gsm_error errHomeNw;
	enum gsm_error errRomNw;
	errHomeNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,1",5000,0, NULL);
    14c2:	2400      	movs	r4, #0
    14c4:	4e0a      	ldr	r6, [pc, #40]	; (14f0 <gsm_is_network_registered+0x30>)
    14c6:	9400      	str	r4, [sp, #0]
    14c8:	0023      	movs	r3, r4
    14ca:	4a0a      	ldr	r2, [pc, #40]	; (14f4 <gsm_is_network_registered+0x34>)
    14cc:	490a      	ldr	r1, [pc, #40]	; (14f8 <gsm_is_network_registered+0x38>)
    14ce:	0030      	movs	r0, r6
    14d0:	4d0a      	ldr	r5, [pc, #40]	; (14fc <gsm_is_network_registered+0x3c>)
    14d2:	47a8      	blx	r5
	if (errHomeNw==GSM_ERROR_NONE)
    14d4:	42a0      	cmp	r0, r4
    14d6:	d101      	bne.n	14dc <gsm_is_network_registered+0x1c>
	{
		return GSM_NETWORK_REGISTERED;	
    14d8:	2009      	movs	r0, #9
			{
				return GSM_NETWORK_NOT_REGISTERED;
			}
		}
	}
}
    14da:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
		errRomNw = gsm_send_at_command((const char*)("AT+CREG?\r"), (const char*)"+CREG: 0,5",5000,0, NULL);
    14dc:	9400      	str	r4, [sp, #0]
    14de:	0023      	movs	r3, r4
    14e0:	4a04      	ldr	r2, [pc, #16]	; (14f4 <gsm_is_network_registered+0x34>)
    14e2:	4907      	ldr	r1, [pc, #28]	; (1500 <gsm_is_network_registered+0x40>)
    14e4:	0030      	movs	r0, r6
    14e6:	47a8      	blx	r5
			if (errRomNw==GSM_ERROR_NONE)
    14e8:	2800      	cmp	r0, #0
    14ea:	d0f5      	beq.n	14d8 <gsm_is_network_registered+0x18>
				return GSM_NETWORK_NOT_REGISTERED;
    14ec:	200a      	movs	r0, #10
    14ee:	e7f4      	b.n	14da <gsm_is_network_registered+0x1a>
    14f0:	0000d12a 	.word	0x0000d12a
    14f4:	00001388 	.word	0x00001388
    14f8:	0000d11f 	.word	0x0000d11f
    14fc:	00001349 	.word	0x00001349
    1500:	0000d134 	.word	0x0000d134

00001504 <gsm_set_baudrate>:

enum gsm_error gsm_set_baudrate(void)
{
    1504:	b510      	push	{r4, lr}
    1506:	b088      	sub	sp, #32
	char baurate_at_command[20]={0};
    1508:	2214      	movs	r2, #20
    150a:	2100      	movs	r1, #0
    150c:	a803      	add	r0, sp, #12
    150e:	4b08      	ldr	r3, [pc, #32]	; (1530 <gsm_set_baudrate+0x2c>)
    1510:	4798      	blx	r3
		
	sprintf(baurate_at_command, "AT+IPR=%d\r",GSM_BAUDRATE);
    1512:	22e1      	movs	r2, #225	; 0xe1
    1514:	4907      	ldr	r1, [pc, #28]	; (1534 <gsm_set_baudrate+0x30>)
    1516:	0252      	lsls	r2, r2, #9
    1518:	a803      	add	r0, sp, #12
    151a:	4b07      	ldr	r3, [pc, #28]	; (1538 <gsm_set_baudrate+0x34>)
    151c:	4798      	blx	r3
	
	return gsm_send_at_command((const char*)(baurate_at_command), (const char*)RESPONS_OK,5000,0, NULL);
    151e:	2300      	movs	r3, #0
    1520:	4a06      	ldr	r2, [pc, #24]	; (153c <gsm_set_baudrate+0x38>)
    1522:	9300      	str	r3, [sp, #0]
    1524:	4906      	ldr	r1, [pc, #24]	; (1540 <gsm_set_baudrate+0x3c>)
    1526:	a803      	add	r0, sp, #12
    1528:	4c06      	ldr	r4, [pc, #24]	; (1544 <gsm_set_baudrate+0x40>)
    152a:	47a0      	blx	r4
}
    152c:	b008      	add	sp, #32
    152e:	bd10      	pop	{r4, pc}
    1530:	0000c3f7 	.word	0x0000c3f7
    1534:	0000d1de 	.word	0x0000d1de
    1538:	0000c5fd 	.word	0x0000c5fd
    153c:	00001388 	.word	0x00001388
    1540:	0000d42f 	.word	0x0000d42f
    1544:	00001349 	.word	0x00001349

00001548 <gsm_detect_simcard>:
	return gsm_send_at_command((const char*)("AT+CFUN=1,1\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_detect_simcard(void)
{
	return gsm_send_at_command((const char*)("AT+CPIN?\r"), (const char*)"+CPIN: READY",5000,0, NULL);
    1548:	2300      	movs	r3, #0
{
    154a:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+CPIN?\r"), (const char*)"+CPIN: READY",5000,0, NULL);
    154c:	4a03      	ldr	r2, [pc, #12]	; (155c <gsm_detect_simcard+0x14>)
    154e:	9300      	str	r3, [sp, #0]
    1550:	4903      	ldr	r1, [pc, #12]	; (1560 <gsm_detect_simcard+0x18>)
    1552:	4c04      	ldr	r4, [pc, #16]	; (1564 <gsm_detect_simcard+0x1c>)
    1554:	4804      	ldr	r0, [pc, #16]	; (1568 <gsm_detect_simcard+0x20>)
    1556:	47a0      	blx	r4
}
    1558:	bd16      	pop	{r1, r2, r4, pc}
    155a:	46c0      	nop			; (mov r8, r8)
    155c:	00001388 	.word	0x00001388
    1560:	0000d077 	.word	0x0000d077
    1564:	00001349 	.word	0x00001349
    1568:	0000d084 	.word	0x0000d084

0000156c <gsm_delete_all_sms>:

enum gsm_error gsm_delete_all_sms(void)
{
	return gsm_send_at_command((const char*)("AT+CMGDA=\"DEL ALL\"\r"), (const char*)RESPONS_OK,25000,0, NULL);
    156c:	2300      	movs	r3, #0
{
    156e:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+CMGDA=\"DEL ALL\"\r"), (const char*)RESPONS_OK,25000,0, NULL);
    1570:	4a03      	ldr	r2, [pc, #12]	; (1580 <gsm_delete_all_sms+0x14>)
    1572:	9300      	str	r3, [sp, #0]
    1574:	4903      	ldr	r1, [pc, #12]	; (1584 <gsm_delete_all_sms+0x18>)
    1576:	4c04      	ldr	r4, [pc, #16]	; (1588 <gsm_delete_all_sms+0x1c>)
    1578:	4804      	ldr	r0, [pc, #16]	; (158c <gsm_delete_all_sms+0x20>)
    157a:	47a0      	blx	r4
}
    157c:	bd16      	pop	{r1, r2, r4, pc}
    157e:	46c0      	nop			; (mov r8, r8)
    1580:	000061a8 	.word	0x000061a8
    1584:	0000d42f 	.word	0x0000d42f
    1588:	00001349 	.word	0x00001349
    158c:	0000d063 	.word	0x0000d063

00001590 <gsm_store_active_profile>:

enum gsm_error gsm_store_active_profile(void)
{
	return gsm_send_at_command((const char*)("AT&W\r"), (const char*)RESPONS_OK,5000,0, NULL);
    1590:	2300      	movs	r3, #0
{
    1592:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT&W\r"), (const char*)RESPONS_OK,5000,0, NULL);
    1594:	4a03      	ldr	r2, [pc, #12]	; (15a4 <gsm_store_active_profile+0x14>)
    1596:	9300      	str	r3, [sp, #0]
    1598:	4903      	ldr	r1, [pc, #12]	; (15a8 <gsm_store_active_profile+0x18>)
    159a:	4c04      	ldr	r4, [pc, #16]	; (15ac <gsm_store_active_profile+0x1c>)
    159c:	4804      	ldr	r0, [pc, #16]	; (15b0 <gsm_store_active_profile+0x20>)
    159e:	47a0      	blx	r4
}
    15a0:	bd16      	pop	{r1, r2, r4, pc}
    15a2:	46c0      	nop			; (mov r8, r8)
    15a4:	00001388 	.word	0x00001388
    15a8:	0000d42f 	.word	0x0000d42f
    15ac:	00001349 	.word	0x00001349
    15b0:	0000d208 	.word	0x0000d208

000015b4 <gsm_enable_calling_line_identification>:


enum gsm_error gsm_enable_calling_line_identification(void)
{
	return gsm_send_at_command((const char*)("AT+CLIP=1\r"), (const char*)RESPONS_OK,15000,0, NULL);
    15b4:	2300      	movs	r3, #0
{
    15b6:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+CLIP=1\r"), (const char*)RESPONS_OK,15000,0, NULL);
    15b8:	4a03      	ldr	r2, [pc, #12]	; (15c8 <gsm_enable_calling_line_identification+0x14>)
    15ba:	9300      	str	r3, [sp, #0]
    15bc:	4903      	ldr	r1, [pc, #12]	; (15cc <gsm_enable_calling_line_identification+0x18>)
    15be:	4c04      	ldr	r4, [pc, #16]	; (15d0 <gsm_enable_calling_line_identification+0x1c>)
    15c0:	4804      	ldr	r0, [pc, #16]	; (15d4 <gsm_enable_calling_line_identification+0x20>)
    15c2:	47a0      	blx	r4
}
    15c4:	bd16      	pop	{r1, r2, r4, pc}
    15c6:	46c0      	nop			; (mov r8, r8)
    15c8:	00003a98 	.word	0x00003a98
    15cc:	0000d42f 	.word	0x0000d42f
    15d0:	00001349 	.word	0x00001349
    15d4:	0000d0ac 	.word	0x0000d0ac

000015d8 <gsm_enable_connected_line_identification_presentation>:

enum gsm_error gsm_enable_connected_line_identification_presentation(void)
{
	return gsm_send_at_command((const char*)("AT+COLP=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    15d8:	2300      	movs	r3, #0
{
    15da:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+COLP=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    15dc:	4a03      	ldr	r2, [pc, #12]	; (15ec <gsm_enable_connected_line_identification_presentation+0x14>)
    15de:	9300      	str	r3, [sp, #0]
    15e0:	4903      	ldr	r1, [pc, #12]	; (15f0 <gsm_enable_connected_line_identification_presentation+0x18>)
    15e2:	4c04      	ldr	r4, [pc, #16]	; (15f4 <gsm_enable_connected_line_identification_presentation+0x1c>)
    15e4:	4804      	ldr	r0, [pc, #16]	; (15f8 <gsm_enable_connected_line_identification_presentation+0x20>)
    15e6:	47a0      	blx	r4
}
    15e8:	bd16      	pop	{r1, r2, r4, pc}
    15ea:	46c0      	nop			; (mov r8, r8)
    15ec:	00001388 	.word	0x00001388
    15f0:	0000d42f 	.word	0x0000d42f
    15f4:	00001349 	.word	0x00001349
    15f8:	0000d0b7 	.word	0x0000d0b7

000015fc <gsm_enable_list_current_calls_of_ME>:
}


enum gsm_error gsm_enable_list_current_calls_of_ME(void)
{
	return gsm_send_at_command((const char*)("AT+CLCC=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    15fc:	2300      	movs	r3, #0
{
    15fe:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+CLCC=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    1600:	4a03      	ldr	r2, [pc, #12]	; (1610 <gsm_enable_list_current_calls_of_ME+0x14>)
    1602:	9300      	str	r3, [sp, #0]
    1604:	4903      	ldr	r1, [pc, #12]	; (1614 <gsm_enable_list_current_calls_of_ME+0x18>)
    1606:	4c04      	ldr	r4, [pc, #16]	; (1618 <gsm_enable_list_current_calls_of_ME+0x1c>)
    1608:	4804      	ldr	r0, [pc, #16]	; (161c <gsm_enable_list_current_calls_of_ME+0x20>)
    160a:	47a0      	blx	r4
}
    160c:	bd16      	pop	{r1, r2, r4, pc}
    160e:	46c0      	nop			; (mov r8, r8)
    1610:	00001388 	.word	0x00001388
    1614:	0000d42f 	.word	0x0000d42f
    1618:	00001349 	.word	0x00001349
    161c:	0000d0c2 	.word	0x0000d0c2

00001620 <gsm_factory_reset>:

enum gsm_error gsm_factory_reset(void)
{
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,15000,0, NULL);
    1620:	2300      	movs	r3, #0
{
    1622:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,15000,0, NULL);
    1624:	4a03      	ldr	r2, [pc, #12]	; (1634 <gsm_factory_reset+0x14>)
    1626:	9300      	str	r3, [sp, #0]
    1628:	4903      	ldr	r1, [pc, #12]	; (1638 <gsm_factory_reset+0x18>)
    162a:	4c04      	ldr	r4, [pc, #16]	; (163c <gsm_factory_reset+0x1c>)
    162c:	4804      	ldr	r0, [pc, #16]	; (1640 <gsm_factory_reset+0x20>)
    162e:	47a0      	blx	r4
}
    1630:	bd16      	pop	{r1, r2, r4, pc}
    1632:	46c0      	nop			; (mov r8, r8)
    1634:	00003a98 	.word	0x00003a98
    1638:	0000d42f 	.word	0x0000d42f
    163c:	00001349 	.word	0x00001349
    1640:	0000d0eb 	.word	0x0000d0eb

00001644 <gsm_echo_off>:

enum gsm_error gsm_echo_off(void)
{
	return gsm_send_at_command((const char*)("ATE0\r"), (const char*)RESPONS_OK,5000,0, NULL);
    1644:	2300      	movs	r3, #0
{
    1646:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("ATE0\r"), (const char*)RESPONS_OK,5000,0, NULL);
    1648:	4a03      	ldr	r2, [pc, #12]	; (1658 <gsm_echo_off+0x14>)
    164a:	9300      	str	r3, [sp, #0]
    164c:	4903      	ldr	r1, [pc, #12]	; (165c <gsm_echo_off+0x18>)
    164e:	4c04      	ldr	r4, [pc, #16]	; (1660 <gsm_echo_off+0x1c>)
    1650:	4804      	ldr	r0, [pc, #16]	; (1664 <gsm_echo_off+0x20>)
    1652:	47a0      	blx	r4
}
    1654:	bd16      	pop	{r1, r2, r4, pc}
    1656:	46c0      	nop			; (mov r8, r8)
    1658:	00001388 	.word	0x00001388
    165c:	0000d42f 	.word	0x0000d42f
    1660:	00001349 	.word	0x00001349
    1664:	0000d09b 	.word	0x0000d09b

00001668 <gsm_select_sms_message_formate_text_mode>:

enum gsm_error gsm_select_sms_message_formate_text_mode(void) //PDU:0,TEXT:1
{
	return gsm_send_at_command((const char*)("AT+CMGF=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    1668:	2300      	movs	r3, #0
{
    166a:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+CMGF=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    166c:	4a03      	ldr	r2, [pc, #12]	; (167c <gsm_select_sms_message_formate_text_mode+0x14>)
    166e:	9300      	str	r3, [sp, #0]
    1670:	4903      	ldr	r1, [pc, #12]	; (1680 <gsm_select_sms_message_formate_text_mode+0x18>)
    1672:	4c04      	ldr	r4, [pc, #16]	; (1684 <gsm_select_sms_message_formate_text_mode+0x1c>)
    1674:	4804      	ldr	r0, [pc, #16]	; (1688 <gsm_select_sms_message_formate_text_mode+0x20>)
    1676:	47a0      	blx	r4
}
    1678:	bd16      	pop	{r1, r2, r4, pc}
    167a:	46c0      	nop			; (mov r8, r8)
    167c:	00001388 	.word	0x00001388
    1680:	0000d42f 	.word	0x0000d42f
    1684:	00001349 	.word	0x00001349
    1688:	0000d1b1 	.word	0x0000d1b1

0000168c <gsm_set_sms_text_mode_parameter>:

enum gsm_error gsm_set_sms_text_mode_parameter(void)
{
	return gsm_send_at_command((const char*)("AT+CSMP=17,167,0,0\r"), (const char*)RESPONS_OK,7000,0, NULL);
    168c:	2300      	movs	r3, #0
{
    168e:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+CSMP=17,167,0,0\r"), (const char*)RESPONS_OK,7000,0, NULL);
    1690:	4a03      	ldr	r2, [pc, #12]	; (16a0 <gsm_set_sms_text_mode_parameter+0x14>)
    1692:	9300      	str	r3, [sp, #0]
    1694:	4903      	ldr	r1, [pc, #12]	; (16a4 <gsm_set_sms_text_mode_parameter+0x18>)
    1696:	4c04      	ldr	r4, [pc, #16]	; (16a8 <gsm_set_sms_text_mode_parameter+0x1c>)
    1698:	4804      	ldr	r0, [pc, #16]	; (16ac <gsm_set_sms_text_mode_parameter+0x20>)
    169a:	47a0      	blx	r4
}
    169c:	bd16      	pop	{r1, r2, r4, pc}
    169e:	46c0      	nop			; (mov r8, r8)
    16a0:	00001b58 	.word	0x00001b58
    16a4:	0000d42f 	.word	0x0000d42f
    16a8:	00001349 	.word	0x00001349
    16ac:	0000d1e9 	.word	0x0000d1e9

000016b0 <RemoveSpaces>:
	return sig_strength;
}

void RemoveSpaces(char* source)
{
	char* i = source;
    16b0:	0002      	movs	r2, r0
	char* j = source;
	while(*j != 0)
    16b2:	7803      	ldrb	r3, [r0, #0]
    16b4:	2b00      	cmp	r3, #0
    16b6:	d101      	bne.n	16bc <RemoveSpaces+0xc>
	{
		*i = *j++;
		if(*i != ' ')
		i++;
	}
	*i = 0;
    16b8:	7013      	strb	r3, [r2, #0]
}
    16ba:	4770      	bx	lr
		*i = *j++;
    16bc:	7013      	strb	r3, [r2, #0]
		i++;
    16be:	3b20      	subs	r3, #32
    16c0:	1e59      	subs	r1, r3, #1
    16c2:	418b      	sbcs	r3, r1
		*i = *j++;
    16c4:	3001      	adds	r0, #1
		i++;
    16c6:	18d2      	adds	r2, r2, r3
    16c8:	e7f3      	b.n	16b2 <RemoveSpaces+0x2>
	...

000016cc <gsm_getsignalstrength>:
{
    16cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    16ce:	4b24      	ldr	r3, [pc, #144]	; (1760 <gsm_getsignalstrength+0x94>)
    16d0:	2101      	movs	r1, #1
    16d2:	2064      	movs	r0, #100	; 0x64
    16d4:	4798      	blx	r3
    16d6:	0004      	movs	r4, r0
		return 0;
    16d8:	1e05      	subs	r5, r0, #0
	if (cmdx == NULL)
    16da:	d03f      	beq.n	175c <gsm_getsignalstrength+0x90>
	memset(cmdx, '\0', MAX_BUFFER);
    16dc:	2264      	movs	r2, #100	; 0x64
    16de:	2100      	movs	r1, #0
    16e0:	4b20      	ldr	r3, [pc, #128]	; (1764 <gsm_getsignalstrength+0x98>)
    16e2:	4798      	blx	r3
	enum gsm_error gsm_err =  gsm_send_at_command((const char*)("AT+CSQ\r"), (const char*)RESPONS_OK,5000,MAX_BUFFER,cmdx);
    16e4:	9400      	str	r4, [sp, #0]
    16e6:	2364      	movs	r3, #100	; 0x64
    16e8:	4a1f      	ldr	r2, [pc, #124]	; (1768 <gsm_getsignalstrength+0x9c>)
    16ea:	4920      	ldr	r1, [pc, #128]	; (176c <gsm_getsignalstrength+0xa0>)
    16ec:	4820      	ldr	r0, [pc, #128]	; (1770 <gsm_getsignalstrength+0xa4>)
    16ee:	4d21      	ldr	r5, [pc, #132]	; (1774 <gsm_getsignalstrength+0xa8>)
    16f0:	47a8      	blx	r5
	if(gsm_err == GSM_ERROR_NONE)
    16f2:	2800      	cmp	r0, #0
    16f4:	d12e      	bne.n	1754 <gsm_getsignalstrength+0x88>
		if (strstr(cmdx,"99")==NULL)
    16f6:	4920      	ldr	r1, [pc, #128]	; (1778 <gsm_getsignalstrength+0xac>)
    16f8:	0020      	movs	r0, r4
    16fa:	4b20      	ldr	r3, [pc, #128]	; (177c <gsm_getsignalstrength+0xb0>)
    16fc:	4798      	blx	r3
    16fe:	1e06      	subs	r6, r0, #0
    1700:	d128      	bne.n	1754 <gsm_getsignalstrength+0x88>
			ptr_tocken = strtok(cmdx,":");
    1702:	4f1f      	ldr	r7, [pc, #124]	; (1780 <gsm_getsignalstrength+0xb4>)
    1704:	4d1f      	ldr	r5, [pc, #124]	; (1784 <gsm_getsignalstrength+0xb8>)
    1706:	0039      	movs	r1, r7
    1708:	0020      	movs	r0, r4
    170a:	47a8      	blx	r5
			ptr_tocken = strtok(NULL,":");
    170c:	0039      	movs	r1, r7
    170e:	0030      	movs	r0, r6
    1710:	47a8      	blx	r5
			ptr_tocken = strtok(ptr_tocken,",");
    1712:	491d      	ldr	r1, [pc, #116]	; (1788 <gsm_getsignalstrength+0xbc>)
    1714:	47a8      	blx	r5
    1716:	0005      	movs	r5, r0
			RemoveSpaces(ptr_tocken);
    1718:	4b1c      	ldr	r3, [pc, #112]	; (178c <gsm_getsignalstrength+0xc0>)
    171a:	4798      	blx	r3
			uint8_t nw = atoi(ptr_tocken);
    171c:	0028      	movs	r0, r5
    171e:	4b1c      	ldr	r3, [pc, #112]	; (1790 <gsm_getsignalstrength+0xc4>)
    1720:	4798      	blx	r3
    1722:	b2c0      	uxtb	r0, r0
			if (nw==0 || nw==1 || nw== 99)
    1724:	2801      	cmp	r0, #1
    1726:	d915      	bls.n	1754 <gsm_getsignalstrength+0x88>
    1728:	2863      	cmp	r0, #99	; 0x63
    172a:	d013      	beq.n	1754 <gsm_getsignalstrength+0x88>
				if (nw>=2 && nw<=7)
    172c:	1e83      	subs	r3, r0, #2
					sig_strength = 1;
    172e:	2501      	movs	r5, #1
				if (nw>=2 && nw<=7)
    1730:	2b05      	cmp	r3, #5
    1732:	d910      	bls.n	1756 <gsm_getsignalstrength+0x8a>
				else if (nw>=8 && nw<=13)
    1734:	3b06      	subs	r3, #6
					sig_strength = 2;
    1736:	196d      	adds	r5, r5, r5
				else if (nw>=8 && nw<=13)
    1738:	2b05      	cmp	r3, #5
    173a:	d90c      	bls.n	1756 <gsm_getsignalstrength+0x8a>
				else if (nw>=14 && nw<=19)
    173c:	3b06      	subs	r3, #6
					sig_strength = 3;
    173e:	3501      	adds	r5, #1
				else if (nw>=14 && nw<=19)
    1740:	2b05      	cmp	r3, #5
    1742:	d908      	bls.n	1756 <gsm_getsignalstrength+0x8a>
				else if (nw>=20 && nw<=25)
    1744:	3b06      	subs	r3, #6
					sig_strength = 4;
    1746:	3501      	adds	r5, #1
				else if (nw>=20 && nw<=25)
    1748:	2b05      	cmp	r3, #5
    174a:	d904      	bls.n	1756 <gsm_getsignalstrength+0x8a>
				else if (nw>=26 && nw<=31)
    174c:	381a      	subs	r0, #26
					sig_strength = 5;
    174e:	3501      	adds	r5, #1
				else if (nw>=26 && nw<=31)
    1750:	42a8      	cmp	r0, r5
    1752:	d900      	bls.n	1756 <gsm_getsignalstrength+0x8a>
					sig_strength = 0;
    1754:	2500      	movs	r5, #0
	free(cmdx);
    1756:	0020      	movs	r0, r4
    1758:	4b0e      	ldr	r3, [pc, #56]	; (1794 <gsm_getsignalstrength+0xc8>)
    175a:	4798      	blx	r3
}
    175c:	0028      	movs	r0, r5
    175e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1760:	0000c2f5 	.word	0x0000c2f5
    1764:	0000c3f7 	.word	0x0000c3f7
    1768:	00001388 	.word	0x00001388
    176c:	0000d42f 	.word	0x0000d42f
    1770:	0000d0ff 	.word	0x0000d0ff
    1774:	00001349 	.word	0x00001349
    1778:	0000d107 	.word	0x0000d107
    177c:	0000c6b7 	.word	0x0000c6b7
    1780:	0000d75a 	.word	0x0000d75a
    1784:	0000c6e9 	.word	0x0000c6e9
    1788:	0000d05d 	.word	0x0000d05d
    178c:	000016b1 	.word	0x000016b1
    1790:	0000c2e9 	.word	0x0000c2e9
    1794:	0000c389 	.word	0x0000c389

00001798 <gsm_enable_new_sms_message_indications>:
	return gsm_send_at_command((const char*)("AT&F\r"), (const char*)RESPONS_OK,10000,0,NULL);
}

enum gsm_error gsm_enable_new_sms_message_indications(void)
{
	return gsm_send_at_command((const char*)("AT+CNMI=2,1,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
    1798:	2300      	movs	r3, #0
{
    179a:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+CNMI=2,1,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
    179c:	4a03      	ldr	r2, [pc, #12]	; (17ac <gsm_enable_new_sms_message_indications+0x14>)
    179e:	9300      	str	r3, [sp, #0]
    17a0:	4903      	ldr	r1, [pc, #12]	; (17b0 <gsm_enable_new_sms_message_indications+0x18>)
    17a2:	4c04      	ldr	r4, [pc, #16]	; (17b4 <gsm_enable_new_sms_message_indications+0x1c>)
    17a4:	4804      	ldr	r0, [pc, #16]	; (17b8 <gsm_enable_new_sms_message_indications+0x20>)
    17a6:	47a0      	blx	r4
}
    17a8:	bd16      	pop	{r1, r2, r4, pc}
    17aa:	46c0      	nop			; (mov r8, r8)
    17ac:	00001388 	.word	0x00001388
    17b0:	0000d42f 	.word	0x0000d42f
    17b4:	00001349 	.word	0x00001349
    17b8:	0000d0d8 	.word	0x0000d0d8

000017bc <gsm_send_sms>:
{
	return gsm_send_at_command((const char*)("AT+CNMI=1,0,0,0,0\r"), (const char*)RESPONS_OK,5000,0,NULL);
}

enum gsm_error gsm_send_sms(const char *phone_number, const char *message)
{
    17bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    17be:	0005      	movs	r5, r0
	/* Double-check the message length is acceptable (160 byte max payload) */
	if (strlen(message) > 250) 
    17c0:	4c21      	ldr	r4, [pc, #132]	; (1848 <gsm_send_sms+0x8c>)
    17c2:	0008      	movs	r0, r1
{
    17c4:	000f      	movs	r7, r1
	if (strlen(message) > 250) 
    17c6:	47a0      	blx	r4
	{
		return GSM_ERROR_MESSAGE_LENGTH;
    17c8:	2603      	movs	r6, #3
	if (strlen(message) > 250) 
    17ca:	28fa      	cmp	r0, #250	; 0xfa
    17cc:	d835      	bhi.n	183a <gsm_send_sms+0x7e>
	}
	/* Double-check the recipient phone number length */
	if (strlen(phone_number) < 6) 
    17ce:	0028      	movs	r0, r5
    17d0:	47a0      	blx	r4
	{
		return GSM_ERROR_PHONE_NUMBER_LENGTH;
    17d2:	3601      	adds	r6, #1
	if (strlen(phone_number) < 6) 
    17d4:	2805      	cmp	r0, #5
    17d6:	d930      	bls.n	183a <gsm_send_sms+0x7e>
	}
	
	enum gsm_error err;
	const uint8_t MAX_BUFFER = 250;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    17d8:	2101      	movs	r1, #1
    17da:	20fa      	movs	r0, #250	; 0xfa
    17dc:	4b1b      	ldr	r3, [pc, #108]	; (184c <gsm_send_sms+0x90>)
    17de:	4798      	blx	r3
    17e0:	0004      	movs	r4, r0
	//buffer created???
	if (cmdx == NULL)
	{
		return 0;
    17e2:	1e06      	subs	r6, r0, #0
	if (cmdx == NULL)
    17e4:	d029      	beq.n	183a <gsm_send_sms+0x7e>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    17e6:	22fa      	movs	r2, #250	; 0xfa
    17e8:	2100      	movs	r1, #0
    17ea:	4b19      	ldr	r3, [pc, #100]	; (1850 <gsm_send_sms+0x94>)
    17ec:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CMGS=\"%s\"\r", phone_number);
    17ee:	002b      	movs	r3, r5
    17f0:	4a18      	ldr	r2, [pc, #96]	; (1854 <gsm_send_sms+0x98>)
    17f2:	21fa      	movs	r1, #250	; 0xfa
    17f4:	4d18      	ldr	r5, [pc, #96]	; (1858 <gsm_send_sms+0x9c>)
    17f6:	0020      	movs	r0, r4
    17f8:	47a8      	blx	r5
	if (gsm_send_at_command((const char*)cmdx, (const char*)">",60000, 0, NULL)==GSM_ERROR_NONE)
    17fa:	2300      	movs	r3, #0
    17fc:	4a17      	ldr	r2, [pc, #92]	; (185c <gsm_send_sms+0xa0>)
    17fe:	9300      	str	r3, [sp, #0]
    1800:	4917      	ldr	r1, [pc, #92]	; (1860 <gsm_send_sms+0xa4>)
    1802:	0020      	movs	r0, r4
    1804:	4e17      	ldr	r6, [pc, #92]	; (1864 <gsm_send_sms+0xa8>)
    1806:	47b0      	blx	r6
    1808:	1e05      	subs	r5, r0, #0
    180a:	d118      	bne.n	183e <gsm_send_sms+0x82>
	{
		memset(cmdx, '\0', MAX_BUFFER);
    180c:	0001      	movs	r1, r0
    180e:	22fa      	movs	r2, #250	; 0xfa
    1810:	4b0f      	ldr	r3, [pc, #60]	; (1850 <gsm_send_sms+0x94>)
    1812:	0020      	movs	r0, r4
    1814:	4798      	blx	r3
		
		snprintf((char*)cmdx, MAX_BUFFER, "%s\x1A\x0D",message);
    1816:	003b      	movs	r3, r7
    1818:	4a13      	ldr	r2, [pc, #76]	; (1868 <gsm_send_sms+0xac>)
    181a:	21fa      	movs	r1, #250	; 0xfa
    181c:	0020      	movs	r0, r4
    181e:	4f0e      	ldr	r7, [pc, #56]	; (1858 <gsm_send_sms+0x9c>)
    1820:	47b8      	blx	r7
		
	    err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,60000, 0, NULL);
    1822:	002b      	movs	r3, r5
    1824:	9500      	str	r5, [sp, #0]
    1826:	4a0d      	ldr	r2, [pc, #52]	; (185c <gsm_send_sms+0xa0>)
    1828:	4910      	ldr	r1, [pc, #64]	; (186c <gsm_send_sms+0xb0>)
    182a:	0020      	movs	r0, r4
    182c:	47b0      	blx	r6
    182e:	4b10      	ldr	r3, [pc, #64]	; (1870 <gsm_send_sms+0xb4>)
    1830:	0006      	movs	r6, r0
		if (err == GSM_ERROR_NONE)
		{
			free(cmdx);
    1832:	0020      	movs	r0, r4
		if (err == GSM_ERROR_NONE)
    1834:	2e00      	cmp	r6, #0
    1836:	d104      	bne.n	1842 <gsm_send_sms+0x86>
			free(cmdx);
    1838:	4798      	blx	r3
	else
	{
		free(cmdx);
		return GSM_ERROR_SMS_SEND_FAILED;
	}
}
    183a:	0030      	movs	r0, r6
    183c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		free(cmdx);
    183e:	0020      	movs	r0, r4
    1840:	4b0b      	ldr	r3, [pc, #44]	; (1870 <gsm_send_sms+0xb4>)
    1842:	4798      	blx	r3
		return GSM_ERROR_SMS_SEND_FAILED;
    1844:	2606      	movs	r6, #6
    1846:	e7f8      	b.n	183a <gsm_send_sms+0x7e>
    1848:	0000c687 	.word	0x0000c687
    184c:	0000c2f5 	.word	0x0000c2f5
    1850:	0000c3f7 	.word	0x0000c3f7
    1854:	0000d1c9 	.word	0x0000d1c9
    1858:	0000c599 	.word	0x0000c599
    185c:	0000ea60 	.word	0x0000ea60
    1860:	0000d1d7 	.word	0x0000d1d7
    1864:	00001349 	.word	0x00001349
    1868:	0000d1d9 	.word	0x0000d1d9
    186c:	0000d42f 	.word	0x0000d42f
    1870:	0000c389 	.word	0x0000c389

00001874 <gsm_read_sms>:
	free(cmdx);
	return sms_index;
}

enum gsm_error gsm_read_sms(uint8_t position, char *phone_number, uint8_t max_phone_len, char *SMS_text, uint8_t max_SMS_len)
{
    1874:	b5f0      	push	{r4, r5, r6, r7, lr}
    1876:	b08d      	sub	sp, #52	; 0x34
    1878:	9306      	str	r3, [sp, #24]
    187a:	ab12      	add	r3, sp, #72	; 0x48
    187c:	781b      	ldrb	r3, [r3, #0]
    187e:	9104      	str	r1, [sp, #16]
    1880:	9307      	str	r3, [sp, #28]
    1882:	0006      	movs	r6, r0
	const uint8_t MAX_BUFFER = 230;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    1884:	2101      	movs	r1, #1
    1886:	20e6      	movs	r0, #230	; 0xe6
    1888:	4b39      	ldr	r3, [pc, #228]	; (1970 <gsm_read_sms+0xfc>)
{
    188a:	9205      	str	r2, [sp, #20]
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    188c:	4798      	blx	r3
    188e:	0004      	movs	r4, r0
	if (cmdx == NULL)
	{
		free(cmdx);
		return 0;
    1890:	1e05      	subs	r5, r0, #0
	if (cmdx == NULL)
    1892:	d069      	beq.n	1968 <gsm_read_sms+0xf4>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    1894:	4d37      	ldr	r5, [pc, #220]	; (1974 <gsm_read_sms+0x100>)
    1896:	22e6      	movs	r2, #230	; 0xe6
    1898:	2100      	movs	r1, #0
    189a:	47a8      	blx	r5
	
	uint8_t cmgr_at_command[10] = {0};
    189c:	220a      	movs	r2, #10
    189e:	2100      	movs	r1, #0
    18a0:	a809      	add	r0, sp, #36	; 0x24
    18a2:	47a8      	blx	r5
	
	snprintf((char*)cmgr_at_command, MAX_BUFFER, "AT+CMGR=%d\r",position);
    18a4:	0033      	movs	r3, r6
    18a6:	4a34      	ldr	r2, [pc, #208]	; (1978 <gsm_read_sms+0x104>)
    18a8:	21e6      	movs	r1, #230	; 0xe6
    18aa:	4d34      	ldr	r5, [pc, #208]	; (197c <gsm_read_sms+0x108>)
    18ac:	a809      	add	r0, sp, #36	; 0x24
    18ae:	47a8      	blx	r5
	
	if (gsm_send_at_command((const char*)cmgr_at_command, (const char*)RESPONS_OK,5000, MAX_BUFFER, cmdx)==GSM_ERROR_NONE)
    18b0:	4d33      	ldr	r5, [pc, #204]	; (1980 <gsm_read_sms+0x10c>)
    18b2:	9400      	str	r4, [sp, #0]
    18b4:	23e6      	movs	r3, #230	; 0xe6
    18b6:	4a33      	ldr	r2, [pc, #204]	; (1984 <gsm_read_sms+0x110>)
    18b8:	4933      	ldr	r1, [pc, #204]	; (1988 <gsm_read_sms+0x114>)
    18ba:	a809      	add	r0, sp, #36	; 0x24
    18bc:	47a8      	blx	r5
    18be:	1e05      	subs	r5, r0, #0
    18c0:	d14e      	bne.n	1960 <gsm_read_sms+0xec>
	{
		char *strig_cmp;
		char *p_char;
		char *p_char1;
		strig_cmp = strstr(cmdx,"+CMGR");
    18c2:	4932      	ldr	r1, [pc, #200]	; (198c <gsm_read_sms+0x118>)
    18c4:	0020      	movs	r0, r4
    18c6:	4b32      	ldr	r3, [pc, #200]	; (1990 <gsm_read_sms+0x11c>)
    18c8:	4798      	blx	r3
		if (strig_cmp != 0)
    18ca:	2800      	cmp	r0, #0
    18cc:	d048      	beq.n	1960 <gsm_read_sms+0xec>
		{
			p_char = strchr((char *)(cmdx),',');
    18ce:	212c      	movs	r1, #44	; 0x2c
    18d0:	4f30      	ldr	r7, [pc, #192]	; (1994 <gsm_read_sms+0x120>)
    18d2:	0020      	movs	r0, r4
    18d4:	47b8      	blx	r7
			p_char1 = p_char+2;
    18d6:	1c86      	adds	r6, r0, #2
			p_char = strchr((char *)(p_char1),'"');
    18d8:	2122      	movs	r1, #34	; 0x22
    18da:	0030      	movs	r0, r6
    18dc:	47b8      	blx	r7
    18de:	9003      	str	r0, [sp, #12]
			uint8_t len;
			if (p_char != NULL)
    18e0:	2800      	cmp	r0, #0
    18e2:	d00b      	beq.n	18fc <gsm_read_sms+0x88>
			{
				*p_char = 0;
    18e4:	7005      	strb	r5, [r0, #0]
				len = strlen(p_char1);
    18e6:	4b2c      	ldr	r3, [pc, #176]	; (1998 <gsm_read_sms+0x124>)
    18e8:	0030      	movs	r0, r6
    18ea:	4798      	blx	r3
				if(len < max_phone_len)
    18ec:	9b05      	ldr	r3, [sp, #20]
    18ee:	b2c0      	uxtb	r0, r0
    18f0:	4298      	cmp	r0, r3
    18f2:	d220      	bcs.n	1936 <gsm_read_sms+0xc2>
				{
					strcpy(phone_number, (char *)(p_char1));
    18f4:	0031      	movs	r1, r6
    18f6:	9804      	ldr	r0, [sp, #16]
    18f8:	4b28      	ldr	r3, [pc, #160]	; (199c <gsm_read_sms+0x128>)
    18fa:	4798      	blx	r3
				{
					memcpy(phone_number,(char *)p_char1,(max_phone_len-1));
					phone_number[max_phone_len]=0;
				}
			}
			p_char = strchr(p_char+1, 0x0a);
    18fc:	9803      	ldr	r0, [sp, #12]
    18fe:	210a      	movs	r1, #10
    1900:	3001      	adds	r0, #1
    1902:	47b8      	blx	r7
			if (p_char != NULL)
    1904:	2800      	cmp	r0, #0
    1906:	d012      	beq.n	192e <gsm_read_sms+0xba>
			{
				p_char++;
    1908:	1c46      	adds	r6, r0, #1
				p_char1 = strchr((char *)(p_char), 0x0d);
    190a:	210d      	movs	r1, #13
    190c:	0030      	movs	r0, r6
    190e:	47b8      	blx	r7
				if (p_char1 != NULL)
    1910:	2800      	cmp	r0, #0
    1912:	d001      	beq.n	1918 <gsm_read_sms+0xa4>
				{
					*p_char1 = 0;
    1914:	2300      	movs	r3, #0
    1916:	7003      	strb	r3, [r0, #0]
				}
				len = strlen(p_char);
    1918:	4b1f      	ldr	r3, [pc, #124]	; (1998 <gsm_read_sms+0x124>)
    191a:	0030      	movs	r0, r6
    191c:	4798      	blx	r3
				if (len < max_SMS_len)
    191e:	9b07      	ldr	r3, [sp, #28]
    1920:	b2c0      	uxtb	r0, r0
    1922:	4298      	cmp	r0, r3
    1924:	d211      	bcs.n	194a <gsm_read_sms+0xd6>
				{
					strcpy(SMS_text, (char *)(p_char));
    1926:	0031      	movs	r1, r6
    1928:	9806      	ldr	r0, [sp, #24]
    192a:	4b1c      	ldr	r3, [pc, #112]	; (199c <gsm_read_sms+0x128>)
    192c:	4798      	blx	r3
	else
	{
		free(cmdx);
		return GSM_ERROR_SMS_NOT_AVAILABLE; 
	}
	free(cmdx);
    192e:	0020      	movs	r0, r4
    1930:	4b1b      	ldr	r3, [pc, #108]	; (19a0 <gsm_read_sms+0x12c>)
    1932:	4798      	blx	r3
	return GSM_ERROR_NONE; 
    1934:	e018      	b.n	1968 <gsm_read_sms+0xf4>
					memcpy(phone_number,(char *)p_char1,(max_phone_len-1));
    1936:	9b05      	ldr	r3, [sp, #20]
    1938:	0031      	movs	r1, r6
    193a:	1e5a      	subs	r2, r3, #1
    193c:	9804      	ldr	r0, [sp, #16]
    193e:	4b19      	ldr	r3, [pc, #100]	; (19a4 <gsm_read_sms+0x130>)
    1940:	4798      	blx	r3
					phone_number[max_phone_len]=0;
    1942:	9b04      	ldr	r3, [sp, #16]
    1944:	9a05      	ldr	r2, [sp, #20]
    1946:	549d      	strb	r5, [r3, r2]
    1948:	e7d8      	b.n	18fc <gsm_read_sms+0x88>
					memcpy(SMS_text, (char *)(p_char), (max_SMS_len-1));
    194a:	9b07      	ldr	r3, [sp, #28]
    194c:	0031      	movs	r1, r6
    194e:	1e5a      	subs	r2, r3, #1
    1950:	9806      	ldr	r0, [sp, #24]
    1952:	4b14      	ldr	r3, [pc, #80]	; (19a4 <gsm_read_sms+0x130>)
    1954:	4798      	blx	r3
					SMS_text[max_SMS_len] = 0;
    1956:	2300      	movs	r3, #0
    1958:	9a06      	ldr	r2, [sp, #24]
    195a:	9907      	ldr	r1, [sp, #28]
    195c:	5453      	strb	r3, [r2, r1]
    195e:	e7e6      	b.n	192e <gsm_read_sms+0xba>
		free(cmdx);
    1960:	0020      	movs	r0, r4
    1962:	4b0f      	ldr	r3, [pc, #60]	; (19a0 <gsm_read_sms+0x12c>)
    1964:	4798      	blx	r3
		return GSM_ERROR_SMS_NOT_AVAILABLE; 
    1966:	250c      	movs	r5, #12
}
    1968:	0028      	movs	r0, r5
    196a:	b00d      	add	sp, #52	; 0x34
    196c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    196e:	46c0      	nop			; (mov r8, r8)
    1970:	0000c2f5 	.word	0x0000c2f5
    1974:	0000c3f7 	.word	0x0000c3f7
    1978:	0000d163 	.word	0x0000d163
    197c:	0000c599 	.word	0x0000c599
    1980:	00001349 	.word	0x00001349
    1984:	00001388 	.word	0x00001388
    1988:	0000d42f 	.word	0x0000d42f
    198c:	0000d16f 	.word	0x0000d16f
    1990:	0000c6b7 	.word	0x0000c6b7
    1994:	0000c65b 	.word	0x0000c65b
    1998:	0000c687 	.word	0x0000c687
    199c:	0000c677 	.word	0x0000c677
    19a0:	0000c389 	.word	0x0000c389
    19a4:	0000c3c1 	.word	0x0000c3c1

000019a8 <gsm_call_to_dial_a_number>:


enum gsm_error gsm_call_to_dial_a_number(const char *to)
{
    19a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const uint8_t MAX_BUFFER = 30;
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    19aa:	4b10      	ldr	r3, [pc, #64]	; (19ec <gsm_call_to_dial_a_number+0x44>)
{
    19ac:	0006      	movs	r6, r0
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    19ae:	2101      	movs	r1, #1
    19b0:	201e      	movs	r0, #30
    19b2:	4798      	blx	r3
    19b4:	0004      	movs	r4, r0
	
	//buffer created?
	if (cmdx == NULL)
	{
		return 0;
    19b6:	1e05      	subs	r5, r0, #0
	if (cmdx == NULL)
    19b8:	d015      	beq.n	19e6 <gsm_call_to_dial_a_number+0x3e>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
    19ba:	221e      	movs	r2, #30
    19bc:	2100      	movs	r1, #0
    19be:	4b0c      	ldr	r3, [pc, #48]	; (19f0 <gsm_call_to_dial_a_number+0x48>)
    19c0:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER, "ATD%s;\r", to);
    19c2:	0033      	movs	r3, r6
    19c4:	4a0b      	ldr	r2, [pc, #44]	; (19f4 <gsm_call_to_dial_a_number+0x4c>)
    19c6:	211e      	movs	r1, #30
    19c8:	4d0b      	ldr	r5, [pc, #44]	; (19f8 <gsm_call_to_dial_a_number+0x50>)
    19ca:	0020      	movs	r0, r4
    19cc:	47a8      	blx	r5
	
	err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,2000,0, NULL);
    19ce:	2300      	movs	r3, #0
    19d0:	22fa      	movs	r2, #250	; 0xfa
    19d2:	9300      	str	r3, [sp, #0]
    19d4:	4d09      	ldr	r5, [pc, #36]	; (19fc <gsm_call_to_dial_a_number+0x54>)
    19d6:	00d2      	lsls	r2, r2, #3
    19d8:	4909      	ldr	r1, [pc, #36]	; (1a00 <gsm_call_to_dial_a_number+0x58>)
    19da:	0020      	movs	r0, r4
    19dc:	47a8      	blx	r5
	free(cmdx);
    19de:	4b09      	ldr	r3, [pc, #36]	; (1a04 <gsm_call_to_dial_a_number+0x5c>)
	err = gsm_send_at_command((const char*)cmdx, (const char*)RESPONS_OK,2000,0, NULL);
    19e0:	0005      	movs	r5, r0
	free(cmdx);
    19e2:	0020      	movs	r0, r4
    19e4:	4798      	blx	r3
	return err;
	
}
    19e6:	0028      	movs	r0, r5
    19e8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    19ea:	46c0      	nop			; (mov r8, r8)
    19ec:	0000c2f5 	.word	0x0000c2f5
    19f0:	0000c3f7 	.word	0x0000c3f7
    19f4:	0000d045 	.word	0x0000d045
    19f8:	0000c599 	.word	0x0000c599
    19fc:	00001349 	.word	0x00001349
    1a00:	0000d42f 	.word	0x0000d42f
    1a04:	0000c389 	.word	0x0000c389

00001a08 <gsm_answer_an_incomming_call>:

enum gsm_error gsm_answer_an_incomming_call(void)
{
	return gsm_send_at_command((const char*)("ATA\r"), (const char*)RESPONS_OK,5000,0, NULL);
    1a08:	2300      	movs	r3, #0
{
    1a0a:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("ATA\r"), (const char*)RESPONS_OK,5000,0, NULL);
    1a0c:	4a03      	ldr	r2, [pc, #12]	; (1a1c <gsm_answer_an_incomming_call+0x14>)
    1a0e:	9300      	str	r3, [sp, #0]
    1a10:	4903      	ldr	r1, [pc, #12]	; (1a20 <gsm_answer_an_incomming_call+0x18>)
    1a12:	4c04      	ldr	r4, [pc, #16]	; (1a24 <gsm_answer_an_incomming_call+0x1c>)
    1a14:	4804      	ldr	r0, [pc, #16]	; (1a28 <gsm_answer_an_incomming_call+0x20>)
    1a16:	47a0      	blx	r4
}
    1a18:	bd16      	pop	{r1, r2, r4, pc}
    1a1a:	46c0      	nop			; (mov r8, r8)
    1a1c:	00001388 	.word	0x00001388
    1a20:	0000d42f 	.word	0x0000d42f
    1a24:	00001349 	.word	0x00001349
    1a28:	0000d040 	.word	0x0000d040

00001a2c <gsm_enable_network_time_update>:


enum gsm_error gsm_enable_network_time_update(void)
{
	return 	gsm_send_at_command((const char*)("AT+CLTS=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
    1a2c:	2300      	movs	r3, #0
{
    1a2e:	b513      	push	{r0, r1, r4, lr}
	return 	gsm_send_at_command((const char*)("AT+CLTS=1\r"), (const char*)RESPONS_OK,10000,0, NULL);
    1a30:	4a03      	ldr	r2, [pc, #12]	; (1a40 <gsm_enable_network_time_update+0x14>)
    1a32:	9300      	str	r3, [sp, #0]
    1a34:	4903      	ldr	r1, [pc, #12]	; (1a44 <gsm_enable_network_time_update+0x18>)
    1a36:	4c04      	ldr	r4, [pc, #16]	; (1a48 <gsm_enable_network_time_update+0x1c>)
    1a38:	4804      	ldr	r0, [pc, #16]	; (1a4c <gsm_enable_network_time_update+0x20>)
    1a3a:	47a0      	blx	r4
}
    1a3c:	bd16      	pop	{r1, r2, r4, pc}
    1a3e:	46c0      	nop			; (mov r8, r8)
    1a40:	00002710 	.word	0x00002710
    1a44:	0000d42f 	.word	0x0000d42f
    1a48:	00001349 	.word	0x00001349
    1a4c:	0000d0cd 	.word	0x0000d0cd

00001a50 <gsm_enable_DTMF_detection>:
	return 	gsm_send_at_command((const char*)("AT+CLTS=0\r"), (const char*)RESPONS_OK,10000,0, NULL);
}

enum gsm_error gsm_enable_DTMF_detection(void)
{
	return 	gsm_send_at_command((const char*)("AT+DDET=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    1a50:	2300      	movs	r3, #0
{
    1a52:	b513      	push	{r0, r1, r4, lr}
	return 	gsm_send_at_command((const char*)("AT+DDET=1\r"), (const char*)RESPONS_OK,5000,0, NULL);
    1a54:	4a03      	ldr	r2, [pc, #12]	; (1a64 <gsm_enable_DTMF_detection+0x14>)
    1a56:	9300      	str	r3, [sp, #0]
    1a58:	4903      	ldr	r1, [pc, #12]	; (1a68 <gsm_enable_DTMF_detection+0x18>)
    1a5a:	4c04      	ldr	r4, [pc, #16]	; (1a6c <gsm_enable_DTMF_detection+0x1c>)
    1a5c:	4804      	ldr	r0, [pc, #16]	; (1a70 <gsm_enable_DTMF_detection+0x20>)
    1a5e:	47a0      	blx	r4
}
    1a60:	bd16      	pop	{r1, r2, r4, pc}
    1a62:	46c0      	nop			; (mov r8, r8)
    1a64:	00001388 	.word	0x00001388
    1a68:	0000d42f 	.word	0x0000d42f
    1a6c:	00001349 	.word	0x00001349
    1a70:	0000d0a1 	.word	0x0000d0a1

00001a74 <gsm_send_DTMF_Tone>:

enum gsm_error gsm_send_DTMF_Tone(char *tone)
{
    1a74:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const uint8_t MAX_BUFFER = 30;
	enum gsm_error err;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    1a76:	4b0f      	ldr	r3, [pc, #60]	; (1ab4 <gsm_send_DTMF_Tone+0x40>)
{
    1a78:	0006      	movs	r6, r0
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    1a7a:	2101      	movs	r1, #1
    1a7c:	201e      	movs	r0, #30
    1a7e:	4798      	blx	r3
    1a80:	0004      	movs	r4, r0
	
	//buffer created?
	if (cmdx == NULL)
	{
		return 0;
    1a82:	1e05      	subs	r5, r0, #0
	if (cmdx == NULL)
    1a84:	d014      	beq.n	1ab0 <gsm_send_DTMF_Tone+0x3c>
	}
	
	//init string
	memset(cmdx, '\0', MAX_BUFFER);
    1a86:	221e      	movs	r2, #30
    1a88:	2100      	movs	r1, #0
    1a8a:	4b0b      	ldr	r3, [pc, #44]	; (1ab8 <gsm_send_DTMF_Tone+0x44>)
    1a8c:	4798      	blx	r3
	snprintf((char*)cmdx, MAX_BUFFER,"AT+VTS=\"%s\"\r",tone);
    1a8e:	0033      	movs	r3, r6
    1a90:	4a0a      	ldr	r2, [pc, #40]	; (1abc <gsm_send_DTMF_Tone+0x48>)
    1a92:	211e      	movs	r1, #30
    1a94:	4d0a      	ldr	r5, [pc, #40]	; (1ac0 <gsm_send_DTMF_Tone+0x4c>)
    1a96:	0020      	movs	r0, r4
    1a98:	47a8      	blx	r5
	
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,5000,0, NULL);
    1a9a:	2300      	movs	r3, #0
    1a9c:	4d09      	ldr	r5, [pc, #36]	; (1ac4 <gsm_send_DTMF_Tone+0x50>)
    1a9e:	9300      	str	r3, [sp, #0]
    1aa0:	4a09      	ldr	r2, [pc, #36]	; (1ac8 <gsm_send_DTMF_Tone+0x54>)
    1aa2:	490a      	ldr	r1, [pc, #40]	; (1acc <gsm_send_DTMF_Tone+0x58>)
    1aa4:	0020      	movs	r0, r4
    1aa6:	47a8      	blx	r5
	free(cmdx);
    1aa8:	4b09      	ldr	r3, [pc, #36]	; (1ad0 <gsm_send_DTMF_Tone+0x5c>)
	err = gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,5000,0, NULL);
    1aaa:	0005      	movs	r5, r0
	free(cmdx);
    1aac:	0020      	movs	r0, r4
    1aae:	4798      	blx	r3
	return err;
}
    1ab0:	0028      	movs	r0, r5
    1ab2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    1ab4:	0000c2f5 	.word	0x0000c2f5
    1ab8:	0000c3f7 	.word	0x0000c3f7
    1abc:	0000d1bc 	.word	0x0000d1bc
    1ac0:	0000c599 	.word	0x0000c599
    1ac4:	00001349 	.word	0x00001349
    1ac8:	00001388 	.word	0x00001388
    1acc:	0000d42f 	.word	0x0000d42f
    1ad0:	0000c389 	.word	0x0000c389

00001ad4 <gsm_hangup_call>:

enum gsm_error gsm_hangup_call(void)
{
	return 	gsm_send_at_command((const char*)("AT+CHUP\r"), (const char*)RESPONS_OK,5000,0, NULL);
    1ad4:	2300      	movs	r3, #0
{
    1ad6:	b513      	push	{r0, r1, r4, lr}
	return 	gsm_send_at_command((const char*)("AT+CHUP\r"), (const char*)RESPONS_OK,5000,0, NULL);
    1ad8:	4a03      	ldr	r2, [pc, #12]	; (1ae8 <gsm_hangup_call+0x14>)
    1ada:	9300      	str	r3, [sp, #0]
    1adc:	4903      	ldr	r1, [pc, #12]	; (1aec <gsm_hangup_call+0x18>)
    1ade:	4c04      	ldr	r4, [pc, #16]	; (1af0 <gsm_hangup_call+0x1c>)
    1ae0:	4804      	ldr	r0, [pc, #16]	; (1af4 <gsm_hangup_call+0x20>)
    1ae2:	47a0      	blx	r4
}
    1ae4:	bd16      	pop	{r1, r2, r4, pc}
    1ae6:	46c0      	nop			; (mov r8, r8)
    1ae8:	00001388 	.word	0x00001388
    1aec:	0000d42f 	.word	0x0000d42f
    1af0:	00001349 	.word	0x00001349
    1af4:	0000d10a 	.word	0x0000d10a

00001af8 <gsm_disable_call_waiting>:

enum gsm_error gsm_disable_call_waiting(void)
{
	return gsm_send_at_command((const char*)("AT+CCWA=0,0\r"), (const char*)RESPONS_OK,18000,0, NULL);
    1af8:	2300      	movs	r3, #0
{
    1afa:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+CCWA=0,0\r"), (const char*)RESPONS_OK,18000,0, NULL);
    1afc:	4a03      	ldr	r2, [pc, #12]	; (1b0c <gsm_disable_call_waiting+0x14>)
    1afe:	9300      	str	r3, [sp, #0]
    1b00:	4903      	ldr	r1, [pc, #12]	; (1b10 <gsm_disable_call_waiting+0x18>)
    1b02:	4c04      	ldr	r4, [pc, #16]	; (1b14 <gsm_disable_call_waiting+0x1c>)
    1b04:	4804      	ldr	r0, [pc, #16]	; (1b18 <gsm_disable_call_waiting+0x20>)
    1b06:	47a0      	blx	r4
}
    1b08:	bd16      	pop	{r1, r2, r4, pc}
    1b0a:	46c0      	nop			; (mov r8, r8)
    1b0c:	00004650 	.word	0x00004650
    1b10:	0000d42f 	.word	0x0000d42f
    1b14:	00001349 	.word	0x00001349
    1b18:	0000d08e 	.word	0x0000d08e

00001b1c <gsm_stop_play_record_file>:
}


enum gsm_error gsm_stop_play_record_file(void)
{
	return gsm_send_at_command((const char*)("AT+CREC=5\r"), (const char*)RESPONS_OK,2000,0, NULL);
    1b1c:	2300      	movs	r3, #0
    1b1e:	22fa      	movs	r2, #250	; 0xfa
{
    1b20:	b513      	push	{r0, r1, r4, lr}
	return gsm_send_at_command((const char*)("AT+CREC=5\r"), (const char*)RESPONS_OK,2000,0, NULL);
    1b22:	00d2      	lsls	r2, r2, #3
    1b24:	9300      	str	r3, [sp, #0]
    1b26:	4902      	ldr	r1, [pc, #8]	; (1b30 <gsm_stop_play_record_file+0x14>)
    1b28:	4c02      	ldr	r4, [pc, #8]	; (1b34 <gsm_stop_play_record_file+0x18>)
    1b2a:	4803      	ldr	r0, [pc, #12]	; (1b38 <gsm_stop_play_record_file+0x1c>)
    1b2c:	47a0      	blx	r4
}
    1b2e:	bd16      	pop	{r1, r2, r4, pc}
    1b30:	0000d42f 	.word	0x0000d42f
    1b34:	00001349 	.word	0x00001349
    1b38:	0000d1fd 	.word	0x0000d1fd

00001b3c <gsm_play_record_file>:

enum gsm_error gsm_play_record_file(const char *filename,bool playInfinitely)
{
    1b3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	{
		repeat = 1;
	}
	
	const uint8_t MAX_BUFFER = 50;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    1b3e:	4b10      	ldr	r3, [pc, #64]	; (1b80 <gsm_play_record_file+0x44>)
{
    1b40:	0005      	movs	r5, r0
    1b42:	000e      	movs	r6, r1
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    1b44:	2032      	movs	r0, #50	; 0x32
    1b46:	2101      	movs	r1, #1
    1b48:	4798      	blx	r3
    1b4a:	1e04      	subs	r4, r0, #0
	//buffer created???
	if (cmdx == NULL)
    1b4c:	d015      	beq.n	1b7a <gsm_play_record_file+0x3e>
	{
		return 0;
	}
	memset(cmdx, '\0', MAX_BUFFER);
    1b4e:	2232      	movs	r2, #50	; 0x32
    1b50:	2100      	movs	r1, #0
    1b52:	4b0c      	ldr	r3, [pc, #48]	; (1b84 <gsm_play_record_file+0x48>)
    1b54:	4798      	blx	r3
	
	snprintf((char*)cmdx, MAX_BUFFER, "AT+CREC=4,\"C:\\User\\%c.amr\",0,90,%u\r",filename,repeat);
    1b56:	002b      	movs	r3, r5
    1b58:	4a0b      	ldr	r2, [pc, #44]	; (1b88 <gsm_play_record_file+0x4c>)
    1b5a:	2132      	movs	r1, #50	; 0x32
    1b5c:	4d0b      	ldr	r5, [pc, #44]	; (1b8c <gsm_play_record_file+0x50>)
    1b5e:	9600      	str	r6, [sp, #0]
    1b60:	0020      	movs	r0, r4
    1b62:	47a8      	blx	r5
	
	gsm_send_at_command((const char*)(cmdx), (const char*)RESPONS_OK,2000,0, NULL);
    1b64:	2300      	movs	r3, #0
    1b66:	22fa      	movs	r2, #250	; 0xfa
    1b68:	9300      	str	r3, [sp, #0]
    1b6a:	00d2      	lsls	r2, r2, #3
    1b6c:	4908      	ldr	r1, [pc, #32]	; (1b90 <gsm_play_record_file+0x54>)
    1b6e:	0020      	movs	r0, r4
    1b70:	4d08      	ldr	r5, [pc, #32]	; (1b94 <gsm_play_record_file+0x58>)
    1b72:	47a8      	blx	r5
	free(cmdx);
    1b74:	0020      	movs	r0, r4
    1b76:	4b08      	ldr	r3, [pc, #32]	; (1b98 <gsm_play_record_file+0x5c>)
    1b78:	4798      	blx	r3
	return GSM_ERROR_NONE;
	
}
    1b7a:	2000      	movs	r0, #0
    1b7c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    1b7e:	46c0      	nop			; (mov r8, r8)
    1b80:	0000c2f5 	.word	0x0000c2f5
    1b84:	0000c3f7 	.word	0x0000c3f7
    1b88:	0000d13f 	.word	0x0000d13f
    1b8c:	0000c599 	.word	0x0000c599
    1b90:	0000d42f 	.word	0x0000d42f
    1b94:	00001349 	.word	0x00001349
    1b98:	0000c389 	.word	0x0000c389

00001b9c <gsm_get_internal_rtc_time>:

enum gsm_error gsm_get_internal_rtc_time(void)
{
    1b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t MAX_BUFFER = 70;
	char *cmdx = (char*) calloc(MAX_BUFFER,sizeof(char));
    1b9e:	4b29      	ldr	r3, [pc, #164]	; (1c44 <gsm_get_internal_rtc_time+0xa8>)
    1ba0:	2101      	movs	r1, #1
    1ba2:	2046      	movs	r0, #70	; 0x46
    1ba4:	4798      	blx	r3
    1ba6:	0007      	movs	r7, r0
	if (cmdx == NULL)
	{
		free(cmdx);
		return 0;
    1ba8:	1e05      	subs	r5, r0, #0
	if (cmdx == NULL)
    1baa:	d040      	beq.n	1c2e <gsm_get_internal_rtc_time+0x92>
	}
	memset(cmdx, '\0', MAX_BUFFER);
    1bac:	2246      	movs	r2, #70	; 0x46
    1bae:	2100      	movs	r1, #0
    1bb0:	4b25      	ldr	r3, [pc, #148]	; (1c48 <gsm_get_internal_rtc_time+0xac>)
    1bb2:	4798      	blx	r3
	
	enum gsm_error err;
	err = gsm_send_at_command((const char*)"AT+CCLK?\r", (const char*)RESPONS_OK,5000,MAX_BUFFER, cmdx);
    1bb4:	4c25      	ldr	r4, [pc, #148]	; (1c4c <gsm_get_internal_rtc_time+0xb0>)
    1bb6:	9700      	str	r7, [sp, #0]
    1bb8:	2346      	movs	r3, #70	; 0x46
    1bba:	4a25      	ldr	r2, [pc, #148]	; (1c50 <gsm_get_internal_rtc_time+0xb4>)
    1bbc:	4925      	ldr	r1, [pc, #148]	; (1c54 <gsm_get_internal_rtc_time+0xb8>)
    1bbe:	4826      	ldr	r0, [pc, #152]	; (1c58 <gsm_get_internal_rtc_time+0xbc>)
    1bc0:	47a0      	blx	r4
    1bc2:	4c26      	ldr	r4, [pc, #152]	; (1c5c <gsm_get_internal_rtc_time+0xc0>)
    1bc4:	1e05      	subs	r5, r0, #0
	if(err==GSM_ERROR_NONE)
    1bc6:	d134      	bne.n	1c32 <gsm_get_internal_rtc_time+0x96>
	{
		char *cclktocken;
		cclktocken = strtok(cmdx,"\"");
    1bc8:	4e25      	ldr	r6, [pc, #148]	; (1c60 <gsm_get_internal_rtc_time+0xc4>)
    1bca:	4926      	ldr	r1, [pc, #152]	; (1c64 <gsm_get_internal_rtc_time+0xc8>)
    1bcc:	0038      	movs	r0, r7
    1bce:	47b0      	blx	r6
		cclktocken = strtok(NULL,"\"");
    1bd0:	4924      	ldr	r1, [pc, #144]	; (1c64 <gsm_get_internal_rtc_time+0xc8>)
    1bd2:	0028      	movs	r0, r5
    1bd4:	47b0      	blx	r6
		
		cclktocken = strtok(cclktocken,"/");
    1bd6:	4924      	ldr	r1, [pc, #144]	; (1c68 <gsm_get_internal_rtc_time+0xcc>)
    1bd8:	47b0      	blx	r6
		struct_internal_rtc.Network_year = atoi(cclktocken);
    1bda:	4b24      	ldr	r3, [pc, #144]	; (1c6c <gsm_get_internal_rtc_time+0xd0>)
    1bdc:	4798      	blx	r3
    1bde:	b2c0      	uxtb	r0, r0
		
		cclktocken = strtok(NULL,"/");
    1be0:	4921      	ldr	r1, [pc, #132]	; (1c68 <gsm_get_internal_rtc_time+0xcc>)
		struct_internal_rtc.Network_year = atoi(cclktocken);
    1be2:	7020      	strb	r0, [r4, #0]
		cclktocken = strtok(NULL,"/");
    1be4:	0028      	movs	r0, r5
    1be6:	47b0      	blx	r6
		struct_internal_rtc.Network_month = atoi(cclktocken);
    1be8:	4b20      	ldr	r3, [pc, #128]	; (1c6c <gsm_get_internal_rtc_time+0xd0>)
    1bea:	4798      	blx	r3
    1bec:	b2c0      	uxtb	r0, r0
		
		cclktocken = strtok(NULL,",");
    1bee:	4920      	ldr	r1, [pc, #128]	; (1c70 <gsm_get_internal_rtc_time+0xd4>)
		struct_internal_rtc.Network_month = atoi(cclktocken);
    1bf0:	7060      	strb	r0, [r4, #1]
		cclktocken = strtok(NULL,",");
    1bf2:	0028      	movs	r0, r5
    1bf4:	47b0      	blx	r6
		struct_internal_rtc.Network_date = atoi(cclktocken);
    1bf6:	4b1d      	ldr	r3, [pc, #116]	; (1c6c <gsm_get_internal_rtc_time+0xd0>)
    1bf8:	4798      	blx	r3
    1bfa:	b2c0      	uxtb	r0, r0
		
		cclktocken = strtok(NULL,":");
    1bfc:	491d      	ldr	r1, [pc, #116]	; (1c74 <gsm_get_internal_rtc_time+0xd8>)
		struct_internal_rtc.Network_date = atoi(cclktocken);
    1bfe:	70a0      	strb	r0, [r4, #2]
		cclktocken = strtok(NULL,":");
    1c00:	0028      	movs	r0, r5
    1c02:	47b0      	blx	r6
		struct_internal_rtc.Network_hour = atoi(cclktocken);
    1c04:	4b19      	ldr	r3, [pc, #100]	; (1c6c <gsm_get_internal_rtc_time+0xd0>)
    1c06:	4798      	blx	r3
    1c08:	b2c0      	uxtb	r0, r0
		
		cclktocken = strtok(NULL,":");
    1c0a:	491a      	ldr	r1, [pc, #104]	; (1c74 <gsm_get_internal_rtc_time+0xd8>)
		struct_internal_rtc.Network_hour = atoi(cclktocken);
    1c0c:	70e0      	strb	r0, [r4, #3]
		cclktocken = strtok(NULL,":");
    1c0e:	0028      	movs	r0, r5
    1c10:	47b0      	blx	r6
		struct_internal_rtc.Network_minute = atoi(cclktocken);
    1c12:	4b16      	ldr	r3, [pc, #88]	; (1c6c <gsm_get_internal_rtc_time+0xd0>)
    1c14:	4798      	blx	r3
    1c16:	b2c0      	uxtb	r0, r0
    1c18:	7120      	strb	r0, [r4, #4]
		
		cclktocken = strtok(NULL,"+");
    1c1a:	4917      	ldr	r1, [pc, #92]	; (1c78 <gsm_get_internal_rtc_time+0xdc>)
    1c1c:	0028      	movs	r0, r5
    1c1e:	47b0      	blx	r6
		struct_internal_rtc.Network_second = atoi(cclktocken);
    1c20:	4b12      	ldr	r3, [pc, #72]	; (1c6c <gsm_get_internal_rtc_time+0xd0>)
    1c22:	4798      	blx	r3
    1c24:	b2c0      	uxtb	r0, r0
    1c26:	7160      	strb	r0, [r4, #5]
		struct_internal_rtc.Network_hour = 0;
		struct_internal_rtc.Network_minute = 0;
		struct_internal_rtc.Network_second = 0;
	}
	
	free(cmdx);
    1c28:	0038      	movs	r0, r7
    1c2a:	4b14      	ldr	r3, [pc, #80]	; (1c7c <gsm_get_internal_rtc_time+0xe0>)
    1c2c:	4798      	blx	r3
	return err;
}
    1c2e:	0028      	movs	r0, r5
    1c30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		struct_internal_rtc.Network_year = 0;
    1c32:	2300      	movs	r3, #0
    1c34:	7023      	strb	r3, [r4, #0]
		struct_internal_rtc.Network_month = 0;
    1c36:	7063      	strb	r3, [r4, #1]
		struct_internal_rtc.Network_date = 0;
    1c38:	70a3      	strb	r3, [r4, #2]
		struct_internal_rtc.Network_hour = 0;
    1c3a:	70e3      	strb	r3, [r4, #3]
		struct_internal_rtc.Network_minute = 0;
    1c3c:	7123      	strb	r3, [r4, #4]
		struct_internal_rtc.Network_second = 0;
    1c3e:	7163      	strb	r3, [r4, #5]
    1c40:	e7f2      	b.n	1c28 <gsm_get_internal_rtc_time+0x8c>
    1c42:	46c0      	nop			; (mov r8, r8)
    1c44:	0000c2f5 	.word	0x0000c2f5
    1c48:	0000c3f7 	.word	0x0000c3f7
    1c4c:	00001349 	.word	0x00001349
    1c50:	00001388 	.word	0x00001388
    1c54:	0000d42f 	.word	0x0000d42f
    1c58:	0000d0f1 	.word	0x0000d0f1
    1c5c:	200005dc 	.word	0x200005dc
    1c60:	0000c6e9 	.word	0x0000c6e9
    1c64:	0000d0fb 	.word	0x0000d0fb
    1c68:	0000d0fd 	.word	0x0000d0fd
    1c6c:	0000c2e9 	.word	0x0000c2e9
    1c70:	0000d05d 	.word	0x0000d05d
    1c74:	0000d75a 	.word	0x0000d75a
    1c78:	0000d5f0 	.word	0x0000d5f0
    1c7c:	0000c389 	.word	0x0000c389

00001c80 <gsm_config_module>:


enum gsm_error gsm_config_module(void)
{
    1c80:	b510      	push	{r4, lr}
	if (gsm_check_module() == GSM_ERROR_NONE)
    1c82:	4b20      	ldr	r3, [pc, #128]	; (1d04 <gsm_config_module+0x84>)
    1c84:	4798      	blx	r3
    1c86:	2800      	cmp	r0, #0
    1c88:	d13a      	bne.n	1d00 <gsm_config_module+0x80>
	{
		if (gsm_factory_reset() == GSM_ERROR_NONE)
    1c8a:	4b1f      	ldr	r3, [pc, #124]	; (1d08 <gsm_config_module+0x88>)
    1c8c:	4798      	blx	r3
    1c8e:	2800      	cmp	r0, #0
    1c90:	d136      	bne.n	1d00 <gsm_config_module+0x80>
		{
			vTaskDelay(2000/portTICK_PERIOD_MS);
    1c92:	20fa      	movs	r0, #250	; 0xfa
    1c94:	4c1d      	ldr	r4, [pc, #116]	; (1d0c <gsm_config_module+0x8c>)
    1c96:	00c0      	lsls	r0, r0, #3
    1c98:	47a0      	blx	r4
			
			if (gsm_detect_simcard() == GSM_ERROR_NONE)
    1c9a:	4b1d      	ldr	r3, [pc, #116]	; (1d10 <gsm_config_module+0x90>)
    1c9c:	4798      	blx	r3
    1c9e:	2800      	cmp	r0, #0
    1ca0:	d12e      	bne.n	1d00 <gsm_config_module+0x80>
			{
				if (gsm_echo_off() == GSM_ERROR_NONE)
    1ca2:	4b1c      	ldr	r3, [pc, #112]	; (1d14 <gsm_config_module+0x94>)
    1ca4:	4798      	blx	r3
    1ca6:	2800      	cmp	r0, #0
    1ca8:	d12a      	bne.n	1d00 <gsm_config_module+0x80>
				{
					if (gsm_set_baudrate() == GSM_ERROR_NONE)
    1caa:	4b1b      	ldr	r3, [pc, #108]	; (1d18 <gsm_config_module+0x98>)
    1cac:	4798      	blx	r3
    1cae:	2800      	cmp	r0, #0
    1cb0:	d126      	bne.n	1d00 <gsm_config_module+0x80>
					{
						vTaskDelay(2000/portTICK_PERIOD_MS);
    1cb2:	20fa      	movs	r0, #250	; 0xfa
    1cb4:	00c0      	lsls	r0, r0, #3
    1cb6:	47a0      	blx	r4
						
						if (gsm_enable_calling_line_identification()==GSM_ERROR_NONE)
    1cb8:	4b18      	ldr	r3, [pc, #96]	; (1d1c <gsm_config_module+0x9c>)
    1cba:	4798      	blx	r3
    1cbc:	2800      	cmp	r0, #0
    1cbe:	d11f      	bne.n	1d00 <gsm_config_module+0x80>
						{
							if (gsm_enable_connected_line_identification_presentation() == GSM_ERROR_NONE)
    1cc0:	4b17      	ldr	r3, [pc, #92]	; (1d20 <gsm_config_module+0xa0>)
    1cc2:	4798      	blx	r3
    1cc4:	2800      	cmp	r0, #0
    1cc6:	d11b      	bne.n	1d00 <gsm_config_module+0x80>
							{
								if (gsm_enable_list_current_calls_of_ME() == GSM_ERROR_NONE)
    1cc8:	4b16      	ldr	r3, [pc, #88]	; (1d24 <gsm_config_module+0xa4>)
    1cca:	4798      	blx	r3
    1ccc:	2800      	cmp	r0, #0
    1cce:	d117      	bne.n	1d00 <gsm_config_module+0x80>
								{
									if (gsm_select_sms_message_formate_text_mode() == GSM_ERROR_NONE)
    1cd0:	4b15      	ldr	r3, [pc, #84]	; (1d28 <gsm_config_module+0xa8>)
    1cd2:	4798      	blx	r3
    1cd4:	2800      	cmp	r0, #0
    1cd6:	d113      	bne.n	1d00 <gsm_config_module+0x80>
									{
										if (gsm_set_sms_text_mode_parameter() == GSM_ERROR_NONE)
    1cd8:	4b14      	ldr	r3, [pc, #80]	; (1d2c <gsm_config_module+0xac>)
    1cda:	4798      	blx	r3
    1cdc:	2800      	cmp	r0, #0
    1cde:	d10f      	bne.n	1d00 <gsm_config_module+0x80>
										{
											if (gsm_enable_new_sms_message_indications() == GSM_ERROR_NONE)
    1ce0:	4b13      	ldr	r3, [pc, #76]	; (1d30 <gsm_config_module+0xb0>)
    1ce2:	4798      	blx	r3
    1ce4:	2800      	cmp	r0, #0
    1ce6:	d10b      	bne.n	1d00 <gsm_config_module+0x80>
											{
												if (gsm_enable_network_time_update() == GSM_ERROR_NONE)
    1ce8:	4b12      	ldr	r3, [pc, #72]	; (1d34 <gsm_config_module+0xb4>)
    1cea:	4798      	blx	r3
    1cec:	2800      	cmp	r0, #0
    1cee:	d107      	bne.n	1d00 <gsm_config_module+0x80>
												{
													if (gsm_enable_DTMF_detection() == GSM_ERROR_NONE)
    1cf0:	4b11      	ldr	r3, [pc, #68]	; (1d38 <gsm_config_module+0xb8>)
    1cf2:	4798      	blx	r3
    1cf4:	2800      	cmp	r0, #0
    1cf6:	d103      	bne.n	1d00 <gsm_config_module+0x80>
													{
														//if (gsm_enable_sleep_mode()==GSM_ERROR_NONE)
														{
															if (gsm_store_active_profile() == GSM_ERROR_NONE)
    1cf8:	4b10      	ldr	r3, [pc, #64]	; (1d3c <gsm_config_module+0xbc>)
    1cfa:	4798      	blx	r3
    1cfc:	2800      	cmp	r0, #0
    1cfe:	d000      	beq.n	1d02 <gsm_config_module+0x82>
															{
																return GSM_ERROR_NONE; 
															}
															else
															{
																return GSM_ERROR_CONFIG_FAILED;
    1d00:	2010      	movs	r0, #16
	{
		return GSM_ERROR_CONFIG_FAILED;
	}
	
	return GSM_ERROR_CONFIG_FAILED;
}
    1d02:	bd10      	pop	{r4, pc}
    1d04:	0000149d 	.word	0x0000149d
    1d08:	00001621 	.word	0x00001621
    1d0c:	00007fa1 	.word	0x00007fa1
    1d10:	00001549 	.word	0x00001549
    1d14:	00001645 	.word	0x00001645
    1d18:	00001505 	.word	0x00001505
    1d1c:	000015b5 	.word	0x000015b5
    1d20:	000015d9 	.word	0x000015d9
    1d24:	000015fd 	.word	0x000015fd
    1d28:	00001669 	.word	0x00001669
    1d2c:	0000168d 	.word	0x0000168d
    1d30:	00001799 	.word	0x00001799
    1d34:	00001a2d 	.word	0x00001a2d
    1d38:	00001a51 	.word	0x00001a51
    1d3c:	00001591 	.word	0x00001591

00001d40 <gsm_read_response_line>:

bool gsm_read_response_line(char *buffer,uint8_t length)
{
    1d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1d42:	0005      	movs	r5, r0
    1d44:	000c      	movs	r4, r1
	bool line_non_empty = false;
    1d46:	2600      	movs	r6, #0
	while (length > 1) 
    1d48:	2c01      	cmp	r4, #1
    1d4a:	d802      	bhi.n	1d52 <gsm_read_response_line+0x12>
			/* End of command, finished reading line */
			break;
		}
	}

	*(buffer) = '\0';
    1d4c:	2300      	movs	r3, #0
    1d4e:	702b      	strb	r3, [r5, #0]
	
	return line_non_empty;
    1d50:	e00b      	b.n	1d6a <gsm_read_response_line+0x2a>
		if (xQueueReceive(gsm_rx_queue, &curr_rx, 500 / portTICK_PERIOD_MS) == pdFALSE)
    1d52:	466b      	mov	r3, sp
    1d54:	22fa      	movs	r2, #250	; 0xfa
    1d56:	1ddf      	adds	r7, r3, #7
    1d58:	4b0a      	ldr	r3, [pc, #40]	; (1d84 <gsm_read_response_line+0x44>)
    1d5a:	0052      	lsls	r2, r2, #1
    1d5c:	6818      	ldr	r0, [r3, #0]
    1d5e:	0039      	movs	r1, r7
    1d60:	4b09      	ldr	r3, [pc, #36]	; (1d88 <gsm_read_response_line+0x48>)
    1d62:	4798      	blx	r3
    1d64:	2800      	cmp	r0, #0
    1d66:	d102      	bne.n	1d6e <gsm_read_response_line+0x2e>
			return false;
    1d68:	0006      	movs	r6, r0
}
    1d6a:	0030      	movs	r0, r6
    1d6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (curr_rx == '\n') 
    1d6e:	783b      	ldrb	r3, [r7, #0]
    1d70:	2b0a      	cmp	r3, #10
    1d72:	d0e9      	beq.n	1d48 <gsm_read_response_line+0x8>
		else if (curr_rx != '\r') 
    1d74:	2b0d      	cmp	r3, #13
    1d76:	d0e9      	beq.n	1d4c <gsm_read_response_line+0xc>
			length--;
    1d78:	3c01      	subs	r4, #1
			*(buffer++) = curr_rx;
    1d7a:	702b      	strb	r3, [r5, #0]
			length--;
    1d7c:	b2e4      	uxtb	r4, r4
			*(buffer++) = curr_rx;
    1d7e:	3501      	adds	r5, #1
			line_non_empty = true;
    1d80:	2601      	movs	r6, #1
    1d82:	e7e1      	b.n	1d48 <gsm_read_response_line+0x8>
    1d84:	20000224 	.word	0x20000224
    1d88:	000076f9 	.word	0x000076f9

00001d8c <gsm_responseLine_isNew_SMS_Received>:

char gsm_responseLine_isNew_SMS_Received(char *response)
{
    1d8c:	b570      	push	{r4, r5, r6, lr}
	
	char sms_index = 0;
	
	if (strstr(response,"+CMTI:"))
    1d8e:	490b      	ldr	r1, [pc, #44]	; (1dbc <gsm_responseLine_isNew_SMS_Received+0x30>)
    1d90:	4b0b      	ldr	r3, [pc, #44]	; (1dc0 <gsm_responseLine_isNew_SMS_Received+0x34>)
{
    1d92:	0004      	movs	r4, r0
	if (strstr(response,"+CMTI:"))
    1d94:	4798      	blx	r3
    1d96:	2800      	cmp	r0, #0
    1d98:	d00e      	beq.n	1db8 <gsm_responseLine_isNew_SMS_Received+0x2c>
	{
		char *ptr_tocken;
		ptr_tocken = strtok(response,",");
    1d9a:	4d0a      	ldr	r5, [pc, #40]	; (1dc4 <gsm_responseLine_isNew_SMS_Received+0x38>)
    1d9c:	0020      	movs	r0, r4
    1d9e:	0029      	movs	r1, r5
    1da0:	4c09      	ldr	r4, [pc, #36]	; (1dc8 <gsm_responseLine_isNew_SMS_Received+0x3c>)
    1da2:	47a0      	blx	r4
		ptr_tocken = strtok(NULL,",");
    1da4:	0029      	movs	r1, r5
    1da6:	2000      	movs	r0, #0
    1da8:	47a0      	blx	r4
    1daa:	0004      	movs	r4, r0
		
		RemoveSpaces(ptr_tocken);
    1dac:	4b07      	ldr	r3, [pc, #28]	; (1dcc <gsm_responseLine_isNew_SMS_Received+0x40>)
    1dae:	4798      	blx	r3
		
		sms_index = atoi(ptr_tocken);
    1db0:	0020      	movs	r0, r4
    1db2:	4b07      	ldr	r3, [pc, #28]	; (1dd0 <gsm_responseLine_isNew_SMS_Received+0x44>)
    1db4:	4798      	blx	r3
    1db6:	b2c0      	uxtb	r0, r0
	{
		sms_index =  0;
	}
	
	return sms_index;
}
    1db8:	bd70      	pop	{r4, r5, r6, pc}
    1dba:	46c0      	nop			; (mov r8, r8)
    1dbc:	0000d19c 	.word	0x0000d19c
    1dc0:	0000c6b7 	.word	0x0000c6b7
    1dc4:	0000d05d 	.word	0x0000d05d
    1dc8:	0000c6e9 	.word	0x0000c6e9
    1dcc:	000016b1 	.word	0x000016b1
    1dd0:	0000c2e9 	.word	0x0000c2e9

00001dd4 <gsm_responseLine_isRinging>:

bool gsm_responseLine_isRinging(char *response)
{
    1dd4:	b510      	push	{r4, lr}
	if (strstr(response,"RING"))
    1dd6:	4b03      	ldr	r3, [pc, #12]	; (1de4 <gsm_responseLine_isRinging+0x10>)
    1dd8:	4903      	ldr	r1, [pc, #12]	; (1de8 <gsm_responseLine_isRinging+0x14>)
    1dda:	4798      	blx	r3
    1ddc:	1e43      	subs	r3, r0, #1
    1dde:	4198      	sbcs	r0, r3
	}
	else
	{
		return false;
	}
}
    1de0:	b2c0      	uxtb	r0, r0
    1de2:	bd10      	pop	{r4, pc}
    1de4:	0000c6b7 	.word	0x0000c6b7
    1de8:	0000d1a3 	.word	0x0000d1a3

00001dec <gsm_responseLine_get_IncommingCallNo>:

bool gsm_responseLine_get_IncommingCallNo(char *response,char *phone_number)
{
    1dec:	b570      	push	{r4, r5, r6, lr}
	if(strstr(response,"+CLIP"))
    1dee:	4b11      	ldr	r3, [pc, #68]	; (1e34 <gsm_responseLine_get_IncommingCallNo+0x48>)
{
    1df0:	000e      	movs	r6, r1
	if(strstr(response,"+CLIP"))
    1df2:	4911      	ldr	r1, [pc, #68]	; (1e38 <gsm_responseLine_get_IncommingCallNo+0x4c>)
{
    1df4:	0004      	movs	r4, r0
	if(strstr(response,"+CLIP"))
    1df6:	4798      	blx	r3
    1df8:	2800      	cmp	r0, #0
    1dfa:	d101      	bne.n	1e00 <gsm_responseLine_get_IncommingCallNo+0x14>
		  strcpy(phone_number, (char *)(ptr_tocken));		  
		  return true;
	}
	else
	{
		return false;
    1dfc:	2000      	movs	r0, #0
	}
}
    1dfe:	bd70      	pop	{r4, r5, r6, pc}
		  ptr_tocken = strtok(response,":"); 
    1e00:	490e      	ldr	r1, [pc, #56]	; (1e3c <gsm_responseLine_get_IncommingCallNo+0x50>)
    1e02:	0020      	movs	r0, r4
    1e04:	4c0e      	ldr	r4, [pc, #56]	; (1e40 <gsm_responseLine_get_IncommingCallNo+0x54>)
    1e06:	47a0      	blx	r4
		  ptr_tocken = strtok(NULL,",");
    1e08:	490e      	ldr	r1, [pc, #56]	; (1e44 <gsm_responseLine_get_IncommingCallNo+0x58>)
    1e0a:	2000      	movs	r0, #0
    1e0c:	47a0      	blx	r4
		  ptr_tocken = strtok(ptr_tocken,"\"");
    1e0e:	4d0e      	ldr	r5, [pc, #56]	; (1e48 <gsm_responseLine_get_IncommingCallNo+0x5c>)
    1e10:	0029      	movs	r1, r5
    1e12:	47a0      	blx	r4
		  ptr_tocken = strtok(NULL,"\"");
    1e14:	0029      	movs	r1, r5
    1e16:	2000      	movs	r0, #0
    1e18:	47a0      	blx	r4
		  if (!strstr(ptr_tocken,"+"))
    1e1a:	212b      	movs	r1, #43	; 0x2b
    1e1c:	4b0b      	ldr	r3, [pc, #44]	; (1e4c <gsm_responseLine_get_IncommingCallNo+0x60>)
		  ptr_tocken = strtok(NULL,"\"");
    1e1e:	0004      	movs	r4, r0
		  if (!strstr(ptr_tocken,"+"))
    1e20:	4798      	blx	r3
    1e22:	2800      	cmp	r0, #0
    1e24:	d0ea      	beq.n	1dfc <gsm_responseLine_get_IncommingCallNo+0x10>
		  strcpy(phone_number, (char *)(ptr_tocken));		  
    1e26:	0021      	movs	r1, r4
    1e28:	0030      	movs	r0, r6
    1e2a:	4b09      	ldr	r3, [pc, #36]	; (1e50 <gsm_responseLine_get_IncommingCallNo+0x64>)
    1e2c:	4798      	blx	r3
		  return true;
    1e2e:	2001      	movs	r0, #1
    1e30:	e7e5      	b.n	1dfe <gsm_responseLine_get_IncommingCallNo+0x12>
    1e32:	46c0      	nop			; (mov r8, r8)
    1e34:	0000c6b7 	.word	0x0000c6b7
    1e38:	0000d175 	.word	0x0000d175
    1e3c:	0000d75a 	.word	0x0000d75a
    1e40:	0000c6e9 	.word	0x0000c6e9
    1e44:	0000d05d 	.word	0x0000d05d
    1e48:	0000d0fb 	.word	0x0000d0fb
    1e4c:	0000c65b 	.word	0x0000c65b
    1e50:	0000c677 	.word	0x0000c677

00001e54 <gsm_responseLine_isCallCut>:

bool gsm_responseLine_isCallCut(char *response)
{
    1e54:	b570      	push	{r4, r5, r6, lr}
	if (strstr(response,"NO CARRIER"))
    1e56:	490c      	ldr	r1, [pc, #48]	; (1e88 <gsm_responseLine_isCallCut+0x34>)
    1e58:	4d0c      	ldr	r5, [pc, #48]	; (1e8c <gsm_responseLine_isCallCut+0x38>)
{
    1e5a:	0006      	movs	r6, r0
	if (strstr(response,"NO CARRIER"))
    1e5c:	47a8      	blx	r5
	{
		return true;
    1e5e:	2401      	movs	r4, #1
	if (strstr(response,"NO CARRIER"))
    1e60:	2800      	cmp	r0, #0
    1e62:	d10f      	bne.n	1e84 <gsm_responseLine_isCallCut+0x30>
	}
	else if (strstr(response,"BUSY"))
    1e64:	490a      	ldr	r1, [pc, #40]	; (1e90 <gsm_responseLine_isCallCut+0x3c>)
    1e66:	0030      	movs	r0, r6
    1e68:	47a8      	blx	r5
    1e6a:	2800      	cmp	r0, #0
    1e6c:	d10a      	bne.n	1e84 <gsm_responseLine_isCallCut+0x30>
	{
		return true;
	}
	else if (strstr(response,"NO ANSWER"))
    1e6e:	4909      	ldr	r1, [pc, #36]	; (1e94 <gsm_responseLine_isCallCut+0x40>)
    1e70:	0030      	movs	r0, r6
    1e72:	47a8      	blx	r5
    1e74:	2800      	cmp	r0, #0
    1e76:	d105      	bne.n	1e84 <gsm_responseLine_isCallCut+0x30>
	{
		return true;
	}
	else if (strstr(response,"ERROR"))
    1e78:	4907      	ldr	r1, [pc, #28]	; (1e98 <gsm_responseLine_isCallCut+0x44>)
    1e7a:	0030      	movs	r0, r6
    1e7c:	47a8      	blx	r5
    1e7e:	1e44      	subs	r4, r0, #1
    1e80:	41a0      	sbcs	r0, r4
    1e82:	b2c4      	uxtb	r4, r0
	}
	else
	{
		return false;
	}
}
    1e84:	0020      	movs	r0, r4
    1e86:	bd70      	pop	{r4, r5, r6, pc}
    1e88:	0000d17b 	.word	0x0000d17b
    1e8c:	0000c6b7 	.word	0x0000c6b7
    1e90:	0000d186 	.word	0x0000d186
    1e94:	0000d18b 	.word	0x0000d18b
    1e98:	0000d3f4 	.word	0x0000d3f4

00001e9c <gsm_responseLine_isNew_DTMF_Command_Received>:

bool gsm_responseLine_isNew_DTMF_Command_Received(char *response)
{
    1e9c:	b510      	push	{r4, lr}
	if (strstr(response,"+DTMF:"))
    1e9e:	4b03      	ldr	r3, [pc, #12]	; (1eac <gsm_responseLine_isNew_DTMF_Command_Received+0x10>)
    1ea0:	4903      	ldr	r1, [pc, #12]	; (1eb0 <gsm_responseLine_isNew_DTMF_Command_Received+0x14>)
    1ea2:	4798      	blx	r3
    1ea4:	1e43      	subs	r3, r0, #1
    1ea6:	4198      	sbcs	r0, r3
	}
	else
	{
		return false;
	}
}
    1ea8:	b2c0      	uxtb	r0, r0
    1eaa:	bd10      	pop	{r4, pc}
    1eac:	0000c6b7 	.word	0x0000c6b7
    1eb0:	0000d195 	.word	0x0000d195

00001eb4 <gsm_responseLine_is_StopSound_Received>:

bool gsm_responseLine_is_StopSound_Received(char *response)
{
    1eb4:	b510      	push	{r4, lr}
	if (strstr(response,"+CREC: 0"))
    1eb6:	4b03      	ldr	r3, [pc, #12]	; (1ec4 <gsm_responseLine_is_StopSound_Received+0x10>)
    1eb8:	4903      	ldr	r1, [pc, #12]	; (1ec8 <gsm_responseLine_is_StopSound_Received+0x14>)
    1eba:	4798      	blx	r3
    1ebc:	1e43      	subs	r3, r0, #1
    1ebe:	4198      	sbcs	r0, r3
	}
	else
	{
		return false;
	}
}
    1ec0:	b2c0      	uxtb	r0, r0
    1ec2:	bd10      	pop	{r4, pc}
    1ec4:	0000c6b7 	.word	0x0000c6b7
    1ec8:	0000d1a8 	.word	0x0000d1a8

00001ecc <port_pin_set_output_level>:

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1ecc:	2200      	movs	r2, #0
{
    1ece:	b510      	push	{r4, lr}
	uint8_t group_index = (gpio_pin / 32);
    1ed0:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
    1ed2:	09c4      	lsrs	r4, r0, #7
    1ed4:	4294      	cmp	r4, r2
    1ed6:	d102      	bne.n	1ede <port_pin_set_output_level+0x12>
		return &(ports[port_index]->Group[group_index]);
    1ed8:	01da      	lsls	r2, r3, #7
    1eda:	4b06      	ldr	r3, [pc, #24]	; (1ef4 <port_pin_set_output_level+0x28>)
    1edc:	18d2      	adds	r2, r2, r3
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1ede:	231f      	movs	r3, #31
    1ee0:	4018      	ands	r0, r3
    1ee2:	3b1e      	subs	r3, #30
    1ee4:	4083      	lsls	r3, r0
	if (level) {
    1ee6:	2900      	cmp	r1, #0
    1ee8:	d001      	beq.n	1eee <port_pin_set_output_level+0x22>
		port_base->OUTSET.reg = pin_mask;
    1eea:	6193      	str	r3, [r2, #24]
	}
}
    1eec:	bd10      	pop	{r4, pc}
		port_base->OUTCLR.reg = pin_mask;
    1eee:	6153      	str	r3, [r2, #20]
}
    1ef0:	e7fc      	b.n	1eec <port_pin_set_output_level+0x20>
    1ef2:	46c0      	nop			; (mov r8, r8)
    1ef4:	41004400 	.word	0x41004400

00001ef8 <LCD_PWR_CONFIG>:
	config->powersave  = false;
    1ef8:	2300      	movs	r3, #0
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
	command(LCD_ENTRYMODESET | _displaymode);
}

void LCD_PWR_CONFIG()
{
    1efa:	b507      	push	{r0, r1, r2, lr}
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_OUTPUT;
    1efc:	2201      	movs	r2, #1
    1efe:	a901      	add	r1, sp, #4
    1f00:	708b      	strb	r3, [r1, #2]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
    1f02:	704b      	strb	r3, [r1, #1]
	port_pin_set_config(LCD_PWR_CNTRL, &pin_conf_gsm_status);
    1f04:	2024      	movs	r0, #36	; 0x24
    1f06:	4b02      	ldr	r3, [pc, #8]	; (1f10 <LCD_PWR_CONFIG+0x18>)
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_OUTPUT;
    1f08:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(LCD_PWR_CNTRL, &pin_conf_gsm_status);
    1f0a:	4798      	blx	r3
}
    1f0c:	bd07      	pop	{r0, r1, r2, pc}
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	00009345 	.word	0x00009345

00001f14 <LCD_PWR_EN>:
		port_base->OUTSET.reg = pin_mask;
    1f14:	2210      	movs	r2, #16
    1f16:	4b01      	ldr	r3, [pc, #4]	; (1f1c <LCD_PWR_EN+0x8>)
    1f18:	601a      	str	r2, [r3, #0]

void LCD_PWR_EN()
{
	port_pin_set_output_level(LCD_PWR_CNTRL,HIGH);
}
    1f1a:	4770      	bx	lr
    1f1c:	41004498 	.word	0x41004498

00001f20 <LCD_PWR_DIS>:
		port_base->OUTCLR.reg = pin_mask;
    1f20:	2210      	movs	r2, #16
    1f22:	4b01      	ldr	r3, [pc, #4]	; (1f28 <LCD_PWR_DIS+0x8>)
    1f24:	601a      	str	r2, [r3, #0]
void LCD_PWR_DIS()
{
	port_pin_set_output_level(LCD_PWR_CNTRL,LOW);
}
    1f26:	4770      	bx	lr
    1f28:	41004494 	.word	0x41004494

00001f2c <pulseEnable>:
}



void pulseEnable(void)
{
    1f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 	port_pin_set_output_level(_enable_pin, LOW);
    1f2e:	4f1e      	ldr	r7, [pc, #120]	; (1fa8 <pulseEnable+0x7c>)
    1f30:	4e1e      	ldr	r6, [pc, #120]	; (1fac <pulseEnable+0x80>)
    1f32:	7838      	ldrb	r0, [r7, #0]
    1f34:	2100      	movs	r1, #0
    1f36:	47b0      	blx	r6
 	delay_us(1);
    1f38:	4b1d      	ldr	r3, [pc, #116]	; (1fb0 <pulseEnable+0x84>)
    1f3a:	2000      	movs	r0, #0
    1f3c:	4798      	blx	r3
    1f3e:	2400      	movs	r4, #0
    1f40:	0002      	movs	r2, r0
    1f42:	0023      	movs	r3, r4
    1f44:	2100      	movs	r1, #0
    1f46:	481b      	ldr	r0, [pc, #108]	; (1fb4 <pulseEnable+0x88>)
    1f48:	4d1b      	ldr	r5, [pc, #108]	; (1fb8 <pulseEnable+0x8c>)
    1f4a:	1880      	adds	r0, r0, r2
    1f4c:	4159      	adcs	r1, r3
    1f4e:	4a1b      	ldr	r2, [pc, #108]	; (1fbc <pulseEnable+0x90>)
    1f50:	2300      	movs	r3, #0
    1f52:	47a8      	blx	r5
    1f54:	4b1a      	ldr	r3, [pc, #104]	; (1fc0 <pulseEnable+0x94>)
    1f56:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, HIGH);
    1f58:	7838      	ldrb	r0, [r7, #0]
    1f5a:	2101      	movs	r1, #1
    1f5c:	47b0      	blx	r6
 	delay_us(1);
    1f5e:	0020      	movs	r0, r4
    1f60:	4b13      	ldr	r3, [pc, #76]	; (1fb0 <pulseEnable+0x84>)
    1f62:	4798      	blx	r3
    1f64:	0023      	movs	r3, r4
    1f66:	0002      	movs	r2, r0
    1f68:	2100      	movs	r1, #0
    1f6a:	4812      	ldr	r0, [pc, #72]	; (1fb4 <pulseEnable+0x88>)
    1f6c:	4d12      	ldr	r5, [pc, #72]	; (1fb8 <pulseEnable+0x8c>)
    1f6e:	1880      	adds	r0, r0, r2
    1f70:	4159      	adcs	r1, r3
    1f72:	4a12      	ldr	r2, [pc, #72]	; (1fbc <pulseEnable+0x90>)
    1f74:	2300      	movs	r3, #0
    1f76:	47a8      	blx	r5
    1f78:	4b11      	ldr	r3, [pc, #68]	; (1fc0 <pulseEnable+0x94>)
    1f7a:	4798      	blx	r3
 	port_pin_set_output_level(_enable_pin, LOW);
    1f7c:	7838      	ldrb	r0, [r7, #0]
    1f7e:	0021      	movs	r1, r4
    1f80:	47b0      	blx	r6
 	delay_us(100);
    1f82:	0020      	movs	r0, r4
    1f84:	4b0a      	ldr	r3, [pc, #40]	; (1fb0 <pulseEnable+0x84>)
    1f86:	4798      	blx	r3
    1f88:	2264      	movs	r2, #100	; 0x64
    1f8a:	2300      	movs	r3, #0
    1f8c:	0021      	movs	r1, r4
    1f8e:	4c0d      	ldr	r4, [pc, #52]	; (1fc4 <pulseEnable+0x98>)
    1f90:	47a0      	blx	r4
    1f92:	2400      	movs	r4, #0
    1f94:	4b07      	ldr	r3, [pc, #28]	; (1fb4 <pulseEnable+0x88>)
    1f96:	4a09      	ldr	r2, [pc, #36]	; (1fbc <pulseEnable+0x90>)
    1f98:	18c0      	adds	r0, r0, r3
    1f9a:	4161      	adcs	r1, r4
    1f9c:	4c06      	ldr	r4, [pc, #24]	; (1fb8 <pulseEnable+0x8c>)
    1f9e:	2300      	movs	r3, #0
    1fa0:	47a0      	blx	r4
    1fa2:	4b07      	ldr	r3, [pc, #28]	; (1fc0 <pulseEnable+0x94>)
    1fa4:	4798      	blx	r3

	//port_pin_set_output_level(_enable_pin, HIGH);
	//delay_us(1);
	//port_pin_set_output_level(_enable_pin, LOW);
	//delay_us(500);
}
    1fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fa8:	20000625 	.word	0x20000625
    1fac:	00001ecd 	.word	0x00001ecd
    1fb0:	00009e11 	.word	0x00009e11
    1fb4:	006acfbf 	.word	0x006acfbf
    1fb8:	0000a649 	.word	0x0000a649
    1fbc:	006acfc0 	.word	0x006acfc0
    1fc0:	20000001 	.word	0x20000001
    1fc4:	0000a689 	.word	0x0000a689

00001fc8 <write4bits>:
{
    1fc8:	b570      	push	{r4, r5, r6, lr}
    1fca:	0006      	movs	r6, r0
	for (int i = 0; i < 4; i++) 
    1fcc:	2400      	movs	r4, #0
		port_pin_set_output_level(_data_pins[i], (value >> i) & 0x01);
    1fce:	2501      	movs	r5, #1
    1fd0:	0031      	movs	r1, r6
    1fd2:	4121      	asrs	r1, r4
    1fd4:	4b05      	ldr	r3, [pc, #20]	; (1fec <write4bits+0x24>)
    1fd6:	4029      	ands	r1, r5
    1fd8:	5d18      	ldrb	r0, [r3, r4]
    1fda:	4b05      	ldr	r3, [pc, #20]	; (1ff0 <write4bits+0x28>)
	for (int i = 0; i < 4; i++) 
    1fdc:	3401      	adds	r4, #1
		port_pin_set_output_level(_data_pins[i], (value >> i) & 0x01);
    1fde:	4798      	blx	r3
	for (int i = 0; i < 4; i++) 
    1fe0:	2c04      	cmp	r4, #4
    1fe2:	d1f5      	bne.n	1fd0 <write4bits+0x8>
	pulseEnable();
    1fe4:	4b03      	ldr	r3, [pc, #12]	; (1ff4 <write4bits+0x2c>)
    1fe6:	4798      	blx	r3
}
    1fe8:	bd70      	pop	{r4, r5, r6, pc}
    1fea:	46c0      	nop			; (mov r8, r8)
    1fec:	2000061f 	.word	0x2000061f
    1ff0:	00001ecd 	.word	0x00001ecd
    1ff4:	00001f2d 	.word	0x00001f2d

00001ff8 <send>:
	return 1;
}

void send(uint8_t value, uint8_t mode) 
{
	port_pin_set_output_level(_rs_pin, mode);
    1ff8:	1e4b      	subs	r3, r1, #1
    1ffa:	4199      	sbcs	r1, r3
{
    1ffc:	b570      	push	{r4, r5, r6, lr}
    1ffe:	0004      	movs	r4, r0
	port_pin_set_output_level(_rs_pin, mode);
    2000:	4b05      	ldr	r3, [pc, #20]	; (2018 <STACK_SIZE+0x18>)
    2002:	b2c9      	uxtb	r1, r1
    2004:	7818      	ldrb	r0, [r3, #0]
    2006:	4b05      	ldr	r3, [pc, #20]	; (201c <STACK_SIZE+0x1c>)
    2008:	4798      	blx	r3
	
	{
		write4bits(value>>4);
    200a:	4d05      	ldr	r5, [pc, #20]	; (2020 <STACK_SIZE+0x20>)
    200c:	0920      	lsrs	r0, r4, #4
    200e:	47a8      	blx	r5
		write4bits(value);
    2010:	0020      	movs	r0, r4
    2012:	47a8      	blx	r5
	}
}
    2014:	bd70      	pop	{r4, r5, r6, pc}
    2016:	46c0      	nop			; (mov r8, r8)
    2018:	20000626 	.word	0x20000626
    201c:	00001ecd 	.word	0x00001ecd
    2020:	00001fc9 	.word	0x00001fc9

00002024 <command>:
{
    2024:	b510      	push	{r4, lr}
	send(value, LOW);
    2026:	2100      	movs	r1, #0
    2028:	4b01      	ldr	r3, [pc, #4]	; (2030 <command+0xc>)
    202a:	4798      	blx	r3
}
    202c:	bd10      	pop	{r4, pc}
    202e:	46c0      	nop			; (mov r8, r8)
    2030:	00001ff9 	.word	0x00001ff9

00002034 <LCD_write>:
    2034:	b510      	push	{r4, lr}
    2036:	2101      	movs	r1, #1
    2038:	4b01      	ldr	r3, [pc, #4]	; (2040 <LCD_write+0xc>)
    203a:	4798      	blx	r3
    203c:	2001      	movs	r0, #1
    203e:	bd10      	pop	{r4, pc}
    2040:	00001ff9 	.word	0x00001ff9

00002044 <LCD_clear>:

void LCD_clear(void)
{
    2044:	b510      	push	{r4, lr}
	command(LCD_CLEARDISPLAY);
    2046:	2001      	movs	r0, #1
    2048:	4b0a      	ldr	r3, [pc, #40]	; (2074 <LCD_clear+0x30>)
    204a:	4798      	blx	r3
	delay_us(2000);
    204c:	4b0a      	ldr	r3, [pc, #40]	; (2078 <LCD_clear+0x34>)
    204e:	2000      	movs	r0, #0
    2050:	4798      	blx	r3
    2052:	22fa      	movs	r2, #250	; 0xfa
    2054:	4c09      	ldr	r4, [pc, #36]	; (207c <LCD_clear+0x38>)
    2056:	00d2      	lsls	r2, r2, #3
    2058:	2300      	movs	r3, #0
    205a:	2100      	movs	r1, #0
    205c:	47a0      	blx	r4
    205e:	2300      	movs	r3, #0
    2060:	4a07      	ldr	r2, [pc, #28]	; (2080 <LCD_clear+0x3c>)
    2062:	4c08      	ldr	r4, [pc, #32]	; (2084 <LCD_clear+0x40>)
    2064:	1880      	adds	r0, r0, r2
    2066:	4159      	adcs	r1, r3
    2068:	4a07      	ldr	r2, [pc, #28]	; (2088 <LCD_clear+0x44>)
    206a:	2300      	movs	r3, #0
    206c:	47a0      	blx	r4
    206e:	4b07      	ldr	r3, [pc, #28]	; (208c <LCD_clear+0x48>)
    2070:	4798      	blx	r3
}
    2072:	bd10      	pop	{r4, pc}
    2074:	00002025 	.word	0x00002025
    2078:	00009e11 	.word	0x00009e11
    207c:	0000a689 	.word	0x0000a689
    2080:	006acfbf 	.word	0x006acfbf
    2084:	0000a649 	.word	0x0000a649
    2088:	006acfc0 	.word	0x006acfc0
    208c:	20000001 	.word	0x20000001

00002090 <LCD_setCursor>:
	command(LCD_RETURNHOME);
	delay_us(2000);
}

void LCD_setCursor(uint8_t col, uint8_t row)
{
    2090:	b510      	push	{r4, lr}
    2092:	1c0b      	adds	r3, r1, #0
    2094:	2903      	cmp	r1, #3
    2096:	d900      	bls.n	209a <LCD_setCursor+0xa>
    2098:	2303      	movs	r3, #3
	const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
	if ( row >= max_lines ) 
	{
		row = max_lines - 1; 
	}
	if ( row >= _numlines )
    209a:	4a08      	ldr	r2, [pc, #32]	; (20bc <LCD_setCursor+0x2c>)
    209c:	b2db      	uxtb	r3, r3
    209e:	7812      	ldrb	r2, [r2, #0]
    20a0:	429a      	cmp	r2, r3
    20a2:	d801      	bhi.n	20a8 <LCD_setCursor+0x18>
	{
		row = _numlines - 1;
    20a4:	3a01      	subs	r2, #1
    20a6:	b2d3      	uxtb	r3, r2
	}
	command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
    20a8:	4a05      	ldr	r2, [pc, #20]	; (20c0 <LCD_setCursor+0x30>)
    20aa:	5cd3      	ldrb	r3, [r2, r3]
    20ac:	18c3      	adds	r3, r0, r3
    20ae:	2080      	movs	r0, #128	; 0x80
    20b0:	4240      	negs	r0, r0
    20b2:	4318      	orrs	r0, r3
    20b4:	b2c0      	uxtb	r0, r0
    20b6:	4b03      	ldr	r3, [pc, #12]	; (20c4 <LCD_setCursor+0x34>)
    20b8:	4798      	blx	r3
}
    20ba:	bd10      	pop	{r4, pc}
    20bc:	2000061e 	.word	0x2000061e
    20c0:	20000618 	.word	0x20000618
    20c4:	00002025 	.word	0x00002025

000020c8 <LCD_display>:
	_displaycontrol &= ~LCD_DISPLAYON;
	command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LCD_display(void) 
{
	_displaycontrol |= LCD_DISPLAYON;
    20c8:	2304      	movs	r3, #4
	command(LCD_DISPLAYCONTROL | _displaycontrol);
    20ca:	200c      	movs	r0, #12
{
    20cc:	b510      	push	{r4, lr}
	_displaycontrol |= LCD_DISPLAYON;
    20ce:	4904      	ldr	r1, [pc, #16]	; (20e0 <LCD_display+0x18>)
    20d0:	780a      	ldrb	r2, [r1, #0]
    20d2:	4313      	orrs	r3, r2
    20d4:	700b      	strb	r3, [r1, #0]
	command(LCD_DISPLAYCONTROL | _displaycontrol);
    20d6:	4310      	orrs	r0, r2
    20d8:	4b02      	ldr	r3, [pc, #8]	; (20e4 <LCD_display+0x1c>)
    20da:	4798      	blx	r3
}
    20dc:	bd10      	pop	{r4, pc}
    20de:	46c0      	nop			; (mov r8, r8)
    20e0:	2000061d 	.word	0x2000061d
    20e4:	00002025 	.word	0x00002025

000020e8 <LCD_init>:
{
    20e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	delay_init();
    20ea:	4b4d      	ldr	r3, [pc, #308]	; (2220 <LCD_init+0x138>)
    20ec:	4798      	blx	r3
	_rs_pin     = LCD_RS_PIN;
    20ee:	203f      	movs	r0, #63	; 0x3f
    20f0:	4b4c      	ldr	r3, [pc, #304]	; (2224 <LCD_init+0x13c>)
	_enable_pin = LCD_EN_PIN;
    20f2:	4a4d      	ldr	r2, [pc, #308]	; (2228 <LCD_init+0x140>)
	_rs_pin     = LCD_RS_PIN;
    20f4:	7018      	strb	r0, [r3, #0]
	_enable_pin = LCD_EN_PIN;
    20f6:	233e      	movs	r3, #62	; 0x3e
    20f8:	7013      	strb	r3, [r2, #0]
		_displayfunction |= LCD_2LINE;
    20fa:	2208      	movs	r2, #8
	_row_offsets[0] = row0;
    20fc:	2400      	movs	r4, #0
	_data_pins[0] = LCD_DATA_LINE_D4_PIN;
    20fe:	4e4b      	ldr	r6, [pc, #300]	; (222c <LCD_init+0x144>)
    2100:	3b1d      	subs	r3, #29
    2102:	7033      	strb	r3, [r6, #0]
	_data_pins[1] = LCD_DATA_LINE_D5_PIN;
    2104:	3b01      	subs	r3, #1
    2106:	7073      	strb	r3, [r6, #1]
	_data_pins[2] = LCD_DATA_LINE_D6_PIN;
    2108:	3303      	adds	r3, #3
    210a:	70b3      	strb	r3, [r6, #2]
	_data_pins[3] = LCD_DATA_LINE_D7_PIN;
    210c:	3b01      	subs	r3, #1
    210e:	70f3      	strb	r3, [r6, #3]
		_displayfunction |= LCD_2LINE;
    2110:	4b47      	ldr	r3, [pc, #284]	; (2230 <LCD_init+0x148>)
	config->input_pull = PORT_PIN_PULL_UP;
    2112:	ad01      	add	r5, sp, #4
    2114:	701a      	strb	r2, [r3, #0]
	_numlines = lines;
    2116:	4b47      	ldr	r3, [pc, #284]	; (2234 <LCD_init+0x14c>)
    2118:	3a06      	subs	r2, #6
    211a:	701a      	strb	r2, [r3, #0]
	_row_offsets[0] = row0;
    211c:	4b46      	ldr	r3, [pc, #280]	; (2238 <LCD_init+0x150>)
	_row_offsets[1] = row1;
    211e:	323e      	adds	r2, #62	; 0x3e
    2120:	705a      	strb	r2, [r3, #1]
	_row_offsets[2] = row2;
    2122:	3a30      	subs	r2, #48	; 0x30
    2124:	709a      	strb	r2, [r3, #2]
	_row_offsets[3] = row3;
    2126:	3240      	adds	r2, #64	; 0x40
	_row_offsets[0] = row0;
    2128:	701c      	strb	r4, [r3, #0]
	_row_offsets[3] = row3;
    212a:	70da      	strb	r2, [r3, #3]
    212c:	2301      	movs	r3, #1
	port_pin_set_config(_rs_pin,&config_port_pin);
    212e:	0029      	movs	r1, r5
    2130:	4f42      	ldr	r7, [pc, #264]	; (223c <LCD_init+0x154>)
    2132:	706b      	strb	r3, [r5, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2134:	702b      	strb	r3, [r5, #0]
	config->powersave  = false;
    2136:	70ac      	strb	r4, [r5, #2]
	port_pin_set_config(_rs_pin,&config_port_pin);
    2138:	47b8      	blx	r7
	port_pin_set_config(_enable_pin,&config_port_pin);
    213a:	4b3b      	ldr	r3, [pc, #236]	; (2228 <LCD_init+0x140>)
    213c:	0029      	movs	r1, r5
    213e:	7818      	ldrb	r0, [r3, #0]
    2140:	47b8      	blx	r7
		port_pin_set_config(_data_pins[i],&config_port_pin);
    2142:	5d30      	ldrb	r0, [r6, r4]
    2144:	0029      	movs	r1, r5
	for (int i=0; i<4; ++i)
    2146:	3401      	adds	r4, #1
		port_pin_set_config(_data_pins[i],&config_port_pin);
    2148:	47b8      	blx	r7
	for (int i=0; i<4; ++i)
    214a:	2c04      	cmp	r4, #4
    214c:	d1f9      	bne.n	2142 <LCD_init+0x5a>
	delay_us(50000);
    214e:	4f3c      	ldr	r7, [pc, #240]	; (2240 <LCD_init+0x158>)
    2150:	2000      	movs	r0, #0
    2152:	47b8      	blx	r7
    2154:	4d3b      	ldr	r5, [pc, #236]	; (2244 <LCD_init+0x15c>)
    2156:	4a3c      	ldr	r2, [pc, #240]	; (2248 <LCD_init+0x160>)
    2158:	2300      	movs	r3, #0
    215a:	2100      	movs	r1, #0
    215c:	47a8      	blx	r5
    215e:	2300      	movs	r3, #0
    2160:	4a3a      	ldr	r2, [pc, #232]	; (224c <LCD_init+0x164>)
    2162:	4d3b      	ldr	r5, [pc, #236]	; (2250 <LCD_init+0x168>)
    2164:	1880      	adds	r0, r0, r2
    2166:	4159      	adcs	r1, r3
    2168:	4a3a      	ldr	r2, [pc, #232]	; (2254 <LCD_init+0x16c>)
    216a:	2300      	movs	r3, #0
    216c:	47a8      	blx	r5
    216e:	4e3a      	ldr	r6, [pc, #232]	; (2258 <LCD_init+0x170>)
    2170:	47b0      	blx	r6
	port_pin_set_output_level(_rs_pin,LOW);
    2172:	4b2c      	ldr	r3, [pc, #176]	; (2224 <LCD_init+0x13c>)
    2174:	4d39      	ldr	r5, [pc, #228]	; (225c <LCD_init+0x174>)
    2176:	7818      	ldrb	r0, [r3, #0]
    2178:	2100      	movs	r1, #0
    217a:	47a8      	blx	r5
	port_pin_set_output_level(_enable_pin,LOW);
    217c:	4b2a      	ldr	r3, [pc, #168]	; (2228 <LCD_init+0x140>)
    217e:	2100      	movs	r1, #0
    2180:	7818      	ldrb	r0, [r3, #0]
    2182:	47a8      	blx	r5
	 write4bits(0x03);
    2184:	4b36      	ldr	r3, [pc, #216]	; (2260 <LCD_init+0x178>)
    2186:	2003      	movs	r0, #3
    2188:	4798      	blx	r3
	 delay_us(4500); 
    218a:	2000      	movs	r0, #0
    218c:	47b8      	blx	r7
    218e:	4d2d      	ldr	r5, [pc, #180]	; (2244 <LCD_init+0x15c>)
    2190:	4a34      	ldr	r2, [pc, #208]	; (2264 <LCD_init+0x17c>)
    2192:	2300      	movs	r3, #0
    2194:	2100      	movs	r1, #0
    2196:	47a8      	blx	r5
    2198:	2300      	movs	r3, #0
    219a:	4a2c      	ldr	r2, [pc, #176]	; (224c <LCD_init+0x164>)
    219c:	4d2c      	ldr	r5, [pc, #176]	; (2250 <LCD_init+0x168>)
    219e:	1880      	adds	r0, r0, r2
    21a0:	4159      	adcs	r1, r3
    21a2:	4a2c      	ldr	r2, [pc, #176]	; (2254 <LCD_init+0x16c>)
    21a4:	2300      	movs	r3, #0
    21a6:	47a8      	blx	r5
    21a8:	47b0      	blx	r6
	 write4bits(0x03);
    21aa:	4b2d      	ldr	r3, [pc, #180]	; (2260 <LCD_init+0x178>)
    21ac:	2003      	movs	r0, #3
    21ae:	4798      	blx	r3
	 delay_us(4500); 
    21b0:	2000      	movs	r0, #0
    21b2:	47b8      	blx	r7
    21b4:	4d23      	ldr	r5, [pc, #140]	; (2244 <LCD_init+0x15c>)
    21b6:	4a2b      	ldr	r2, [pc, #172]	; (2264 <LCD_init+0x17c>)
    21b8:	2300      	movs	r3, #0
    21ba:	2100      	movs	r1, #0
    21bc:	47a8      	blx	r5
    21be:	2300      	movs	r3, #0
    21c0:	4a22      	ldr	r2, [pc, #136]	; (224c <LCD_init+0x164>)
    21c2:	4d23      	ldr	r5, [pc, #140]	; (2250 <LCD_init+0x168>)
    21c4:	1880      	adds	r0, r0, r2
    21c6:	4159      	adcs	r1, r3
    21c8:	4a22      	ldr	r2, [pc, #136]	; (2254 <LCD_init+0x16c>)
    21ca:	2300      	movs	r3, #0
    21cc:	47a8      	blx	r5
    21ce:	47b0      	blx	r6
	 write4bits(0x03);
    21d0:	4b23      	ldr	r3, [pc, #140]	; (2260 <LCD_init+0x178>)
    21d2:	2003      	movs	r0, #3
    21d4:	4798      	blx	r3
	 delay_us(150);
    21d6:	2000      	movs	r0, #0
    21d8:	47b8      	blx	r7
    21da:	4d1a      	ldr	r5, [pc, #104]	; (2244 <LCD_init+0x15c>)
    21dc:	2296      	movs	r2, #150	; 0x96
    21de:	2300      	movs	r3, #0
    21e0:	2100      	movs	r1, #0
    21e2:	47a8      	blx	r5
    21e4:	2300      	movs	r3, #0
    21e6:	4a19      	ldr	r2, [pc, #100]	; (224c <LCD_init+0x164>)
    21e8:	4d19      	ldr	r5, [pc, #100]	; (2250 <LCD_init+0x168>)
    21ea:	1880      	adds	r0, r0, r2
    21ec:	4159      	adcs	r1, r3
    21ee:	4a19      	ldr	r2, [pc, #100]	; (2254 <LCD_init+0x16c>)
    21f0:	2300      	movs	r3, #0
    21f2:	47a8      	blx	r5
    21f4:	47b0      	blx	r6
	 write4bits(0x02);
    21f6:	2002      	movs	r0, #2
    21f8:	4b19      	ldr	r3, [pc, #100]	; (2260 <LCD_init+0x178>)
    21fa:	4798      	blx	r3
	 command(LCD_FUNCTIONSET | _displayfunction);
    21fc:	2020      	movs	r0, #32
    21fe:	4b0c      	ldr	r3, [pc, #48]	; (2230 <LCD_init+0x148>)
    2200:	4d19      	ldr	r5, [pc, #100]	; (2268 <LCD_init+0x180>)
    2202:	781b      	ldrb	r3, [r3, #0]
    2204:	4318      	orrs	r0, r3
    2206:	47a8      	blx	r5
	_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
    2208:	4b18      	ldr	r3, [pc, #96]	; (226c <LCD_init+0x184>)
    220a:	701c      	strb	r4, [r3, #0]
	LCD_display();
    220c:	4b18      	ldr	r3, [pc, #96]	; (2270 <LCD_init+0x188>)
    220e:	4798      	blx	r3
	LCD_clear();
    2210:	4b18      	ldr	r3, [pc, #96]	; (2274 <LCD_init+0x18c>)
    2212:	4798      	blx	r3
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    2214:	2202      	movs	r2, #2
    2216:	4b18      	ldr	r3, [pc, #96]	; (2278 <LCD_init+0x190>)
	command(LCD_ENTRYMODESET | _displaymode);
    2218:	2006      	movs	r0, #6
	_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
    221a:	701a      	strb	r2, [r3, #0]
	command(LCD_ENTRYMODESET | _displaymode);
    221c:	47a8      	blx	r5
}
    221e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2220:	00009049 	.word	0x00009049
    2224:	20000626 	.word	0x20000626
    2228:	20000625 	.word	0x20000625
    222c:	2000061f 	.word	0x2000061f
    2230:	20000624 	.word	0x20000624
    2234:	2000061e 	.word	0x2000061e
    2238:	20000618 	.word	0x20000618
    223c:	00009345 	.word	0x00009345
    2240:	00009e11 	.word	0x00009e11
    2244:	0000a689 	.word	0x0000a689
    2248:	0000c350 	.word	0x0000c350
    224c:	006acfbf 	.word	0x006acfbf
    2250:	0000a649 	.word	0x0000a649
    2254:	006acfc0 	.word	0x006acfc0
    2258:	20000001 	.word	0x20000001
    225c:	00001ecd 	.word	0x00001ecd
    2260:	00001fc9 	.word	0x00001fc9
    2264:	00001194 	.word	0x00001194
    2268:	00002025 	.word	0x00002025
    226c:	2000061d 	.word	0x2000061d
    2270:	000020c9 	.word	0x000020c9
    2274:	00002045 	.word	0x00002045
    2278:	20000623 	.word	0x20000623

0000227c <Buffer_writer>:

//////////////////////////////////////////////////////////////////////////


size_t Buffer_writer(const char *buffer)
{
    227c:	b570      	push	{r4, r5, r6, lr}
	size_t size = strlen(buffer);
    227e:	4b07      	ldr	r3, [pc, #28]	; (229c <Buffer_writer+0x20>)
{
    2280:	0004      	movs	r4, r0
	size_t size = strlen(buffer);
    2282:	4798      	blx	r3
    2284:	0005      	movs	r5, r0
    2286:	1826      	adds	r6, r4, r0
	size_t n = 0;
	while (size--) {
    2288:	42b4      	cmp	r4, r6
    228a:	d101      	bne.n	2290 <Buffer_writer+0x14>
		if (LCD_write(*buffer++)) n++;
		else break;
	}
	return n;
}
    228c:	0028      	movs	r0, r5
    228e:	bd70      	pop	{r4, r5, r6, pc}
	send(value, HIGH);
    2290:	7820      	ldrb	r0, [r4, #0]
    2292:	2101      	movs	r1, #1
    2294:	4b02      	ldr	r3, [pc, #8]	; (22a0 <Buffer_writer+0x24>)
    2296:	4798      	blx	r3
    2298:	3401      	adds	r4, #1
    229a:	e7f5      	b.n	2288 <Buffer_writer+0xc>
    229c:	0000c687 	.word	0x0000c687
    22a0:	00001ff9 	.word	0x00001ff9

000022a4 <print_ch>:
{
	return Buffer_writer(str);
}

size_t print_ch(char c)
{
    22a4:	b510      	push	{r4, lr}
	send(value, HIGH);
    22a6:	2101      	movs	r1, #1
    22a8:	4b01      	ldr	r3, [pc, #4]	; (22b0 <print_ch+0xc>)
    22aa:	4798      	blx	r3
	return LCD_write(c);
}
    22ac:	2001      	movs	r0, #1
    22ae:	bd10      	pop	{r4, pc}
    22b0:	00001ff9 	.word	0x00001ff9

000022b4 <LCD_Create_Custom_createChar>:
	command(LCD_SETCGRAMADDR | (location << 3));
    22b4:	2307      	movs	r3, #7
{
    22b6:	b570      	push	{r4, r5, r6, lr}
    22b8:	000c      	movs	r4, r1
	command(LCD_SETCGRAMADDR | (location << 3));
    22ba:	4018      	ands	r0, r3
    22bc:	00c0      	lsls	r0, r0, #3
    22be:	3339      	adds	r3, #57	; 0x39
    22c0:	4318      	orrs	r0, r3
    22c2:	0025      	movs	r5, r4
    22c4:	4b04      	ldr	r3, [pc, #16]	; (22d8 <LCD_Create_Custom_createChar+0x24>)
    22c6:	4798      	blx	r3
    22c8:	3508      	adds	r5, #8
		LCD_write(charmap[i]);
    22ca:	7820      	ldrb	r0, [r4, #0]
    22cc:	4b03      	ldr	r3, [pc, #12]	; (22dc <LCD_Create_Custom_createChar+0x28>)
    22ce:	3401      	adds	r4, #1
    22d0:	4798      	blx	r3
	for (int i=0; i<8; i++)
    22d2:	42ac      	cmp	r4, r5
    22d4:	d1f9      	bne.n	22ca <LCD_Create_Custom_createChar+0x16>
}
    22d6:	bd70      	pop	{r4, r5, r6, pc}
    22d8:	00002025 	.word	0x00002025
    22dc:	000022a5 	.word	0x000022a5

000022e0 <lcd_printf>:
	return n;
}


void lcd_printf(const  char *fmt, ...)
{
    22e0:	b40f      	push	{r0, r1, r2, r3}
    22e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    22e4:	ac06      	add	r4, sp, #24
    22e6:	cc40      	ldmia	r4!, {r6}
	int num_chars;
	char *lcd_buff;
	num_chars = strlen(fmt) + 3;
    22e8:	4b0a      	ldr	r3, [pc, #40]	; (2314 <lcd_printf+0x34>)
    22ea:	0030      	movs	r0, r6
    22ec:	4798      	blx	r3
	lcd_buff = (char *)malloc(sizeof(char) * num_chars);
    22ee:	4b0a      	ldr	r3, [pc, #40]	; (2318 <lcd_printf+0x38>)
	num_chars = strlen(fmt) + 3;
    22f0:	3003      	adds	r0, #3
	lcd_buff = (char *)malloc(sizeof(char) * num_chars);
    22f2:	4798      	blx	r3
    22f4:	0005      	movs	r5, r0
	va_list args;
	va_start(args, fmt);
	vsprintf(lcd_buff,fmt,args);
    22f6:	0031      	movs	r1, r6
    22f8:	0022      	movs	r2, r4
	va_start(args, fmt);
    22fa:	9401      	str	r4, [sp, #4]
	vsprintf(lcd_buff,fmt,args);
    22fc:	4b07      	ldr	r3, [pc, #28]	; (231c <lcd_printf+0x3c>)
    22fe:	4798      	blx	r3
	Buffer_writer(lcd_buff);
    2300:	0028      	movs	r0, r5
    2302:	4b07      	ldr	r3, [pc, #28]	; (2320 <lcd_printf+0x40>)
    2304:	4798      	blx	r3
	va_end(args);
	free(lcd_buff);
    2306:	0028      	movs	r0, r5
    2308:	4b06      	ldr	r3, [pc, #24]	; (2324 <lcd_printf+0x44>)
    230a:	4798      	blx	r3
}
    230c:	bc73      	pop	{r0, r1, r4, r5, r6}
    230e:	bc08      	pop	{r3}
    2310:	b004      	add	sp, #16
    2312:	4718      	bx	r3
    2314:	0000c687 	.word	0x0000c687
    2318:	0000c375 	.word	0x0000c375
    231c:	0000c975 	.word	0x0000c975
    2320:	0000227d 	.word	0x0000227d
    2324:	0000c389 	.word	0x0000c389

00002328 <StringtoUpperCase>:
#include "yalgo.h"
#include "itoa.h"


void StringtoUpperCase(char *str)
{
    2328:	b570      	push	{r4, r5, r6, lr}
    232a:	0005      	movs	r5, r0
	if (!str) return;
	for (char *p = str; *p; p++) {
		*p = toupper(*p);
    232c:	2603      	movs	r6, #3
	if (!str) return;
    232e:	2800      	cmp	r0, #0
    2330:	d10a      	bne.n	2348 <StringtoUpperCase+0x20>
	}
}
    2332:	bd70      	pop	{r4, r5, r6, pc}
		*p = toupper(*p);
    2334:	4b06      	ldr	r3, [pc, #24]	; (2350 <StringtoUpperCase+0x28>)
    2336:	4798      	blx	r3
    2338:	1900      	adds	r0, r0, r4
    233a:	7843      	ldrb	r3, [r0, #1]
    233c:	4033      	ands	r3, r6
    233e:	2b02      	cmp	r3, #2
    2340:	d100      	bne.n	2344 <StringtoUpperCase+0x1c>
    2342:	3c20      	subs	r4, #32
    2344:	702c      	strb	r4, [r5, #0]
	for (char *p = str; *p; p++) {
    2346:	3501      	adds	r5, #1
    2348:	782c      	ldrb	r4, [r5, #0]
    234a:	2c00      	cmp	r4, #0
    234c:	d1f2      	bne.n	2334 <StringtoUpperCase+0xc>
    234e:	e7f0      	b.n	2332 <StringtoUpperCase+0xa>
    2350:	0000c359 	.word	0x0000c359

00002354 <StringstartsWith>:

bool StringstartsWith(const char *str,const char *pre)
{
    2354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2356:	0005      	movs	r5, r0
	size_t lenpre = strlen(pre),
    2358:	4f09      	ldr	r7, [pc, #36]	; (2380 <StringstartsWith+0x2c>)
    235a:	0008      	movs	r0, r1
{
    235c:	000c      	movs	r4, r1
	size_t lenpre = strlen(pre),
    235e:	47b8      	blx	r7
    2360:	0006      	movs	r6, r0
	lenstr = strlen(str);
    2362:	0028      	movs	r0, r5
    2364:	47b8      	blx	r7
    2366:	2300      	movs	r3, #0
	return lenstr < lenpre ? false : strncmp(pre, str, lenpre) == 0;
    2368:	4286      	cmp	r6, r0
    236a:	d807      	bhi.n	237c <StringstartsWith+0x28>
    236c:	4b05      	ldr	r3, [pc, #20]	; (2384 <StringstartsWith+0x30>)
    236e:	0032      	movs	r2, r6
    2370:	0029      	movs	r1, r5
    2372:	0020      	movs	r0, r4
    2374:	4798      	blx	r3
    2376:	4243      	negs	r3, r0
    2378:	4143      	adcs	r3, r0
    237a:	b2db      	uxtb	r3, r3
    237c:	0018      	movs	r0, r3
}
    237e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2380:	0000c687 	.word	0x0000c687
    2384:	0000c695 	.word	0x0000c695

00002388 <sendSMS.part.5>:
void verifyRemoteNumber(void)
{
	sendSMS(("VMM01"),true,SEND_TO_M2M_REMOTE);
}

void sendSMS(char *msg, bool predefMsg, uint8_t isM2M)  ////void sendSMS(char *msg, bool predefMsg = false, uint8_t isM2M);
    2388:	b570      	push	{r4, r5, r6, lr}
    238a:	0006      	movs	r6, r0
    238c:	b08c      	sub	sp, #48	; 0x30
    238e:	4d19      	ldr	r5, [pc, #100]	; (23f4 <sendSMS.part.5+0x6c>)
		}
	}
	
	char phone_number[20];
	
	if(isM2M==SEND_TO_M2M_MASTER)
    2390:	2902      	cmp	r1, #2
    2392:	d103      	bne.n	239c <sendSMS.part.5+0x14>
	{
		getM2MNumber(phone_number);
    2394:	4b18      	ldr	r3, [pc, #96]	; (23f8 <sendSMS.part.5+0x70>)
    2396:	a801      	add	r0, sp, #4
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
			strcpy(phone_number,mobile_no.mobile_no_ee);
		}
		else
		{
			getActiveNumber(phone_number);
    2398:	4798      	blx	r3
    239a:	e01e      	b.n	23da <sendSMS.part.5+0x52>
	else if (isM2M==SEND_TO_M2M_REMOTE)
    239c:	2901      	cmp	r1, #1
    239e:	d106      	bne.n	23ae <sendSMS.part.5+0x26>
		if (factory_settings_parameter_struct.ENABLE_M2M)
    23a0:	4b16      	ldr	r3, [pc, #88]	; (23fc <sendSMS.part.5+0x74>)
    23a2:	78db      	ldrb	r3, [r3, #3]
    23a4:	2b00      	cmp	r3, #0
    23a6:	d018      	beq.n	23da <sendSMS.part.5+0x52>
			getM2MRemoteNumber(phone_number);
    23a8:	a801      	add	r0, sp, #4
    23aa:	4b15      	ldr	r3, [pc, #84]	; (2400 <sendSMS.part.5+0x78>)
    23ac:	e7f4      	b.n	2398 <sendSMS.part.5+0x10>
		if (isMsgFromAdmin)
    23ae:	782b      	ldrb	r3, [r5, #0]
    23b0:	2b00      	cmp	r3, #0
    23b2:	d01c      	beq.n	23ee <sendSMS.part.5+0x66>
			memset(page_data, '\0', sizeof(page_data));
    23b4:	4c13      	ldr	r4, [pc, #76]	; (2404 <sendSMS.part.5+0x7c>)
    23b6:	223c      	movs	r2, #60	; 0x3c
    23b8:	2100      	movs	r1, #0
    23ba:	4b13      	ldr	r3, [pc, #76]	; (2408 <sendSMS.part.5+0x80>)
    23bc:	0020      	movs	r0, r4
    23be:	4798      	blx	r3
			eeprom_emulator_read_page(ADMIN_1_MOBILE_NUMBER_PAGE, page_data);
    23c0:	0021      	movs	r1, r4
    23c2:	4b12      	ldr	r3, [pc, #72]	; (240c <sendSMS.part.5+0x84>)
    23c4:	2000      	movs	r0, #0
    23c6:	4798      	blx	r3
			memcpy(&mobile_no,page_data,sizeof(mobile_no));
    23c8:	0021      	movs	r1, r4
    23ca:	4b11      	ldr	r3, [pc, #68]	; (2410 <sendSMS.part.5+0x88>)
    23cc:	2218      	movs	r2, #24
    23ce:	a806      	add	r0, sp, #24
    23d0:	4798      	blx	r3
			strcpy(phone_number,mobile_no.mobile_no_ee);
    23d2:	a907      	add	r1, sp, #28
    23d4:	a801      	add	r0, sp, #4
    23d6:	4b0f      	ldr	r3, [pc, #60]	; (2414 <sendSMS.part.5+0x8c>)
    23d8:	4798      	blx	r3
		}
	}
	gsm_send_sms(phone_number,msg);
    23da:	0031      	movs	r1, r6
    23dc:	a801      	add	r0, sp, #4
    23de:	4b0e      	ldr	r3, [pc, #56]	; (2418 <sendSMS.part.5+0x90>)
    23e0:	4798      	blx	r3
	isMsgFromAdmin = false;
    23e2:	2300      	movs	r3, #0
	inCall=false;
    23e4:	4a0d      	ldr	r2, [pc, #52]	; (241c <sendSMS.part.5+0x94>)
	isMsgFromAdmin = false;
    23e6:	702b      	strb	r3, [r5, #0]
	inCall=false;
    23e8:	7013      	strb	r3, [r2, #0]
}
    23ea:	b00c      	add	sp, #48	; 0x30
    23ec:	bd70      	pop	{r4, r5, r6, pc}
			getActiveNumber(phone_number);
    23ee:	a801      	add	r0, sp, #4
    23f0:	4b0b      	ldr	r3, [pc, #44]	; (2420 <sendSMS.part.5+0x98>)
    23f2:	e7d1      	b.n	2398 <sendSMS.part.5+0x10>
    23f4:	20000689 	.word	0x20000689
    23f8:	00000625 	.word	0x00000625
    23fc:	2000057a 	.word	0x2000057a
    2400:	00000651 	.word	0x00000651
    2404:	20000538 	.word	0x20000538
    2408:	0000c3f7 	.word	0x0000c3f7
    240c:	00009679 	.word	0x00009679
    2410:	0000c3c1 	.word	0x0000c3c1
    2414:	0000c677 	.word	0x0000c677
    2418:	000017bd 	.word	0x000017bd
    241c:	200006a8 	.word	0x200006a8
    2420:	000007c5 	.word	0x000007c5

00002424 <setObtainEvent>:
{
    2424:	b510      	push	{r4, lr}
	if (!obtainNewEvent  && xTaskGetTickCount() - obtainEventTimer > 1000)
    2426:	4c08      	ldr	r4, [pc, #32]	; (2448 <setObtainEvent+0x24>)
    2428:	7823      	ldrb	r3, [r4, #0]
    242a:	2b00      	cmp	r3, #0
    242c:	d10a      	bne.n	2444 <setObtainEvent+0x20>
    242e:	4b07      	ldr	r3, [pc, #28]	; (244c <setObtainEvent+0x28>)
    2430:	4798      	blx	r3
    2432:	4b07      	ldr	r3, [pc, #28]	; (2450 <setObtainEvent+0x2c>)
    2434:	681b      	ldr	r3, [r3, #0]
    2436:	1ac0      	subs	r0, r0, r3
    2438:	23fa      	movs	r3, #250	; 0xfa
    243a:	009b      	lsls	r3, r3, #2
    243c:	4298      	cmp	r0, r3
    243e:	d901      	bls.n	2444 <setObtainEvent+0x20>
		obtainNewEvent = true;
    2440:	2301      	movs	r3, #1
    2442:	7023      	strb	r3, [r4, #0]
}
    2444:	bd10      	pop	{r4, pc}
    2446:	46c0      	nop			; (mov r8, r8)
    2448:	20000686 	.word	0x20000686
    244c:	00007d29 	.word	0x00007d29
    2450:	200006f4 	.word	0x200006f4

00002454 <endCall>:
{
    2454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	nr  = 0;
    2456:	2400      	movs	r4, #0
    2458:	4b48      	ldr	r3, [pc, #288]	; (257c <endCall+0x128>)
    245a:	701c      	strb	r4, [r3, #0]
	inCall=false;
    245c:	4b48      	ldr	r3, [pc, #288]	; (2580 <endCall+0x12c>)
    245e:	701c      	strb	r4, [r3, #0]
	gsm_hangup_call();
    2460:	4b48      	ldr	r3, [pc, #288]	; (2584 <endCall+0x130>)
    2462:	4798      	blx	r3
	vTaskDelay(1000);
    2464:	20fa      	movs	r0, #250	; 0xfa
    2466:	4b48      	ldr	r3, [pc, #288]	; (2588 <endCall+0x134>)
    2468:	0080      	lsls	r0, r0, #2
    246a:	4798      	blx	r3
	freezeIncomingCalls = false;
    246c:	4b47      	ldr	r3, [pc, #284]	; (258c <endCall+0x138>)
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    246e:	4f48      	ldr	r7, [pc, #288]	; (2590 <endCall+0x13c>)
	freezeIncomingCalls = false;
    2470:	701c      	strb	r4, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    2472:	787b      	ldrb	r3, [r7, #1]
    2474:	42a3      	cmp	r3, r4
    2476:	d001      	beq.n	247c <endCall+0x28>
		zeroPressed=false;
    2478:	4b46      	ldr	r3, [pc, #280]	; (2594 <endCall+0x140>)
    247a:	701c      	strb	r4, [r3, #0]
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
    247c:	78fb      	ldrb	r3, [r7, #3]
    247e:	4c46      	ldr	r4, [pc, #280]	; (2598 <endCall+0x144>)
    2480:	4d46      	ldr	r5, [pc, #280]	; (259c <endCall+0x148>)
    2482:	4e47      	ldr	r6, [pc, #284]	; (25a0 <endCall+0x14c>)
    2484:	2b01      	cmp	r3, #1
    2486:	d129      	bne.n	24dc <endCall+0x88>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O' && !m2mEvent):
    2488:	7823      	ldrb	r3, [r4, #0]
    248a:	2b4e      	cmp	r3, #78	; 0x4e
    248c:	d002      	beq.n	2494 <endCall+0x40>
    248e:	7823      	ldrb	r3, [r4, #0]
    2490:	2b52      	cmp	r3, #82	; 0x52
    2492:	d106      	bne.n	24a2 <endCall+0x4e>
    2494:	782b      	ldrb	r3, [r5, #0]
    2496:	2b4f      	cmp	r3, #79	; 0x4f
    2498:	d103      	bne.n	24a2 <endCall+0x4e>
    249a:	4b42      	ldr	r3, [pc, #264]	; (25a4 <endCall+0x150>)
    249c:	781b      	ldrb	r3, [r3, #0]
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
    249e:	2b01      	cmp	r3, #1
    24a0:	d125      	bne.n	24ee <endCall+0x9a>
		if((currentStatus == 'I' || currentStatus=='R') && currentCallStatus == 'O' && m2mEvent && m2m_Numbers_struct.m2mSetting)
    24a2:	7823      	ldrb	r3, [r4, #0]
    24a4:	2b49      	cmp	r3, #73	; 0x49
    24a6:	d14e      	bne.n	2546 <endCall+0xf2>
    24a8:	782b      	ldrb	r3, [r5, #0]
    24aa:	2b4f      	cmp	r3, #79	; 0x4f
    24ac:	d14e      	bne.n	254c <endCall+0xf8>
    24ae:	4b3d      	ldr	r3, [pc, #244]	; (25a4 <endCall+0x150>)
    24b0:	781b      	ldrb	r3, [r3, #0]
    24b2:	2b00      	cmp	r3, #0
    24b4:	d04a      	beq.n	254c <endCall+0xf8>
    24b6:	4b3c      	ldr	r3, [pc, #240]	; (25a8 <endCall+0x154>)
    24b8:	795b      	ldrb	r3, [r3, #5]
    24ba:	2b00      	cmp	r3, #0
    24bc:	d046      	beq.n	254c <endCall+0xf8>
			m2mEventCalls++;
    24be:	4a3b      	ldr	r2, [pc, #236]	; (25ac <endCall+0x158>)
    24c0:	4f3b      	ldr	r7, [pc, #236]	; (25b0 <endCall+0x15c>)
    24c2:	7813      	ldrb	r3, [r2, #0]
    24c4:	3301      	adds	r3, #1
    24c6:	b2db      	uxtb	r3, r3
    24c8:	7013      	strb	r3, [r2, #0]
			if(m2mAck)
    24ca:	4a3a      	ldr	r2, [pc, #232]	; (25b4 <endCall+0x160>)
    24cc:	7812      	ldrb	r2, [r2, #0]
    24ce:	2a00      	cmp	r2, #0
    24d0:	d042      	beq.n	2558 <endCall+0x104>
				setM2MEventState(m2mEventNo,ME_CLEARED);
    24d2:	2100      	movs	r1, #0
    24d4:	7838      	ldrb	r0, [r7, #0]
					setM2MEventState(m2mEventNo,ME_NOTAVAILABLE);
    24d6:	4b38      	ldr	r3, [pc, #224]	; (25b8 <endCall+0x164>)
    24d8:	4798      	blx	r3
    24da:	e048      	b.n	256e <endCall+0x11a>
	((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O'))
    24dc:	7823      	ldrb	r3, [r4, #0]
    24de:	2b4e      	cmp	r3, #78	; 0x4e
    24e0:	d002      	beq.n	24e8 <endCall+0x94>
    24e2:	7823      	ldrb	r3, [r4, #0]
    24e4:	2b52      	cmp	r3, #82	; 0x52
    24e6:	d11d      	bne.n	2524 <endCall+0xd0>
    24e8:	782b      	ldrb	r3, [r5, #0]
	if ((factory_settings_parameter_struct.ENABLE_M2M == true)?
    24ea:	2b4f      	cmp	r3, #79	; 0x4f
    24ec:	d11a      	bne.n	2524 <endCall+0xd0>
		if((retries==0) && !callAccepted && (user_settings_parameter_struct.responseAddress=='T') && (user_count_struct.current_user_no_count>1))
    24ee:	4a33      	ldr	r2, [pc, #204]	; (25bc <endCall+0x168>)
    24f0:	7813      	ldrb	r3, [r2, #0]
    24f2:	2b00      	cmp	r3, #0
    24f4:	d116      	bne.n	2524 <endCall+0xd0>
    24f6:	4b32      	ldr	r3, [pc, #200]	; (25c0 <endCall+0x16c>)
    24f8:	781b      	ldrb	r3, [r3, #0]
    24fa:	2b00      	cmp	r3, #0
    24fc:	d112      	bne.n	2524 <endCall+0xd0>
    24fe:	4b31      	ldr	r3, [pc, #196]	; (25c4 <endCall+0x170>)
    2500:	795b      	ldrb	r3, [r3, #5]
    2502:	2b54      	cmp	r3, #84	; 0x54
    2504:	d10e      	bne.n	2524 <endCall+0xd0>
    2506:	4b30      	ldr	r3, [pc, #192]	; (25c8 <endCall+0x174>)
    2508:	789b      	ldrb	r3, [r3, #2]
    250a:	2b01      	cmp	r3, #1
    250c:	d90a      	bls.n	2524 <endCall+0xd0>
			retries=1;
    250e:	2301      	movs	r3, #1
    2510:	7013      	strb	r3, [r2, #0]
			eventStaged=true;
    2512:	4a2e      	ldr	r2, [pc, #184]	; (25cc <endCall+0x178>)
    2514:	7013      	strb	r3, [r2, #0]
			tempEventStageTime=xTaskGetTickCount();
    2516:	47b0      	blx	r6
    2518:	4b2d      	ldr	r3, [pc, #180]	; (25d0 <endCall+0x17c>)
    251a:	6018      	str	r0, [r3, #0]
			stagedEventType=actionType;
    251c:	4b2d      	ldr	r3, [pc, #180]	; (25d4 <endCall+0x180>)
    251e:	781a      	ldrb	r2, [r3, #0]
    2520:	4b2d      	ldr	r3, [pc, #180]	; (25d8 <endCall+0x184>)
    2522:	701a      	strb	r2, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_M2M)
    2524:	78fb      	ldrb	r3, [r7, #3]
    2526:	2b00      	cmp	r3, #0
    2528:	d1bb      	bne.n	24a2 <endCall+0x4e>
	callAccepted = false;
    252a:	2700      	movs	r7, #0
    252c:	4b24      	ldr	r3, [pc, #144]	; (25c0 <endCall+0x16c>)
    252e:	701f      	strb	r7, [r3, #0]
	currentStatus = 'N';
    2530:	234e      	movs	r3, #78	; 0x4e
    2532:	7023      	strb	r3, [r4, #0]
	currentCallStatus = 'N';
    2534:	702b      	strb	r3, [r5, #0]
	isRegisteredNumber=false;
    2536:	4b29      	ldr	r3, [pc, #164]	; (25dc <endCall+0x188>)
    2538:	701f      	strb	r7, [r3, #0]
	obtainEventTimer = xTaskGetTickCount();
    253a:	47b0      	blx	r6
    253c:	4b28      	ldr	r3, [pc, #160]	; (25e0 <endCall+0x18c>)
    253e:	6018      	str	r0, [r3, #0]
	obtainNewEvent = false;
    2540:	4b28      	ldr	r3, [pc, #160]	; (25e4 <endCall+0x190>)
    2542:	701f      	strb	r7, [r3, #0]
}
    2544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if((currentStatus == 'I' || currentStatus=='R') && currentCallStatus == 'O' && m2mEvent && m2m_Numbers_struct.m2mSetting)
    2546:	7823      	ldrb	r3, [r4, #0]
    2548:	2b52      	cmp	r3, #82	; 0x52
    254a:	d0ad      	beq.n	24a8 <endCall+0x54>
		keyPressed=false;
    254c:	2300      	movs	r3, #0
    254e:	4a26      	ldr	r2, [pc, #152]	; (25e8 <endCall+0x194>)
    2550:	7013      	strb	r3, [r2, #0]
		m2mAck=false;
    2552:	4a18      	ldr	r2, [pc, #96]	; (25b4 <endCall+0x160>)
    2554:	7013      	strb	r3, [r2, #0]
    2556:	e7e8      	b.n	252a <endCall+0xd6>
				if(m2mEventCalls<2)
    2558:	2b01      	cmp	r3, #1
    255a:	d80c      	bhi.n	2576 <endCall+0x122>
					tempEventStageTime=xTaskGetTickCount();
    255c:	47b0      	blx	r6
    255e:	4b1c      	ldr	r3, [pc, #112]	; (25d0 <endCall+0x17c>)
					stagedEventType=m2mEventNo;
    2560:	783a      	ldrb	r2, [r7, #0]
					tempEventStageTime=xTaskGetTickCount();
    2562:	6018      	str	r0, [r3, #0]
					stagedEventType=m2mEventNo;
    2564:	4b1c      	ldr	r3, [pc, #112]	; (25d8 <endCall+0x184>)
    2566:	701a      	strb	r2, [r3, #0]
					m2mEventStaged=true;
    2568:	2201      	movs	r2, #1
    256a:	4b20      	ldr	r3, [pc, #128]	; (25ec <endCall+0x198>)
    256c:	701a      	strb	r2, [r3, #0]
			m2mEvent = false;
    256e:	2300      	movs	r3, #0
    2570:	4a0c      	ldr	r2, [pc, #48]	; (25a4 <endCall+0x150>)
    2572:	7013      	strb	r3, [r2, #0]
    2574:	e7ea      	b.n	254c <endCall+0xf8>
					setM2MEventState(m2mEventNo,ME_NOTAVAILABLE);
    2576:	7838      	ldrb	r0, [r7, #0]
    2578:	2103      	movs	r1, #3
    257a:	e7ac      	b.n	24d6 <endCall+0x82>
    257c:	20000628 	.word	0x20000628
    2580:	200006a8 	.word	0x200006a8
    2584:	00001ad5 	.word	0x00001ad5
    2588:	00007fa1 	.word	0x00007fa1
    258c:	20000668 	.word	0x20000668
    2590:	2000057a 	.word	0x2000057a
    2594:	200006ef 	.word	0x200006ef
    2598:	200006d4 	.word	0x200006d4
    259c:	2000069b 	.word	0x2000069b
    25a0:	00007d29 	.word	0x00007d29
    25a4:	20000667 	.word	0x20000667
    25a8:	20000508 	.word	0x20000508
    25ac:	200006ca 	.word	0x200006ca
    25b0:	20000662 	.word	0x20000662
    25b4:	20000661 	.word	0x20000661
    25b8:	000059a5 	.word	0x000059a5
    25bc:	20000629 	.word	0x20000629
    25c0:	200006aa 	.word	0x200006aa
    25c4:	200005b0 	.word	0x200005b0
    25c8:	20000574 	.word	0x20000574
    25cc:	200006c9 	.word	0x200006c9
    25d0:	200006d8 	.word	0x200006d8
    25d4:	20000676 	.word	0x20000676
    25d8:	20000688 	.word	0x20000688
    25dc:	200006a4 	.word	0x200006a4
    25e0:	200006f4 	.word	0x200006f4
    25e4:	20000686 	.word	0x20000686
    25e8:	200006c8 	.word	0x200006c8
    25ec:	2000069a 	.word	0x2000069a

000025f0 <makeCall>:
{
    25f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	inCall=true;
    25f2:	2201      	movs	r2, #1
    25f4:	4b16      	ldr	r3, [pc, #88]	; (2650 <makeCall+0x60>)
	char command[20] = {0};
    25f6:	2100      	movs	r1, #0
	inCall=true;
    25f8:	701a      	strb	r2, [r3, #0]
	char command[20] = {0};
    25fa:	a801      	add	r0, sp, #4
    25fc:	4b15      	ldr	r3, [pc, #84]	; (2654 <makeCall+0x64>)
    25fe:	3213      	adds	r2, #19
    2600:	4798      	blx	r3
	if(m2m_Numbers_struct.m2mSetting && m2mEvent)
    2602:	4b15      	ldr	r3, [pc, #84]	; (2658 <makeCall+0x68>)
    2604:	795b      	ldrb	r3, [r3, #5]
    2606:	2b00      	cmp	r3, #0
    2608:	d007      	beq.n	261a <makeCall+0x2a>
    260a:	4b14      	ldr	r3, [pc, #80]	; (265c <makeCall+0x6c>)
    260c:	781b      	ldrb	r3, [r3, #0]
    260e:	2b00      	cmp	r3, #0
    2610:	d003      	beq.n	261a <makeCall+0x2a>
		getM2MRemoteNumber(command);
    2612:	4b13      	ldr	r3, [pc, #76]	; (2660 <makeCall+0x70>)
    2614:	a801      	add	r0, sp, #4
			getActiveNumber(command);
    2616:	4798      	blx	r3
    2618:	e008      	b.n	262c <makeCall+0x3c>
		if(retries)
    261a:	4b12      	ldr	r3, [pc, #72]	; (2664 <makeCall+0x74>)
    261c:	781b      	ldrb	r3, [r3, #0]
    261e:	2b00      	cmp	r3, #0
    2620:	d013      	beq.n	264a <makeCall+0x5a>
			getIndexedNumber(command,user_count_struct.secondaryNumberIndex);
    2622:	4b11      	ldr	r3, [pc, #68]	; (2668 <makeCall+0x78>)
    2624:	a801      	add	r0, sp, #4
    2626:	7959      	ldrb	r1, [r3, #5]
    2628:	4b10      	ldr	r3, [pc, #64]	; (266c <makeCall+0x7c>)
    262a:	4798      	blx	r3
	gsm_call_to_dial_a_number(command);
    262c:	a801      	add	r0, sp, #4
    262e:	4b10      	ldr	r3, [pc, #64]	; (2670 <makeCall+0x80>)
    2630:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
    2632:	4b10      	ldr	r3, [pc, #64]	; (2674 <makeCall+0x84>)
    2634:	4798      	blx	r3
	currentStatus = 'R';
    2636:	2252      	movs	r2, #82	; 0x52
	callCutWait = xTaskGetTickCount();
    2638:	4b0f      	ldr	r3, [pc, #60]	; (2678 <makeCall+0x88>)
    263a:	6018      	str	r0, [r3, #0]
	currentStatus = 'R';
    263c:	4b0f      	ldr	r3, [pc, #60]	; (267c <makeCall+0x8c>)
    263e:	701a      	strb	r2, [r3, #0]
	currentCallStatus = 'O';
    2640:	4b0f      	ldr	r3, [pc, #60]	; (2680 <makeCall+0x90>)
    2642:	3a03      	subs	r2, #3
    2644:	701a      	strb	r2, [r3, #0]
}
    2646:	b007      	add	sp, #28
    2648:	bd00      	pop	{pc}
			getActiveNumber(command);
    264a:	a801      	add	r0, sp, #4
    264c:	4b0d      	ldr	r3, [pc, #52]	; (2684 <makeCall+0x94>)
    264e:	e7e2      	b.n	2616 <makeCall+0x26>
    2650:	200006a8 	.word	0x200006a8
    2654:	0000c3f7 	.word	0x0000c3f7
    2658:	20000508 	.word	0x20000508
    265c:	20000667 	.word	0x20000667
    2660:	00000651 	.word	0x00000651
    2664:	20000629 	.word	0x20000629
    2668:	20000574 	.word	0x20000574
    266c:	000004ed 	.word	0x000004ed
    2670:	000019a9 	.word	0x000019a9
    2674:	00007d29 	.word	0x00007d29
    2678:	200006f8 	.word	0x200006f8
    267c:	200006d4 	.word	0x200006d4
    2680:	2000069b 	.word	0x2000069b
    2684:	000007c5 	.word	0x000007c5

00002688 <makeResponseAction>:
{
    2688:	b510      	push	{r4, lr}
	if(user_settings_parameter_struct.responseAddress != 'N' || m2mEvent)
    268a:	4b07      	ldr	r3, [pc, #28]	; (26a8 <makeResponseAction+0x20>)
    268c:	795b      	ldrb	r3, [r3, #5]
    268e:	2b4e      	cmp	r3, #78	; 0x4e
    2690:	d103      	bne.n	269a <makeResponseAction+0x12>
    2692:	4b06      	ldr	r3, [pc, #24]	; (26ac <makeResponseAction+0x24>)
    2694:	781b      	ldrb	r3, [r3, #0]
    2696:	2b00      	cmp	r3, #0
    2698:	d004      	beq.n	26a4 <makeResponseAction+0x1c>
		freezeIncomingCalls = true;
    269a:	2201      	movs	r2, #1
    269c:	4b04      	ldr	r3, [pc, #16]	; (26b0 <makeResponseAction+0x28>)
    269e:	701a      	strb	r2, [r3, #0]
		makeCall();
    26a0:	4b04      	ldr	r3, [pc, #16]	; (26b4 <makeResponseAction+0x2c>)
    26a2:	4798      	blx	r3
}
    26a4:	bd10      	pop	{r4, pc}
    26a6:	46c0      	nop			; (mov r8, r8)
    26a8:	200005b0 	.word	0x200005b0
    26ac:	20000667 	.word	0x20000667
    26b0:	20000668 	.word	0x20000668
    26b4:	000025f1 	.word	0x000025f1

000026b8 <operateOnStagedEvent>:
{
    26b8:	b570      	push	{r4, r5, r6, lr}
	if(eventStaged)
    26ba:	4c1b      	ldr	r4, [pc, #108]	; (2728 <operateOnStagedEvent+0x70>)
	uint8_t temp1= 1;
    26bc:	2501      	movs	r5, #1
	if(eventStaged)
    26be:	7823      	ldrb	r3, [r4, #0]
    26c0:	2b00      	cmp	r3, #0
    26c2:	d001      	beq.n	26c8 <operateOnStagedEvent+0x10>
		temp1 = user_settings_parameter_struct.eventStageAddress;
    26c4:	4b19      	ldr	r3, [pc, #100]	; (272c <operateOnStagedEvent+0x74>)
    26c6:	7a1d      	ldrb	r5, [r3, #8]
	if(obtainNewEvent && (retries==1 || (xTaskGetTickCount()-tempEventStageTime>((unsigned long)temp1*60000L))))
    26c8:	4b19      	ldr	r3, [pc, #100]	; (2730 <operateOnStagedEvent+0x78>)
    26ca:	781b      	ldrb	r3, [r3, #0]
    26cc:	2b00      	cmp	r3, #0
    26ce:	d007      	beq.n	26e0 <operateOnStagedEvent+0x28>
    26d0:	4b18      	ldr	r3, [pc, #96]	; (2734 <operateOnStagedEvent+0x7c>)
    26d2:	781b      	ldrb	r3, [r3, #0]
    26d4:	2b01      	cmp	r3, #1
    26d6:	d104      	bne.n	26e2 <operateOnStagedEvent+0x2a>
		if (factory_settings_parameter_struct.ENABLE_M2M)
    26d8:	4b17      	ldr	r3, [pc, #92]	; (2738 <operateOnStagedEvent+0x80>)
    26da:	78db      	ldrb	r3, [r3, #3]
    26dc:	2b00      	cmp	r3, #0
    26de:	d10a      	bne.n	26f6 <operateOnStagedEvent+0x3e>
}
    26e0:	bd70      	pop	{r4, r5, r6, pc}
	if(obtainNewEvent && (retries==1 || (xTaskGetTickCount()-tempEventStageTime>((unsigned long)temp1*60000L))))
    26e2:	4b16      	ldr	r3, [pc, #88]	; (273c <operateOnStagedEvent+0x84>)
    26e4:	4798      	blx	r3
    26e6:	4b16      	ldr	r3, [pc, #88]	; (2740 <operateOnStagedEvent+0x88>)
    26e8:	681b      	ldr	r3, [r3, #0]
    26ea:	1ac0      	subs	r0, r0, r3
    26ec:	4b15      	ldr	r3, [pc, #84]	; (2744 <operateOnStagedEvent+0x8c>)
    26ee:	436b      	muls	r3, r5
    26f0:	4298      	cmp	r0, r3
    26f2:	d8f1      	bhi.n	26d8 <operateOnStagedEvent+0x20>
    26f4:	e7f4      	b.n	26e0 <operateOnStagedEvent+0x28>
			if (eventStaged)
    26f6:	7822      	ldrb	r2, [r4, #0]
    26f8:	2a00      	cmp	r2, #0
    26fa:	d008      	beq.n	270e <operateOnStagedEvent+0x56>
				actionType=stagedEventType;
    26fc:	4b12      	ldr	r3, [pc, #72]	; (2748 <operateOnStagedEvent+0x90>)
    26fe:	781a      	ldrb	r2, [r3, #0]
    2700:	4b12      	ldr	r3, [pc, #72]	; (274c <operateOnStagedEvent+0x94>)
    2702:	701a      	strb	r2, [r3, #0]
				eventStaged=false;
    2704:	2300      	movs	r3, #0
    2706:	7023      	strb	r3, [r4, #0]
			makeResponseAction();
    2708:	4b11      	ldr	r3, [pc, #68]	; (2750 <operateOnStagedEvent+0x98>)
    270a:	4798      	blx	r3
}
    270c:	e7e8      	b.n	26e0 <operateOnStagedEvent+0x28>
			else if (m2mEventStaged)
    270e:	4b11      	ldr	r3, [pc, #68]	; (2754 <operateOnStagedEvent+0x9c>)
    2710:	7819      	ldrb	r1, [r3, #0]
    2712:	2900      	cmp	r1, #0
    2714:	d0f8      	beq.n	2708 <operateOnStagedEvent+0x50>
				m2mEventNo=stagedEventType;
    2716:	490c      	ldr	r1, [pc, #48]	; (2748 <operateOnStagedEvent+0x90>)
				m2mEventStaged=false;
    2718:	701a      	strb	r2, [r3, #0]
				m2mEventNo=stagedEventType;
    271a:	7808      	ldrb	r0, [r1, #0]
    271c:	490e      	ldr	r1, [pc, #56]	; (2758 <operateOnStagedEvent+0xa0>)
    271e:	7008      	strb	r0, [r1, #0]
				m2mEvent=true;
    2720:	2001      	movs	r0, #1
    2722:	490e      	ldr	r1, [pc, #56]	; (275c <operateOnStagedEvent+0xa4>)
    2724:	7008      	strb	r0, [r1, #0]
    2726:	e7ef      	b.n	2708 <operateOnStagedEvent+0x50>
    2728:	200006c9 	.word	0x200006c9
    272c:	200005b0 	.word	0x200005b0
    2730:	20000686 	.word	0x20000686
    2734:	20000629 	.word	0x20000629
    2738:	2000057a 	.word	0x2000057a
    273c:	00007d29 	.word	0x00007d29
    2740:	200006d8 	.word	0x200006d8
    2744:	0000ea60 	.word	0x0000ea60
    2748:	20000688 	.word	0x20000688
    274c:	20000676 	.word	0x20000676
    2750:	00002689 	.word	0x00002689
    2754:	2000069a 	.word	0x2000069a
    2758:	20000662 	.word	0x20000662
    275c:	20000667 	.word	0x20000667

00002760 <playSound>:
{
    2760:	b570      	push	{r4, r5, r6, lr}
	gsm_stop_play_record_file();
    2762:	4b0b      	ldr	r3, [pc, #44]	; (2790 <playSound+0x30>)
{
    2764:	0004      	movs	r4, r0
    2766:	000d      	movs	r5, r1
	gsm_stop_play_record_file();
    2768:	4798      	blx	r3
	bplaySound = true;
    276a:	2301      	movs	r3, #1
    276c:	4a09      	ldr	r2, [pc, #36]	; (2794 <playSound+0x34>)
    276e:	7013      	strb	r3, [r2, #0]
	if (newAction)
    2770:	2d00      	cmp	r5, #0
    2772:	d009      	beq.n	2788 <playSound+0x28>
		maxPlayingFiles=1;
    2774:	4a08      	ldr	r2, [pc, #32]	; (2798 <playSound+0x38>)
    2776:	7013      	strb	r3, [r2, #0]
		currentPlayingFileIndex=0;
    2778:	2200      	movs	r2, #0
    277a:	4b08      	ldr	r3, [pc, #32]	; (279c <playSound+0x3c>)
    277c:	701a      	strb	r2, [r3, #0]
		playFilesList[currentPlayingFileIndex]=actionTypeT;
    277e:	4b08      	ldr	r3, [pc, #32]	; (27a0 <playSound+0x40>)
    2780:	701c      	strb	r4, [r3, #0]
		playFilesList[currentPlayingFileIndex+1]='\0';
    2782:	705a      	strb	r2, [r3, #1]
		actionType = actionTypeT;
    2784:	4b07      	ldr	r3, [pc, #28]	; (27a4 <playSound+0x44>)
    2786:	701c      	strb	r4, [r3, #0]
	playFile = actionTypeT;
    2788:	4b07      	ldr	r3, [pc, #28]	; (27a8 <playSound+0x48>)
    278a:	701c      	strb	r4, [r3, #0]
}
    278c:	bd70      	pop	{r4, r5, r6, pc}
    278e:	46c0      	nop			; (mov r8, r8)
    2790:	00001b1d 	.word	0x00001b1d
    2794:	20000726 	.word	0x20000726
    2798:	200006cb 	.word	0x200006cb
    279c:	200006bd 	.word	0x200006bd
    27a0:	2000066b 	.word	0x2000066b
    27a4:	20000676 	.word	0x20000676
    27a8:	200006bc 	.word	0x200006bc

000027ac <acceptCall>:
	isRegisteredNumber=false;   //clear flag for next call, in case any error occures and endCall() is not called for ending the call
    27ac:	2200      	movs	r2, #0
{
    27ae:	b510      	push	{r4, lr}
	callAccepted = true;
    27b0:	2401      	movs	r4, #1
	isRegisteredNumber=false;   //clear flag for next call, in case any error occures and endCall() is not called for ending the call
    27b2:	4b08      	ldr	r3, [pc, #32]	; (27d4 <acceptCall+0x28>)
    27b4:	701a      	strb	r2, [r3, #0]
	callAccepted = true;
    27b6:	4b08      	ldr	r3, [pc, #32]	; (27d8 <acceptCall+0x2c>)
    27b8:	701c      	strb	r4, [r3, #0]
	gsm_answer_an_incomming_call();
    27ba:	4b08      	ldr	r3, [pc, #32]	; (27dc <acceptCall+0x30>)
    27bc:	4798      	blx	r3
	currentStatus = 'I';
    27be:	2349      	movs	r3, #73	; 0x49
    27c0:	4a07      	ldr	r2, [pc, #28]	; (27e0 <acceptCall+0x34>)
	playSound('M',true);
    27c2:	0021      	movs	r1, r4
	currentStatus = 'I';
    27c4:	7013      	strb	r3, [r2, #0]
	currentCallStatus = 'I';
    27c6:	4a07      	ldr	r2, [pc, #28]	; (27e4 <acceptCall+0x38>)
	playSound('M',true);
    27c8:	204d      	movs	r0, #77	; 0x4d
	currentCallStatus = 'I';
    27ca:	7013      	strb	r3, [r2, #0]
	playSound('M',true);
    27cc:	4b06      	ldr	r3, [pc, #24]	; (27e8 <acceptCall+0x3c>)
    27ce:	4798      	blx	r3
}
    27d0:	bd10      	pop	{r4, pc}
    27d2:	46c0      	nop			; (mov r8, r8)
    27d4:	200006a4 	.word	0x200006a4
    27d8:	200006aa 	.word	0x200006aa
    27dc:	00001a09 	.word	0x00001a09
    27e0:	200006d4 	.word	0x200006d4
    27e4:	2000069b 	.word	0x2000069b
    27e8:	00002761 	.word	0x00002761

000027ec <playSoundElligible>:
	return (bplaySound && ((xTaskGetTickCount() - soundWait) > (soundWaitTime * 100)));
    27ec:	2000      	movs	r0, #0
{
    27ee:	b510      	push	{r4, lr}
	return (bplaySound && ((xTaskGetTickCount() - soundWait) > (soundWaitTime * 100)));
    27f0:	4b08      	ldr	r3, [pc, #32]	; (2814 <playSoundElligible+0x28>)
    27f2:	781b      	ldrb	r3, [r3, #0]
    27f4:	4283      	cmp	r3, r0
    27f6:	d00b      	beq.n	2810 <playSoundElligible+0x24>
    27f8:	4b07      	ldr	r3, [pc, #28]	; (2818 <playSoundElligible+0x2c>)
    27fa:	4798      	blx	r3
    27fc:	4b07      	ldr	r3, [pc, #28]	; (281c <playSoundElligible+0x30>)
    27fe:	4a08      	ldr	r2, [pc, #32]	; (2820 <playSoundElligible+0x34>)
    2800:	681b      	ldr	r3, [r3, #0]
    2802:	7812      	ldrb	r2, [r2, #0]
    2804:	1ac3      	subs	r3, r0, r3
    2806:	2064      	movs	r0, #100	; 0x64
    2808:	4350      	muls	r0, r2
    280a:	4298      	cmp	r0, r3
    280c:	4180      	sbcs	r0, r0
    280e:	4240      	negs	r0, r0
}
    2810:	bd10      	pop	{r4, pc}
    2812:	46c0      	nop			; (mov r8, r8)
    2814:	20000726 	.word	0x20000726
    2818:	00007d29 	.word	0x00007d29
    281c:	20000720 	.word	0x20000720
    2820:	200006cc 	.word	0x200006cc

00002824 <triggerPlaySound>:
{
    2824:	b510      	push	{r4, lr}
	if(maxPlayingFiles>1)
    2826:	4b07      	ldr	r3, [pc, #28]	; (2844 <triggerPlaySound+0x20>)
    2828:	4a07      	ldr	r2, [pc, #28]	; (2848 <triggerPlaySound+0x24>)
    282a:	7819      	ldrb	r1, [r3, #0]
		gsm_play_record_file((char*)playFile,false);
    282c:	7810      	ldrb	r0, [r2, #0]
    282e:	4b07      	ldr	r3, [pc, #28]	; (284c <triggerPlaySound+0x28>)
	if(maxPlayingFiles>1)
    2830:	2901      	cmp	r1, #1
    2832:	d905      	bls.n	2840 <triggerPlaySound+0x1c>
		gsm_play_record_file((char*)playFile,false);
    2834:	2100      	movs	r1, #0
		gsm_play_record_file((char*)playFile,true);
    2836:	4798      	blx	r3
	bplaySound = false;
    2838:	2200      	movs	r2, #0
    283a:	4b05      	ldr	r3, [pc, #20]	; (2850 <triggerPlaySound+0x2c>)
    283c:	701a      	strb	r2, [r3, #0]
}
    283e:	bd10      	pop	{r4, pc}
		gsm_play_record_file((char*)playFile,true);
    2840:	2101      	movs	r1, #1
    2842:	e7f8      	b.n	2836 <triggerPlaySound+0x12>
    2844:	200006cb 	.word	0x200006cb
    2848:	200006bc 	.word	0x200006bc
    284c:	00001b3d 	.word	0x00001b3d
    2850:	20000726 	.word	0x20000726

00002854 <playSoundAgain>:
{
    2854:	b570      	push	{r4, r5, r6, lr}
	if (!bplaySound && gsm_responseLine_is_StopSound_Received(string))
    2856:	4c11      	ldr	r4, [pc, #68]	; (289c <playSoundAgain+0x48>)
    2858:	7823      	ldrb	r3, [r4, #0]
    285a:	2b00      	cmp	r3, #0
    285c:	d117      	bne.n	288e <playSoundAgain+0x3a>
    285e:	4b10      	ldr	r3, [pc, #64]	; (28a0 <playSoundAgain+0x4c>)
    2860:	4798      	blx	r3
    2862:	2800      	cmp	r0, #0
    2864:	d013      	beq.n	288e <playSoundAgain+0x3a>
		if(maxPlayingFiles>1)
    2866:	4b0f      	ldr	r3, [pc, #60]	; (28a4 <playSoundAgain+0x50>)
    2868:	781a      	ldrb	r2, [r3, #0]
    286a:	2a01      	cmp	r2, #1
    286c:	d90f      	bls.n	288e <playSoundAgain+0x3a>
			if(currentPlayingFileIndex<maxPlayingFiles-1)
    286e:	490e      	ldr	r1, [pc, #56]	; (28a8 <playSoundAgain+0x54>)
    2870:	3a01      	subs	r2, #1
    2872:	780b      	ldrb	r3, [r1, #0]
    2874:	4293      	cmp	r3, r2
    2876:	da0b      	bge.n	2890 <playSoundAgain+0x3c>
				playSound(playFilesList[++currentPlayingFileIndex],false);
    2878:	4a0c      	ldr	r2, [pc, #48]	; (28ac <playSoundAgain+0x58>)
    287a:	3301      	adds	r3, #1
    287c:	b2db      	uxtb	r3, r3
    287e:	5cd5      	ldrb	r5, [r2, r3]
    2880:	700b      	strb	r3, [r1, #0]
	gsm_stop_play_record_file();
    2882:	4b0b      	ldr	r3, [pc, #44]	; (28b0 <playSoundAgain+0x5c>)
    2884:	4798      	blx	r3
	bplaySound = true;
    2886:	2301      	movs	r3, #1
    2888:	7023      	strb	r3, [r4, #0]
	playFile = actionTypeT;
    288a:	4b0a      	ldr	r3, [pc, #40]	; (28b4 <playSoundAgain+0x60>)
    288c:	701d      	strb	r5, [r3, #0]
}
    288e:	bd70      	pop	{r4, r5, r6, pc}
				playSound('M',true);
    2890:	2101      	movs	r1, #1
    2892:	204d      	movs	r0, #77	; 0x4d
    2894:	4b08      	ldr	r3, [pc, #32]	; (28b8 <playSoundAgain+0x64>)
    2896:	4798      	blx	r3
}
    2898:	e7f9      	b.n	288e <playSoundAgain+0x3a>
    289a:	46c0      	nop			; (mov r8, r8)
    289c:	20000726 	.word	0x20000726
    28a0:	00001eb5 	.word	0x00001eb5
    28a4:	200006cb 	.word	0x200006cb
    28a8:	200006bd 	.word	0x200006bd
    28ac:	2000066b 	.word	0x2000066b
    28b0:	00001b1d 	.word	0x00001b1d
    28b4:	200006bc 	.word	0x200006bc
    28b8:	00002761 	.word	0x00002761

000028bc <playRepeatedFiles>:
{
    28bc:	b570      	push	{r4, r5, r6, lr}
	if(strlen(fileList)<8)
    28be:	4d0e      	ldr	r5, [pc, #56]	; (28f8 <playRepeatedFiles+0x3c>)
{
    28c0:	0004      	movs	r4, r0
	if(strlen(fileList)<8)
    28c2:	47a8      	blx	r5
    28c4:	2807      	cmp	r0, #7
    28c6:	d816      	bhi.n	28f6 <playRepeatedFiles+0x3a>
		currentPlayingFileIndex=0;
    28c8:	2300      	movs	r3, #0
    28ca:	4e0c      	ldr	r6, [pc, #48]	; (28fc <playRepeatedFiles+0x40>)
		maxPlayingFiles=strlen(fileList);
    28cc:	0020      	movs	r0, r4
		currentPlayingFileIndex=0;
    28ce:	7033      	strb	r3, [r6, #0]
		maxPlayingFiles=strlen(fileList);
    28d0:	47a8      	blx	r5
    28d2:	4b0b      	ldr	r3, [pc, #44]	; (2900 <playRepeatedFiles+0x44>)
		strcpy(playFilesList,fileList);
    28d4:	4d0b      	ldr	r5, [pc, #44]	; (2904 <playRepeatedFiles+0x48>)
		maxPlayingFiles=strlen(fileList);
    28d6:	7018      	strb	r0, [r3, #0]
		strcpy(playFilesList,fileList);
    28d8:	0021      	movs	r1, r4
    28da:	4b0b      	ldr	r3, [pc, #44]	; (2908 <playRepeatedFiles+0x4c>)
    28dc:	0028      	movs	r0, r5
    28de:	4798      	blx	r3
		soundWait = xTaskGetTickCount();
    28e0:	4b0a      	ldr	r3, [pc, #40]	; (290c <playRepeatedFiles+0x50>)
    28e2:	4798      	blx	r3
    28e4:	4b0a      	ldr	r3, [pc, #40]	; (2910 <playRepeatedFiles+0x54>)
    28e6:	6018      	str	r0, [r3, #0]
		playFile = playFilesList[currentPlayingFileIndex];
    28e8:	7833      	ldrb	r3, [r6, #0]
    28ea:	5cea      	ldrb	r2, [r5, r3]
    28ec:	4b09      	ldr	r3, [pc, #36]	; (2914 <playRepeatedFiles+0x58>)
    28ee:	701a      	strb	r2, [r3, #0]
		bplaySound = true;
    28f0:	2201      	movs	r2, #1
    28f2:	4b09      	ldr	r3, [pc, #36]	; (2918 <playRepeatedFiles+0x5c>)
    28f4:	701a      	strb	r2, [r3, #0]
}
    28f6:	bd70      	pop	{r4, r5, r6, pc}
    28f8:	0000c687 	.word	0x0000c687
    28fc:	200006bd 	.word	0x200006bd
    2900:	200006cb 	.word	0x200006cb
    2904:	2000066b 	.word	0x2000066b
    2908:	0000c677 	.word	0x0000c677
    290c:	00007d29 	.word	0x00007d29
    2910:	20000720 	.word	0x20000720
    2914:	200006bc 	.word	0x200006bc
    2918:	20000726 	.word	0x20000726

0000291c <callTimerExpire>:
{
    291c:	b510      	push	{r4, lr}
	return ((xTaskGetTickCount() - callCutWait) >= (callCutWaitTime * 100));
    291e:	4b07      	ldr	r3, [pc, #28]	; (293c <callTimerExpire+0x20>)
    2920:	4798      	blx	r3
    2922:	4b07      	ldr	r3, [pc, #28]	; (2940 <callTimerExpire+0x24>)
    2924:	681a      	ldr	r2, [r3, #0]
    2926:	4b07      	ldr	r3, [pc, #28]	; (2944 <callTimerExpire+0x28>)
    2928:	1a82      	subs	r2, r0, r2
    292a:	8819      	ldrh	r1, [r3, #0]
    292c:	2364      	movs	r3, #100	; 0x64
    292e:	2000      	movs	r0, #0
    2930:	434b      	muls	r3, r1
    2932:	429a      	cmp	r2, r3
    2934:	4140      	adcs	r0, r0
    2936:	b2c0      	uxtb	r0, r0
}
    2938:	bd10      	pop	{r4, pc}
    293a:	46c0      	nop			; (mov r8, r8)
    293c:	00007d29 	.word	0x00007d29
    2940:	200006f8 	.word	0x200006f8
    2944:	20000678 	.word	0x20000678

00002948 <OutGoingcallState>:
{
    2948:	b570      	push	{r4, r5, r6, lr}
	if(strstr(response,"+CLCC: 1,0,2"))
    294a:	490e      	ldr	r1, [pc, #56]	; (2984 <OutGoingcallState+0x3c>)
    294c:	4c0e      	ldr	r4, [pc, #56]	; (2988 <OutGoingcallState+0x40>)
{
    294e:	0005      	movs	r5, r0
	if(strstr(response,"+CLCC: 1,0,2"))
    2950:	47a0      	blx	r4
		return 'D';								//dialling
    2952:	2344      	movs	r3, #68	; 0x44
	if(strstr(response,"+CLCC: 1,0,2"))
    2954:	2800      	cmp	r0, #0
    2956:	d112      	bne.n	297e <OutGoingcallState+0x36>
	else if (strstr(response,"+CLCC: 1,0,3"))
    2958:	490c      	ldr	r1, [pc, #48]	; (298c <OutGoingcallState+0x44>)
    295a:	0028      	movs	r0, r5
    295c:	47a0      	blx	r4
		return 'R';								//alerting
    295e:	2352      	movs	r3, #82	; 0x52
	else if (strstr(response,"+CLCC: 1,0,3"))
    2960:	2800      	cmp	r0, #0
    2962:	d10c      	bne.n	297e <OutGoingcallState+0x36>
	else if (strstr(response,"+CLCC: 1,0,0"))
    2964:	490a      	ldr	r1, [pc, #40]	; (2990 <OutGoingcallState+0x48>)
    2966:	0028      	movs	r0, r5
    2968:	47a0      	blx	r4
		return 'I';								//active call
    296a:	2349      	movs	r3, #73	; 0x49
	else if (strstr(response,"+CLCC: 1,0,0"))
    296c:	2800      	cmp	r0, #0
    296e:	d106      	bne.n	297e <OutGoingcallState+0x36>
	else if (strstr(response,"+CLCC: 1,0,6"))
    2970:	4908      	ldr	r1, [pc, #32]	; (2994 <OutGoingcallState+0x4c>)
    2972:	0028      	movs	r0, r5
    2974:	47a0      	blx	r4
		return 'E';								//call ended
    2976:	2345      	movs	r3, #69	; 0x45
	else if (strstr(response,"+CLCC: 1,0,6"))
    2978:	2800      	cmp	r0, #0
    297a:	d100      	bne.n	297e <OutGoingcallState+0x36>
		return 'N';
    297c:	3309      	adds	r3, #9
}
    297e:	0018      	movs	r0, r3
    2980:	bd70      	pop	{r4, r5, r6, pc}
    2982:	46c0      	nop			; (mov r8, r8)
    2984:	0000d20e 	.word	0x0000d20e
    2988:	0000c6b7 	.word	0x0000c6b7
    298c:	0000d21b 	.word	0x0000d21b
    2990:	0000d228 	.word	0x0000d228
    2994:	0000d235 	.word	0x0000d235

00002998 <registerM2MEvent>:
{
    2998:	b570      	push	{r4, r5, r6, lr}
	if (!initialized)
    299a:	4b15      	ldr	r3, [pc, #84]	; (29f0 <registerM2MEvent+0x58>)
{
    299c:	0004      	movs	r4, r0
	if (!initialized)
    299e:	7819      	ldrb	r1, [r3, #0]
    29a0:	b2c9      	uxtb	r1, r1
    29a2:	2900      	cmp	r1, #0
    29a4:	d102      	bne.n	29ac <registerM2MEvent+0x14>
		setM2MEventState(eventNo,ME_CLEARED);
    29a6:	4b13      	ldr	r3, [pc, #76]	; (29f4 <registerM2MEvent+0x5c>)
    29a8:	4798      	blx	r3
}
    29aa:	bd70      	pop	{r4, r5, r6, pc}
	if (currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
    29ac:	4b12      	ldr	r3, [pc, #72]	; (29f8 <registerM2MEvent+0x60>)
    29ae:	781b      	ldrb	r3, [r3, #0]
    29b0:	2b4e      	cmp	r3, #78	; 0x4e
    29b2:	d1fa      	bne.n	29aa <registerM2MEvent+0x12>
    29b4:	4b11      	ldr	r3, [pc, #68]	; (29fc <registerM2MEvent+0x64>)
    29b6:	781b      	ldrb	r3, [r3, #0]
    29b8:	2b4e      	cmp	r3, #78	; 0x4e
    29ba:	d1f6      	bne.n	29aa <registerM2MEvent+0x12>
    29bc:	4b10      	ldr	r3, [pc, #64]	; (2a00 <registerM2MEvent+0x68>)
    29be:	781b      	ldrb	r3, [r3, #0]
    29c0:	2b00      	cmp	r3, #0
    29c2:	d0f2      	beq.n	29aa <registerM2MEvent+0x12>
    29c4:	4b0f      	ldr	r3, [pc, #60]	; (2a04 <registerM2MEvent+0x6c>)
    29c6:	781b      	ldrb	r3, [r3, #0]
    29c8:	2b00      	cmp	r3, #0
    29ca:	d1ee      	bne.n	29aa <registerM2MEvent+0x12>
    29cc:	4b0e      	ldr	r3, [pc, #56]	; (2a08 <registerM2MEvent+0x70>)
    29ce:	781d      	ldrb	r5, [r3, #0]
    29d0:	2d00      	cmp	r5, #0
    29d2:	d1ea      	bne.n	29aa <registerM2MEvent+0x12>
		setM2MEventState(eventNo,ME_SERVICING);
    29d4:	2102      	movs	r1, #2
    29d6:	4b07      	ldr	r3, [pc, #28]	; (29f4 <registerM2MEvent+0x5c>)
    29d8:	4798      	blx	r3
		m2mEvent=true;
    29da:	2201      	movs	r2, #1
    29dc:	4b0b      	ldr	r3, [pc, #44]	; (2a0c <registerM2MEvent+0x74>)
    29de:	701a      	strb	r2, [r3, #0]
		m2mEventNo = eventNo;
    29e0:	4b0b      	ldr	r3, [pc, #44]	; (2a10 <registerM2MEvent+0x78>)
    29e2:	701c      	strb	r4, [r3, #0]
		m2mEventCalls=0;
    29e4:	4b0b      	ldr	r3, [pc, #44]	; (2a14 <registerM2MEvent+0x7c>)
    29e6:	701d      	strb	r5, [r3, #0]
		makeResponseAction();
    29e8:	4b0b      	ldr	r3, [pc, #44]	; (2a18 <registerM2MEvent+0x80>)
    29ea:	4798      	blx	r3
		return;
    29ec:	e7dd      	b.n	29aa <registerM2MEvent+0x12>
    29ee:	46c0      	nop			; (mov r8, r8)
    29f0:	200006a9 	.word	0x200006a9
    29f4:	000059a5 	.word	0x000059a5
    29f8:	200006d4 	.word	0x200006d4
    29fc:	2000069b 	.word	0x2000069b
    2a00:	20000686 	.word	0x20000686
    2a04:	200006c9 	.word	0x200006c9
    2a08:	2000069a 	.word	0x2000069a
    2a0c:	20000667 	.word	0x20000667
    2a10:	20000662 	.word	0x20000662
    2a14:	200006ca 	.word	0x200006ca
    2a18:	00002689 	.word	0x00002689

00002a1c <setMotorMGRResponse>:
{
    2a1c:	b510      	push	{r4, lr}
	if(currentStatus!='I')    // not in Call than return.
    2a1e:	4b04      	ldr	r3, [pc, #16]	; (2a30 <setMotorMGRResponse+0x14>)
    2a20:	781b      	ldrb	r3, [r3, #0]
    2a22:	2b49      	cmp	r3, #73	; 0x49
    2a24:	d102      	bne.n	2a2c <setMotorMGRResponse+0x10>
	playSound(response,true);
    2a26:	2101      	movs	r1, #1
    2a28:	4b02      	ldr	r3, [pc, #8]	; (2a34 <setMotorMGRResponse+0x18>)
    2a2a:	4798      	blx	r3
}
    2a2c:	bd10      	pop	{r4, pc}
    2a2e:	46c0      	nop			; (mov r8, r8)
    2a30:	200006d4 	.word	0x200006d4
    2a34:	00002761 	.word	0x00002761

00002a38 <subDTMF>:
{
    2a38:	b510      	push	{r4, lr}
	gsm_stop_play_record_file();
    2a3a:	4b03      	ldr	r3, [pc, #12]	; (2a48 <subDTMF+0x10>)
    2a3c:	4798      	blx	r3
	callCutWait = xTaskGetTickCount();
    2a3e:	4b03      	ldr	r3, [pc, #12]	; (2a4c <subDTMF+0x14>)
    2a40:	4798      	blx	r3
    2a42:	4b03      	ldr	r3, [pc, #12]	; (2a50 <subDTMF+0x18>)
    2a44:	6018      	str	r0, [r3, #0]
}
    2a46:	bd10      	pop	{r4, pc}
    2a48:	00001b1d 	.word	0x00001b1d
    2a4c:	00007d29 	.word	0x00007d29
    2a50:	200006f8 	.word	0x200006f8

00002a54 <processOnDTMF>:
{
    2a54:	b570      	push	{r4, r5, r6, lr}
	if (factory_settings_parameter_struct.ENABLE_M2M)
    2a56:	4a48      	ldr	r2, [pc, #288]	; (2b78 <processOnDTMF+0x124>)
	char dtmf = dtmf_cmd[0];
    2a58:	7803      	ldrb	r3, [r0, #0]
	if (factory_settings_parameter_struct.ENABLE_M2M)
    2a5a:	78d4      	ldrb	r4, [r2, #3]
    2a5c:	2c00      	cmp	r4, #0
    2a5e:	d00b      	beq.n	2a78 <processOnDTMF+0x24>
		if (m2mEvent)
    2a60:	4a46      	ldr	r2, [pc, #280]	; (2b7c <processOnDTMF+0x128>)
    2a62:	7812      	ldrb	r2, [r2, #0]
    2a64:	2a00      	cmp	r2, #0
    2a66:	d006      	beq.n	2a76 <processOnDTMF+0x22>
			if(dtmf == 'A')
    2a68:	2b41      	cmp	r3, #65	; 0x41
    2a6a:	d104      	bne.n	2a76 <processOnDTMF+0x22>
				m2mAck=true;
    2a6c:	2201      	movs	r2, #1
    2a6e:	4b44      	ldr	r3, [pc, #272]	; (2b80 <processOnDTMF+0x12c>)
    2a70:	701a      	strb	r2, [r3, #0]
				gsm_hangup_call();
    2a72:	4b44      	ldr	r3, [pc, #272]	; (2b84 <processOnDTMF+0x130>)
    2a74:	4798      	blx	r3
}
    2a76:	bd70      	pop	{r4, r5, r6, pc}
		if (dtmf == '1') //Motor On
    2a78:	2b31      	cmp	r3, #49	; 0x31
    2a7a:	d105      	bne.n	2a88 <processOnDTMF+0x34>
			subDTMF();
    2a7c:	4b42      	ldr	r3, [pc, #264]	; (2b88 <processOnDTMF+0x134>)
    2a7e:	4798      	blx	r3
			startMotor(true);
    2a80:	2001      	movs	r0, #1
    2a82:	4b42      	ldr	r3, [pc, #264]	; (2b8c <processOnDTMF+0x138>)
				waterStatusOnCall(false);
    2a84:	4798      	blx	r3
    2a86:	e7f6      	b.n	2a76 <processOnDTMF+0x22>
		else if (dtmf == '2') //Motor Off
    2a88:	2b32      	cmp	r3, #50	; 0x32
    2a8a:	d107      	bne.n	2a9c <processOnDTMF+0x48>
			subDTMF();
    2a8c:	4b3e      	ldr	r3, [pc, #248]	; (2b88 <processOnDTMF+0x134>)
    2a8e:	4798      	blx	r3
			stopMotor(true,false,false);
    2a90:	0022      	movs	r2, r4
    2a92:	0021      	movs	r1, r4
    2a94:	2001      	movs	r0, #1
    2a96:	4b3e      	ldr	r3, [pc, #248]	; (2b90 <processOnDTMF+0x13c>)
    2a98:	4798      	blx	r3
    2a9a:	e7ec      	b.n	2a76 <processOnDTMF+0x22>
		else if (dtmf == '3') //Status
    2a9c:	2b33      	cmp	r3, #51	; 0x33
    2a9e:	d104      	bne.n	2aaa <processOnDTMF+0x56>
			subDTMF();
    2aa0:	4b39      	ldr	r3, [pc, #228]	; (2b88 <processOnDTMF+0x134>)
    2aa2:	4798      	blx	r3
			statusOnCall();
    2aa4:	4b3b      	ldr	r3, [pc, #236]	; (2b94 <processOnDTMF+0x140>)
				speakAmpere();
    2aa6:	4798      	blx	r3
    2aa8:	e7e5      	b.n	2a76 <processOnDTMF+0x22>
		else if (dtmf == '4') //underground status
    2aaa:	2b34      	cmp	r3, #52	; 0x34
    2aac:	d107      	bne.n	2abe <processOnDTMF+0x6a>
			if (factory_settings_parameter_struct.ENABLE_WATER)
    2aae:	7953      	ldrb	r3, [r2, #5]
    2ab0:	2b00      	cmp	r3, #0
    2ab2:	d0e0      	beq.n	2a76 <processOnDTMF+0x22>
				subDTMF();
    2ab4:	4b34      	ldr	r3, [pc, #208]	; (2b88 <processOnDTMF+0x134>)
    2ab6:	4798      	blx	r3
				waterStatusOnCall(false);
    2ab8:	0020      	movs	r0, r4
    2aba:	4b37      	ldr	r3, [pc, #220]	; (2b98 <processOnDTMF+0x144>)
    2abc:	e7e2      	b.n	2a84 <processOnDTMF+0x30>
		else if (dtmf == '5') //overHead Status
    2abe:	2b35      	cmp	r3, #53	; 0x35
    2ac0:	d107      	bne.n	2ad2 <processOnDTMF+0x7e>
			if (factory_settings_parameter_struct.ENABLE_GP)
    2ac2:	7913      	ldrb	r3, [r2, #4]
    2ac4:	2b00      	cmp	r3, #0
    2ac6:	d0d6      	beq.n	2a76 <processOnDTMF+0x22>
				subDTMF();
    2ac8:	4b2f      	ldr	r3, [pc, #188]	; (2b88 <processOnDTMF+0x134>)
    2aca:	4798      	blx	r3
				overHeadWaterStatusOnCall(false);
    2acc:	0020      	movs	r0, r4
    2ace:	4b33      	ldr	r3, [pc, #204]	; (2b9c <processOnDTMF+0x148>)
    2ad0:	e7d8      	b.n	2a84 <processOnDTMF+0x30>
		else if(dtmf == '0')
    2ad2:	2b30      	cmp	r3, #48	; 0x30
    2ad4:	d10f      	bne.n	2af6 <processOnDTMF+0xa2>
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
    2ad6:	7853      	ldrb	r3, [r2, #1]
    2ad8:	2b00      	cmp	r3, #0
    2ada:	d0cc      	beq.n	2a76 <processOnDTMF+0x22>
				if(zeroPressed)
    2adc:	4d30      	ldr	r5, [pc, #192]	; (2ba0 <processOnDTMF+0x14c>)
    2ade:	782b      	ldrb	r3, [r5, #0]
    2ae0:	2b00      	cmp	r3, #0
    2ae2:	d005      	beq.n	2af0 <processOnDTMF+0x9c>
					autoSetCurrent();   //to enable or disable current detection
    2ae4:	4b2f      	ldr	r3, [pc, #188]	; (2ba4 <processOnDTMF+0x150>)
    2ae6:	4798      	blx	r3
					subDTMF();
    2ae8:	4b27      	ldr	r3, [pc, #156]	; (2b88 <processOnDTMF+0x134>)
    2aea:	4798      	blx	r3
					zeroPressed=false;
    2aec:	702c      	strb	r4, [r5, #0]
    2aee:	e7c2      	b.n	2a76 <processOnDTMF+0x22>
					zeroPressed=true;
    2af0:	2301      	movs	r3, #1
    2af2:	702b      	strb	r3, [r5, #0]
    2af4:	e7bf      	b.n	2a76 <processOnDTMF+0x22>
		else if (dtmf == '7') //Speak Current Ampere On Call
    2af6:	2b37      	cmp	r3, #55	; 0x37
    2af8:	d106      	bne.n	2b08 <processOnDTMF+0xb4>
			if (factory_settings_parameter_struct.AMPERE_SPEAK)
    2afa:	7893      	ldrb	r3, [r2, #2]
    2afc:	2b00      	cmp	r3, #0
    2afe:	d0ba      	beq.n	2a76 <processOnDTMF+0x22>
				subDTMF();
    2b00:	4b21      	ldr	r3, [pc, #132]	; (2b88 <processOnDTMF+0x134>)
    2b02:	4798      	blx	r3
				speakAmpere();
    2b04:	4b28      	ldr	r3, [pc, #160]	; (2ba8 <processOnDTMF+0x154>)
    2b06:	e7ce      	b.n	2aa6 <processOnDTMF+0x52>
		else if(dtmf=='D')
    2b08:	2b44      	cmp	r3, #68	; 0x44
    2b0a:	d10c      	bne.n	2b26 <processOnDTMF+0xd2>
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
    2b0c:	2001      	movs	r0, #1
    2b0e:	4b27      	ldr	r3, [pc, #156]	; (2bac <processOnDTMF+0x158>)
    2b10:	4798      	blx	r3
			resetAutoStart(true);
    2b12:	2001      	movs	r0, #1
    2b14:	4b26      	ldr	r3, [pc, #152]	; (2bb0 <processOnDTMF+0x15c>)
    2b16:	4798      	blx	r3
			startMotor(false);
    2b18:	0020      	movs	r0, r4
    2b1a:	4b1c      	ldr	r3, [pc, #112]	; (2b8c <processOnDTMF+0x138>)
    2b1c:	4798      	blx	r3

void sendDTMFTone(uint8_t eventNo)
{
	if(eventNo==0xFF)
	{
		gsm_send_DTMF_Tone('A');
    2b1e:	4b25      	ldr	r3, [pc, #148]	; (2bb4 <processOnDTMF+0x160>)
    2b20:	2041      	movs	r0, #65	; 0x41
    2b22:	4798      	blx	r3
    2b24:	e7a7      	b.n	2a76 <processOnDTMF+0x22>
		else if(dtmf=='C')
    2b26:	2b43      	cmp	r3, #67	; 0x43
    2b28:	d108      	bne.n	2b3c <processOnDTMF+0xe8>
			saveAutoStartSettings(false);  //set AutoStart to false in EEPROM
    2b2a:	2000      	movs	r0, #0
    2b2c:	4b1f      	ldr	r3, [pc, #124]	; (2bac <processOnDTMF+0x158>)
    2b2e:	4798      	blx	r3
			stopMotor(false,false,true);
    2b30:	2100      	movs	r1, #0
    2b32:	2201      	movs	r2, #1
    2b34:	0008      	movs	r0, r1
    2b36:	4b16      	ldr	r3, [pc, #88]	; (2b90 <processOnDTMF+0x13c>)
    2b38:	4798      	blx	r3
    2b3a:	e7f0      	b.n	2b1e <processOnDTMF+0xca>
		else if (dtmf == '8') //Set AUTOTIMER ON
    2b3c:	2b38      	cmp	r3, #56	; 0x38
    2b3e:	d10c      	bne.n	2b5a <processOnDTMF+0x106>
			subDTMF();
    2b40:	4b11      	ldr	r3, [pc, #68]	; (2b88 <processOnDTMF+0x134>)
    2b42:	4798      	blx	r3
			saveAutoStartSettings(true);  //set AutoStart to True in EEPROM
    2b44:	2001      	movs	r0, #1
    2b46:	4b19      	ldr	r3, [pc, #100]	; (2bac <processOnDTMF+0x158>)
    2b48:	4798      	blx	r3
			resetAutoStart(true);
    2b4a:	2001      	movs	r0, #1
    2b4c:	4b18      	ldr	r3, [pc, #96]	; (2bb0 <processOnDTMF+0x15c>)
    2b4e:	4798      	blx	r3
			playSound(')',true);     // playFile AutoStart is On
    2b50:	2101      	movs	r1, #1
    2b52:	2029      	movs	r0, #41	; 0x29
			playSound('[',true); //playFile autoStart is turned oFF
    2b54:	4b18      	ldr	r3, [pc, #96]	; (2bb8 <processOnDTMF+0x164>)
    2b56:	4798      	blx	r3
}
    2b58:	e78d      	b.n	2a76 <processOnDTMF+0x22>
		else if (dtmf == '9') //Set AUTOTIMER OFF
    2b5a:	2b39      	cmp	r3, #57	; 0x39
    2b5c:	d000      	beq.n	2b60 <processOnDTMF+0x10c>
    2b5e:	e78a      	b.n	2a76 <processOnDTMF+0x22>
			subDTMF();
    2b60:	4b09      	ldr	r3, [pc, #36]	; (2b88 <processOnDTMF+0x134>)
    2b62:	4798      	blx	r3
			saveAutoStartSettings(false);  //set AUtoStart to False in EEPROM
    2b64:	2000      	movs	r0, #0
    2b66:	4b11      	ldr	r3, [pc, #68]	; (2bac <processOnDTMF+0x158>)
    2b68:	4798      	blx	r3
			resetAutoStart(true);
    2b6a:	2001      	movs	r0, #1
    2b6c:	4b10      	ldr	r3, [pc, #64]	; (2bb0 <processOnDTMF+0x15c>)
    2b6e:	4798      	blx	r3
			playSound('[',true); //playFile autoStart is turned oFF
    2b70:	2101      	movs	r1, #1
    2b72:	205b      	movs	r0, #91	; 0x5b
    2b74:	e7ee      	b.n	2b54 <processOnDTMF+0x100>
    2b76:	46c0      	nop			; (mov r8, r8)
    2b78:	2000057a 	.word	0x2000057a
    2b7c:	20000667 	.word	0x20000667
    2b80:	20000661 	.word	0x20000661
    2b84:	00001ad5 	.word	0x00001ad5
    2b88:	00002a39 	.word	0x00002a39
    2b8c:	00004fd9 	.word	0x00004fd9
    2b90:	00005119 	.word	0x00005119
    2b94:	0000594d 	.word	0x0000594d
    2b98:	000047d9 	.word	0x000047d9
    2b9c:	00004745 	.word	0x00004745
    2ba0:	200006ef 	.word	0x200006ef
    2ba4:	00004971 	.word	0x00004971
    2ba8:	00004a19 	.word	0x00004a19
    2bac:	00000b69 	.word	0x00000b69
    2bb0:	00004e99 	.word	0x00004e99
    2bb4:	00001a75 	.word	0x00001a75
    2bb8:	00002761 	.word	0x00002761

00002bbc <buildStatusMessage>:
{
    2bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t network= gsm_getsignalstrength();
    2bbe:	4b1a      	ldr	r3, [pc, #104]	; (2c28 <buildStatusMessage+0x6c>)
{
    2bc0:	b091      	sub	sp, #68	; 0x44
    2bc2:	0007      	movs	r7, r0
	uint8_t network= gsm_getsignalstrength();
    2bc4:	4798      	blx	r3
	switch(structThreePhase_state.u8t_phase_ac_state)
    2bc6:	4e19      	ldr	r6, [pc, #100]	; (2c2c <buildStatusMessage+0x70>)
	uint8_t network= gsm_getsignalstrength();
    2bc8:	9007      	str	r0, [sp, #28]
	switch(structThreePhase_state.u8t_phase_ac_state)
    2bca:	7873      	ldrb	r3, [r6, #1]
    2bcc:	ad0d      	add	r5, sp, #52	; 0x34
    2bce:	b2db      	uxtb	r3, r3
    2bd0:	4c17      	ldr	r4, [pc, #92]	; (2c30 <buildStatusMessage+0x74>)
		sprintf(strACState,(const uint8_t*)("2 PHASE"));
    2bd2:	4918      	ldr	r1, [pc, #96]	; (2c34 <buildStatusMessage+0x78>)
	switch(structThreePhase_state.u8t_phase_ac_state)
    2bd4:	2b02      	cmp	r3, #2
    2bd6:	d003      	beq.n	2be0 <buildStatusMessage+0x24>
		sprintf(strACState,(const uint8_t*)("ON"));
    2bd8:	4917      	ldr	r1, [pc, #92]	; (2c38 <buildStatusMessage+0x7c>)
	switch(structThreePhase_state.u8t_phase_ac_state)
    2bda:	2b03      	cmp	r3, #3
    2bdc:	d000      	beq.n	2be0 <buildStatusMessage+0x24>
		sprintf(strACState,(const uint8_t*)("OFF"));
    2bde:	4917      	ldr	r1, [pc, #92]	; (2c3c <buildStatusMessage+0x80>)
    2be0:	0028      	movs	r0, r5
    2be2:	47a0      	blx	r4
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
    2be4:	7833      	ldrb	r3, [r6, #0]
		sprintf(strSeq,(const uint8_t*)("OK"));
    2be6:	4916      	ldr	r1, [pc, #88]	; (2c40 <buildStatusMessage+0x84>)
    2be8:	ae0b      	add	r6, sp, #44	; 0x2c
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
    2bea:	2b02      	cmp	r3, #2
    2bec:	d000      	beq.n	2bf0 <buildStatusMessage+0x34>
		sprintf(strSeq,(const uint8_t*)("ERROR"));
    2bee:	4915      	ldr	r1, [pc, #84]	; (2c44 <buildStatusMessage+0x88>)
    2bf0:	0030      	movs	r0, r6
    2bf2:	47a0      	blx	r4
	if(getMotorState())
    2bf4:	4b14      	ldr	r3, [pc, #80]	; (2c48 <buildStatusMessage+0x8c>)
    2bf6:	4798      	blx	r3
		sprintf(strMotor,(const uint8_t*)("ON"));
    2bf8:	490f      	ldr	r1, [pc, #60]	; (2c38 <buildStatusMessage+0x7c>)
	if(getMotorState())
    2bfa:	2800      	cmp	r0, #0
    2bfc:	d100      	bne.n	2c00 <buildStatusMessage+0x44>
		sprintf(strMotor,(const uint8_t*)("OFF"));
    2bfe:	490f      	ldr	r1, [pc, #60]	; (2c3c <buildStatusMessage+0x80>)
    2c00:	a809      	add	r0, sp, #36	; 0x24
    2c02:	47a0      	blx	r4
	sprintf(resep_msg,"RY:%d YB:%d BR:%d\nAC:%s\nSequence:%s\nMotor:ON\nCurrent:%dA\nNetwork:%d",
    2c04:	4911      	ldr	r1, [pc, #68]	; (2c4c <buildStatusMessage+0x90>)
    2c06:	9c07      	ldr	r4, [sp, #28]
    2c08:	680a      	ldr	r2, [r1, #0]
    2c0a:	684b      	ldr	r3, [r1, #4]
    2c0c:	6888      	ldr	r0, [r1, #8]
	strACState,strSeq,Analog_Parameter_Struct.Motor_Current_IntPart,network);
    2c0e:	8a89      	ldrh	r1, [r1, #20]
	sprintf(resep_msg,"RY:%d YB:%d BR:%d\nAC:%s\nSequence:%s\nMotor:ON\nCurrent:%dA\nNetwork:%d",
    2c10:	9404      	str	r4, [sp, #16]
    2c12:	9103      	str	r1, [sp, #12]
    2c14:	9000      	str	r0, [sp, #0]
    2c16:	9602      	str	r6, [sp, #8]
    2c18:	9501      	str	r5, [sp, #4]
    2c1a:	490d      	ldr	r1, [pc, #52]	; (2c50 <buildStatusMessage+0x94>)
    2c1c:	0038      	movs	r0, r7
    2c1e:	4c0d      	ldr	r4, [pc, #52]	; (2c54 <buildStatusMessage+0x98>)
    2c20:	47a0      	blx	r4
}
    2c22:	b011      	add	sp, #68	; 0x44
    2c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c26:	46c0      	nop			; (mov r8, r8)
    2c28:	000016cd 	.word	0x000016cd
    2c2c:	20000669 	.word	0x20000669
    2c30:	0000c677 	.word	0x0000c677
    2c34:	0000d242 	.word	0x0000d242
    2c38:	0000d676 	.word	0x0000d676
    2c3c:	0000d511 	.word	0x0000d511
    2c40:	0000d42f 	.word	0x0000d42f
    2c44:	0000d3f4 	.word	0x0000d3f4
    2c48:	00004d19 	.word	0x00004d19
    2c4c:	2000062c 	.word	0x2000062c
    2c50:	0000d24a 	.word	0x0000d24a
    2c54:	0000c5fd 	.word	0x0000c5fd

00002c58 <checkNumber>:
{
    2c58:	b510      	push	{r4, lr}
	if ((isAdmin(number)) || (checkExists(number)<user_count_struct.total_user_no_count))
    2c5a:	4b07      	ldr	r3, [pc, #28]	; (2c78 <checkNumber+0x20>)
{
    2c5c:	0004      	movs	r4, r0
	if ((isAdmin(number)) || (checkExists(number)<user_count_struct.total_user_no_count))
    2c5e:	4798      	blx	r3
    2c60:	2800      	cmp	r0, #0
    2c62:	d107      	bne.n	2c74 <checkNumber+0x1c>
    2c64:	4b05      	ldr	r3, [pc, #20]	; (2c7c <checkNumber+0x24>)
    2c66:	0020      	movs	r0, r4
    2c68:	4798      	blx	r3
    2c6a:	4b05      	ldr	r3, [pc, #20]	; (2c80 <checkNumber+0x28>)
    2c6c:	785b      	ldrb	r3, [r3, #1]
    2c6e:	4298      	cmp	r0, r3
    2c70:	4180      	sbcs	r0, r0
    2c72:	4240      	negs	r0, r0
}
    2c74:	bd10      	pop	{r4, pc}
    2c76:	46c0      	nop			; (mov r8, r8)
    2c78:	00000fd1 	.word	0x00000fd1
    2c7c:	00000849 	.word	0x00000849
    2c80:	20000574 	.word	0x20000574

00002c84 <verifyRemoteNumber>:
	inCall=true;
    2c84:	2101      	movs	r1, #1
{
    2c86:	b510      	push	{r4, lr}
	inCall=true;
    2c88:	4b02      	ldr	r3, [pc, #8]	; (2c94 <verifyRemoteNumber+0x10>)
    2c8a:	4803      	ldr	r0, [pc, #12]	; (2c98 <verifyRemoteNumber+0x14>)
    2c8c:	7019      	strb	r1, [r3, #0]
    2c8e:	4b03      	ldr	r3, [pc, #12]	; (2c9c <verifyRemoteNumber+0x18>)
    2c90:	4798      	blx	r3
}
    2c92:	bd10      	pop	{r4, pc}
    2c94:	200006a8 	.word	0x200006a8
    2c98:	0000d679 	.word	0x0000d679
    2c9c:	00002389 	.word	0x00002389

00002ca0 <sendSMS>:
{
    2ca0:	b570      	push	{r4, r5, r6, lr}
    2ca2:	0015      	movs	r5, r2
	inCall=true;
    2ca4:	2201      	movs	r2, #1
    2ca6:	4b11      	ldr	r3, [pc, #68]	; (2cec <sendSMS+0x4c>)
{
    2ca8:	0004      	movs	r4, r0
	inCall=true;
    2caa:	701a      	strb	r2, [r3, #0]
	if (!predefMsg)
    2cac:	2900      	cmp	r1, #0
    2cae:	d112      	bne.n	2cd6 <sendSMS+0x36>
		switch(actionType)
    2cb0:	4b0f      	ldr	r3, [pc, #60]	; (2cf0 <sendSMS+0x50>)
    2cb2:	781b      	ldrb	r3, [r3, #0]
    2cb4:	3b43      	subs	r3, #67	; 0x43
    2cb6:	b2db      	uxtb	r3, r3
    2cb8:	2b12      	cmp	r3, #18
    2cba:	d810      	bhi.n	2cde <sendSMS+0x3e>
    2cbc:	409a      	lsls	r2, r3
    2cbe:	0013      	movs	r3, r2
    2cc0:	4a0c      	ldr	r2, [pc, #48]	; (2cf4 <sendSMS+0x54>)
    2cc2:	4213      	tst	r3, r2
    2cc4:	d10c      	bne.n	2ce0 <sendSMS+0x40>
    2cc6:	03db      	lsls	r3, r3, #15
    2cc8:	d509      	bpl.n	2cde <sendSMS+0x3e>
			strcat(msg,STR_MOTOR);
    2cca:	490b      	ldr	r1, [pc, #44]	; (2cf8 <sendSMS+0x58>)
    2ccc:	4e0b      	ldr	r6, [pc, #44]	; (2cfc <sendSMS+0x5c>)
    2cce:	47b0      	blx	r6
			strcat(msg,STR_ON);
    2cd0:	490b      	ldr	r1, [pc, #44]	; (2d00 <sendSMS+0x60>)
			strcat(msg,STR_OFF);
    2cd2:	0020      	movs	r0, r4
    2cd4:	47b0      	blx	r6
    2cd6:	0029      	movs	r1, r5
    2cd8:	0020      	movs	r0, r4
    2cda:	4b0a      	ldr	r3, [pc, #40]	; (2d04 <sendSMS+0x64>)
    2cdc:	4798      	blx	r3
}
    2cde:	bd70      	pop	{r4, r5, r6, pc}
			strcat(msg,STR_MOTOR);
    2ce0:	4905      	ldr	r1, [pc, #20]	; (2cf8 <sendSMS+0x58>)
    2ce2:	4e06      	ldr	r6, [pc, #24]	; (2cfc <sendSMS+0x5c>)
    2ce4:	47b0      	blx	r6
			strcat(msg,STR_OFF);
    2ce6:	4908      	ldr	r1, [pc, #32]	; (2d08 <sendSMS+0x68>)
    2ce8:	e7f3      	b.n	2cd2 <sendSMS+0x32>
    2cea:	46c0      	nop			; (mov r8, r8)
    2cec:	200006a8 	.word	0x200006a8
    2cf0:	20000676 	.word	0x20000676
    2cf4:	00041009 	.word	0x00041009
    2cf8:	0000d65c 	.word	0x0000d65c
    2cfc:	0000c641 	.word	0x0000c641
    2d00:	0000d676 	.word	0x0000d676
    2d04:	00002389 	.word	0x00002389
    2d08:	0000d511 	.word	0x0000d511

00002d0c <checkRespSMS>:
{
    2d0c:	b510      	push	{r4, lr}
	if (!callAccepted && user_settings_parameter_struct.responseAddress=='A')
    2d0e:	4b07      	ldr	r3, [pc, #28]	; (2d2c <checkRespSMS+0x20>)
    2d10:	7819      	ldrb	r1, [r3, #0]
    2d12:	2900      	cmp	r1, #0
    2d14:	d109      	bne.n	2d2a <checkRespSMS+0x1e>
    2d16:	4b06      	ldr	r3, [pc, #24]	; (2d30 <checkRespSMS+0x24>)
    2d18:	795b      	ldrb	r3, [r3, #5]
    2d1a:	2b41      	cmp	r3, #65	; 0x41
    2d1c:	d105      	bne.n	2d2a <checkRespSMS+0x1e>
		actionType = t1;
    2d1e:	4b05      	ldr	r3, [pc, #20]	; (2d34 <checkRespSMS+0x28>)
		sendSMS("",false,false);
    2d20:	000a      	movs	r2, r1
		actionType = t1;
    2d22:	7018      	strb	r0, [r3, #0]
		sendSMS("",false,false);
    2d24:	4804      	ldr	r0, [pc, #16]	; (2d38 <checkRespSMS+0x2c>)
    2d26:	4b05      	ldr	r3, [pc, #20]	; (2d3c <checkRespSMS+0x30>)
    2d28:	4798      	blx	r3
}
    2d2a:	bd10      	pop	{r4, pc}
    2d2c:	200006aa 	.word	0x200006aa
    2d30:	200005b0 	.word	0x200005b0
    2d34:	20000676 	.word	0x20000676
    2d38:	0000cffd 	.word	0x0000cffd
    2d3c:	00002ca1 	.word	0x00002ca1

00002d40 <sendDTMFTone>:
{
    2d40:	b510      	push	{r4, lr}
	if(eventNo==0xFF)
    2d42:	28ff      	cmp	r0, #255	; 0xff
    2d44:	d103      	bne.n	2d4e <sendDTMFTone+0xe>
		gsm_send_DTMF_Tone('A');
    2d46:	38be      	subs	r0, #190	; 0xbe
	{
		gsm_send_DTMF_Tone('D');
	}
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
	{
		gsm_send_DTMF_Tone('C');
    2d48:	4b09      	ldr	r3, [pc, #36]	; (2d70 <sendDTMFTone+0x30>)
    2d4a:	4798      	blx	r3
	}
}
    2d4c:	e006      	b.n	2d5c <sendDTMFTone+0x1c>
	else if (eventNo==0 && factory_settings_parameter_struct.ENABLE_M2M)
    2d4e:	2800      	cmp	r0, #0
    2d50:	d105      	bne.n	2d5e <sendDTMFTone+0x1e>
    2d52:	4b08      	ldr	r3, [pc, #32]	; (2d74 <sendDTMFTone+0x34>)
		gsm_send_DTMF_Tone('D');
    2d54:	3044      	adds	r0, #68	; 0x44
	else if (eventNo==0 && factory_settings_parameter_struct.ENABLE_M2M)
    2d56:	78db      	ldrb	r3, [r3, #3]
    2d58:	2b00      	cmp	r3, #0
    2d5a:	d1f5      	bne.n	2d48 <sendDTMFTone+0x8>
}
    2d5c:	bd10      	pop	{r4, pc}
	else if (eventNo==1 && factory_settings_parameter_struct.ENABLE_M2M)
    2d5e:	2801      	cmp	r0, #1
    2d60:	d1fc      	bne.n	2d5c <sendDTMFTone+0x1c>
    2d62:	4b04      	ldr	r3, [pc, #16]	; (2d74 <sendDTMFTone+0x34>)
    2d64:	78db      	ldrb	r3, [r3, #3]
    2d66:	2b00      	cmp	r3, #0
    2d68:	d0f8      	beq.n	2d5c <sendDTMFTone+0x1c>
		gsm_send_DTMF_Tone('C');
    2d6a:	3042      	adds	r0, #66	; 0x42
    2d6c:	e7ec      	b.n	2d48 <sendDTMFTone+0x8>
    2d6e:	46c0      	nop			; (mov r8, r8)
    2d70:	00001a75 	.word	0x00001a75
    2d74:	2000057a 	.word	0x2000057a

00002d78 <getSystemTime>:

void getSystemTime(uint8_t *Hours, uint8_t *Minutes)
{
    2d78:	b570      	push	{r4, r5, r6, lr}
	if (gsm_get_internal_rtc_time() == GSM_ERROR_NONE)
    2d7a:	4b06      	ldr	r3, [pc, #24]	; (2d94 <getSystemTime+0x1c>)
{
    2d7c:	0005      	movs	r5, r0
    2d7e:	000c      	movs	r4, r1
	if (gsm_get_internal_rtc_time() == GSM_ERROR_NONE)
    2d80:	4798      	blx	r3
    2d82:	2800      	cmp	r0, #0
    2d84:	d104      	bne.n	2d90 <getSystemTime+0x18>
	{
		*Hours = struct_internal_rtc.Network_hour;
    2d86:	4b04      	ldr	r3, [pc, #16]	; (2d98 <getSystemTime+0x20>)
    2d88:	78da      	ldrb	r2, [r3, #3]
    2d8a:	702a      	strb	r2, [r5, #0]
		*Minutes = struct_internal_rtc.Network_minute;
    2d8c:	791b      	ldrb	r3, [r3, #4]
    2d8e:	7023      	strb	r3, [r4, #0]
	}
}
    2d90:	bd70      	pop	{r4, r5, r6, pc}
    2d92:	46c0      	nop			; (mov r8, r8)
    2d94:	00001b9d 	.word	0x00001b9d
    2d98:	200005dc 	.word	0x200005dc

00002d9c <processOnSMS>:
{
    2d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d9e:	b0cb      	sub	sp, #300	; 0x12c
    2da0:	0004      	movs	r4, r0
    2da2:	9107      	str	r1, [sp, #28]
    2da4:	0016      	movs	r6, r2
    2da6:	9308      	str	r3, [sp, #32]
    2da8:	4dbd      	ldr	r5, [pc, #756]	; (30a0 <processOnSMS+0x304>)
	if(alterNumber)
    2daa:	2b00      	cmp	r3, #0
    2dac:	d113      	bne.n	2dd6 <processOnSMS+0x3a>
	if (StringstartsWith(received_command,"WAIT"))
    2dae:	49bd      	ldr	r1, [pc, #756]	; (30a4 <processOnSMS+0x308>)
    2db0:	0020      	movs	r0, r4
    2db2:	47a8      	blx	r5
    2db4:	2800      	cmp	r0, #0
    2db6:	d114      	bne.n	2de2 <processOnSMS+0x46>
	else if (StringstartsWith(received_command,"CLEARALL"))
    2db8:	49bb      	ldr	r1, [pc, #748]	; (30a8 <processOnSMS+0x30c>)
    2dba:	0020      	movs	r0, r4
    2dbc:	47a8      	blx	r5
    2dbe:	1e07      	subs	r7, r0, #0
    2dc0:	d01a      	beq.n	2df8 <processOnSMS+0x5c>
		clearNumbers(admin);
    2dc2:	9807      	ldr	r0, [sp, #28]
    2dc4:	4bb9      	ldr	r3, [pc, #740]	; (30ac <processOnSMS+0x310>)
    2dc6:	4798      	blx	r3
			strcpy(resep_msg,"ALL USER NUMBERS CLEARED");
    2dc8:	49b9      	ldr	r1, [pc, #740]	; (30b0 <processOnSMS+0x314>)
		if (response_sms_processed_cmd == true)
    2dca:	2e00      	cmp	r6, #0
    2dcc:	d007      	beq.n	2dde <processOnSMS+0x42>
				strcpy(resep_msg,"M2M SETTING OFF");
    2dce:	4bb9      	ldr	r3, [pc, #740]	; (30b4 <processOnSMS+0x318>)
    2dd0:	a80b      	add	r0, sp, #44	; 0x2c
    2dd2:	4798      	blx	r3
    2dd4:	e132      	b.n	303c <processOnSMS+0x2a0>
		if(!StringstartsWith(received_command,"AMON"))
    2dd6:	49b8      	ldr	r1, [pc, #736]	; (30b8 <processOnSMS+0x31c>)
    2dd8:	47a8      	blx	r5
    2dda:	2800      	cmp	r0, #0
    2ddc:	d1e7      	bne.n	2dae <processOnSMS+0x12>
}
    2dde:	b04b      	add	sp, #300	; 0x12c
    2de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		enum gsm_error err = gsm_disable_call_waiting();
    2de2:	4bb6      	ldr	r3, [pc, #728]	; (30bc <processOnSMS+0x320>)
    2de4:	4798      	blx	r3
		if (response_sms_processed_cmd == true)
    2de6:	2e00      	cmp	r6, #0
    2de8:	d0f9      	beq.n	2dde <processOnSMS+0x42>
    2dea:	4bb2      	ldr	r3, [pc, #712]	; (30b4 <processOnSMS+0x318>)
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : SUCCESS");
    2dec:	49b4      	ldr	r1, [pc, #720]	; (30c0 <processOnSMS+0x324>)
			if (err == GSM_ERROR_NONE)
    2dee:	2800      	cmp	r0, #0
    2df0:	d000      	beq.n	2df4 <processOnSMS+0x58>
				strcpy(resep_msg,"GSM CALL WAITTING DISABLE : FAILED");
    2df2:	49b4      	ldr	r1, [pc, #720]	; (30c4 <processOnSMS+0x328>)
					strcpy(resep_msg,"ALTERNATE MOBILE NO ADD FAILED");
    2df4:	a80b      	add	r0, sp, #44	; 0x2c
    2df6:	e7ec      	b.n	2dd2 <processOnSMS+0x36>
	else if (StringstartsWith(received_command,"DEFAULT"))
    2df8:	49b3      	ldr	r1, [pc, #716]	; (30c8 <processOnSMS+0x32c>)
    2dfa:	0020      	movs	r0, r4
    2dfc:	47a8      	blx	r5
    2dfe:	9009      	str	r0, [sp, #36]	; 0x24
    2e00:	2800      	cmp	r0, #0
    2e02:	d03e      	beq.n	2e82 <processOnSMS+0xe6>
		saveAutoStartSettings(false);
    2e04:	4bb1      	ldr	r3, [pc, #708]	; (30cc <processOnSMS+0x330>)
    2e06:	0038      	movs	r0, r7
    2e08:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_WATER)
    2e0a:	4cb1      	ldr	r4, [pc, #708]	; (30d0 <processOnSMS+0x334>)
    2e0c:	7963      	ldrb	r3, [r4, #5]
    2e0e:	2b00      	cmp	r3, #0
    2e10:	d009      	beq.n	2e26 <processOnSMS+0x8a>
			saveWaterBypassSettings(false);
    2e12:	0038      	movs	r0, r7
    2e14:	4baf      	ldr	r3, [pc, #700]	; (30d4 <processOnSMS+0x338>)
    2e16:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_M2M)
    2e18:	78e0      	ldrb	r0, [r4, #3]
				savePreventOverFlowSettings(false);
    2e1a:	4baf      	ldr	r3, [pc, #700]	; (30d8 <processOnSMS+0x33c>)
			if (factory_settings_parameter_struct.ENABLE_M2M)
    2e1c:	2800      	cmp	r0, #0
    2e1e:	d001      	beq.n	2e24 <processOnSMS+0x88>
				saveM2MSettings(false);
    2e20:	0038      	movs	r0, r7
    2e22:	4bae      	ldr	r3, [pc, #696]	; (30dc <processOnSMS+0x340>)
				savePreventOverFlowSettings(false);
    2e24:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    2e26:	7863      	ldrb	r3, [r4, #1]
    2e28:	2b00      	cmp	r3, #0
    2e2a:	d008      	beq.n	2e3e <processOnSMS+0xa2>
			setOverloadPer(120);
    2e2c:	4bac      	ldr	r3, [pc, #688]	; (30e0 <processOnSMS+0x344>)
    2e2e:	2078      	movs	r0, #120	; 0x78
    2e30:	4798      	blx	r3
			setUnderloadPer(85);
    2e32:	4bac      	ldr	r3, [pc, #688]	; (30e4 <processOnSMS+0x348>)
    2e34:	2055      	movs	r0, #85	; 0x55
    2e36:	4798      	blx	r3
			setCurrentDetection(false);
    2e38:	2000      	movs	r0, #0
    2e3a:	4bab      	ldr	r3, [pc, #684]	; (30e8 <processOnSMS+0x34c>)
    2e3c:	4798      	blx	r3
		saveEventStageSettings(0);
    2e3e:	2000      	movs	r0, #0
    2e40:	4baa      	ldr	r3, [pc, #680]	; (30ec <processOnSMS+0x350>)
    2e42:	4798      	blx	r3
		saveDNDSettings(false);
    2e44:	2000      	movs	r0, #0
    2e46:	4baa      	ldr	r3, [pc, #680]	; (30f0 <processOnSMS+0x354>)
    2e48:	4798      	blx	r3
		saveResponseSettings('C');
    2e4a:	2043      	movs	r0, #67	; 0x43
    2e4c:	4ba9      	ldr	r3, [pc, #676]	; (30f4 <processOnSMS+0x358>)
    2e4e:	4798      	blx	r3
		saveAutoStartTimeSettings(50);
    2e50:	2032      	movs	r0, #50	; 0x32
    2e52:	4ba9      	ldr	r3, [pc, #676]	; (30f8 <processOnSMS+0x35c>)
    2e54:	4798      	blx	r3
		saveStarDeltaTimer(2);
    2e56:	2002      	movs	r0, #2
    2e58:	4ba8      	ldr	r3, [pc, #672]	; (30fc <processOnSMS+0x360>)
    2e5a:	4798      	blx	r3
		saveSinglePhasingSettings(true);
    2e5c:	2001      	movs	r0, #1
    2e5e:	4ba8      	ldr	r3, [pc, #672]	; (3100 <processOnSMS+0x364>)
    2e60:	4798      	blx	r3
		saveSinglePhasingVoltage(80);
    2e62:	2050      	movs	r0, #80	; 0x50
    2e64:	4ba7      	ldr	r3, [pc, #668]	; (3104 <processOnSMS+0x368>)
    2e66:	4798      	blx	r3
		savePhaseSequenceProtectionSettings(true);
    2e68:	2001      	movs	r0, #1
    2e6a:	4ba7      	ldr	r3, [pc, #668]	; (3108 <processOnSMS+0x36c>)
    2e6c:	4798      	blx	r3
		setPrimaryNumberIndex(0);
    2e6e:	2000      	movs	r0, #0
    2e70:	4ba6      	ldr	r3, [pc, #664]	; (310c <processOnSMS+0x370>)
    2e72:	4798      	blx	r3
		setSecondaryNumberIndex(1);
    2e74:	2001      	movs	r0, #1
    2e76:	4ba6      	ldr	r3, [pc, #664]	; (3110 <processOnSMS+0x374>)
    2e78:	4798      	blx	r3
			strcpy(resep_msg,"ALL SETTINGS ARE ARE NOW FACTORY DEFAULT");
    2e7a:	49a6      	ldr	r1, [pc, #664]	; (3114 <processOnSMS+0x378>)
		if (response_sms_processed_cmd == true)
    2e7c:	2e00      	cmp	r6, #0
    2e7e:	d0ae      	beq.n	2dde <processOnSMS+0x42>
    2e80:	e7a5      	b.n	2dce <processOnSMS+0x32>
	else if (StringstartsWith(received_command,"NUM"))
    2e82:	49a5      	ldr	r1, [pc, #660]	; (3118 <processOnSMS+0x37c>)
    2e84:	0020      	movs	r0, r4
    2e86:	47a8      	blx	r5
    2e88:	2800      	cmp	r0, #0
    2e8a:	d009      	beq.n	2ea0 <processOnSMS+0x104>
		getNumbers(resep_msg);
    2e8c:	a80b      	add	r0, sp, #44	; 0x2c
    2e8e:	4ba3      	ldr	r3, [pc, #652]	; (311c <processOnSMS+0x380>)
    2e90:	4798      	blx	r3
			memset(resep_msg, '\0', sizeof(resep_msg));
    2e92:	9909      	ldr	r1, [sp, #36]	; 0x24
    2e94:	22fa      	movs	r2, #250	; 0xfa
    2e96:	a80b      	add	r0, sp, #44	; 0x2c
    2e98:	4ba1      	ldr	r3, [pc, #644]	; (3120 <processOnSMS+0x384>)
    2e9a:	4798      	blx	r3
			strcpy(resep_msg,"No Numbers Exists");
    2e9c:	49a1      	ldr	r1, [pc, #644]	; (3124 <processOnSMS+0x388>)
    2e9e:	e796      	b.n	2dce <processOnSMS+0x32>
	else if (StringstartsWith(received_command,"RESET"))
    2ea0:	49a1      	ldr	r1, [pc, #644]	; (3128 <processOnSMS+0x38c>)
    2ea2:	0020      	movs	r0, r4
    2ea4:	47a8      	blx	r5
    2ea6:	2800      	cmp	r0, #0
    2ea8:	d007      	beq.n	2eba <processOnSMS+0x11e>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    2eaa:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    2eae:	4a9f      	ldr	r2, [pc, #636]	; (312c <processOnSMS+0x390>)
    2eb0:	4b9f      	ldr	r3, [pc, #636]	; (3130 <processOnSMS+0x394>)
    2eb2:	60da      	str	r2, [r3, #12]
    2eb4:	f3bf 8f4f 	dsb	sy
    2eb8:	e7fe      	b.n	2eb8 <processOnSMS+0x11c>
	else if (StringstartsWith(received_command,"DID"))
    2eba:	499e      	ldr	r1, [pc, #632]	; (3134 <processOnSMS+0x398>)
    2ebc:	0020      	movs	r0, r4
    2ebe:	47a8      	blx	r5
		strcpy(resep_msg,factory_settings_parameter_struct.DeviceID_ee);
    2ec0:	499d      	ldr	r1, [pc, #628]	; (3138 <processOnSMS+0x39c>)
	else if (StringstartsWith(received_command,"DID"))
    2ec2:	2800      	cmp	r0, #0
    2ec4:	d000      	beq.n	2ec8 <processOnSMS+0x12c>
    2ec6:	e782      	b.n	2dce <processOnSMS+0x32>
	else if (StringstartsWith(received_command,"AUTOON"))
    2ec8:	499c      	ldr	r1, [pc, #624]	; (313c <processOnSMS+0x3a0>)
    2eca:	0020      	movs	r0, r4
    2ecc:	47a8      	blx	r5
    2ece:	1e07      	subs	r7, r0, #0
    2ed0:	d00a      	beq.n	2ee8 <processOnSMS+0x14c>
		saveAutoStartSettings(true);
    2ed2:	2001      	movs	r0, #1
    2ed4:	4b7d      	ldr	r3, [pc, #500]	; (30cc <processOnSMS+0x330>)
    2ed6:	4798      	blx	r3
		resetAutoStart(true);
    2ed8:	2001      	movs	r0, #1
    2eda:	4b99      	ldr	r3, [pc, #612]	; (3140 <processOnSMS+0x3a4>)
    2edc:	4798      	blx	r3
			strcpy(resep_msg,"MOTOR AUTOON ON");
    2ede:	4999      	ldr	r1, [pc, #612]	; (3144 <processOnSMS+0x3a8>)
		if (response_sms_processed_cmd == true)
    2ee0:	2e00      	cmp	r6, #0
    2ee2:	d100      	bne.n	2ee6 <processOnSMS+0x14a>
    2ee4:	e77b      	b.n	2dde <processOnSMS+0x42>
    2ee6:	e772      	b.n	2dce <processOnSMS+0x32>
	else if (StringstartsWith(received_command,"AUTOOFF"))
    2ee8:	4997      	ldr	r1, [pc, #604]	; (3148 <processOnSMS+0x3ac>)
    2eea:	0020      	movs	r0, r4
    2eec:	47a8      	blx	r5
    2eee:	2800      	cmp	r0, #0
    2ef0:	d009      	beq.n	2f06 <processOnSMS+0x16a>
		saveAutoStartSettings(false);
    2ef2:	0038      	movs	r0, r7
    2ef4:	4b75      	ldr	r3, [pc, #468]	; (30cc <processOnSMS+0x330>)
    2ef6:	4798      	blx	r3
		resetAutoStart(true);
    2ef8:	2001      	movs	r0, #1
    2efa:	4b91      	ldr	r3, [pc, #580]	; (3140 <processOnSMS+0x3a4>)
    2efc:	4798      	blx	r3
	if (response_sms_processed_cmd == true)
    2efe:	2e00      	cmp	r6, #0
    2f00:	d100      	bne.n	2f04 <processOnSMS+0x168>
    2f02:	e76c      	b.n	2dde <processOnSMS+0x42>
    2f04:	e09a      	b.n	303c <processOnSMS+0x2a0>
	else if (StringstartsWith(received_command,"WBYPON"))
    2f06:	4991      	ldr	r1, [pc, #580]	; (314c <processOnSMS+0x3b0>)
    2f08:	0020      	movs	r0, r4
    2f0a:	47a8      	blx	r5
    2f0c:	2800      	cmp	r0, #0
    2f0e:	d00b      	beq.n	2f28 <processOnSMS+0x18c>
		if (factory_settings_parameter_struct.ENABLE_WATER)
    2f10:	4b6f      	ldr	r3, [pc, #444]	; (30d0 <processOnSMS+0x334>)
    2f12:	795b      	ldrb	r3, [r3, #5]
    2f14:	2b00      	cmp	r3, #0
    2f16:	d0f2      	beq.n	2efe <processOnSMS+0x162>
			saveWaterBypassSettings(true);
    2f18:	2001      	movs	r0, #1
    2f1a:	4b6e      	ldr	r3, [pc, #440]	; (30d4 <processOnSMS+0x338>)
    2f1c:	4798      	blx	r3
				strcpy(resep_msg,"WATER BYPASS ON");
    2f1e:	498c      	ldr	r1, [pc, #560]	; (3150 <processOnSMS+0x3b4>)
			if (response_sms_processed_cmd == true)
    2f20:	2e00      	cmp	r6, #0
    2f22:	d100      	bne.n	2f26 <processOnSMS+0x18a>
    2f24:	e75b      	b.n	2dde <processOnSMS+0x42>
    2f26:	e752      	b.n	2dce <processOnSMS+0x32>
	else if (StringstartsWith(received_command,"WBYPOFF"))
    2f28:	498a      	ldr	r1, [pc, #552]	; (3154 <processOnSMS+0x3b8>)
    2f2a:	0020      	movs	r0, r4
    2f2c:	47a8      	blx	r5
    2f2e:	2800      	cmp	r0, #0
    2f30:	d00b      	beq.n	2f4a <processOnSMS+0x1ae>
		if (factory_settings_parameter_struct.ENABLE_WATER)
    2f32:	4b67      	ldr	r3, [pc, #412]	; (30d0 <processOnSMS+0x334>)
    2f34:	795b      	ldrb	r3, [r3, #5]
    2f36:	2b00      	cmp	r3, #0
    2f38:	d0e1      	beq.n	2efe <processOnSMS+0x162>
			saveWaterBypassSettings(false);
    2f3a:	2000      	movs	r0, #0
    2f3c:	4b65      	ldr	r3, [pc, #404]	; (30d4 <processOnSMS+0x338>)
    2f3e:	4798      	blx	r3
				strcpy(resep_msg,"WATER BYPASS OFF");
    2f40:	4985      	ldr	r1, [pc, #532]	; (3158 <processOnSMS+0x3bc>)
			if (response_sms_processed_cmd == true)
    2f42:	2e00      	cmp	r6, #0
    2f44:	d100      	bne.n	2f48 <processOnSMS+0x1ac>
    2f46:	e74a      	b.n	2dde <processOnSMS+0x42>
    2f48:	e741      	b.n	2dce <processOnSMS+0x32>
	else if (StringstartsWith(received_command,"SPPON"))
    2f4a:	4984      	ldr	r1, [pc, #528]	; (315c <processOnSMS+0x3c0>)
    2f4c:	0020      	movs	r0, r4
    2f4e:	47a8      	blx	r5
    2f50:	1e07      	subs	r7, r0, #0
    2f52:	d007      	beq.n	2f64 <processOnSMS+0x1c8>
		saveSinglePhasingSettings(true);
    2f54:	2001      	movs	r0, #1
    2f56:	4b6a      	ldr	r3, [pc, #424]	; (3100 <processOnSMS+0x364>)
    2f58:	4798      	blx	r3
			strcpy(resep_msg,"SPP ON");
    2f5a:	4981      	ldr	r1, [pc, #516]	; (3160 <processOnSMS+0x3c4>)
		if (response_sms_processed_cmd == true)
    2f5c:	2e00      	cmp	r6, #0
    2f5e:	d100      	bne.n	2f62 <processOnSMS+0x1c6>
    2f60:	e73d      	b.n	2dde <processOnSMS+0x42>
    2f62:	e734      	b.n	2dce <processOnSMS+0x32>
	else if (StringstartsWith(received_command,"SPPOFF"))
    2f64:	497f      	ldr	r1, [pc, #508]	; (3164 <processOnSMS+0x3c8>)
    2f66:	0020      	movs	r0, r4
    2f68:	47a8      	blx	r5
    2f6a:	2800      	cmp	r0, #0
    2f6c:	d007      	beq.n	2f7e <processOnSMS+0x1e2>
		saveSinglePhasingSettings(false);
    2f6e:	0038      	movs	r0, r7
    2f70:	4b63      	ldr	r3, [pc, #396]	; (3100 <processOnSMS+0x364>)
    2f72:	4798      	blx	r3
			strcpy(resep_msg,"SPP OFF");
    2f74:	497c      	ldr	r1, [pc, #496]	; (3168 <processOnSMS+0x3cc>)
		if (response_sms_processed_cmd == true)
    2f76:	2e00      	cmp	r6, #0
    2f78:	d100      	bne.n	2f7c <processOnSMS+0x1e0>
    2f7a:	e730      	b.n	2dde <processOnSMS+0x42>
    2f7c:	e727      	b.n	2dce <processOnSMS+0x32>
	else if(StringstartsWith(received_command,"SPPV"))
    2f7e:	497b      	ldr	r1, [pc, #492]	; (316c <processOnSMS+0x3d0>)
    2f80:	0020      	movs	r0, r4
    2f82:	47a8      	blx	r5
    2f84:	2800      	cmp	r0, #0
    2f86:	d017      	beq.n	2fb8 <processOnSMS+0x21c>
		memmove(received_command,received_command+4,strlen(received_command));
    2f88:	4b79      	ldr	r3, [pc, #484]	; (3170 <processOnSMS+0x3d4>)
    2f8a:	0020      	movs	r0, r4
    2f8c:	4798      	blx	r3
    2f8e:	1d21      	adds	r1, r4, #4
    2f90:	0002      	movs	r2, r0
    2f92:	4b78      	ldr	r3, [pc, #480]	; (3174 <processOnSMS+0x3d8>)
    2f94:	0020      	movs	r0, r4
    2f96:	4798      	blx	r3
		uint8_t sppVoltage = atoi(received_command);
    2f98:	4b77      	ldr	r3, [pc, #476]	; (3178 <processOnSMS+0x3dc>)
    2f9a:	0020      	movs	r0, r4
    2f9c:	4798      	blx	r3
    2f9e:	b2c3      	uxtb	r3, r0
		saveSinglePhasingVoltage(sppVoltage);
    2fa0:	1c18      	adds	r0, r3, #0
    2fa2:	2b14      	cmp	r3, #20
    2fa4:	d200      	bcs.n	2fa8 <processOnSMS+0x20c>
    2fa6:	2014      	movs	r0, #20
    2fa8:	b2c0      	uxtb	r0, r0
    2faa:	4b56      	ldr	r3, [pc, #344]	; (3104 <processOnSMS+0x368>)
    2fac:	4798      	blx	r3
			strcpy(resep_msg,"SPP VOLT SET");
    2fae:	4973      	ldr	r1, [pc, #460]	; (317c <processOnSMS+0x3e0>)
		if (response_sms_processed_cmd == true)
    2fb0:	2e00      	cmp	r6, #0
    2fb2:	d100      	bne.n	2fb6 <processOnSMS+0x21a>
    2fb4:	e713      	b.n	2dde <processOnSMS+0x42>
    2fb6:	e70a      	b.n	2dce <processOnSMS+0x32>
	else if(StringstartsWith(received_command,"SEQON"))
    2fb8:	4971      	ldr	r1, [pc, #452]	; (3180 <processOnSMS+0x3e4>)
    2fba:	0020      	movs	r0, r4
    2fbc:	47a8      	blx	r5
    2fbe:	1e07      	subs	r7, r0, #0
    2fc0:	d007      	beq.n	2fd2 <processOnSMS+0x236>
		savePhaseSequenceProtectionSettings(true);
    2fc2:	2001      	movs	r0, #1
    2fc4:	4b50      	ldr	r3, [pc, #320]	; (3108 <processOnSMS+0x36c>)
    2fc6:	4798      	blx	r3
			strcpy(resep_msg,"SEQP ON");
    2fc8:	496e      	ldr	r1, [pc, #440]	; (3184 <processOnSMS+0x3e8>)
		if (response_sms_processed_cmd == true)
    2fca:	2e00      	cmp	r6, #0
    2fcc:	d100      	bne.n	2fd0 <processOnSMS+0x234>
    2fce:	e706      	b.n	2dde <processOnSMS+0x42>
    2fd0:	e6fd      	b.n	2dce <processOnSMS+0x32>
	else if(StringstartsWith(received_command,"SEQOFF"))
    2fd2:	496d      	ldr	r1, [pc, #436]	; (3188 <processOnSMS+0x3ec>)
    2fd4:	0020      	movs	r0, r4
    2fd6:	47a8      	blx	r5
    2fd8:	2800      	cmp	r0, #0
    2fda:	d007      	beq.n	2fec <processOnSMS+0x250>
		savePhaseSequenceProtectionSettings(false);
    2fdc:	0038      	movs	r0, r7
    2fde:	4b4a      	ldr	r3, [pc, #296]	; (3108 <processOnSMS+0x36c>)
    2fe0:	4798      	blx	r3
			strcpy(resep_msg,"SEQP OFF");
    2fe2:	496a      	ldr	r1, [pc, #424]	; (318c <processOnSMS+0x3f0>)
		if (response_sms_processed_cmd == true)
    2fe4:	2e00      	cmp	r6, #0
    2fe6:	d100      	bne.n	2fea <processOnSMS+0x24e>
    2fe8:	e6f9      	b.n	2dde <processOnSMS+0x42>
    2fea:	e6f0      	b.n	2dce <processOnSMS+0x32>
	else if (StringstartsWith(received_command,"DND"))
    2fec:	4968      	ldr	r1, [pc, #416]	; (3190 <processOnSMS+0x3f4>)
    2fee:	0020      	movs	r0, r4
    2ff0:	47a8      	blx	r5
    2ff2:	2800      	cmp	r0, #0
    2ff4:	d02c      	beq.n	3050 <processOnSMS+0x2b4>
		if (strlen(received_command)>3)
    2ff6:	0020      	movs	r0, r4
    2ff8:	4b5d      	ldr	r3, [pc, #372]	; (3170 <processOnSMS+0x3d4>)
    2ffa:	4798      	blx	r3
    2ffc:	0002      	movs	r2, r0
    2ffe:	2803      	cmp	r0, #3
    3000:	d800      	bhi.n	3004 <processOnSMS+0x268>
    3002:	e77c      	b.n	2efe <processOnSMS+0x162>
			memmove(received_command,received_command+3,strlen(received_command));
    3004:	4b5b      	ldr	r3, [pc, #364]	; (3174 <processOnSMS+0x3d8>)
    3006:	1ce1      	adds	r1, r4, #3
    3008:	0020      	movs	r0, r4
    300a:	4798      	blx	r3
			if(received_command[0]=='L' || received_command[0]=='S' || received_command[0]=='O')
    300c:	7823      	ldrb	r3, [r4, #0]
    300e:	2b4c      	cmp	r3, #76	; 0x4c
    3010:	d003      	beq.n	301a <processOnSMS+0x27e>
    3012:	22fb      	movs	r2, #251	; 0xfb
    3014:	3b4f      	subs	r3, #79	; 0x4f
    3016:	4213      	tst	r3, r2
    3018:	d115      	bne.n	3046 <processOnSMS+0x2aa>
				saveDNDSettings((char)received_command);  //save specific RESPONSE settings
    301a:	b2e0      	uxtb	r0, r4
    301c:	4b34      	ldr	r3, [pc, #208]	; (30f0 <processOnSMS+0x354>)
    301e:	4798      	blx	r3
					strcpy(resep_msg,"DND : ");
    3020:	495c      	ldr	r1, [pc, #368]	; (3194 <processOnSMS+0x3f8>)
				if (response_sms_processed_cmd == true)
    3022:	2e00      	cmp	r6, #0
    3024:	d100      	bne.n	3028 <processOnSMS+0x28c>
    3026:	e6da      	b.n	2dde <processOnSMS+0x42>
					strcpy(resep_msg,"RESP : ");
    3028:	4b22      	ldr	r3, [pc, #136]	; (30b4 <processOnSMS+0x318>)
    302a:	a80b      	add	r0, sp, #44	; 0x2c
    302c:	4798      	blx	r3
					strcat(resep_msg,received_command);
    302e:	0021      	movs	r1, r4
    3030:	a80b      	add	r0, sp, #44	; 0x2c
    3032:	4c59      	ldr	r4, [pc, #356]	; (3198 <processOnSMS+0x3fc>)
    3034:	47a0      	blx	r4
					strcat(resep_msg," OK");
    3036:	4959      	ldr	r1, [pc, #356]	; (319c <processOnSMS+0x400>)
    3038:	a80b      	add	r0, sp, #44	; 0x2c
    303a:	47a0      	blx	r4
		gsm_send_sms(phone_number,resep_msg);
    303c:	a90b      	add	r1, sp, #44	; 0x2c
    303e:	9850      	ldr	r0, [sp, #320]	; 0x140
    3040:	4b57      	ldr	r3, [pc, #348]	; (31a0 <processOnSMS+0x404>)
    3042:	4798      	blx	r3
    3044:	e6cb      	b.n	2dde <processOnSMS+0x42>
					strcpy(resep_msg,"DND ERROR");
    3046:	4957      	ldr	r1, [pc, #348]	; (31a4 <processOnSMS+0x408>)
				if (response_sms_processed_cmd == true)
    3048:	2e00      	cmp	r6, #0
    304a:	d100      	bne.n	304e <processOnSMS+0x2b2>
    304c:	e6c7      	b.n	2dde <processOnSMS+0x42>
    304e:	e6be      	b.n	2dce <processOnSMS+0x32>
	else if (StringstartsWith(received_command,"RESP"))
    3050:	4955      	ldr	r1, [pc, #340]	; (31a8 <processOnSMS+0x40c>)
    3052:	0020      	movs	r0, r4
    3054:	47a8      	blx	r5
    3056:	2800      	cmp	r0, #0
    3058:	d100      	bne.n	305c <processOnSMS+0x2c0>
    305a:	e0ad      	b.n	31b8 <processOnSMS+0x41c>
		if (strlen(received_command)>4)
    305c:	0020      	movs	r0, r4
    305e:	4b44      	ldr	r3, [pc, #272]	; (3170 <processOnSMS+0x3d4>)
    3060:	4798      	blx	r3
    3062:	0002      	movs	r2, r0
    3064:	2804      	cmp	r0, #4
    3066:	d800      	bhi.n	306a <processOnSMS+0x2ce>
    3068:	e749      	b.n	2efe <processOnSMS+0x162>
			memmove(received_command,received_command+4,strlen(received_command));
    306a:	4b42      	ldr	r3, [pc, #264]	; (3174 <processOnSMS+0x3d8>)
    306c:	1d21      	adds	r1, r4, #4
    306e:	0020      	movs	r0, r4
    3070:	4798      	blx	r3
			if(received_command[0]=='C' || received_command[0]=='A' || received_command[0]=='T' || received_command[0]=='N')
    3072:	7823      	ldrb	r3, [r4, #0]
    3074:	3b41      	subs	r3, #65	; 0x41
    3076:	b2db      	uxtb	r3, r3
    3078:	2b13      	cmp	r3, #19
    307a:	d80b      	bhi.n	3094 <processOnSMS+0x2f8>
    307c:	4a4b      	ldr	r2, [pc, #300]	; (31ac <processOnSMS+0x410>)
    307e:	40da      	lsrs	r2, r3
    3080:	07d3      	lsls	r3, r2, #31
    3082:	d507      	bpl.n	3094 <processOnSMS+0x2f8>
				saveResponseSettings((char)received_command);  //save specific RESPONSE settings
    3084:	b2e0      	uxtb	r0, r4
    3086:	4b1b      	ldr	r3, [pc, #108]	; (30f4 <processOnSMS+0x358>)
    3088:	4798      	blx	r3
				if (response_sms_processed_cmd == true)
    308a:	2e00      	cmp	r6, #0
    308c:	d100      	bne.n	3090 <processOnSMS+0x2f4>
    308e:	e6a6      	b.n	2dde <processOnSMS+0x42>
					strcpy(resep_msg,"RESP : ");
    3090:	4947      	ldr	r1, [pc, #284]	; (31b0 <processOnSMS+0x414>)
    3092:	e7c9      	b.n	3028 <processOnSMS+0x28c>
					strcpy(resep_msg,"RESP ERROR");
    3094:	4947      	ldr	r1, [pc, #284]	; (31b4 <processOnSMS+0x418>)
				if (response_sms_processed_cmd == true)
    3096:	2e00      	cmp	r6, #0
    3098:	d100      	bne.n	309c <processOnSMS+0x300>
    309a:	e6a0      	b.n	2dde <processOnSMS+0x42>
    309c:	e697      	b.n	2dce <processOnSMS+0x32>
    309e:	46c0      	nop			; (mov r8, r8)
    30a0:	00002355 	.word	0x00002355
    30a4:	0000d28e 	.word	0x0000d28e
    30a8:	0000d2df 	.word	0x0000d2df
    30ac:	00000a81 	.word	0x00000a81
    30b0:	0000d2e8 	.word	0x0000d2e8
    30b4:	0000c677 	.word	0x0000c677
    30b8:	0000d293 	.word	0x0000d293
    30bc:	00001af9 	.word	0x00001af9
    30c0:	0000d298 	.word	0x0000d298
    30c4:	0000d2bc 	.word	0x0000d2bc
    30c8:	0000d322 	.word	0x0000d322
    30cc:	00000b69 	.word	0x00000b69
    30d0:	2000057a 	.word	0x2000057a
    30d4:	00000c7d 	.word	0x00000c7d
    30d8:	00000cb1 	.word	0x00000cb1
    30dc:	000006e5 	.word	0x000006e5
    30e0:	00000e65 	.word	0x00000e65
    30e4:	00000eb1 	.word	0x00000eb1
    30e8:	00000f35 	.word	0x00000f35
    30ec:	00000f9d 	.word	0x00000f9d
    30f0:	00000bd1 	.word	0x00000bd1
    30f4:	00000c05 	.word	0x00000c05
    30f8:	00000b9d 	.word	0x00000b9d
    30fc:	00000f69 	.word	0x00000f69
    3100:	00000ce5 	.word	0x00000ce5
    3104:	00000d19 	.word	0x00000d19
    3108:	00000d4d 	.word	0x00000d4d
    310c:	00001029 	.word	0x00001029
    3110:	00001061 	.word	0x00001061
    3114:	0000d301 	.word	0x0000d301
    3118:	0000d32a 	.word	0x0000d32a
    311c:	0000045d 	.word	0x0000045d
    3120:	0000c3f7 	.word	0x0000c3f7
    3124:	0000d32e 	.word	0x0000d32e
    3128:	0000d340 	.word	0x0000d340
    312c:	05fa0004 	.word	0x05fa0004
    3130:	e000ed00 	.word	0xe000ed00
    3134:	0000d346 	.word	0x0000d346
    3138:	20000582 	.word	0x20000582
    313c:	0000d34a 	.word	0x0000d34a
    3140:	00004e99 	.word	0x00004e99
    3144:	0000d351 	.word	0x0000d351
    3148:	0000d361 	.word	0x0000d361
    314c:	0000d369 	.word	0x0000d369
    3150:	0000d370 	.word	0x0000d370
    3154:	0000d380 	.word	0x0000d380
    3158:	0000d388 	.word	0x0000d388
    315c:	0000d399 	.word	0x0000d399
    3160:	0000d39f 	.word	0x0000d39f
    3164:	0000d3a6 	.word	0x0000d3a6
    3168:	0000d3ad 	.word	0x0000d3ad
    316c:	0000d3b5 	.word	0x0000d3b5
    3170:	0000c687 	.word	0x0000c687
    3174:	0000c3d3 	.word	0x0000c3d3
    3178:	0000c2e9 	.word	0x0000c2e9
    317c:	0000d3ba 	.word	0x0000d3ba
    3180:	0000d3c7 	.word	0x0000d3c7
    3184:	0000d3cd 	.word	0x0000d3cd
    3188:	0000d3d5 	.word	0x0000d3d5
    318c:	0000d3dc 	.word	0x0000d3dc
    3190:	0000d3e5 	.word	0x0000d3e5
    3194:	0000d3e9 	.word	0x0000d3e9
    3198:	0000c641 	.word	0x0000c641
    319c:	0000d42e 	.word	0x0000d42e
    31a0:	000017bd 	.word	0x000017bd
    31a4:	0000d3f0 	.word	0x0000d3f0
    31a8:	0000d3fa 	.word	0x0000d3fa
    31ac:	00082005 	.word	0x00082005
    31b0:	0000d3ff 	.word	0x0000d3ff
    31b4:	0000d407 	.word	0x0000d407
	else if (StringstartsWith(received_command,"OVR"))
    31b8:	49cf      	ldr	r1, [pc, #828]	; (34f8 <processOnSMS+0x75c>)
    31ba:	0020      	movs	r0, r4
    31bc:	47a8      	blx	r5
    31be:	2800      	cmp	r0, #0
    31c0:	d015      	beq.n	31ee <processOnSMS+0x452>
		memmove(received_command,received_command+3,strlen(received_command));
    31c2:	4bce      	ldr	r3, [pc, #824]	; (34fc <processOnSMS+0x760>)
    31c4:	0020      	movs	r0, r4
    31c6:	4798      	blx	r3
    31c8:	1ce1      	adds	r1, r4, #3
    31ca:	0002      	movs	r2, r0
    31cc:	4bcc      	ldr	r3, [pc, #816]	; (3500 <processOnSMS+0x764>)
    31ce:	0020      	movs	r0, r4
    31d0:	4798      	blx	r3
		uint8_t ovr_per = atoi(received_command);
    31d2:	0020      	movs	r0, r4
    31d4:	4bcb      	ldr	r3, [pc, #812]	; (3504 <processOnSMS+0x768>)
    31d6:	4798      	blx	r3
    31d8:	b2c0      	uxtb	r0, r0
		if(ovr_per>104)
    31da:	2868      	cmp	r0, #104	; 0x68
    31dc:	d800      	bhi.n	31e0 <processOnSMS+0x444>
    31de:	e5fe      	b.n	2dde <processOnSMS+0x42>
			setOverloadPer(ovr_per);
    31e0:	4bc9      	ldr	r3, [pc, #804]	; (3508 <processOnSMS+0x76c>)
    31e2:	4798      	blx	r3
				strcpy(resep_msg,"OVR SET OK");
    31e4:	49c9      	ldr	r1, [pc, #804]	; (350c <processOnSMS+0x770>)
			if (response_sms_processed_cmd == true)
    31e6:	2e00      	cmp	r6, #0
    31e8:	d100      	bne.n	31ec <processOnSMS+0x450>
    31ea:	e5f8      	b.n	2dde <processOnSMS+0x42>
    31ec:	e5ef      	b.n	2dce <processOnSMS+0x32>
	else if (StringstartsWith(received_command,"UNDR"))
    31ee:	49c8      	ldr	r1, [pc, #800]	; (3510 <processOnSMS+0x774>)
    31f0:	0020      	movs	r0, r4
    31f2:	47a8      	blx	r5
    31f4:	2800      	cmp	r0, #0
    31f6:	d016      	beq.n	3226 <processOnSMS+0x48a>
		memmove(received_command,received_command+4,strlen(received_command));
    31f8:	4bc0      	ldr	r3, [pc, #768]	; (34fc <processOnSMS+0x760>)
    31fa:	0020      	movs	r0, r4
    31fc:	4798      	blx	r3
    31fe:	1d21      	adds	r1, r4, #4
    3200:	0002      	movs	r2, r0
    3202:	4bbf      	ldr	r3, [pc, #764]	; (3500 <processOnSMS+0x764>)
    3204:	0020      	movs	r0, r4
    3206:	4798      	blx	r3
		uint8_t undr_per = atoi(received_command);
    3208:	4bbe      	ldr	r3, [pc, #760]	; (3504 <processOnSMS+0x768>)
    320a:	0020      	movs	r0, r4
    320c:	4798      	blx	r3
    320e:	b2c0      	uxtb	r0, r0
		if(undr_per<98 && undr_per>0)
    3210:	1e43      	subs	r3, r0, #1
    3212:	2b60      	cmp	r3, #96	; 0x60
    3214:	d900      	bls.n	3218 <processOnSMS+0x47c>
    3216:	e5e2      	b.n	2dde <processOnSMS+0x42>
			setUnderloadPer(undr_per);
    3218:	4bbe      	ldr	r3, [pc, #760]	; (3514 <processOnSMS+0x778>)
    321a:	4798      	blx	r3
				strcpy(resep_msg,"UNDR SET OK");
    321c:	49be      	ldr	r1, [pc, #760]	; (3518 <processOnSMS+0x77c>)
			if (response_sms_processed_cmd == true)
    321e:	2e00      	cmp	r6, #0
    3220:	d100      	bne.n	3224 <processOnSMS+0x488>
    3222:	e5dc      	b.n	2dde <processOnSMS+0x42>
    3224:	e5d3      	b.n	2dce <processOnSMS+0x32>
	else if (StringstartsWith(received_command,"ASTAT"))
    3226:	49bd      	ldr	r1, [pc, #756]	; (351c <processOnSMS+0x780>)
    3228:	0020      	movs	r0, r4
    322a:	47a8      	blx	r5
    322c:	2800      	cmp	r0, #0
    322e:	d019      	beq.n	3264 <processOnSMS+0x4c8>
		if(factory_settings_parameter_struct.ENABLE_CURRENT)
    3230:	4bbb      	ldr	r3, [pc, #748]	; (3520 <processOnSMS+0x784>)
    3232:	785b      	ldrb	r3, [r3, #1]
    3234:	2b00      	cmp	r3, #0
    3236:	d100      	bne.n	323a <processOnSMS+0x49e>
    3238:	e661      	b.n	2efe <processOnSMS+0x162>
			user_settings_parameter_struct.underloadPerAddress);
    323a:	49ba      	ldr	r1, [pc, #744]	; (3524 <processOnSMS+0x788>)
			Analog_Parameter_Struct.Motor_Current_IntPart,
    323c:	4bba      	ldr	r3, [pc, #744]	; (3528 <processOnSMS+0x78c>)
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
    323e:	7f08      	ldrb	r0, [r1, #28]
			Analog_Parameter_Struct.Motor_Current_IntPart,
    3240:	8a9a      	ldrh	r2, [r3, #20]
			Analog_Parameter_Struct.Motor_Current_DecPart,
    3242:	8adb      	ldrh	r3, [r3, #22]
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
    3244:	9004      	str	r0, [sp, #16]
    3246:	7f48      	ldrb	r0, [r1, #29]
			Analog_Parameter_Struct.Motor_Current_IntPart,
    3248:	b292      	uxth	r2, r2
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
    324a:	9003      	str	r0, [sp, #12]
    324c:	6988      	ldr	r0, [r1, #24]
			Analog_Parameter_Struct.Motor_Current_DecPart,
    324e:	b29b      	uxth	r3, r3
			sprintf(resep_msg,"C:%u.%u\nN:%u\nO:%u\nU:%u\nOP:%u\nUP:%u",
    3250:	9002      	str	r0, [sp, #8]
    3252:	6948      	ldr	r0, [r1, #20]
    3254:	4cb5      	ldr	r4, [pc, #724]	; (352c <processOnSMS+0x790>)
    3256:	9001      	str	r0, [sp, #4]
    3258:	6909      	ldr	r1, [r1, #16]
    325a:	a80b      	add	r0, sp, #44	; 0x2c
    325c:	9100      	str	r1, [sp, #0]
    325e:	49b4      	ldr	r1, [pc, #720]	; (3530 <processOnSMS+0x794>)
    3260:	47a0      	blx	r4
    3262:	e6eb      	b.n	303c <processOnSMS+0x2a0>
	else if (StringstartsWith(received_command,"OVFON"))
    3264:	49b3      	ldr	r1, [pc, #716]	; (3534 <processOnSMS+0x798>)
    3266:	0020      	movs	r0, r4
    3268:	47a8      	blx	r5
    326a:	2800      	cmp	r0, #0
    326c:	d010      	beq.n	3290 <processOnSMS+0x4f4>
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
    326e:	4bac      	ldr	r3, [pc, #688]	; (3520 <processOnSMS+0x784>)
    3270:	795a      	ldrb	r2, [r3, #5]
    3272:	2a00      	cmp	r2, #0
    3274:	d100      	bne.n	3278 <processOnSMS+0x4dc>
    3276:	e5b2      	b.n	2dde <processOnSMS+0x42>
    3278:	78db      	ldrb	r3, [r3, #3]
    327a:	2b00      	cmp	r3, #0
    327c:	d000      	beq.n	3280 <processOnSMS+0x4e4>
    327e:	e5ae      	b.n	2dde <processOnSMS+0x42>
			savePreventOverFlowSettings(true);  //set DND to False in EEPROM
    3280:	2001      	movs	r0, #1
    3282:	4bad      	ldr	r3, [pc, #692]	; (3538 <processOnSMS+0x79c>)
    3284:	4798      	blx	r3
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING ON");
    3286:	49ad      	ldr	r1, [pc, #692]	; (353c <processOnSMS+0x7a0>)
			if(response_sms_processed_cmd == true)
    3288:	2e00      	cmp	r6, #0
    328a:	d100      	bne.n	328e <processOnSMS+0x4f2>
    328c:	e5a7      	b.n	2dde <processOnSMS+0x42>
    328e:	e59e      	b.n	2dce <processOnSMS+0x32>
	else if (StringstartsWith(received_command,"OVFOFF"))
    3290:	49ab      	ldr	r1, [pc, #684]	; (3540 <processOnSMS+0x7a4>)
    3292:	0020      	movs	r0, r4
    3294:	47a8      	blx	r5
    3296:	2800      	cmp	r0, #0
    3298:	d00f      	beq.n	32ba <processOnSMS+0x51e>
		if (factory_settings_parameter_struct.ENABLE_WATER && !(factory_settings_parameter_struct.ENABLE_M2M))
    329a:	4ba1      	ldr	r3, [pc, #644]	; (3520 <processOnSMS+0x784>)
    329c:	795a      	ldrb	r2, [r3, #5]
    329e:	2a00      	cmp	r2, #0
    32a0:	d100      	bne.n	32a4 <processOnSMS+0x508>
    32a2:	e59c      	b.n	2dde <processOnSMS+0x42>
    32a4:	78d8      	ldrb	r0, [r3, #3]
    32a6:	2800      	cmp	r0, #0
    32a8:	d000      	beq.n	32ac <processOnSMS+0x510>
    32aa:	e598      	b.n	2dde <processOnSMS+0x42>
			savePreventOverFlowSettings(false);  //set DND to False in EEPROM
    32ac:	4ba2      	ldr	r3, [pc, #648]	; (3538 <processOnSMS+0x79c>)
    32ae:	4798      	blx	r3
				strcpy(resep_msg,"PREVENT OVERFLOW SETTING OFF");
    32b0:	49a4      	ldr	r1, [pc, #656]	; (3544 <processOnSMS+0x7a8>)
			if(response_sms_processed_cmd == true)
    32b2:	2e00      	cmp	r6, #0
    32b4:	d100      	bne.n	32b8 <processOnSMS+0x51c>
    32b6:	e592      	b.n	2dde <processOnSMS+0x42>
    32b8:	e589      	b.n	2dce <processOnSMS+0x32>
	else if (StringstartsWith(received_command,"M2MON"))
    32ba:	49a3      	ldr	r1, [pc, #652]	; (3548 <processOnSMS+0x7ac>)
    32bc:	0020      	movs	r0, r4
    32be:	47a8      	blx	r5
    32c0:	1e07      	subs	r7, r0, #0
    32c2:	d010      	beq.n	32e6 <processOnSMS+0x54a>
		if (factory_settings_parameter_struct.ENABLE_M2M)
    32c4:	4b96      	ldr	r3, [pc, #600]	; (3520 <processOnSMS+0x784>)
    32c6:	78db      	ldrb	r3, [r3, #3]
    32c8:	2b00      	cmp	r3, #0
    32ca:	d100      	bne.n	32ce <processOnSMS+0x532>
    32cc:	e587      	b.n	2dde <processOnSMS+0x42>
			if(m2m_Numbers_struct.m2mRemotePresent && !(m2m_Numbers_struct.m2mRemoteVerified))
    32ce:	4b9f      	ldr	r3, [pc, #636]	; (354c <processOnSMS+0x7b0>)
    32d0:	78da      	ldrb	r2, [r3, #3]
    32d2:	2a00      	cmp	r2, #0
    32d4:	d100      	bne.n	32d8 <processOnSMS+0x53c>
    32d6:	e612      	b.n	2efe <processOnSMS+0x162>
    32d8:	791b      	ldrb	r3, [r3, #4]
    32da:	2b00      	cmp	r3, #0
    32dc:	d000      	beq.n	32e0 <processOnSMS+0x544>
    32de:	e60e      	b.n	2efe <processOnSMS+0x162>
				verifyRemoteNumber();
    32e0:	4b9b      	ldr	r3, [pc, #620]	; (3550 <processOnSMS+0x7b4>)
    32e2:	4798      	blx	r3
    32e4:	e57b      	b.n	2dde <processOnSMS+0x42>
	else if (StringstartsWith(received_command,"M2MOFF"))
    32e6:	499b      	ldr	r1, [pc, #620]	; (3554 <processOnSMS+0x7b8>)
    32e8:	0020      	movs	r0, r4
    32ea:	47a8      	blx	r5
    32ec:	2800      	cmp	r0, #0
    32ee:	d00c      	beq.n	330a <processOnSMS+0x56e>
		if (factory_settings_parameter_struct.ENABLE_M2M)
    32f0:	4b8b      	ldr	r3, [pc, #556]	; (3520 <processOnSMS+0x784>)
    32f2:	78db      	ldrb	r3, [r3, #3]
    32f4:	2b00      	cmp	r3, #0
    32f6:	d100      	bne.n	32fa <processOnSMS+0x55e>
    32f8:	e571      	b.n	2dde <processOnSMS+0x42>
			saveM2MSettings(false);
    32fa:	0038      	movs	r0, r7
    32fc:	4b96      	ldr	r3, [pc, #600]	; (3558 <processOnSMS+0x7bc>)
    32fe:	4798      	blx	r3
			if(response_sms_processed_cmd == true)
    3300:	2e00      	cmp	r6, #0
    3302:	d100      	bne.n	3306 <processOnSMS+0x56a>
    3304:	e56b      	b.n	2dde <processOnSMS+0x42>
				strcpy(resep_msg,"M2M SETTING OFF");
    3306:	4995      	ldr	r1, [pc, #596]	; (355c <processOnSMS+0x7c0>)
    3308:	e561      	b.n	2dce <processOnSMS+0x32>
	else if (StringstartsWith(received_command,"STATUS"))
    330a:	4995      	ldr	r1, [pc, #596]	; (3560 <processOnSMS+0x7c4>)
    330c:	0020      	movs	r0, r4
    330e:	47a8      	blx	r5
    3310:	2800      	cmp	r0, #0
    3312:	d003      	beq.n	331c <processOnSMS+0x580>
		buildStatusMessage(&resep_msg);
    3314:	a80b      	add	r0, sp, #44	; 0x2c
    3316:	4b93      	ldr	r3, [pc, #588]	; (3564 <processOnSMS+0x7c8>)
    3318:	4798      	blx	r3
    331a:	e5f0      	b.n	2efe <processOnSMS+0x162>
	else if (StringstartsWith(received_command,"AMON") && (admin || alterNumber))
    331c:	4992      	ldr	r1, [pc, #584]	; (3568 <processOnSMS+0x7cc>)
    331e:	0020      	movs	r0, r4
    3320:	47a8      	blx	r5
    3322:	2800      	cmp	r0, #0
    3324:	d012      	beq.n	334c <processOnSMS+0x5b0>
    3326:	9b08      	ldr	r3, [sp, #32]
    3328:	2b00      	cmp	r3, #0
    332a:	d102      	bne.n	3332 <processOnSMS+0x596>
    332c:	9b07      	ldr	r3, [sp, #28]
    332e:	2b00      	cmp	r3, #0
    3330:	d00c      	beq.n	334c <processOnSMS+0x5b0>
		if (alternateNumber_struct.alterNumberPresent)
    3332:	4b8e      	ldr	r3, [pc, #568]	; (356c <processOnSMS+0x7d0>)
    3334:	789b      	ldrb	r3, [r3, #2]
    3336:	2b00      	cmp	r3, #0
    3338:	d100      	bne.n	333c <processOnSMS+0x5a0>
    333a:	e5e0      	b.n	2efe <processOnSMS+0x162>
			saveAlterNumberSetting(true);
    333c:	2001      	movs	r0, #1
    333e:	4b8c      	ldr	r3, [pc, #560]	; (3570 <processOnSMS+0x7d4>)
    3340:	4798      	blx	r3
				strcpy(resep_msg,"ALTERNATE NUMBER ON");
    3342:	498c      	ldr	r1, [pc, #560]	; (3574 <processOnSMS+0x7d8>)
			if(response_sms_processed_cmd == true)
    3344:	2e00      	cmp	r6, #0
    3346:	d100      	bne.n	334a <processOnSMS+0x5ae>
    3348:	e549      	b.n	2dde <processOnSMS+0x42>
    334a:	e540      	b.n	2dce <processOnSMS+0x32>
	else if (StringstartsWith(received_command,"AMOFF"))
    334c:	498a      	ldr	r1, [pc, #552]	; (3578 <processOnSMS+0x7dc>)
    334e:	0020      	movs	r0, r4
    3350:	47a8      	blx	r5
    3352:	1e07      	subs	r7, r0, #0
    3354:	d007      	beq.n	3366 <processOnSMS+0x5ca>
		saveAlterNumberSetting(false);
    3356:	2000      	movs	r0, #0
    3358:	4b85      	ldr	r3, [pc, #532]	; (3570 <processOnSMS+0x7d4>)
    335a:	4798      	blx	r3
			strcpy(resep_msg,"ALTERNATE MOBILE NUMBER OFF");
    335c:	4987      	ldr	r1, [pc, #540]	; (357c <processOnSMS+0x7e0>)
		if (response_sms_processed_cmd == true)
    335e:	2e00      	cmp	r6, #0
    3360:	d100      	bne.n	3364 <processOnSMS+0x5c8>
    3362:	e53c      	b.n	2dde <processOnSMS+0x42>
    3364:	e533      	b.n	2dce <processOnSMS+0x32>
	else if (StringstartsWith(received_command,"NCOFF"))
    3366:	4986      	ldr	r1, [pc, #536]	; (3580 <processOnSMS+0x7e4>)
    3368:	0020      	movs	r0, r4
    336a:	47a8      	blx	r5
    336c:	2800      	cmp	r0, #0
    336e:	d00b      	beq.n	3388 <processOnSMS+0x5ec>
		saveNoCallSettings(false,0,0,0,0);
    3370:	0039      	movs	r1, r7
    3372:	9700      	str	r7, [sp, #0]
    3374:	003b      	movs	r3, r7
    3376:	003a      	movs	r2, r7
    3378:	0038      	movs	r0, r7
    337a:	4c82      	ldr	r4, [pc, #520]	; (3584 <processOnSMS+0x7e8>)
    337c:	47a0      	blx	r4
			strcpy(resep_msg,"NO CALL SETTING OFF");
    337e:	4982      	ldr	r1, [pc, #520]	; (3588 <processOnSMS+0x7ec>)
		if (response_sms_processed_cmd == true)
    3380:	2e00      	cmp	r6, #0
    3382:	d100      	bne.n	3386 <processOnSMS+0x5ea>
    3384:	e52b      	b.n	2dde <processOnSMS+0x42>
    3386:	e522      	b.n	2dce <processOnSMS+0x32>
	else if (StringstartsWith(received_command,"GETTIME"))
    3388:	4980      	ldr	r1, [pc, #512]	; (358c <processOnSMS+0x7f0>)
    338a:	0020      	movs	r0, r4
    338c:	47a8      	blx	r5
    338e:	2800      	cmp	r0, #0
    3390:	d00f      	beq.n	33b2 <processOnSMS+0x616>
		getSystemTime(&globalHours,&globalMinutes);
    3392:	251b      	movs	r5, #27
    3394:	241a      	movs	r4, #26
    3396:	ab04      	add	r3, sp, #16
    3398:	18ed      	adds	r5, r5, r3
    339a:	18e4      	adds	r4, r4, r3
    339c:	0029      	movs	r1, r5
    339e:	0020      	movs	r0, r4
    33a0:	4b7b      	ldr	r3, [pc, #492]	; (3590 <processOnSMS+0x7f4>)
    33a2:	4798      	blx	r3
		sprintf(resep_msg,"TIME : %u:%u",
    33a4:	7822      	ldrb	r2, [r4, #0]
    33a6:	782b      	ldrb	r3, [r5, #0]
    33a8:	497a      	ldr	r1, [pc, #488]	; (3594 <processOnSMS+0x7f8>)
    33aa:	a80b      	add	r0, sp, #44	; 0x2c
    33ac:	4c5f      	ldr	r4, [pc, #380]	; (352c <processOnSMS+0x790>)
    33ae:	47a0      	blx	r4
    33b0:	e644      	b.n	303c <processOnSMS+0x2a0>
	else if (StringstartsWith(received_command,"SETTIME"))
    33b2:	4979      	ldr	r1, [pc, #484]	; (3598 <processOnSMS+0x7fc>)
    33b4:	0020      	movs	r0, r4
    33b6:	47a8      	blx	r5
    33b8:	1e07      	subs	r7, r0, #0
    33ba:	d000      	beq.n	33be <processOnSMS+0x622>
    33bc:	e59f      	b.n	2efe <processOnSMS+0x162>
	else if (StringstartsWith(received_command,"NCTIME"))
    33be:	4977      	ldr	r1, [pc, #476]	; (359c <processOnSMS+0x800>)
    33c0:	0020      	movs	r0, r4
    33c2:	47a8      	blx	r5
    33c4:	2800      	cmp	r0, #0
    33c6:	d049      	beq.n	345c <processOnSMS+0x6c0>
		ptrclcc = strtok(received_command,"-");
    33c8:	4d75      	ldr	r5, [pc, #468]	; (35a0 <processOnSMS+0x804>)
    33ca:	0020      	movs	r0, r4
    33cc:	0029      	movs	r1, r5
    33ce:	4c75      	ldr	r4, [pc, #468]	; (35a4 <processOnSMS+0x808>)
    33d0:	47a0      	blx	r4
		ptrclcc = strtok(NULL,":");
    33d2:	4975      	ldr	r1, [pc, #468]	; (35a8 <processOnSMS+0x80c>)
    33d4:	0038      	movs	r0, r7
    33d6:	47a0      	blx	r4
		startHH=atoi(*ptrclcc);
    33d8:	4b4a      	ldr	r3, [pc, #296]	; (3504 <processOnSMS+0x768>)
    33da:	7800      	ldrb	r0, [r0, #0]
    33dc:	4798      	blx	r3
		ptrclcc = strtok(NULL,"-");
    33de:	0029      	movs	r1, r5
		startHH=atoi(*ptrclcc);
    33e0:	b2c3      	uxtb	r3, r0
		ptrclcc = strtok(NULL,"-");
    33e2:	0038      	movs	r0, r7
		startHH=atoi(*ptrclcc);
    33e4:	9307      	str	r3, [sp, #28]
		ptrclcc = strtok(NULL,"-");
    33e6:	47a0      	blx	r4
		startMM=atoi(*ptrclcc);
    33e8:	4b46      	ldr	r3, [pc, #280]	; (3504 <processOnSMS+0x768>)
    33ea:	7800      	ldrb	r0, [r0, #0]
    33ec:	4798      	blx	r3
		ptrclcc = strtok(NULL,":");
    33ee:	496e      	ldr	r1, [pc, #440]	; (35a8 <processOnSMS+0x80c>)
		startMM=atoi(*ptrclcc);
    33f0:	b2c3      	uxtb	r3, r0
		ptrclcc = strtok(NULL,":");
    33f2:	0038      	movs	r0, r7
		startMM=atoi(*ptrclcc);
    33f4:	9308      	str	r3, [sp, #32]
		ptrclcc = strtok(NULL,":");
    33f6:	47a0      	blx	r4
		stopHH=atoi(*ptrclcc);
    33f8:	4b42      	ldr	r3, [pc, #264]	; (3504 <processOnSMS+0x768>)
    33fa:	7800      	ldrb	r0, [r0, #0]
    33fc:	4798      	blx	r3
		ptrclcc = strtok(NULL,":");
    33fe:	496a      	ldr	r1, [pc, #424]	; (35a8 <processOnSMS+0x80c>)
		stopHH=atoi(*ptrclcc);
    3400:	b2c5      	uxtb	r5, r0
		ptrclcc = strtok(NULL,":");
    3402:	0038      	movs	r0, r7
    3404:	47a0      	blx	r4
		stopMM=atoi(*ptrclcc);
    3406:	4b3f      	ldr	r3, [pc, #252]	; (3504 <processOnSMS+0x768>)
    3408:	7800      	ldrb	r0, [r0, #0]
    340a:	4798      	blx	r3
		if(startHH>=0 && startHH<24 && startMM>=0 && startMM<60)
    340c:	9b07      	ldr	r3, [sp, #28]
		stopMM=atoi(*ptrclcc);
    340e:	b2c0      	uxtb	r0, r0
		if(startHH>=0 && startHH<24 && startMM>=0 && startMM<60)
    3410:	2b17      	cmp	r3, #23
    3412:	d900      	bls.n	3416 <processOnSMS+0x67a>
    3414:	e573      	b.n	2efe <processOnSMS+0x162>
    3416:	9b08      	ldr	r3, [sp, #32]
    3418:	2b3b      	cmp	r3, #59	; 0x3b
    341a:	d900      	bls.n	341e <processOnSMS+0x682>
    341c:	e56f      	b.n	2efe <processOnSMS+0x162>
			if(stopHH>=0 && stopHH<24 && stopMM>=0 && stopMM<60)
    341e:	2d17      	cmp	r5, #23
    3420:	d900      	bls.n	3424 <processOnSMS+0x688>
    3422:	e56c      	b.n	2efe <processOnSMS+0x162>
    3424:	283b      	cmp	r0, #59	; 0x3b
    3426:	d900      	bls.n	342a <processOnSMS+0x68e>
    3428:	e569      	b.n	2efe <processOnSMS+0x162>
				if(startHH==stopHH && startMM==stopMM)
    342a:	9b07      	ldr	r3, [sp, #28]
    342c:	4c55      	ldr	r4, [pc, #340]	; (3584 <processOnSMS+0x7e8>)
    342e:	42ab      	cmp	r3, r5
    3430:	d109      	bne.n	3446 <processOnSMS+0x6aa>
    3432:	9b08      	ldr	r3, [sp, #32]
    3434:	4283      	cmp	r3, r0
    3436:	d106      	bne.n	3446 <processOnSMS+0x6aa>
					saveNoCallSettings(false,0,0,0,0);
    3438:	2000      	movs	r0, #0
    343a:	9000      	str	r0, [sp, #0]
    343c:	0003      	movs	r3, r0
    343e:	0002      	movs	r2, r0
    3440:	0001      	movs	r1, r0
    3442:	47a0      	blx	r4
    3444:	e55b      	b.n	2efe <processOnSMS+0x162>
					saveNoCallSettings(true,startHH,startMM,stopHH,stopMM);
    3446:	9000      	str	r0, [sp, #0]
    3448:	9907      	ldr	r1, [sp, #28]
    344a:	002b      	movs	r3, r5
    344c:	9a08      	ldr	r2, [sp, #32]
    344e:	2001      	movs	r0, #1
    3450:	47a0      	blx	r4
						strcpy(resep_msg,"NO CALL TIMINGS SET");
    3452:	4956      	ldr	r1, [pc, #344]	; (35ac <processOnSMS+0x810>)
					if(response_sms_processed_cmd)
    3454:	2e00      	cmp	r6, #0
    3456:	d100      	bne.n	345a <processOnSMS+0x6be>
    3458:	e4c1      	b.n	2dde <processOnSMS+0x42>
    345a:	e4b8      	b.n	2dce <processOnSMS+0x32>
	else if (StringstartsWith(received_command,"STAGE"))
    345c:	4954      	ldr	r1, [pc, #336]	; (35b0 <processOnSMS+0x814>)
    345e:	0020      	movs	r0, r4
    3460:	47a8      	blx	r5
    3462:	2800      	cmp	r0, #0
    3464:	d01c      	beq.n	34a0 <processOnSMS+0x704>
		memmove(received_command,received_command+5,strlen(received_command));
    3466:	4b25      	ldr	r3, [pc, #148]	; (34fc <processOnSMS+0x760>)
    3468:	0020      	movs	r0, r4
    346a:	4798      	blx	r3
    346c:	1d61      	adds	r1, r4, #5
    346e:	0002      	movs	r2, r0
    3470:	4b23      	ldr	r3, [pc, #140]	; (3500 <processOnSMS+0x764>)
    3472:	0020      	movs	r0, r4
    3474:	4798      	blx	r3
		uint16_t stageLevel = atoi(received_command);
    3476:	0020      	movs	r0, r4
    3478:	4b22      	ldr	r3, [pc, #136]	; (3504 <processOnSMS+0x768>)
    347a:	4798      	blx	r3
    347c:	b280      	uxth	r0, r0
    347e:	1c04      	adds	r4, r0, #0
    3480:	2805      	cmp	r0, #5
    3482:	d900      	bls.n	3486 <processOnSMS+0x6ea>
    3484:	2405      	movs	r4, #5
    3486:	b2a4      	uxth	r4, r4
		saveEventStageSettings(stageLevel);  //Store in EEPROM the EVENT STAGE
    3488:	b2e0      	uxtb	r0, r4
    348a:	4b4a      	ldr	r3, [pc, #296]	; (35b4 <processOnSMS+0x818>)
    348c:	4798      	blx	r3
		if(response_sms_processed_cmd)
    348e:	2e00      	cmp	r6, #0
    3490:	d100      	bne.n	3494 <processOnSMS+0x6f8>
    3492:	e4a4      	b.n	2dde <processOnSMS+0x42>
			sprintf(resep_msg,"CALL STAGE SET TO : %d", stageLevel);
    3494:	0022      	movs	r2, r4
    3496:	4948      	ldr	r1, [pc, #288]	; (35b8 <processOnSMS+0x81c>)
    3498:	a80b      	add	r0, sp, #44	; 0x2c
    349a:	4b24      	ldr	r3, [pc, #144]	; (352c <processOnSMS+0x790>)
    349c:	4798      	blx	r3
    349e:	e5cd      	b.n	303c <processOnSMS+0x2a0>
	else if (StringstartsWith(received_command,"STARTIME"))
    34a0:	4946      	ldr	r1, [pc, #280]	; (35bc <processOnSMS+0x820>)
    34a2:	0020      	movs	r0, r4
    34a4:	47a8      	blx	r5
    34a6:	2800      	cmp	r0, #0
    34a8:	d100      	bne.n	34ac <processOnSMS+0x710>
    34aa:	e08f      	b.n	35cc <processOnSMS+0x830>
		memmove(received_command,received_command+8,strlen(received_command));
    34ac:	4b13      	ldr	r3, [pc, #76]	; (34fc <processOnSMS+0x760>)
    34ae:	0020      	movs	r0, r4
    34b0:	4798      	blx	r3
    34b2:	0021      	movs	r1, r4
    34b4:	0002      	movs	r2, r0
    34b6:	3108      	adds	r1, #8
    34b8:	4b11      	ldr	r3, [pc, #68]	; (3500 <processOnSMS+0x764>)
    34ba:	0020      	movs	r0, r4
    34bc:	4798      	blx	r3
		uint16_t STARTIME = atoi(received_command);
    34be:	4b11      	ldr	r3, [pc, #68]	; (3504 <processOnSMS+0x768>)
    34c0:	0020      	movs	r0, r4
    34c2:	4798      	blx	r3
    34c4:	2396      	movs	r3, #150	; 0x96
    34c6:	1c01      	adds	r1, r0, #0
    34c8:	b280      	uxth	r0, r0
    34ca:	00db      	lsls	r3, r3, #3
    34cc:	4298      	cmp	r0, r3
    34ce:	d900      	bls.n	34d2 <processOnSMS+0x736>
    34d0:	1c19      	adds	r1, r3, #0
    34d2:	b28b      	uxth	r3, r1
    34d4:	2b02      	cmp	r3, #2
    34d6:	d200      	bcs.n	34da <processOnSMS+0x73e>
    34d8:	2102      	movs	r1, #2
    34da:	b28c      	uxth	r4, r1
		saveStarDeltaTimer(STARTIME);
    34dc:	0020      	movs	r0, r4
    34de:	4b38      	ldr	r3, [pc, #224]	; (35c0 <processOnSMS+0x824>)
    34e0:	4798      	blx	r3
			strcpy(resep_msg,"STARTIME : ");
    34e2:	4938      	ldr	r1, [pc, #224]	; (35c4 <processOnSMS+0x828>)
		if (response_sms_processed_cmd == true)
    34e4:	2e00      	cmp	r6, #0
    34e6:	d100      	bne.n	34ea <processOnSMS+0x74e>
    34e8:	e479      	b.n	2dde <processOnSMS+0x42>
			strcpy(resep_msg,"AUTOTIME : ");
    34ea:	a80b      	add	r0, sp, #44	; 0x2c
    34ec:	4d36      	ldr	r5, [pc, #216]	; (35c8 <processOnSMS+0x82c>)
    34ee:	47a8      	blx	r5
			strcpy(resep_msg,AUTOTIME);
    34f0:	0021      	movs	r1, r4
    34f2:	a80b      	add	r0, sp, #44	; 0x2c
    34f4:	47a8      	blx	r5
    34f6:	e5a1      	b.n	303c <processOnSMS+0x2a0>
    34f8:	0000d412 	.word	0x0000d412
    34fc:	0000c687 	.word	0x0000c687
    3500:	0000c3d3 	.word	0x0000c3d3
    3504:	0000c2e9 	.word	0x0000c2e9
    3508:	00000e65 	.word	0x00000e65
    350c:	0000d416 	.word	0x0000d416
    3510:	0000d421 	.word	0x0000d421
    3514:	00000eb1 	.word	0x00000eb1
    3518:	0000d426 	.word	0x0000d426
    351c:	0000d432 	.word	0x0000d432
    3520:	2000057a 	.word	0x2000057a
    3524:	200005b0 	.word	0x200005b0
    3528:	2000062c 	.word	0x2000062c
    352c:	0000c5fd 	.word	0x0000c5fd
    3530:	0000d438 	.word	0x0000d438
    3534:	0000d45b 	.word	0x0000d45b
    3538:	00000cb1 	.word	0x00000cb1
    353c:	0000d461 	.word	0x0000d461
    3540:	0000d47d 	.word	0x0000d47d
    3544:	0000d484 	.word	0x0000d484
    3548:	0000d4a1 	.word	0x0000d4a1
    354c:	20000508 	.word	0x20000508
    3550:	00002c85 	.word	0x00002c85
    3554:	0000d4a7 	.word	0x0000d4a7
    3558:	000006e5 	.word	0x000006e5
    355c:	0000d4ae 	.word	0x0000d4ae
    3560:	0000d4be 	.word	0x0000d4be
    3564:	00002bbd 	.word	0x00002bbd
    3568:	0000d293 	.word	0x0000d293
    356c:	20000596 	.word	0x20000596
    3570:	00000a4d 	.word	0x00000a4d
    3574:	0000d4c5 	.word	0x0000d4c5
    3578:	0000d4d9 	.word	0x0000d4d9
    357c:	0000d4df 	.word	0x0000d4df
    3580:	0000d4fb 	.word	0x0000d4fb
    3584:	00000c39 	.word	0x00000c39
    3588:	0000d501 	.word	0x0000d501
    358c:	0000d515 	.word	0x0000d515
    3590:	00002d79 	.word	0x00002d79
    3594:	0000d51d 	.word	0x0000d51d
    3598:	0000d52a 	.word	0x0000d52a
    359c:	0000d532 	.word	0x0000d532
    35a0:	0000d5d7 	.word	0x0000d5d7
    35a4:	0000c6e9 	.word	0x0000c6e9
    35a8:	0000d75a 	.word	0x0000d75a
    35ac:	0000d539 	.word	0x0000d539
    35b0:	0000d54d 	.word	0x0000d54d
    35b4:	00000f9d 	.word	0x00000f9d
    35b8:	0000d553 	.word	0x0000d553
    35bc:	0000d56a 	.word	0x0000d56a
    35c0:	00000f69 	.word	0x00000f69
    35c4:	0000d573 	.word	0x0000d573
    35c8:	0000c677 	.word	0x0000c677
	else if (StringstartsWith(received_command,"AUTOTIME"))
    35cc:	497c      	ldr	r1, [pc, #496]	; (37c0 <processOnSMS+0xa24>)
    35ce:	0020      	movs	r0, r4
    35d0:	47a8      	blx	r5
    35d2:	2800      	cmp	r0, #0
    35d4:	d020      	beq.n	3618 <processOnSMS+0x87c>
		memmove(received_command,received_command+8,strlen(received_command));
    35d6:	4b7b      	ldr	r3, [pc, #492]	; (37c4 <processOnSMS+0xa28>)
    35d8:	0020      	movs	r0, r4
    35da:	4798      	blx	r3
    35dc:	0021      	movs	r1, r4
    35de:	0002      	movs	r2, r0
    35e0:	3108      	adds	r1, #8
    35e2:	4b79      	ldr	r3, [pc, #484]	; (37c8 <processOnSMS+0xa2c>)
    35e4:	0020      	movs	r0, r4
    35e6:	4798      	blx	r3
		uint16_t AUTOTIME = atoi(received_command);
    35e8:	4b78      	ldr	r3, [pc, #480]	; (37cc <processOnSMS+0xa30>)
    35ea:	0020      	movs	r0, r4
    35ec:	4798      	blx	r3
    35ee:	23e1      	movs	r3, #225	; 0xe1
    35f0:	1c01      	adds	r1, r0, #0
    35f2:	b280      	uxth	r0, r0
    35f4:	01db      	lsls	r3, r3, #7
    35f6:	4298      	cmp	r0, r3
    35f8:	d900      	bls.n	35fc <processOnSMS+0x860>
    35fa:	1c19      	adds	r1, r3, #0
    35fc:	b28b      	uxth	r3, r1
    35fe:	2b32      	cmp	r3, #50	; 0x32
    3600:	d200      	bcs.n	3604 <processOnSMS+0x868>
    3602:	2132      	movs	r1, #50	; 0x32
    3604:	b28c      	uxth	r4, r1
		saveAutoStartTimeSettings(AUTOTIME);
    3606:	0020      	movs	r0, r4
    3608:	4b71      	ldr	r3, [pc, #452]	; (37d0 <processOnSMS+0xa34>)
    360a:	4798      	blx	r3
		if (response_sms_processed_cmd == true)
    360c:	2e00      	cmp	r6, #0
    360e:	d101      	bne.n	3614 <processOnSMS+0x878>
    3610:	f7ff fbe5 	bl	2dde <processOnSMS+0x42>
			strcpy(resep_msg,"AUTOTIME : ");
    3614:	496f      	ldr	r1, [pc, #444]	; (37d4 <processOnSMS+0xa38>)
    3616:	e768      	b.n	34ea <processOnSMS+0x74e>
	else if (StringstartsWith(received_command,"BAL"))
    3618:	496f      	ldr	r1, [pc, #444]	; (37d8 <processOnSMS+0xa3c>)
    361a:	0020      	movs	r0, r4
    361c:	47a8      	blx	r5
    361e:	2800      	cmp	r0, #0
    3620:	d000      	beq.n	3624 <processOnSMS+0x888>
    3622:	e46c      	b.n	2efe <processOnSMS+0x162>
	else if(StringstartsWith(received_command,"MP+"))
    3624:	496d      	ldr	r1, [pc, #436]	; (37dc <processOnSMS+0xa40>)
    3626:	0020      	movs	r0, r4
    3628:	47a8      	blx	r5
    362a:	2800      	cmp	r0, #0
    362c:	d012      	beq.n	3654 <processOnSMS+0x8b8>
		memmove(received_command,received_command+3,strlen(received_command));
    362e:	4b65      	ldr	r3, [pc, #404]	; (37c4 <processOnSMS+0xa28>)
    3630:	0020      	movs	r0, r4
    3632:	4798      	blx	r3
    3634:	1ce1      	adds	r1, r4, #3
    3636:	0002      	movs	r2, r0
    3638:	4b63      	ldr	r3, [pc, #396]	; (37c8 <processOnSMS+0xa2c>)
    363a:	0020      	movs	r0, r4
    363c:	4798      	blx	r3
		if(addPrimaryIndexedNumber(received_command))
    363e:	0020      	movs	r0, r4
    3640:	4b67      	ldr	r3, [pc, #412]	; (37e0 <processOnSMS+0xa44>)
    3642:	4798      	blx	r3
			strcpy(resep_msg,"P NO ADDDED");
    3644:	4967      	ldr	r1, [pc, #412]	; (37e4 <processOnSMS+0xa48>)
		if(addPrimaryIndexedNumber(received_command))
    3646:	2800      	cmp	r0, #0
    3648:	d100      	bne.n	364c <processOnSMS+0x8b0>
    364a:	e458      	b.n	2efe <processOnSMS+0x162>
			strcpy(resep_msg,"S NO ADDDED");
    364c:	a80b      	add	r0, sp, #44	; 0x2c
    364e:	4b66      	ldr	r3, [pc, #408]	; (37e8 <processOnSMS+0xa4c>)
    3650:	4798      	blx	r3
    3652:	e454      	b.n	2efe <processOnSMS+0x162>
	else if(StringstartsWith(received_command,"MS+"))
    3654:	4965      	ldr	r1, [pc, #404]	; (37ec <processOnSMS+0xa50>)
    3656:	0020      	movs	r0, r4
    3658:	4d65      	ldr	r5, [pc, #404]	; (37f0 <processOnSMS+0xa54>)
    365a:	47a8      	blx	r5
    365c:	2800      	cmp	r0, #0
    365e:	d00f      	beq.n	3680 <processOnSMS+0x8e4>
		memmove(received_command,received_command+3,strlen(received_command));
    3660:	4b58      	ldr	r3, [pc, #352]	; (37c4 <processOnSMS+0xa28>)
    3662:	0020      	movs	r0, r4
    3664:	4798      	blx	r3
    3666:	4b58      	ldr	r3, [pc, #352]	; (37c8 <processOnSMS+0xa2c>)
    3668:	0002      	movs	r2, r0
    366a:	1ce1      	adds	r1, r4, #3
    366c:	0020      	movs	r0, r4
    366e:	4798      	blx	r3
		if(addSecondaryIndexedNumber(received_command))
    3670:	0020      	movs	r0, r4
    3672:	4b60      	ldr	r3, [pc, #384]	; (37f4 <processOnSMS+0xa58>)
    3674:	4798      	blx	r3
    3676:	2800      	cmp	r0, #0
    3678:	d100      	bne.n	367c <processOnSMS+0x8e0>
    367a:	e440      	b.n	2efe <processOnSMS+0x162>
			strcpy(resep_msg,"S NO ADDDED");
    367c:	495e      	ldr	r1, [pc, #376]	; (37f8 <processOnSMS+0xa5c>)
    367e:	e7e5      	b.n	364c <processOnSMS+0x8b0>
	else if (StringstartsWith(received_command,"M+"))
    3680:	495e      	ldr	r1, [pc, #376]	; (37fc <processOnSMS+0xa60>)
    3682:	0020      	movs	r0, r4
    3684:	47a8      	blx	r5
    3686:	2800      	cmp	r0, #0
    3688:	d021      	beq.n	36ce <processOnSMS+0x932>
		memmove(received_command,received_command+2,strlen(received_command));
    368a:	4b4e      	ldr	r3, [pc, #312]	; (37c4 <processOnSMS+0xa28>)
    368c:	0020      	movs	r0, r4
    368e:	4798      	blx	r3
    3690:	4b4d      	ldr	r3, [pc, #308]	; (37c8 <processOnSMS+0xa2c>)
    3692:	0002      	movs	r2, r0
    3694:	1ca1      	adds	r1, r4, #2
    3696:	0020      	movs	r0, r4
    3698:	4798      	blx	r3
		addNumber(received_command);
    369a:	0020      	movs	r0, r4
    369c:	4b58      	ldr	r3, [pc, #352]	; (3800 <processOnSMS+0xa64>)
    369e:	4798      	blx	r3
		if (response_sms_processed_cmd == true)
    36a0:	2e00      	cmp	r6, #0
    36a2:	d101      	bne.n	36a8 <processOnSMS+0x90c>
    36a4:	f7ff fb9b 	bl	2dde <processOnSMS+0x42>
			strcpy(resep_msg,"MOBILE NO:");
    36a8:	4b4f      	ldr	r3, [pc, #316]	; (37e8 <processOnSMS+0xa4c>)
    36aa:	4956      	ldr	r1, [pc, #344]	; (3804 <processOnSMS+0xa68>)
    36ac:	a80b      	add	r0, sp, #44	; 0x2c
    36ae:	4798      	blx	r3
			strcat(resep_msg,"\n");
    36b0:	4e55      	ldr	r6, [pc, #340]	; (3808 <processOnSMS+0xa6c>)
    36b2:	4d56      	ldr	r5, [pc, #344]	; (380c <processOnSMS+0xa70>)
    36b4:	0031      	movs	r1, r6
    36b6:	a80b      	add	r0, sp, #44	; 0x2c
    36b8:	47a8      	blx	r5
			strcat(resep_msg,received_command);
    36ba:	0021      	movs	r1, r4
    36bc:	a80b      	add	r0, sp, #44	; 0x2c
    36be:	47a8      	blx	r5
			strcat(resep_msg,"\n");
    36c0:	0031      	movs	r1, r6
    36c2:	a80b      	add	r0, sp, #44	; 0x2c
    36c4:	47a8      	blx	r5
			strcat(resep_msg,"ADDED SUCCESSFULLY");
    36c6:	4952      	ldr	r1, [pc, #328]	; (3810 <processOnSMS+0xa74>)
			strcat(resep_msg,"REMOVED SUCCESSFULLY");
    36c8:	a80b      	add	r0, sp, #44	; 0x2c
    36ca:	47a8      	blx	r5
    36cc:	e4b6      	b.n	303c <processOnSMS+0x2a0>
	else if (StringstartsWith(received_command,"M-"))
    36ce:	4951      	ldr	r1, [pc, #324]	; (3814 <processOnSMS+0xa78>)
    36d0:	0020      	movs	r0, r4
    36d2:	47a8      	blx	r5
    36d4:	2800      	cmp	r0, #0
    36d6:	d01f      	beq.n	3718 <processOnSMS+0x97c>
		memmove(received_command,received_command+2,strlen(received_command));
    36d8:	4b3a      	ldr	r3, [pc, #232]	; (37c4 <processOnSMS+0xa28>)
    36da:	0020      	movs	r0, r4
    36dc:	4798      	blx	r3
    36de:	4b3a      	ldr	r3, [pc, #232]	; (37c8 <processOnSMS+0xa2c>)
    36e0:	0002      	movs	r2, r0
    36e2:	1ca1      	adds	r1, r4, #2
    36e4:	0020      	movs	r0, r4
    36e6:	4798      	blx	r3
		removeNumber(received_command);
    36e8:	0020      	movs	r0, r4
    36ea:	4b4b      	ldr	r3, [pc, #300]	; (3818 <processOnSMS+0xa7c>)
    36ec:	4798      	blx	r3
		if (response_sms_processed_cmd == true)
    36ee:	2e00      	cmp	r6, #0
    36f0:	d101      	bne.n	36f6 <processOnSMS+0x95a>
    36f2:	f7ff fb74 	bl	2dde <processOnSMS+0x42>
			strcpy(resep_msg,"MOBILE NO:");
    36f6:	4b3c      	ldr	r3, [pc, #240]	; (37e8 <processOnSMS+0xa4c>)
    36f8:	4942      	ldr	r1, [pc, #264]	; (3804 <processOnSMS+0xa68>)
    36fa:	a80b      	add	r0, sp, #44	; 0x2c
    36fc:	4798      	blx	r3
			strcat(resep_msg,"\n");
    36fe:	4e42      	ldr	r6, [pc, #264]	; (3808 <processOnSMS+0xa6c>)
    3700:	4d42      	ldr	r5, [pc, #264]	; (380c <processOnSMS+0xa70>)
    3702:	0031      	movs	r1, r6
    3704:	a80b      	add	r0, sp, #44	; 0x2c
    3706:	47a8      	blx	r5
			strcat(resep_msg,received_command);
    3708:	0021      	movs	r1, r4
    370a:	a80b      	add	r0, sp, #44	; 0x2c
    370c:	47a8      	blx	r5
			strcat(resep_msg,"\n");
    370e:	0031      	movs	r1, r6
    3710:	a80b      	add	r0, sp, #44	; 0x2c
    3712:	47a8      	blx	r5
			strcat(resep_msg,"REMOVED SUCCESSFULLY");
    3714:	4941      	ldr	r1, [pc, #260]	; (381c <processOnSMS+0xa80>)
    3716:	e7d7      	b.n	36c8 <processOnSMS+0x92c>
	else if (StringstartsWith(received_command,"AM+"))
    3718:	4941      	ldr	r1, [pc, #260]	; (3820 <processOnSMS+0xa84>)
    371a:	0020      	movs	r0, r4
    371c:	47a8      	blx	r5
    371e:	2800      	cmp	r0, #0
    3720:	d017      	beq.n	3752 <processOnSMS+0x9b6>
			memmove(received_command,received_command+3,strlen(received_command));
    3722:	4b28      	ldr	r3, [pc, #160]	; (37c4 <processOnSMS+0xa28>)
    3724:	0020      	movs	r0, r4
    3726:	4798      	blx	r3
    3728:	4b27      	ldr	r3, [pc, #156]	; (37c8 <processOnSMS+0xa2c>)
    372a:	0002      	movs	r2, r0
    372c:	1ce1      	adds	r1, r4, #3
    372e:	0020      	movs	r0, r4
    3730:	4798      	blx	r3
			bool t  = addAlternateNumber(received_command);
    3732:	0020      	movs	r0, r4
    3734:	4b3b      	ldr	r3, [pc, #236]	; (3824 <processOnSMS+0xa88>)
    3736:	4798      	blx	r3
			if (response_sms_processed_cmd == true)
    3738:	2e00      	cmp	r6, #0
    373a:	d101      	bne.n	3740 <processOnSMS+0x9a4>
    373c:	f7ff fb4f 	bl	2dde <processOnSMS+0x42>
    3740:	4b29      	ldr	r3, [pc, #164]	; (37e8 <processOnSMS+0xa4c>)
					strcpy(resep_msg,"ALTERNATE MOBILE NO ADD SUCCESS");
    3742:	4939      	ldr	r1, [pc, #228]	; (3828 <processOnSMS+0xa8c>)
				if (t == true)
    3744:	2800      	cmp	r0, #0
    3746:	d001      	beq.n	374c <processOnSMS+0x9b0>
    3748:	f7ff fb54 	bl	2df4 <processOnSMS+0x58>
					strcpy(resep_msg,"ALTERNATE MOBILE NO ADD FAILED");
    374c:	4937      	ldr	r1, [pc, #220]	; (382c <processOnSMS+0xa90>)
    374e:	f7ff fb51 	bl	2df4 <processOnSMS+0x58>
	else if (StringstartsWith(received_command,"MM+"))
    3752:	4937      	ldr	r1, [pc, #220]	; (3830 <processOnSMS+0xa94>)
    3754:	0020      	movs	r0, r4
    3756:	47a8      	blx	r5
    3758:	2800      	cmp	r0, #0
    375a:	d011      	beq.n	3780 <processOnSMS+0x9e4>
			memmove(received_command,received_command+3,strlen(received_command));
    375c:	4b19      	ldr	r3, [pc, #100]	; (37c4 <processOnSMS+0xa28>)
    375e:	0020      	movs	r0, r4
    3760:	4798      	blx	r3
    3762:	1ce1      	adds	r1, r4, #3
    3764:	0002      	movs	r2, r0
    3766:	4b18      	ldr	r3, [pc, #96]	; (37c8 <processOnSMS+0xa2c>)
    3768:	0020      	movs	r0, r4
    376a:	4798      	blx	r3
			addM2MNumber(received_command);
    376c:	0020      	movs	r0, r4
    376e:	4b31      	ldr	r3, [pc, #196]	; (3834 <processOnSMS+0xa98>)
    3770:	4798      	blx	r3
				strcpy(resep_msg,"M2M NO. ADDED");
    3772:	4931      	ldr	r1, [pc, #196]	; (3838 <processOnSMS+0xa9c>)
			if (response_sms_processed_cmd == true)
    3774:	2e00      	cmp	r6, #0
    3776:	d101      	bne.n	377c <processOnSMS+0x9e0>
    3778:	f7ff fb31 	bl	2dde <processOnSMS+0x42>
    377c:	f7ff fb27 	bl	2dce <processOnSMS+0x32>
	else if (StringstartsWith(received_command,"MR+"))
    3780:	492e      	ldr	r1, [pc, #184]	; (383c <processOnSMS+0xaa0>)
    3782:	0020      	movs	r0, r4
    3784:	47a8      	blx	r5
    3786:	2800      	cmp	r0, #0
    3788:	d101      	bne.n	378e <processOnSMS+0x9f2>
    378a:	f7ff fbb8 	bl	2efe <processOnSMS+0x162>
		if(factory_settings_parameter_struct.ENABLE_M2M)
    378e:	4b2c      	ldr	r3, [pc, #176]	; (3840 <processOnSMS+0xaa4>)
    3790:	78db      	ldrb	r3, [r3, #3]
    3792:	2b00      	cmp	r3, #0
    3794:	d101      	bne.n	379a <processOnSMS+0x9fe>
    3796:	f7ff fbb2 	bl	2efe <processOnSMS+0x162>
			memmove(received_command,received_command+3,strlen(received_command));
    379a:	4b0a      	ldr	r3, [pc, #40]	; (37c4 <processOnSMS+0xa28>)
    379c:	0020      	movs	r0, r4
    379e:	4798      	blx	r3
    37a0:	1ce1      	adds	r1, r4, #3
    37a2:	0002      	movs	r2, r0
    37a4:	4b08      	ldr	r3, [pc, #32]	; (37c8 <processOnSMS+0xa2c>)
    37a6:	0020      	movs	r0, r4
    37a8:	4798      	blx	r3
			addM2MRemoteNumber(received_command);
    37aa:	0020      	movs	r0, r4
    37ac:	4b25      	ldr	r3, [pc, #148]	; (3844 <processOnSMS+0xaa8>)
    37ae:	4798      	blx	r3
				strcpy(resep_msg,"M2M REMOTE NO. ADDED");
    37b0:	4925      	ldr	r1, [pc, #148]	; (3848 <processOnSMS+0xaac>)
			if (response_sms_processed_cmd == true)
    37b2:	2e00      	cmp	r6, #0
    37b4:	d101      	bne.n	37ba <processOnSMS+0xa1e>
    37b6:	f7ff fb12 	bl	2dde <processOnSMS+0x42>
    37ba:	f7ff fb08 	bl	2dce <processOnSMS+0x32>
    37be:	46c0      	nop			; (mov r8, r8)
    37c0:	0000d57f 	.word	0x0000d57f
    37c4:	0000c687 	.word	0x0000c687
    37c8:	0000c3d3 	.word	0x0000c3d3
    37cc:	0000c2e9 	.word	0x0000c2e9
    37d0:	00000b9d 	.word	0x00000b9d
    37d4:	0000d588 	.word	0x0000d588
    37d8:	0000d594 	.word	0x0000d594
    37dc:	0000d598 	.word	0x0000d598
    37e0:	00001099 	.word	0x00001099
    37e4:	0000d59c 	.word	0x0000d59c
    37e8:	0000c677 	.word	0x0000c677
    37ec:	0000d5a8 	.word	0x0000d5a8
    37f0:	00002355 	.word	0x00002355
    37f4:	000010d5 	.word	0x000010d5
    37f8:	0000d5ac 	.word	0x0000d5ac
    37fc:	0000d5ef 	.word	0x0000d5ef
    3800:	00000901 	.word	0x00000901
    3804:	0000d5b8 	.word	0x0000d5b8
    3808:	0000cffc 	.word	0x0000cffc
    380c:	0000c641 	.word	0x0000c641
    3810:	0000d5c3 	.word	0x0000d5c3
    3814:	0000d5d6 	.word	0x0000d5d6
    3818:	000009ad 	.word	0x000009ad
    381c:	0000d5d9 	.word	0x0000d5d9
    3820:	0000d5ee 	.word	0x0000d5ee
    3824:	00000b11 	.word	0x00000b11
    3828:	0000d5f2 	.word	0x0000d5f2
    382c:	0000d612 	.word	0x0000d612
    3830:	0000d631 	.word	0x0000d631
    3834:	00000719 	.word	0x00000719
    3838:	0000d635 	.word	0x0000d635
    383c:	0000d643 	.word	0x0000d643
    3840:	2000057a 	.word	0x2000057a
    3844:	00000769 	.word	0x00000769
    3848:	0000d647 	.word	0x0000d647

0000384c <vTask_GSM_service>:
static void vTask_GSM_service(void *params)
{
	
	uint32_t network_update_time = 0;
	
	GSM_PWR_AS_OP;
    384c:	2380      	movs	r3, #128	; 0x80
{
    384e:	b5f0      	push	{r4, r5, r6, r7, lr}
	config->direction  = PORT_PIN_DIR_INPUT;
    3850:	2400      	movs	r4, #0
	GSM_PWR_AS_OP;
    3852:	4acc      	ldr	r2, [pc, #816]	; (3b84 <vTask_GSM_service+0x338>)
    3854:	025b      	lsls	r3, r3, #9
    3856:	6811      	ldr	r1, [r2, #0]
{
    3858:	b0c5      	sub	sp, #276	; 0x114
	GSM_PWR_AS_OP;
    385a:	430b      	orrs	r3, r1
    385c:	6013      	str	r3, [r2, #0]
    385e:	a907      	add	r1, sp, #28
	
	struct port_config pin_conf_gsm_status;
	port_get_config_defaults(&pin_conf_gsm_status);
	pin_conf_gsm_status.direction  = PORT_PIN_DIR_INPUT;
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
	port_pin_set_config(GSM_STATUS_POSITION, &pin_conf_gsm_status);
    3860:	201b      	movs	r0, #27
    3862:	4bc9      	ldr	r3, [pc, #804]	; (3b88 <vTask_GSM_service+0x33c>)
    3864:	700c      	strb	r4, [r1, #0]
	config->powersave  = false;
    3866:	708c      	strb	r4, [r1, #2]
	pin_conf_gsm_status.input_pull = PORT_PIN_PULL_NONE;
    3868:	704c      	strb	r4, [r1, #1]
	port_pin_set_config(GSM_STATUS_POSITION, &pin_conf_gsm_status);
    386a:	4798      	blx	r3
	
	gsm_init();
    386c:	4bc7      	ldr	r3, [pc, #796]	; (3b8c <vTask_GSM_service+0x340>)
    386e:	4798      	blx	r3
	bool boolGsm_config_flag			=false;
	bool boolOne_Time_Msg_Delete_Flag   =false;
	
	Signal_Strength = 0;
	
	soundWaitTime = 5;
    3870:	2205      	movs	r2, #5
	initialized = false;
    3872:	4bc7      	ldr	r3, [pc, #796]	; (3b90 <vTask_GSM_service+0x344>)
	bplaySound = false;
	
	actionType = 'N';
	callCutWaitTime = 580;
    3874:	2191      	movs	r1, #145	; 0x91
	initialized = false;
    3876:	701c      	strb	r4, [r3, #0]
	inCall=false;
    3878:	4bc6      	ldr	r3, [pc, #792]	; (3b94 <vTask_GSM_service+0x348>)
	callCutWaitTime = 580;
    387a:	0089      	lsls	r1, r1, #2
	inCall=false;
    387c:	701c      	strb	r4, [r3, #0]
	simReInit=false;
    387e:	4bc6      	ldr	r3, [pc, #792]	; (3b98 <vTask_GSM_service+0x34c>)
    3880:	701c      	strb	r4, [r3, #0]
	Signal_Strength = 0;
    3882:	4bc6      	ldr	r3, [pc, #792]	; (3b9c <vTask_GSM_service+0x350>)
    3884:	701c      	strb	r4, [r3, #0]
	soundWaitTime = 5;
    3886:	4bc6      	ldr	r3, [pc, #792]	; (3ba0 <vTask_GSM_service+0x354>)
    3888:	701a      	strb	r2, [r3, #0]
	bplaySound = false;
    388a:	4bc6      	ldr	r3, [pc, #792]	; (3ba4 <vTask_GSM_service+0x358>)
	actionType = 'N';
    388c:	4ac6      	ldr	r2, [pc, #792]	; (3ba8 <vTask_GSM_service+0x35c>)
	bplaySound = false;
    388e:	701c      	strb	r4, [r3, #0]
	actionType = 'N';
    3890:	234e      	movs	r3, #78	; 0x4e
    3892:	7013      	strb	r3, [r2, #0]
	callCutWaitTime = 580;
    3894:	4ac5      	ldr	r2, [pc, #788]	; (3bac <vTask_GSM_service+0x360>)
    3896:	8011      	strh	r1, [r2, #0]
	nr = 0;
	currentStatus = 'N';
	currentCallStatus = 'N';
	callAccepted = false;
	freezeIncomingCalls = false;
	obtainNewEvent = true;
    3898:	2101      	movs	r1, #1
	nr = 0;
    389a:	4ac5      	ldr	r2, [pc, #788]	; (3bb0 <vTask_GSM_service+0x364>)
    389c:	7014      	strb	r4, [r2, #0]
	currentStatus = 'N';
    389e:	4ac5      	ldr	r2, [pc, #788]	; (3bb4 <vTask_GSM_service+0x368>)
    38a0:	7013      	strb	r3, [r2, #0]
	currentCallStatus = 'N';
    38a2:	4ac5      	ldr	r2, [pc, #788]	; (3bb8 <vTask_GSM_service+0x36c>)
    38a4:	7013      	strb	r3, [r2, #0]
	callAccepted = false;
    38a6:	4ac5      	ldr	r2, [pc, #788]	; (3bbc <vTask_GSM_service+0x370>)
    38a8:	7014      	strb	r4, [r2, #0]
	freezeIncomingCalls = false;
    38aa:	4ac5      	ldr	r2, [pc, #788]	; (3bc0 <vTask_GSM_service+0x374>)
    38ac:	7014      	strb	r4, [r2, #0]
	obtainNewEvent = true;
    38ae:	4ac5      	ldr	r2, [pc, #788]	; (3bc4 <vTask_GSM_service+0x378>)
    38b0:	7011      	strb	r1, [r2, #0]
	isMsgFromAdmin = false;
    38b2:	4ac5      	ldr	r2, [pc, #788]	; (3bc8 <vTask_GSM_service+0x37c>)
    38b4:	7014      	strb	r4, [r2, #0]
	eventStaged=false;
    38b6:	4ac5      	ldr	r2, [pc, #788]	; (3bcc <vTask_GSM_service+0x380>)
    38b8:	7014      	strb	r4, [r2, #0]
	stagedEventType = 'N';
    38ba:	4ac5      	ldr	r2, [pc, #788]	; (3bd0 <vTask_GSM_service+0x384>)
    38bc:	7013      	strb	r3, [r2, #0]
	isRegisteredNumber=false;
    38be:	4bc5      	ldr	r3, [pc, #788]	; (3bd4 <vTask_GSM_service+0x388>)
    38c0:	701c      	strb	r4, [r3, #0]
	retries=0;
    38c2:	4bc5      	ldr	r3, [pc, #788]	; (3bd8 <vTask_GSM_service+0x38c>)
    38c4:	701c      	strb	r4, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    38c6:	4bc5      	ldr	r3, [pc, #788]	; (3bdc <vTask_GSM_service+0x390>)
    38c8:	785a      	ldrb	r2, [r3, #1]
    38ca:	42a2      	cmp	r2, r4
    38cc:	d001      	beq.n	38d2 <vTask_GSM_service+0x86>
	{
		zeroPressed=false;
    38ce:	4ac4      	ldr	r2, [pc, #784]	; (3be0 <vTask_GSM_service+0x394>)
    38d0:	7014      	strb	r4, [r2, #0]
	}
	if (factory_settings_parameter_struct.ENABLE_M2M)
    38d2:	78db      	ldrb	r3, [r3, #3]
    38d4:	2b00      	cmp	r3, #0
    38d6:	d00c      	beq.n	38f2 <vTask_GSM_service+0xa6>
	{
		m2mAck=false;
    38d8:	2300      	movs	r3, #0
    38da:	4ac2      	ldr	r2, [pc, #776]	; (3be4 <vTask_GSM_service+0x398>)
    38dc:	7013      	strb	r3, [r2, #0]
		m2mEventCalls=m2mEventNo=0;
    38de:	4ac2      	ldr	r2, [pc, #776]	; (3be8 <vTask_GSM_service+0x39c>)
    38e0:	7013      	strb	r3, [r2, #0]
    38e2:	4ac2      	ldr	r2, [pc, #776]	; (3bec <vTask_GSM_service+0x3a0>)
    38e4:	7013      	strb	r3, [r2, #0]
		m2mEventStaged=false;
    38e6:	4ac2      	ldr	r2, [pc, #776]	; (3bf0 <vTask_GSM_service+0x3a4>)
    38e8:	7013      	strb	r3, [r2, #0]
		m2mEvent=false;
    38ea:	4ac2      	ldr	r2, [pc, #776]	; (3bf4 <vTask_GSM_service+0x3a8>)
    38ec:	7013      	strb	r3, [r2, #0]
		keyPressed=false;
    38ee:	4ac2      	ldr	r2, [pc, #776]	; (3bf8 <vTask_GSM_service+0x3ac>)
    38f0:	7013      	strb	r3, [r2, #0]
	return (port_base->IN.reg & pin_mask);
    38f2:	4bc2      	ldr	r3, [pc, #776]	; (3bfc <vTask_GSM_service+0x3b0>)
    38f4:	6a1a      	ldr	r2, [r3, #32]
    38f6:	9305      	str	r3, [sp, #20]
	}
	
	if(GSM_STATUS_OK)
    38f8:	0113      	lsls	r3, r2, #4
    38fa:	d50e      	bpl.n	391a <vTask_GSM_service+0xce>
	{
		boolGsm_config_flag			=false;
		boolOne_Time_Msg_Delete_Flag   =false;
		
		GSM_PWR_ON;
    38fc:	2380      	movs	r3, #128	; 0x80
    38fe:	4cc0      	ldr	r4, [pc, #768]	; (3c00 <vTask_GSM_service+0x3b4>)
    3900:	025b      	lsls	r3, r3, #9
    3902:	6822      	ldr	r2, [r4, #0]
		vTaskDelay(3000);
    3904:	48bf      	ldr	r0, [pc, #764]	; (3c04 <vTask_GSM_service+0x3b8>)
		GSM_PWR_ON;
    3906:	4313      	orrs	r3, r2
    3908:	6023      	str	r3, [r4, #0]
		vTaskDelay(3000);
    390a:	4dbf      	ldr	r5, [pc, #764]	; (3c08 <vTask_GSM_service+0x3bc>)
    390c:	47a8      	blx	r5
		GSM_PWR_OFF;
    390e:	6823      	ldr	r3, [r4, #0]
    3910:	4abe      	ldr	r2, [pc, #760]	; (3c0c <vTask_GSM_service+0x3c0>)
		vTaskDelay(5000);
    3912:	48bf      	ldr	r0, [pc, #764]	; (3c10 <vTask_GSM_service+0x3c4>)
		GSM_PWR_OFF;
    3914:	4013      	ands	r3, r2
    3916:	6023      	str	r3, [r4, #0]
		vTaskDelay(5000);
    3918:	47a8      	blx	r5
						for (uint8_t i=0;i<20;i++)
						{
							Signal_Strength = gsm_getsignalstrength();
							vTaskDelay(50);
						}
						boolGsm_config_flag = true;
    391a:	2300      	movs	r3, #0
    391c:	001c      	movs	r4, r3
    391e:	9303      	str	r3, [sp, #12]
    3920:	9304      	str	r3, [sp, #16]
    3922:	9b05      	ldr	r3, [sp, #20]
    3924:	6a1d      	ldr	r5, [r3, #32]
    3926:	2380      	movs	r3, #128	; 0x80
    3928:	051b      	lsls	r3, r3, #20
    392a:	401d      	ands	r5, r3
		if (GSM_STATUS_OK)
    392c:	d100      	bne.n	3930 <vTask_GSM_service+0xe4>
    392e:	e25d      	b.n	3dec <vTask_GSM_service+0x5a0>
			if (boolGsm_config_flag == false)
    3930:	2c00      	cmp	r4, #0
    3932:	d11a      	bne.n	396a <vTask_GSM_service+0x11e>
				if (gsm_is_network_registered() == GSM_NETWORK_REGISTERED)
    3934:	4bb7      	ldr	r3, [pc, #732]	; (3c14 <vTask_GSM_service+0x3c8>)
    3936:	4798      	blx	r3
    3938:	2809      	cmp	r0, #9
    393a:	d111      	bne.n	3960 <vTask_GSM_service+0x114>
					if(gsm_config_module()==GSM_ERROR_NONE)
    393c:	4bb6      	ldr	r3, [pc, #728]	; (3c18 <vTask_GSM_service+0x3cc>)
    393e:	4798      	blx	r3
    3940:	2800      	cmp	r0, #0
    3942:	d1ee      	bne.n	3922 <vTask_GSM_service+0xd6>
    3944:	3414      	adds	r4, #20
							Signal_Strength = gsm_getsignalstrength();
    3946:	4bb5      	ldr	r3, [pc, #724]	; (3c1c <vTask_GSM_service+0x3d0>)
    3948:	4798      	blx	r3
    394a:	4b94      	ldr	r3, [pc, #592]	; (3b9c <vTask_GSM_service+0x350>)
    394c:	3c01      	subs	r4, #1
    394e:	7018      	strb	r0, [r3, #0]
    3950:	b2e4      	uxtb	r4, r4
							vTaskDelay(50);
    3952:	2032      	movs	r0, #50	; 0x32
    3954:	4bac      	ldr	r3, [pc, #688]	; (3c08 <vTask_GSM_service+0x3bc>)
    3956:	4798      	blx	r3
						for (uint8_t i=0;i<20;i++)
    3958:	2c00      	cmp	r4, #0
    395a:	d1f4      	bne.n	3946 <vTask_GSM_service+0xfa>
						boolGsm_config_flag = true;
    395c:	3401      	adds	r4, #1
    395e:	e7e0      	b.n	3922 <vTask_GSM_service+0xd6>
						boolGsm_config_flag = false;
					}
				}
				else
				{
					vTaskDelay(2000/portTICK_PERIOD_MS);
    3960:	20fa      	movs	r0, #250	; 0xfa
    3962:	4ba9      	ldr	r3, [pc, #676]	; (3c08 <vTask_GSM_service+0x3bc>)
    3964:	00c0      	lsls	r0, r0, #3
    3966:	4798      	blx	r3
    3968:	e7db      	b.n	3922 <vTask_GSM_service+0xd6>
				}
			}
			else
			{
				if ((boolOne_Time_Msg_Delete_Flag == false) && (boolGsm_config_flag == true))
    396a:	9b03      	ldr	r3, [sp, #12]
    396c:	2b00      	cmp	r3, #0
    396e:	d108      	bne.n	3982 <vTask_GSM_service+0x136>
				{
					if (gsm_delete_all_sms() == GSM_ERROR_NONE)
    3970:	4bab      	ldr	r3, [pc, #684]	; (3c20 <vTask_GSM_service+0x3d4>)
    3972:	4798      	blx	r3
    3974:	2800      	cmp	r0, #0
    3976:	d1d4      	bne.n	3922 <vTask_GSM_service+0xd6>
					{
						boolOne_Time_Msg_Delete_Flag = true;
						initialized = true;
    3978:	2201      	movs	r2, #1
    397a:	4b85      	ldr	r3, [pc, #532]	; (3b90 <vTask_GSM_service+0x344>)
						boolOne_Time_Msg_Delete_Flag = true;
    397c:	9403      	str	r4, [sp, #12]
						initialized = true;
    397e:	701a      	strb	r2, [r3, #0]
    3980:	e7cf      	b.n	3922 <vTask_GSM_service+0xd6>
						boolOne_Time_Msg_Delete_Flag = false;
					}
				}
				else
				{
					if (currentStatus == 'N' && currentCallStatus == 'N')
    3982:	4b8c      	ldr	r3, [pc, #560]	; (3bb4 <vTask_GSM_service+0x368>)
    3984:	781a      	ldrb	r2, [r3, #0]
    3986:	2a4e      	cmp	r2, #78	; 0x4e
    3988:	d000      	beq.n	398c <vTask_GSM_service+0x140>
    398a:	e0aa      	b.n	3ae2 <vTask_GSM_service+0x296>
    398c:	4a8a      	ldr	r2, [pc, #552]	; (3bb8 <vTask_GSM_service+0x36c>)
    398e:	7812      	ldrb	r2, [r2, #0]
    3990:	2a4e      	cmp	r2, #78	; 0x4e
    3992:	d000      	beq.n	3996 <vTask_GSM_service+0x14a>
    3994:	e0a5      	b.n	3ae2 <vTask_GSM_service+0x296>
					{
						////Update network
						if (xTaskGetTickCount() - network_update_time>= (1*30*1000))
    3996:	4ca3      	ldr	r4, [pc, #652]	; (3c24 <vTask_GSM_service+0x3d8>)
    3998:	47a0      	blx	r4
    399a:	9b04      	ldr	r3, [sp, #16]
    399c:	1ac0      	subs	r0, r0, r3
    399e:	4ba2      	ldr	r3, [pc, #648]	; (3c28 <vTask_GSM_service+0x3dc>)
    39a0:	4298      	cmp	r0, r3
    39a2:	d905      	bls.n	39b0 <vTask_GSM_service+0x164>
						{
							network_update_time = xTaskGetTickCount();
    39a4:	47a0      	blx	r4
							Signal_Strength = gsm_getsignalstrength();
    39a6:	4b9d      	ldr	r3, [pc, #628]	; (3c1c <vTask_GSM_service+0x3d0>)
							network_update_time = xTaskGetTickCount();
    39a8:	9004      	str	r0, [sp, #16]
							Signal_Strength = gsm_getsignalstrength();
    39aa:	4798      	blx	r3
    39ac:	4b7b      	ldr	r3, [pc, #492]	; (3b9c <vTask_GSM_service+0x350>)
    39ae:	7018      	strb	r0, [r3, #0]
						}
						
						setObtainEvent();
    39b0:	4b9e      	ldr	r3, [pc, #632]	; (3c2c <vTask_GSM_service+0x3e0>)
    39b2:	4798      	blx	r3
						if (eventStaged || m2mEventStaged)
    39b4:	4b85      	ldr	r3, [pc, #532]	; (3bcc <vTask_GSM_service+0x380>)
    39b6:	781b      	ldrb	r3, [r3, #0]
    39b8:	2b00      	cmp	r3, #0
    39ba:	d103      	bne.n	39c4 <vTask_GSM_service+0x178>
    39bc:	4b8c      	ldr	r3, [pc, #560]	; (3bf0 <vTask_GSM_service+0x3a4>)
    39be:	781b      	ldrb	r3, [r3, #0]
    39c0:	2b00      	cmp	r3, #0
    39c2:	d001      	beq.n	39c8 <vTask_GSM_service+0x17c>
						{
							operateOnStagedEvent();
    39c4:	4b9a      	ldr	r3, [pc, #616]	; (3c30 <vTask_GSM_service+0x3e4>)
								}
							}
						}
						if (playSoundElligible())
						{
							triggerPlaySound();
    39c6:	4798      	blx	r3
						}
					}
					//////////////////////////////////////////////////////////////////////////
					char response[64] = {0};
    39c8:	2100      	movs	r1, #0
    39ca:	4b9a      	ldr	r3, [pc, #616]	; (3c34 <vTask_GSM_service+0x3e8>)
    39cc:	2240      	movs	r2, #64	; 0x40
    39ce:	a80c      	add	r0, sp, #48	; 0x30
    39d0:	4798      	blx	r3
					if (gsm_read_response_line(response,sizeof(response)))
    39d2:	2140      	movs	r1, #64	; 0x40
    39d4:	a80c      	add	r0, sp, #48	; 0x30
    39d6:	4b98      	ldr	r3, [pc, #608]	; (3c38 <vTask_GSM_service+0x3ec>)
    39d8:	4798      	blx	r3
    39da:	2800      	cmp	r0, #0
    39dc:	d100      	bne.n	39e0 <vTask_GSM_service+0x194>
    39de:	e187      	b.n	3cf0 <vTask_GSM_service+0x4a4>
					{
						uint8_t sms_index;
						sms_index = gsm_responseLine_isNew_SMS_Received(response);
    39e0:	a80c      	add	r0, sp, #48	; 0x30
    39e2:	4b96      	ldr	r3, [pc, #600]	; (3c3c <vTask_GSM_service+0x3f0>)
    39e4:	4798      	blx	r3
						if (sms_index>0)
    39e6:	2800      	cmp	r0, #0
    39e8:	d036      	beq.n	3a58 <vTask_GSM_service+0x20c>
						{
							char phone_number[15];
							char Received_SMS[160];
							gsm_read_sms(sms_index,phone_number,15,Received_SMS,160);
    39ea:	23a0      	movs	r3, #160	; 0xa0
    39ec:	ac08      	add	r4, sp, #32
    39ee:	220f      	movs	r2, #15
    39f0:	0021      	movs	r1, r4
    39f2:	9300      	str	r3, [sp, #0]
    39f4:	4d92      	ldr	r5, [pc, #584]	; (3c40 <vTask_GSM_service+0x3f4>)
    39f6:	ab1c      	add	r3, sp, #112	; 0x70
    39f8:	47a8      	blx	r5
							bool admin = isAdmin(phone_number);
    39fa:	4b92      	ldr	r3, [pc, #584]	; (3c44 <vTask_GSM_service+0x3f8>)
    39fc:	0020      	movs	r0, r4
    39fe:	4798      	blx	r3
							bool primaryUser = isPrimaryNumber(phone_number);
    3a00:	4b91      	ldr	r3, [pc, #580]	; (3c48 <vTask_GSM_service+0x3fc>)
							bool admin = isAdmin(phone_number);
    3a02:	0007      	movs	r7, r0
							bool primaryUser = isPrimaryNumber(phone_number);
    3a04:	0020      	movs	r0, r4
    3a06:	4798      	blx	r3
							bool alterUsr = isAlterNumber(phone_number);
    3a08:	4b90      	ldr	r3, [pc, #576]	; (3c4c <vTask_GSM_service+0x400>)
							bool primaryUser = isPrimaryNumber(phone_number);
    3a0a:	0005      	movs	r5, r0
							bool alterUsr = isAlterNumber(phone_number);
    3a0c:	0020      	movs	r0, r4
    3a0e:	4798      	blx	r3
    3a10:	0006      	movs	r6, r0
							//{
							//memmove(Received_SMS,Received_SMS+17,strlen(Received_SMS));		//discard passPhrase
							//admin = true;													//set admin as true as passCode matches
							//}

							if (admin || primaryUser || alterUsr)
    3a12:	433d      	orrs	r5, r7
    3a14:	4335      	orrs	r5, r6
							StringtoUpperCase(Received_SMS);
    3a16:	a81c      	add	r0, sp, #112	; 0x70
    3a18:	4b8d      	ldr	r3, [pc, #564]	; (3c50 <vTask_GSM_service+0x404>)
							if (admin || primaryUser || alterUsr)
    3a1a:	b2ed      	uxtb	r5, r5
							StringtoUpperCase(Received_SMS);
    3a1c:	4798      	blx	r3
							if (admin || primaryUser || alterUsr)
    3a1e:	2d00      	cmp	r5, #0
    3a20:	d100      	bne.n	3a24 <vTask_GSM_service+0x1d8>
    3a22:	e096      	b.n	3b52 <vTask_GSM_service+0x306>
							{
								if(StringstartsWith(Received_SMS,"#"))
    3a24:	498b      	ldr	r1, [pc, #556]	; (3c54 <vTask_GSM_service+0x408>)
    3a26:	a81c      	add	r0, sp, #112	; 0x70
    3a28:	4b8b      	ldr	r3, [pc, #556]	; (3c58 <vTask_GSM_service+0x40c>)
    3a2a:	4798      	blx	r3
    3a2c:	2800      	cmp	r0, #0
    3a2e:	d00a      	beq.n	3a46 <vTask_GSM_service+0x1fa>
								{
									memmove(Received_SMS, Received_SMS+1, strlen(Received_SMS));  //this will remove '#'
    3a30:	4b8a      	ldr	r3, [pc, #552]	; (3c5c <vTask_GSM_service+0x410>)
    3a32:	a81c      	add	r0, sp, #112	; 0x70
    3a34:	4798      	blx	r3
    3a36:	2161      	movs	r1, #97	; 0x61
    3a38:	ab04      	add	r3, sp, #16
    3a3a:	0002      	movs	r2, r0
    3a3c:	18c9      	adds	r1, r1, r3
    3a3e:	a81c      	add	r0, sp, #112	; 0x70
    3a40:	4b87      	ldr	r3, [pc, #540]	; (3c60 <vTask_GSM_service+0x414>)
    3a42:	4798      	blx	r3
									response_sms_processed_cmd=false;
    3a44:	2500      	movs	r5, #0
								}
								processOnSMS(Received_SMS,admin,response_sms_processed_cmd,alterUsr,phone_number);
    3a46:	9400      	str	r4, [sp, #0]
    3a48:	0033      	movs	r3, r6
    3a4a:	002a      	movs	r2, r5
    3a4c:	0039      	movs	r1, r7
    3a4e:	a81c      	add	r0, sp, #112	; 0x70
    3a50:	4c84      	ldr	r4, [pc, #528]	; (3c64 <vTask_GSM_service+0x418>)
    3a52:	47a0      	blx	r4
									saveM2MSettings(true);
									getActiveNumber(phone_number);
									gsm_send_sms(phone_number,"M2M TURNED ON");
								}
							}
							gsm_delete_all_sms();
    3a54:	4b72      	ldr	r3, [pc, #456]	; (3c20 <vTask_GSM_service+0x3d4>)
    3a56:	4798      	blx	r3
						}


						if (!freezeIncomingCalls &&  (currentStatus == 'N' || currentStatus == 'R') && (currentCallStatus == 'N' || currentCallStatus == 'I')) //Ringing Incoming Call
    3a58:	4b59      	ldr	r3, [pc, #356]	; (3bc0 <vTask_GSM_service+0x374>)
    3a5a:	4c56      	ldr	r4, [pc, #344]	; (3bb4 <vTask_GSM_service+0x368>)
    3a5c:	781b      	ldrb	r3, [r3, #0]
    3a5e:	2b00      	cmp	r3, #0
    3a60:	d000      	beq.n	3a64 <vTask_GSM_service+0x218>
    3a62:	e171      	b.n	3d48 <vTask_GSM_service+0x4fc>
    3a64:	7823      	ldrb	r3, [r4, #0]
    3a66:	2b4e      	cmp	r3, #78	; 0x4e
    3a68:	d003      	beq.n	3a72 <vTask_GSM_service+0x226>
    3a6a:	7823      	ldrb	r3, [r4, #0]
    3a6c:	2b52      	cmp	r3, #82	; 0x52
    3a6e:	d000      	beq.n	3a72 <vTask_GSM_service+0x226>
    3a70:	e146      	b.n	3d00 <vTask_GSM_service+0x4b4>
    3a72:	4d51      	ldr	r5, [pc, #324]	; (3bb8 <vTask_GSM_service+0x36c>)
    3a74:	782b      	ldrb	r3, [r5, #0]
    3a76:	2b4e      	cmp	r3, #78	; 0x4e
    3a78:	d003      	beq.n	3a82 <vTask_GSM_service+0x236>
    3a7a:	782b      	ldrb	r3, [r5, #0]
    3a7c:	2b49      	cmp	r3, #73	; 0x49
    3a7e:	d000      	beq.n	3a82 <vTask_GSM_service+0x236>
    3a80:	e13e      	b.n	3d00 <vTask_GSM_service+0x4b4>
						{
							if (gsm_responseLine_isRinging(response))
    3a82:	a80c      	add	r0, sp, #48	; 0x30
    3a84:	4b78      	ldr	r3, [pc, #480]	; (3c68 <vTask_GSM_service+0x41c>)
    3a86:	4798      	blx	r3
    3a88:	2800      	cmp	r0, #0
    3a8a:	d100      	bne.n	3a8e <vTask_GSM_service+0x242>
    3a8c:	e132      	b.n	3cf4 <vTask_GSM_service+0x4a8>
							{
								currentStatus = 'R';
    3a8e:	2352      	movs	r3, #82	; 0x52
    3a90:	7023      	strb	r3, [r4, #0]
								currentCallStatus = 'I';
    3a92:	3b09      	subs	r3, #9
    3a94:	702b      	strb	r3, [r5, #0]
								char incoming_caller[20]={0};
    3a96:	2214      	movs	r2, #20
    3a98:	4b66      	ldr	r3, [pc, #408]	; (3c34 <vTask_GSM_service+0x3e8>)
    3a9a:	2100      	movs	r1, #0
    3a9c:	a81c      	add	r0, sp, #112	; 0x70
    3a9e:	4798      	blx	r3
								inCall = true;
								
								bool new_call = false;
								for (uint8_t i=0;i<4;i++)
								{
									vTaskDelay(500/portTICK_PERIOD_MS);
    3aa0:	25fa      	movs	r5, #250	; 0xfa
								inCall = true;
    3aa2:	2201      	movs	r2, #1
    3aa4:	2404      	movs	r4, #4
    3aa6:	4b3b      	ldr	r3, [pc, #236]	; (3b94 <vTask_GSM_service+0x348>)
									vTaskDelay(500/portTICK_PERIOD_MS);
    3aa8:	006d      	lsls	r5, r5, #1
								inCall = true;
    3aaa:	701a      	strb	r2, [r3, #0]
									vTaskDelay(500/portTICK_PERIOD_MS);
    3aac:	0028      	movs	r0, r5
    3aae:	4b56      	ldr	r3, [pc, #344]	; (3c08 <vTask_GSM_service+0x3bc>)
    3ab0:	4798      	blx	r3
									gsm_read_response_line(response,sizeof(response));
    3ab2:	2140      	movs	r1, #64	; 0x40
    3ab4:	4b60      	ldr	r3, [pc, #384]	; (3c38 <vTask_GSM_service+0x3ec>)
    3ab6:	a80c      	add	r0, sp, #48	; 0x30
    3ab8:	4798      	blx	r3
									if (gsm_responseLine_get_IncommingCallNo(response,incoming_caller))
    3aba:	a91c      	add	r1, sp, #112	; 0x70
    3abc:	a80c      	add	r0, sp, #48	; 0x30
    3abe:	4b6b      	ldr	r3, [pc, #428]	; (3c6c <vTask_GSM_service+0x420>)
    3ac0:	4798      	blx	r3
    3ac2:	2800      	cmp	r0, #0
    3ac4:	d100      	bne.n	3ac8 <vTask_GSM_service+0x27c>
    3ac6:	e10e      	b.n	3ce6 <vTask_GSM_service+0x49a>
									{
										new_call = true;
										callCutWait = xTaskGetTickCount();
    3ac8:	4b56      	ldr	r3, [pc, #344]	; (3c24 <vTask_GSM_service+0x3d8>)
    3aca:	4798      	blx	r3
    3acc:	4b68      	ldr	r3, [pc, #416]	; (3c70 <vTask_GSM_service+0x424>)
    3ace:	6018      	str	r0, [r3, #0]
									}
								}
								if (new_call)
								{
									new_call = false;
									if (checkNumber(incoming_caller))
    3ad0:	4b68      	ldr	r3, [pc, #416]	; (3c74 <vTask_GSM_service+0x428>)
    3ad2:	a81c      	add	r0, sp, #112	; 0x70
    3ad4:	4798      	blx	r3
									{
										acceptCall();
    3ad6:	4b68      	ldr	r3, [pc, #416]	; (3c78 <vTask_GSM_service+0x42c>)
									if (checkNumber(incoming_caller))
    3ad8:	2800      	cmp	r0, #0
    3ada:	d100      	bne.n	3ade <vTask_GSM_service+0x292>
									}
								}
							}
							else if (gsm_responseLine_isCallCut(response))
							{
								endCall();
    3adc:	4b67      	ldr	r3, [pc, #412]	; (3c7c <vTask_GSM_service+0x430>)
    3ade:	4798      	blx	r3
    3ae0:	e106      	b.n	3cf0 <vTask_GSM_service+0x4a4>
					else if (currentStatus == 'I' || currentStatus == 'R')
    3ae2:	781a      	ldrb	r2, [r3, #0]
    3ae4:	2a49      	cmp	r2, #73	; 0x49
    3ae6:	d003      	beq.n	3af0 <vTask_GSM_service+0x2a4>
    3ae8:	781b      	ldrb	r3, [r3, #0]
    3aea:	2b52      	cmp	r3, #82	; 0x52
    3aec:	d000      	beq.n	3af0 <vTask_GSM_service+0x2a4>
    3aee:	e76b      	b.n	39c8 <vTask_GSM_service+0x17c>
						if (callTimerExpire())
    3af0:	4b63      	ldr	r3, [pc, #396]	; (3c80 <vTask_GSM_service+0x434>)
    3af2:	4798      	blx	r3
    3af4:	2800      	cmp	r0, #0
    3af6:	d006      	beq.n	3b06 <vTask_GSM_service+0x2ba>
							char t1 = actionType;
    3af8:	4b2b      	ldr	r3, [pc, #172]	; (3ba8 <vTask_GSM_service+0x35c>)
    3afa:	781c      	ldrb	r4, [r3, #0]
							endCall();
    3afc:	4b5f      	ldr	r3, [pc, #380]	; (3c7c <vTask_GSM_service+0x430>)
    3afe:	4798      	blx	r3
							checkRespSMS(t1);
    3b00:	0020      	movs	r0, r4
    3b02:	4b60      	ldr	r3, [pc, #384]	; (3c84 <vTask_GSM_service+0x438>)
    3b04:	4798      	blx	r3
						if (factory_settings_parameter_struct.ENABLE_M2M)
    3b06:	4b35      	ldr	r3, [pc, #212]	; (3bdc <vTask_GSM_service+0x390>)
    3b08:	78db      	ldrb	r3, [r3, #3]
    3b0a:	2b00      	cmp	r3, #0
    3b0c:	d01a      	beq.n	3b44 <vTask_GSM_service+0x2f8>
							if(m2mEvent && callAccepted)
    3b0e:	4b39      	ldr	r3, [pc, #228]	; (3bf4 <vTask_GSM_service+0x3a8>)
    3b10:	781b      	ldrb	r3, [r3, #0]
    3b12:	2b00      	cmp	r3, #0
    3b14:	d016      	beq.n	3b44 <vTask_GSM_service+0x2f8>
    3b16:	4b29      	ldr	r3, [pc, #164]	; (3bbc <vTask_GSM_service+0x370>)
    3b18:	781b      	ldrb	r3, [r3, #0]
    3b1a:	2b00      	cmp	r3, #0
    3b1c:	d012      	beq.n	3b44 <vTask_GSM_service+0x2f8>
								if(!keyPressed &&  xTaskGetTickCount() - callCutWait > 2000)
    3b1e:	4c36      	ldr	r4, [pc, #216]	; (3bf8 <vTask_GSM_service+0x3ac>)
    3b20:	7823      	ldrb	r3, [r4, #0]
    3b22:	2b00      	cmp	r3, #0
    3b24:	d10e      	bne.n	3b44 <vTask_GSM_service+0x2f8>
    3b26:	4b3f      	ldr	r3, [pc, #252]	; (3c24 <vTask_GSM_service+0x3d8>)
    3b28:	4798      	blx	r3
    3b2a:	4b51      	ldr	r3, [pc, #324]	; (3c70 <vTask_GSM_service+0x424>)
    3b2c:	681b      	ldr	r3, [r3, #0]
    3b2e:	1ac0      	subs	r0, r0, r3
    3b30:	23fa      	movs	r3, #250	; 0xfa
    3b32:	00db      	lsls	r3, r3, #3
    3b34:	4298      	cmp	r0, r3
    3b36:	d905      	bls.n	3b44 <vTask_GSM_service+0x2f8>
									keyPressed=true;
    3b38:	2301      	movs	r3, #1
    3b3a:	7023      	strb	r3, [r4, #0]
									sendDTMFTone(m2mEventNo);
    3b3c:	4b2a      	ldr	r3, [pc, #168]	; (3be8 <vTask_GSM_service+0x39c>)
    3b3e:	7818      	ldrb	r0, [r3, #0]
    3b40:	4b51      	ldr	r3, [pc, #324]	; (3c88 <vTask_GSM_service+0x43c>)
    3b42:	4798      	blx	r3
						if (playSoundElligible())
    3b44:	4b51      	ldr	r3, [pc, #324]	; (3c8c <vTask_GSM_service+0x440>)
    3b46:	4798      	blx	r3
    3b48:	2800      	cmp	r0, #0
    3b4a:	d100      	bne.n	3b4e <vTask_GSM_service+0x302>
    3b4c:	e73c      	b.n	39c8 <vTask_GSM_service+0x17c>
							triggerPlaySound();
    3b4e:	4b50      	ldr	r3, [pc, #320]	; (3c90 <vTask_GSM_service+0x444>)
    3b50:	e739      	b.n	39c6 <vTask_GSM_service+0x17a>
							else if(isM2MNumber(phone_number))
    3b52:	0020      	movs	r0, r4
    3b54:	4b4f      	ldr	r3, [pc, #316]	; (3c94 <vTask_GSM_service+0x448>)
    3b56:	4798      	blx	r3
    3b58:	2800      	cmp	r0, #0
    3b5a:	d100      	bne.n	3b5e <vTask_GSM_service+0x312>
    3b5c:	e0a6      	b.n	3cac <vTask_GSM_service+0x460>
								if(StringstartsWith(Received_SMS,"VMM01"))
    3b5e:	494e      	ldr	r1, [pc, #312]	; (3c98 <vTask_GSM_service+0x44c>)
    3b60:	a81c      	add	r0, sp, #112	; 0x70
    3b62:	4b3d      	ldr	r3, [pc, #244]	; (3c58 <vTask_GSM_service+0x40c>)
    3b64:	4798      	blx	r3
    3b66:	2800      	cmp	r0, #0
    3b68:	d100      	bne.n	3b6c <vTask_GSM_service+0x320>
    3b6a:	e773      	b.n	3a54 <vTask_GSM_service+0x208>
									setM2MVerify(true);
    3b6c:	2001      	movs	r0, #1
    3b6e:	4b4b      	ldr	r3, [pc, #300]	; (3c9c <vTask_GSM_service+0x450>)
    3b70:	4798      	blx	r3
									getM2MNumber(phone_number);
    3b72:	0020      	movs	r0, r4
    3b74:	4b4a      	ldr	r3, [pc, #296]	; (3ca0 <vTask_GSM_service+0x454>)
    3b76:	4798      	blx	r3
									gsm_send_sms(phone_number,"VMR02");
    3b78:	494a      	ldr	r1, [pc, #296]	; (3ca4 <vTask_GSM_service+0x458>)
									gsm_send_sms(phone_number,"M2M TURNED ON");
    3b7a:	0020      	movs	r0, r4
    3b7c:	4b4a      	ldr	r3, [pc, #296]	; (3ca8 <vTask_GSM_service+0x45c>)
    3b7e:	4798      	blx	r3
    3b80:	e768      	b.n	3a54 <vTask_GSM_service+0x208>
    3b82:	46c0      	nop			; (mov r8, r8)
    3b84:	41004480 	.word	0x41004480
    3b88:	00009345 	.word	0x00009345
    3b8c:	00001175 	.word	0x00001175
    3b90:	200006a9 	.word	0x200006a9
    3b94:	200006a8 	.word	0x200006a8
    3b98:	20000693 	.word	0x20000693
    3b9c:	20000696 	.word	0x20000696
    3ba0:	200006cc 	.word	0x200006cc
    3ba4:	20000726 	.word	0x20000726
    3ba8:	20000676 	.word	0x20000676
    3bac:	20000678 	.word	0x20000678
    3bb0:	20000628 	.word	0x20000628
    3bb4:	200006d4 	.word	0x200006d4
    3bb8:	2000069b 	.word	0x2000069b
    3bbc:	200006aa 	.word	0x200006aa
    3bc0:	20000668 	.word	0x20000668
    3bc4:	20000686 	.word	0x20000686
    3bc8:	20000689 	.word	0x20000689
    3bcc:	200006c9 	.word	0x200006c9
    3bd0:	20000688 	.word	0x20000688
    3bd4:	200006a4 	.word	0x200006a4
    3bd8:	20000629 	.word	0x20000629
    3bdc:	2000057a 	.word	0x2000057a
    3be0:	200006ef 	.word	0x200006ef
    3be4:	20000661 	.word	0x20000661
    3be8:	20000662 	.word	0x20000662
    3bec:	200006ca 	.word	0x200006ca
    3bf0:	2000069a 	.word	0x2000069a
    3bf4:	20000667 	.word	0x20000667
    3bf8:	200006c8 	.word	0x200006c8
    3bfc:	41004400 	.word	0x41004400
    3c00:	41004490 	.word	0x41004490
    3c04:	00000bb8 	.word	0x00000bb8
    3c08:	00007fa1 	.word	0x00007fa1
    3c0c:	fffeffff 	.word	0xfffeffff
    3c10:	00001388 	.word	0x00001388
    3c14:	000014c1 	.word	0x000014c1
    3c18:	00001c81 	.word	0x00001c81
    3c1c:	000016cd 	.word	0x000016cd
    3c20:	0000156d 	.word	0x0000156d
    3c24:	00007d29 	.word	0x00007d29
    3c28:	0000752f 	.word	0x0000752f
    3c2c:	00002425 	.word	0x00002425
    3c30:	000026b9 	.word	0x000026b9
    3c34:	0000c3f7 	.word	0x0000c3f7
    3c38:	00001d41 	.word	0x00001d41
    3c3c:	00001d8d 	.word	0x00001d8d
    3c40:	00001875 	.word	0x00001875
    3c44:	00000fd1 	.word	0x00000fd1
    3c48:	00000585 	.word	0x00000585
    3c4c:	00000551 	.word	0x00000551
    3c50:	00002329 	.word	0x00002329
    3c54:	0000d663 	.word	0x0000d663
    3c58:	00002355 	.word	0x00002355
    3c5c:	0000c687 	.word	0x0000c687
    3c60:	0000c3d3 	.word	0x0000c3d3
    3c64:	00002d9d 	.word	0x00002d9d
    3c68:	00001dd5 	.word	0x00001dd5
    3c6c:	00001ded 	.word	0x00001ded
    3c70:	200006f8 	.word	0x200006f8
    3c74:	00002c59 	.word	0x00002c59
    3c78:	000027ad 	.word	0x000027ad
    3c7c:	00002455 	.word	0x00002455
    3c80:	0000291d 	.word	0x0000291d
    3c84:	00002d0d 	.word	0x00002d0d
    3c88:	00002d41 	.word	0x00002d41
    3c8c:	000027ed 	.word	0x000027ed
    3c90:	00002825 	.word	0x00002825
    3c94:	000005d5 	.word	0x000005d5
    3c98:	0000d679 	.word	0x0000d679
    3c9c:	0000067d 	.word	0x0000067d
    3ca0:	00000625 	.word	0x00000625
    3ca4:	0000d665 	.word	0x0000d665
    3ca8:	000017bd 	.word	0x000017bd
							else if(factory_settings_parameter_struct.ENABLE_M2M && isM2MRemoteNumber(phone_number))
    3cac:	4b58      	ldr	r3, [pc, #352]	; (3e10 <vTask_GSM_service+0x5c4>)
    3cae:	78db      	ldrb	r3, [r3, #3]
    3cb0:	2b00      	cmp	r3, #0
    3cb2:	d100      	bne.n	3cb6 <vTask_GSM_service+0x46a>
    3cb4:	e6ce      	b.n	3a54 <vTask_GSM_service+0x208>
    3cb6:	0020      	movs	r0, r4
    3cb8:	4b56      	ldr	r3, [pc, #344]	; (3e14 <vTask_GSM_service+0x5c8>)
    3cba:	4798      	blx	r3
    3cbc:	2800      	cmp	r0, #0
    3cbe:	d100      	bne.n	3cc2 <vTask_GSM_service+0x476>
    3cc0:	e6c8      	b.n	3a54 <vTask_GSM_service+0x208>
								if(StringstartsWith(Received_SMS,"VMR02"))
    3cc2:	4955      	ldr	r1, [pc, #340]	; (3e18 <vTask_GSM_service+0x5cc>)
    3cc4:	a81c      	add	r0, sp, #112	; 0x70
    3cc6:	4b55      	ldr	r3, [pc, #340]	; (3e1c <vTask_GSM_service+0x5d0>)
    3cc8:	4798      	blx	r3
    3cca:	2800      	cmp	r0, #0
    3ccc:	d100      	bne.n	3cd0 <vTask_GSM_service+0x484>
    3cce:	e6c1      	b.n	3a54 <vTask_GSM_service+0x208>
									setM2MRemoteVerified(true);
    3cd0:	2001      	movs	r0, #1
    3cd2:	4b53      	ldr	r3, [pc, #332]	; (3e20 <vTask_GSM_service+0x5d4>)
    3cd4:	4798      	blx	r3
									saveM2MSettings(true);
    3cd6:	2001      	movs	r0, #1
    3cd8:	4b52      	ldr	r3, [pc, #328]	; (3e24 <vTask_GSM_service+0x5d8>)
    3cda:	4798      	blx	r3
									getActiveNumber(phone_number);
    3cdc:	0020      	movs	r0, r4
    3cde:	4b52      	ldr	r3, [pc, #328]	; (3e28 <vTask_GSM_service+0x5dc>)
    3ce0:	4798      	blx	r3
									gsm_send_sms(phone_number,"M2M TURNED ON");
    3ce2:	4952      	ldr	r1, [pc, #328]	; (3e2c <vTask_GSM_service+0x5e0>)
    3ce4:	e749      	b.n	3b7a <vTask_GSM_service+0x32e>
    3ce6:	3c01      	subs	r4, #1
    3ce8:	b2e4      	uxtb	r4, r4
								for (uint8_t i=0;i<4;i++)
    3cea:	2c00      	cmp	r4, #0
    3cec:	d000      	beq.n	3cf0 <vTask_GSM_service+0x4a4>
    3cee:	e6dd      	b.n	3aac <vTask_GSM_service+0x260>
    3cf0:	9c03      	ldr	r4, [sp, #12]
    3cf2:	e616      	b.n	3922 <vTask_GSM_service+0xd6>
							else if (gsm_responseLine_isCallCut(response))
    3cf4:	a80c      	add	r0, sp, #48	; 0x30
    3cf6:	4b4e      	ldr	r3, [pc, #312]	; (3e30 <vTask_GSM_service+0x5e4>)
    3cf8:	4798      	blx	r3
    3cfa:	2800      	cmp	r0, #0
    3cfc:	d0f8      	beq.n	3cf0 <vTask_GSM_service+0x4a4>
    3cfe:	e6ed      	b.n	3adc <vTask_GSM_service+0x290>
							}
						}
						else if (!freezeIncomingCalls && currentStatus == 'I' && currentCallStatus == 'I') //IN CALL INCOMING CALL
    3d00:	7823      	ldrb	r3, [r4, #0]
    3d02:	2b49      	cmp	r3, #73	; 0x49
    3d04:	d120      	bne.n	3d48 <vTask_GSM_service+0x4fc>
    3d06:	4b4b      	ldr	r3, [pc, #300]	; (3e34 <vTask_GSM_service+0x5e8>)
    3d08:	781b      	ldrb	r3, [r3, #0]
    3d0a:	2b49      	cmp	r3, #73	; 0x49
    3d0c:	d11c      	bne.n	3d48 <vTask_GSM_service+0x4fc>
						{
							if (gsm_responseLine_isCallCut(response))
    3d0e:	a80c      	add	r0, sp, #48	; 0x30
    3d10:	4b47      	ldr	r3, [pc, #284]	; (3e30 <vTask_GSM_service+0x5e4>)
    3d12:	4798      	blx	r3
    3d14:	1e05      	subs	r5, r0, #0
    3d16:	d000      	beq.n	3d1a <vTask_GSM_service+0x4ce>
    3d18:	e6e0      	b.n	3adc <vTask_GSM_service+0x290>
						{
							if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E')
							{
								endCall();
							}
							else if (gsm_responseLine_isNew_DTMF_Command_Received(response))
    3d1a:	a80c      	add	r0, sp, #48	; 0x30
    3d1c:	4b46      	ldr	r3, [pc, #280]	; (3e38 <vTask_GSM_service+0x5ec>)
    3d1e:	4798      	blx	r3
    3d20:	2800      	cmp	r0, #0
    3d22:	d00d      	beq.n	3d40 <vTask_GSM_service+0x4f4>
							{
								char *dtmf_tocken;
								dtmf_tocken = strtok(response,": ");
    3d24:	4e45      	ldr	r6, [pc, #276]	; (3e3c <vTask_GSM_service+0x5f0>)
    3d26:	4c46      	ldr	r4, [pc, #280]	; (3e40 <vTask_GSM_service+0x5f4>)
    3d28:	0031      	movs	r1, r6
    3d2a:	a80c      	add	r0, sp, #48	; 0x30
    3d2c:	47a0      	blx	r4
								dtmf_tocken = strtok(NULL,": ");
    3d2e:	0031      	movs	r1, r6
    3d30:	0028      	movs	r0, r5
    3d32:	47a0      	blx	r4
    3d34:	0004      	movs	r4, r0
								RemoveSpaces(dtmf_tocken);
    3d36:	4b43      	ldr	r3, [pc, #268]	; (3e44 <vTask_GSM_service+0x5f8>)
    3d38:	4798      	blx	r3
								processOnDTMF(dtmf_tocken);
    3d3a:	0020      	movs	r0, r4
    3d3c:	4b42      	ldr	r3, [pc, #264]	; (3e48 <vTask_GSM_service+0x5fc>)
    3d3e:	e001      	b.n	3d44 <vTask_GSM_service+0x4f8>
								playSoundAgain(response);
    3d40:	4b42      	ldr	r3, [pc, #264]	; (3e4c <vTask_GSM_service+0x600>)
    3d42:	a80c      	add	r0, sp, #48	; 0x30
								processOnDTMF(dtmf_tocken);
    3d44:	4798      	blx	r3
    3d46:	e7d3      	b.n	3cf0 <vTask_GSM_service+0x4a4>
						else if ((currentStatus == 'N' || currentStatus == 'R') && currentCallStatus == 'O') // OUTGOING CALL
    3d48:	7823      	ldrb	r3, [r4, #0]
    3d4a:	2b4e      	cmp	r3, #78	; 0x4e
    3d4c:	d002      	beq.n	3d54 <vTask_GSM_service+0x508>
    3d4e:	7823      	ldrb	r3, [r4, #0]
    3d50:	2b52      	cmp	r3, #82	; 0x52
    3d52:	d138      	bne.n	3dc6 <vTask_GSM_service+0x57a>
    3d54:	4e37      	ldr	r6, [pc, #220]	; (3e34 <vTask_GSM_service+0x5e8>)
    3d56:	7835      	ldrb	r5, [r6, #0]
    3d58:	b2ed      	uxtb	r5, r5
    3d5a:	2d4f      	cmp	r5, #79	; 0x4f
    3d5c:	d133      	bne.n	3dc6 <vTask_GSM_service+0x57a>
							if (OutGoingcallState(response) == 'R')
    3d5e:	a80c      	add	r0, sp, #48	; 0x30
    3d60:	4b3b      	ldr	r3, [pc, #236]	; (3e50 <vTask_GSM_service+0x604>)
    3d62:	4798      	blx	r3
    3d64:	0007      	movs	r7, r0
    3d66:	2852      	cmp	r0, #82	; 0x52
    3d68:	d106      	bne.n	3d78 <vTask_GSM_service+0x52c>
								callCutWait = xTaskGetTickCount();
    3d6a:	4b3a      	ldr	r3, [pc, #232]	; (3e54 <vTask_GSM_service+0x608>)
    3d6c:	4798      	blx	r3
    3d6e:	4b3a      	ldr	r3, [pc, #232]	; (3e58 <vTask_GSM_service+0x60c>)
								currentStatus = 'R';
    3d70:	7027      	strb	r7, [r4, #0]
								callCutWait = xTaskGetTickCount();
    3d72:	6018      	str	r0, [r3, #0]
								currentCallStatus = 'O';
    3d74:	7035      	strb	r5, [r6, #0]
    3d76:	e7bb      	b.n	3cf0 <vTask_GSM_service+0x4a4>
							else if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E') //
    3d78:	a80c      	add	r0, sp, #48	; 0x30
    3d7a:	4b2d      	ldr	r3, [pc, #180]	; (3e30 <vTask_GSM_service+0x5e4>)
    3d7c:	4798      	blx	r3
    3d7e:	2800      	cmp	r0, #0
    3d80:	d105      	bne.n	3d8e <vTask_GSM_service+0x542>
    3d82:	a80c      	add	r0, sp, #48	; 0x30
    3d84:	4b32      	ldr	r3, [pc, #200]	; (3e50 <vTask_GSM_service+0x604>)
    3d86:	4798      	blx	r3
    3d88:	0007      	movs	r7, r0
    3d8a:	2845      	cmp	r0, #69	; 0x45
    3d8c:	d107      	bne.n	3d9e <vTask_GSM_service+0x552>
								char t1 = actionType;
    3d8e:	4b33      	ldr	r3, [pc, #204]	; (3e5c <vTask_GSM_service+0x610>)
    3d90:	781c      	ldrb	r4, [r3, #0]
								endCall();
    3d92:	4b33      	ldr	r3, [pc, #204]	; (3e60 <vTask_GSM_service+0x614>)
    3d94:	4798      	blx	r3
								checkRespSMS(t1);
    3d96:	0020      	movs	r0, r4
    3d98:	4b32      	ldr	r3, [pc, #200]	; (3e64 <vTask_GSM_service+0x618>)
    3d9a:	4798      	blx	r3
							{
    3d9c:	e7a8      	b.n	3cf0 <vTask_GSM_service+0x4a4>
							else if (OutGoingcallState(response) == 'I')
    3d9e:	2849      	cmp	r0, #73	; 0x49
    3da0:	d1a6      	bne.n	3cf0 <vTask_GSM_service+0x4a4>
								callCutWait = xTaskGetTickCount();
    3da2:	4b2c      	ldr	r3, [pc, #176]	; (3e54 <vTask_GSM_service+0x608>)
    3da4:	4798      	blx	r3
								callAccepted = true;
    3da6:	2101      	movs	r1, #1
								callCutWait = xTaskGetTickCount();
    3da8:	4b2b      	ldr	r3, [pc, #172]	; (3e58 <vTask_GSM_service+0x60c>)
								currentStatus = 'I';
    3daa:	7027      	strb	r7, [r4, #0]
								callCutWait = xTaskGetTickCount();
    3dac:	6018      	str	r0, [r3, #0]
								callAccepted = true;
    3dae:	4b2e      	ldr	r3, [pc, #184]	; (3e68 <vTask_GSM_service+0x61c>)
								currentCallStatus = 'O';
    3db0:	7035      	strb	r5, [r6, #0]
								callAccepted = true;
    3db2:	7019      	strb	r1, [r3, #0]
								if (!m2mEvent)
    3db4:	4b2d      	ldr	r3, [pc, #180]	; (3e6c <vTask_GSM_service+0x620>)
    3db6:	781b      	ldrb	r3, [r3, #0]
    3db8:	2b00      	cmp	r3, #0
    3dba:	d199      	bne.n	3cf0 <vTask_GSM_service+0x4a4>
									playSound(actionType,true);
    3dbc:	4b27      	ldr	r3, [pc, #156]	; (3e5c <vTask_GSM_service+0x610>)
    3dbe:	7818      	ldrb	r0, [r3, #0]
    3dc0:	4b2b      	ldr	r3, [pc, #172]	; (3e70 <vTask_GSM_service+0x624>)
    3dc2:	4798      	blx	r3
    3dc4:	e794      	b.n	3cf0 <vTask_GSM_service+0x4a4>
						else if (currentStatus == 'I' && currentCallStatus == 'O') //IN CALL OUTGOING CALL
    3dc6:	7823      	ldrb	r3, [r4, #0]
    3dc8:	2b49      	cmp	r3, #73	; 0x49
    3dca:	d191      	bne.n	3cf0 <vTask_GSM_service+0x4a4>
    3dcc:	4b19      	ldr	r3, [pc, #100]	; (3e34 <vTask_GSM_service+0x5e8>)
    3dce:	781b      	ldrb	r3, [r3, #0]
    3dd0:	2b4f      	cmp	r3, #79	; 0x4f
    3dd2:	d18d      	bne.n	3cf0 <vTask_GSM_service+0x4a4>
							if (gsm_responseLine_isCallCut(response) || OutGoingcallState(response) == 'E')
    3dd4:	a80c      	add	r0, sp, #48	; 0x30
    3dd6:	4b16      	ldr	r3, [pc, #88]	; (3e30 <vTask_GSM_service+0x5e4>)
    3dd8:	4798      	blx	r3
    3dda:	1e05      	subs	r5, r0, #0
    3ddc:	d000      	beq.n	3de0 <vTask_GSM_service+0x594>
    3dde:	e67d      	b.n	3adc <vTask_GSM_service+0x290>
    3de0:	a80c      	add	r0, sp, #48	; 0x30
    3de2:	4b1b      	ldr	r3, [pc, #108]	; (3e50 <vTask_GSM_service+0x604>)
    3de4:	4798      	blx	r3
    3de6:	2845      	cmp	r0, #69	; 0x45
    3de8:	d197      	bne.n	3d1a <vTask_GSM_service+0x4ce>
    3dea:	e677      	b.n	3adc <vTask_GSM_service+0x290>
		else
		{
			boolGsm_config_flag			=false;
			boolOne_Time_Msg_Delete_Flag   =false;
			
			GSM_PWR_ON;
    3dec:	2380      	movs	r3, #128	; 0x80
    3dee:	4c21      	ldr	r4, [pc, #132]	; (3e74 <vTask_GSM_service+0x628>)
    3df0:	025b      	lsls	r3, r3, #9
    3df2:	6822      	ldr	r2, [r4, #0]
			vTaskDelay(3000);
    3df4:	4820      	ldr	r0, [pc, #128]	; (3e78 <vTask_GSM_service+0x62c>)
			GSM_PWR_ON;
    3df6:	4313      	orrs	r3, r2
    3df8:	6023      	str	r3, [r4, #0]
			vTaskDelay(3000);
    3dfa:	4e20      	ldr	r6, [pc, #128]	; (3e7c <vTask_GSM_service+0x630>)
    3dfc:	47b0      	blx	r6
			GSM_PWR_OFF;
    3dfe:	6823      	ldr	r3, [r4, #0]
    3e00:	4a1f      	ldr	r2, [pc, #124]	; (3e80 <vTask_GSM_service+0x634>)
			vTaskDelay(5000);
    3e02:	4820      	ldr	r0, [pc, #128]	; (3e84 <vTask_GSM_service+0x638>)
			GSM_PWR_OFF;
    3e04:	4013      	ands	r3, r2
    3e06:	6023      	str	r3, [r4, #0]
			vTaskDelay(5000);
    3e08:	47b0      	blx	r6
			boolGsm_config_flag			=false;
    3e0a:	002c      	movs	r4, r5
			boolOne_Time_Msg_Delete_Flag   =false;
    3e0c:	9503      	str	r5, [sp, #12]
    3e0e:	e588      	b.n	3922 <vTask_GSM_service+0xd6>
    3e10:	2000057a 	.word	0x2000057a
    3e14:	000005fd 	.word	0x000005fd
    3e18:	0000d665 	.word	0x0000d665
    3e1c:	00002355 	.word	0x00002355
    3e20:	000006b1 	.word	0x000006b1
    3e24:	000006e5 	.word	0x000006e5
    3e28:	000007c5 	.word	0x000007c5
    3e2c:	0000d66b 	.word	0x0000d66b
    3e30:	00001e55 	.word	0x00001e55
    3e34:	2000069b 	.word	0x2000069b
    3e38:	00001e9d 	.word	0x00001e9d
    3e3c:	0000d3ed 	.word	0x0000d3ed
    3e40:	0000c6e9 	.word	0x0000c6e9
    3e44:	000016b1 	.word	0x000016b1
    3e48:	00002a55 	.word	0x00002a55
    3e4c:	00002855 	.word	0x00002855
    3e50:	00002949 	.word	0x00002949
    3e54:	00007d29 	.word	0x00007d29
    3e58:	200006f8 	.word	0x200006f8
    3e5c:	20000676 	.word	0x20000676
    3e60:	00002455 	.word	0x00002455
    3e64:	00002d0d 	.word	0x00002d0d
    3e68:	200006aa 	.word	0x200006aa
    3e6c:	20000667 	.word	0x20000667
    3e70:	00002761 	.word	0x00002761
    3e74:	41004490 	.word	0x41004490
    3e78:	00000bb8 	.word	0x00000bb8
    3e7c:	00007fa1 	.word	0x00007fa1
    3e80:	fffeffff 	.word	0xfffeffff
    3e84:	00001388 	.word	0x00001388

00003e88 <checkNoCallTime>:
{
    3e88:	b573      	push	{r0, r1, r4, r5, r6, lr}
	getSystemTime(&globalHours,&globalMinutes);
    3e8a:	466b      	mov	r3, sp
    3e8c:	1d9e      	adds	r6, r3, #6
    3e8e:	1ddc      	adds	r4, r3, #7
    3e90:	0030      	movs	r0, r6
    3e92:	4b13      	ldr	r3, [pc, #76]	; (3ee0 <checkNoCallTime+0x58>)
    3e94:	0021      	movs	r1, r4
    3e96:	4798      	blx	r3
	if(globalHours >= (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours <=(user_settings_parameter_struct.noCallStopTimeHourAddress))
    3e98:	4a12      	ldr	r2, [pc, #72]	; (3ee4 <checkNoCallTime+0x5c>)
    3e9a:	7833      	ldrb	r3, [r6, #0]
    3e9c:	7a95      	ldrb	r5, [r2, #10]
			return false;
    3e9e:	2000      	movs	r0, #0
	if(globalHours >= (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours <=(user_settings_parameter_struct.noCallStopTimeHourAddress))
    3ea0:	429d      	cmp	r5, r3
    3ea2:	d80c      	bhi.n	3ebe <checkNoCallTime+0x36>
    3ea4:	7b11      	ldrb	r1, [r2, #12]
    3ea6:	428b      	cmp	r3, r1
    3ea8:	d809      	bhi.n	3ebe <checkNoCallTime+0x36>
		if(user_settings_parameter_struct.noCallStartTimeHourAddress==user_settings_parameter_struct.noCallStopTimeHourAddress)
    3eaa:	428d      	cmp	r5, r1
    3eac:	d108      	bne.n	3ec0 <checkNoCallTime+0x38>
			if(globalMinutes>=(user_settings_parameter_struct.noCallStartTimeMinuteAddress) && globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
    3eae:	7823      	ldrb	r3, [r4, #0]
    3eb0:	7ad1      	ldrb	r1, [r2, #11]
    3eb2:	4299      	cmp	r1, r3
    3eb4:	d803      	bhi.n	3ebe <checkNoCallTime+0x36>
    3eb6:	7b52      	ldrb	r2, [r2, #13]
			if(globalMinutes>=user_settings_parameter_struct.noCallStartTimeMinuteAddress)
    3eb8:	429a      	cmp	r2, r3
    3eba:	4140      	adcs	r0, r0
    3ebc:	b2c0      	uxtb	r0, r0
}
    3ebe:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
		if(globalHours==user_settings_parameter_struct.noCallStartTimeHourAddress)
    3ec0:	429d      	cmp	r5, r3
    3ec2:	d102      	bne.n	3eca <checkNoCallTime+0x42>
			if(globalMinutes>=user_settings_parameter_struct.noCallStartTimeMinuteAddress)
    3ec4:	7ad3      	ldrb	r3, [r2, #11]
    3ec6:	7822      	ldrb	r2, [r4, #0]
    3ec8:	e7f6      	b.n	3eb8 <checkNoCallTime+0x30>
		if(globalHours==user_settings_parameter_struct.noCallStopTimeHourAddress)
    3eca:	428b      	cmp	r3, r1
    3ecc:	d102      	bne.n	3ed4 <checkNoCallTime+0x4c>
			if(globalMinutes<=(user_settings_parameter_struct.noCallStopTimeMinuteAddress))
    3ece:	7b52      	ldrb	r2, [r2, #13]
    3ed0:	7823      	ldrb	r3, [r4, #0]
    3ed2:	e7f1      	b.n	3eb8 <checkNoCallTime+0x30>
		if(globalHours > (user_settings_parameter_struct.noCallStartTimeHourAddress) && globalHours < (user_settings_parameter_struct.noCallStopTimeHourAddress))
    3ed4:	429d      	cmp	r5, r3
    3ed6:	d2f2      	bcs.n	3ebe <checkNoCallTime+0x36>
    3ed8:	428b      	cmp	r3, r1
    3eda:	4180      	sbcs	r0, r0
    3edc:	4240      	negs	r0, r0
    3ede:	e7ee      	b.n	3ebe <checkNoCallTime+0x36>
    3ee0:	00002d79 	.word	0x00002d79
    3ee4:	200005b0 	.word	0x200005b0

00003ee8 <registerEvent>:
{
    3ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(user_count_struct.current_user_no_count==0 || user_settings_parameter_struct.responseAddress=='N')
    3eea:	4b25      	ldr	r3, [pc, #148]	; (3f80 <registerEvent+0x98>)
{
    3eec:	0005      	movs	r5, r0
	if(user_count_struct.current_user_no_count==0 || user_settings_parameter_struct.responseAddress=='N')
    3eee:	789b      	ldrb	r3, [r3, #2]
    3ef0:	2b00      	cmp	r3, #0
    3ef2:	d102      	bne.n	3efa <registerEvent+0x12>
		return true;
    3ef4:	2401      	movs	r4, #1
}
    3ef6:	0020      	movs	r0, r4
    3ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if(user_count_struct.current_user_no_count==0 || user_settings_parameter_struct.responseAddress=='N')
    3efa:	4e22      	ldr	r6, [pc, #136]	; (3f84 <registerEvent+0x9c>)
    3efc:	7973      	ldrb	r3, [r6, #5]
    3efe:	2b4e      	cmp	r3, #78	; 0x4e
    3f00:	d0f8      	beq.n	3ef4 <registerEvent+0xc>
	if (!initialized)
    3f02:	4b21      	ldr	r3, [pc, #132]	; (3f88 <registerEvent+0xa0>)
    3f04:	781b      	ldrb	r3, [r3, #0]
    3f06:	2b00      	cmp	r3, #0
    3f08:	d0f4      	beq.n	3ef4 <registerEvent+0xc>
	if(!eventStaged && actionType==eventType)
    3f0a:	4f20      	ldr	r7, [pc, #128]	; (3f8c <registerEvent+0xa4>)
    3f0c:	783b      	ldrb	r3, [r7, #0]
    3f0e:	2b00      	cmp	r3, #0
    3f10:	d103      	bne.n	3f1a <registerEvent+0x32>
    3f12:	4a1f      	ldr	r2, [pc, #124]	; (3f90 <registerEvent+0xa8>)
    3f14:	7812      	ldrb	r2, [r2, #0]
    3f16:	4282      	cmp	r2, r0
    3f18:	d0ec      	beq.n	3ef4 <registerEvent+0xc>
	if(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
    3f1a:	4a1e      	ldr	r2, [pc, #120]	; (3f94 <registerEvent+0xac>)
		return false;
    3f1c:	2400      	movs	r4, #0
	if(currentStatus == 'N' && currentCallStatus == 'N' && obtainNewEvent && !eventStaged && !m2mEventStaged)
    3f1e:	7812      	ldrb	r2, [r2, #0]
    3f20:	2a4e      	cmp	r2, #78	; 0x4e
    3f22:	d1e8      	bne.n	3ef6 <registerEvent+0xe>
    3f24:	4a1c      	ldr	r2, [pc, #112]	; (3f98 <registerEvent+0xb0>)
    3f26:	7812      	ldrb	r2, [r2, #0]
    3f28:	2a4e      	cmp	r2, #78	; 0x4e
    3f2a:	d1e4      	bne.n	3ef6 <registerEvent+0xe>
    3f2c:	4a1b      	ldr	r2, [pc, #108]	; (3f9c <registerEvent+0xb4>)
    3f2e:	7814      	ldrb	r4, [r2, #0]
    3f30:	2c00      	cmp	r4, #0
    3f32:	d0e0      	beq.n	3ef6 <registerEvent+0xe>
    3f34:	2b00      	cmp	r3, #0
    3f36:	d11f      	bne.n	3f78 <registerEvent+0x90>
    3f38:	4a19      	ldr	r2, [pc, #100]	; (3fa0 <registerEvent+0xb8>)
    3f3a:	7812      	ldrb	r2, [r2, #0]
    3f3c:	2a00      	cmp	r2, #0
    3f3e:	d11d      	bne.n	3f7c <registerEvent+0x94>
		if(user_settings_parameter_struct.noCallAddress && checkNoCallTime())
    3f40:	7a73      	ldrb	r3, [r6, #9]
    3f42:	2b00      	cmp	r3, #0
    3f44:	d10e      	bne.n	3f64 <registerEvent+0x7c>
		retries=0;
    3f46:	2200      	movs	r2, #0
    3f48:	4b16      	ldr	r3, [pc, #88]	; (3fa4 <registerEvent+0xbc>)
    3f4a:	701a      	strb	r2, [r3, #0]
		if(user_settings_parameter_struct.eventStageAddress>0x00)
    3f4c:	7a33      	ldrb	r3, [r6, #8]
    3f4e:	4293      	cmp	r3, r2
    3f50:	d00d      	beq.n	3f6e <registerEvent+0x86>
			tempEventStageTime=xTaskGetTickCount();
    3f52:	4b15      	ldr	r3, [pc, #84]	; (3fa8 <registerEvent+0xc0>)
    3f54:	4798      	blx	r3
    3f56:	4b15      	ldr	r3, [pc, #84]	; (3fac <registerEvent+0xc4>)
    3f58:	6018      	str	r0, [r3, #0]
			stagedEventType=eventType;
    3f5a:	4b15      	ldr	r3, [pc, #84]	; (3fb0 <registerEvent+0xc8>)
    3f5c:	701d      	strb	r5, [r3, #0]
			eventStaged=true;
    3f5e:	2301      	movs	r3, #1
    3f60:	703b      	strb	r3, [r7, #0]
    3f62:	e7c8      	b.n	3ef6 <registerEvent+0xe>
		if(user_settings_parameter_struct.noCallAddress && checkNoCallTime())
    3f64:	4b13      	ldr	r3, [pc, #76]	; (3fb4 <registerEvent+0xcc>)
    3f66:	4798      	blx	r3
    3f68:	2800      	cmp	r0, #0
    3f6a:	d0ec      	beq.n	3f46 <registerEvent+0x5e>
    3f6c:	e7c2      	b.n	3ef4 <registerEvent+0xc>
			actionType = eventType;
    3f6e:	4b08      	ldr	r3, [pc, #32]	; (3f90 <registerEvent+0xa8>)
    3f70:	701d      	strb	r5, [r3, #0]
			makeResponseAction();
    3f72:	4b11      	ldr	r3, [pc, #68]	; (3fb8 <registerEvent+0xd0>)
    3f74:	4798      	blx	r3
    3f76:	e7be      	b.n	3ef6 <registerEvent+0xe>
		return false;
    3f78:	2400      	movs	r4, #0
    3f7a:	e7bc      	b.n	3ef6 <registerEvent+0xe>
    3f7c:	001c      	movs	r4, r3
    3f7e:	e7ba      	b.n	3ef6 <registerEvent+0xe>
    3f80:	20000574 	.word	0x20000574
    3f84:	200005b0 	.word	0x200005b0
    3f88:	200006a9 	.word	0x200006a9
    3f8c:	200006c9 	.word	0x200006c9
    3f90:	20000676 	.word	0x20000676
    3f94:	200006d4 	.word	0x200006d4
    3f98:	2000069b 	.word	0x2000069b
    3f9c:	20000686 	.word	0x20000686
    3fa0:	2000069a 	.word	0x2000069a
    3fa4:	20000629 	.word	0x20000629
    3fa8:	00007d29 	.word	0x00007d29
    3fac:	200006d8 	.word	0x200006d8
    3fb0:	20000688 	.word	0x20000688
    3fb4:	00003e89 	.word	0x00003e89
    3fb8:	00002689 	.word	0x00002689

00003fbc <start_gsm_service>:
		}
	}
}
void start_gsm_service(void)
{
    3fbc:	b513      	push	{r0, r1, r4, lr}
	xTaskCreate(vTask_GSM_service,NULL,(uint16_t)900,NULL,1,NULL);
    3fbe:	2301      	movs	r3, #1
    3fc0:	2100      	movs	r1, #0
    3fc2:	22e1      	movs	r2, #225	; 0xe1
    3fc4:	9300      	str	r3, [sp, #0]
    3fc6:	9101      	str	r1, [sp, #4]
    3fc8:	000b      	movs	r3, r1
    3fca:	0092      	lsls	r2, r2, #2
    3fcc:	4c01      	ldr	r4, [pc, #4]	; (3fd4 <start_gsm_service+0x18>)
    3fce:	4802      	ldr	r0, [pc, #8]	; (3fd8 <start_gsm_service+0x1c>)
    3fd0:	47a0      	blx	r4
}
    3fd2:	bd13      	pop	{r0, r1, r4, pc}
    3fd4:	00007b09 	.word	0x00007b09
    3fd8:	0000384d 	.word	0x0000384d

00003fdc <checkNotInCall>:
	return (inCall /*|| inInterrupt*/);
}

bool checkNotInCall(void)
{
	return ( /*!sendCUSDResponse     &&*/  currentStatus=='N'
    3fdc:	4b0b      	ldr	r3, [pc, #44]	; (400c <checkNotInCall+0x30>)
	&&  currentCallStatus=='N'  &&  obtainNewEvent
	&&  !freezeIncomingCalls && !busy());
    3fde:	2000      	movs	r0, #0
	return ( /*!sendCUSDResponse     &&*/  currentStatus=='N'
    3fe0:	781b      	ldrb	r3, [r3, #0]
	&&  !freezeIncomingCalls && !busy());
    3fe2:	2b4e      	cmp	r3, #78	; 0x4e
    3fe4:	d10f      	bne.n	4006 <checkNotInCall+0x2a>
	&&  currentCallStatus=='N'  &&  obtainNewEvent
    3fe6:	4b0a      	ldr	r3, [pc, #40]	; (4010 <checkNotInCall+0x34>)
    3fe8:	781b      	ldrb	r3, [r3, #0]
    3fea:	2b4e      	cmp	r3, #78	; 0x4e
    3fec:	d10b      	bne.n	4006 <checkNotInCall+0x2a>
    3fee:	4b09      	ldr	r3, [pc, #36]	; (4014 <checkNotInCall+0x38>)
    3ff0:	781b      	ldrb	r3, [r3, #0]
    3ff2:	4283      	cmp	r3, r0
    3ff4:	d007      	beq.n	4006 <checkNotInCall+0x2a>
	&&  !freezeIncomingCalls && !busy());
    3ff6:	4b08      	ldr	r3, [pc, #32]	; (4018 <checkNotInCall+0x3c>)
    3ff8:	781b      	ldrb	r3, [r3, #0]
    3ffa:	4283      	cmp	r3, r0
    3ffc:	d103      	bne.n	4006 <checkNotInCall+0x2a>
	return (inCall /*|| inInterrupt*/);
    3ffe:	4b07      	ldr	r3, [pc, #28]	; (401c <checkNotInCall+0x40>)
	&&  !freezeIncomingCalls && !busy());
    4000:	3001      	adds	r0, #1
    4002:	781b      	ldrb	r3, [r3, #0]
    4004:	4058      	eors	r0, r3
    4006:	2301      	movs	r3, #1
    4008:	4018      	ands	r0, r3
}
    400a:	4770      	bx	lr
    400c:	200006d4 	.word	0x200006d4
    4010:	2000069b 	.word	0x2000069b
    4014:	20000686 	.word	0x20000686
    4018:	20000668 	.word	0x20000668
    401c:	200006a8 	.word	0x200006a8

00004020 <gsm_checkSleepElligible>:

bool gsm_checkSleepElligible(void)
{
    4020:	b510      	push	{r4, lr}
	if (factory_settings_parameter_struct.ENABLE_M2M)
    4022:	4b10      	ldr	r3, [pc, #64]	; (4064 <gsm_checkSleepElligible+0x44>)
    4024:	78da      	ldrb	r2, [r3, #3]
    4026:	4b10      	ldr	r3, [pc, #64]	; (4068 <gsm_checkSleepElligible+0x48>)
	{
		return(!commandsAccepted  && checkNotInCall() && !m2mEventStaged && !eventStaged);
    4028:	781b      	ldrb	r3, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_M2M)
    402a:	2a00      	cmp	r2, #0
    402c:	d012      	beq.n	4054 <gsm_checkSleepElligible+0x34>
		return(!commandsAccepted  && checkNotInCall() && !m2mEventStaged && !eventStaged);
    402e:	2b00      	cmp	r3, #0
    4030:	d003      	beq.n	403a <gsm_checkSleepElligible+0x1a>
	}
	else
	{
		return(!commandsAccepted  && checkNotInCall() && !eventStaged);
    4032:	2000      	movs	r0, #0
    4034:	2301      	movs	r3, #1
    4036:	4018      	ands	r0, r3
	}
    4038:	bd10      	pop	{r4, pc}
		return(!commandsAccepted  && checkNotInCall() && !m2mEventStaged && !eventStaged);
    403a:	4b0c      	ldr	r3, [pc, #48]	; (406c <gsm_checkSleepElligible+0x4c>)
    403c:	4798      	blx	r3
    403e:	2800      	cmp	r0, #0
    4040:	d0f7      	beq.n	4032 <gsm_checkSleepElligible+0x12>
    4042:	4b0b      	ldr	r3, [pc, #44]	; (4070 <gsm_checkSleepElligible+0x50>)
    4044:	781b      	ldrb	r3, [r3, #0]
    4046:	2b00      	cmp	r3, #0
    4048:	d1f3      	bne.n	4032 <gsm_checkSleepElligible+0x12>
		return(!commandsAccepted  && checkNotInCall() && !eventStaged);
    404a:	2001      	movs	r0, #1
    404c:	4b09      	ldr	r3, [pc, #36]	; (4074 <gsm_checkSleepElligible+0x54>)
    404e:	781b      	ldrb	r3, [r3, #0]
    4050:	4058      	eors	r0, r3
    4052:	e7ef      	b.n	4034 <gsm_checkSleepElligible+0x14>
    4054:	2b00      	cmp	r3, #0
    4056:	d1ec      	bne.n	4032 <gsm_checkSleepElligible+0x12>
    4058:	4b04      	ldr	r3, [pc, #16]	; (406c <gsm_checkSleepElligible+0x4c>)
    405a:	4798      	blx	r3
    405c:	2800      	cmp	r0, #0
    405e:	d0e8      	beq.n	4032 <gsm_checkSleepElligible+0x12>
    4060:	e7f3      	b.n	404a <gsm_checkSleepElligible+0x2a>
    4062:	46c0      	nop			; (mov r8, r8)
    4064:	2000057a 	.word	0x2000057a
    4068:	20000697 	.word	0x20000697
    406c:	00003fdd 	.word	0x00003fdd
    4070:	2000069a 	.word	0x2000069a
    4074:	200006c9 	.word	0x200006c9

00004078 <lcd_displaying_task>:
static QueueHandle_t xfour_Second_Queue;
static TimerHandle_t four_Second_timeout_timer=NULL;
static void four_second_timer_callback(TimerHandle_t timer);

static void lcd_displaying_task(void *params)
{
    4078:	b5f0      	push	{r4, r5, r6, r7, lr}
	UNUSED(params);
	
	lcd_in_sleep = false;
    407a:	2400      	movs	r4, #0
    407c:	4b9c      	ldr	r3, [pc, #624]	; (42f0 <lcd_displaying_task+0x278>)
{
    407e:	b093      	sub	sp, #76	; 0x4c
	lcd_in_sleep = false;
    4080:	701c      	strb	r4, [r3, #0]
	
	LCD_PWR_CONFIG();
    4082:	4b9c      	ldr	r3, [pc, #624]	; (42f4 <lcd_displaying_task+0x27c>)
    4084:	4798      	blx	r3
	LCD_PWR_EN();
    4086:	4b9c      	ldr	r3, [pc, #624]	; (42f8 <lcd_displaying_task+0x280>)
    4088:	4798      	blx	r3
	vTaskDelay(500);
    408a:	20fa      	movs	r0, #250	; 0xfa
    408c:	4b9b      	ldr	r3, [pc, #620]	; (42fc <lcd_displaying_task+0x284>)
    408e:	0040      	lsls	r0, r0, #1
    4090:	4798      	blx	r3
	
	LCD_init();
    4092:	4b9b      	ldr	r3, [pc, #620]	; (4300 <lcd_displaying_task+0x288>)
    4094:	4798      	blx	r3
	uint8_t screen=1;
	
	bool four_sec_timer_is_active = true;
	bool two_sec_timer_is_active = false;
	
	uint8_t time=0;
    4096:	230f      	movs	r3, #15
    4098:	aa02      	add	r2, sp, #8
    409a:	189b      	adds	r3, r3, r2
    409c:	701c      	strb	r4, [r3, #0]
	
	byte Network_0[8]={
    409e:	2208      	movs	r2, #8
    40a0:	4b98      	ldr	r3, [pc, #608]	; (4304 <lcd_displaying_task+0x28c>)
    40a2:	0021      	movs	r1, r4
    40a4:	a806      	add	r0, sp, #24
    40a6:	4798      	blx	r3
		0B00000,
		0B00000,
		0B00000
	};
	
	byte Network_1[8]={
    40a8:	4d97      	ldr	r5, [pc, #604]	; (4308 <lcd_displaying_task+0x290>)
    40aa:	4e98      	ldr	r6, [pc, #608]	; (430c <lcd_displaying_task+0x294>)
    40ac:	0029      	movs	r1, r5
    40ae:	2208      	movs	r2, #8
    40b0:	a808      	add	r0, sp, #32
    40b2:	47b0      	blx	r6
		0B00000,
		0B00000,
		0B11111,
		0B11111
	};
	byte Network_2[8]={
    40b4:	0029      	movs	r1, r5
    40b6:	2208      	movs	r2, #8
    40b8:	3108      	adds	r1, #8
    40ba:	a80a      	add	r0, sp, #40	; 0x28
    40bc:	47b0      	blx	r6
		0B00000,
		0B11111,
		0B11111,
		0B11111
	};
	byte Network_3[8]={
    40be:	0029      	movs	r1, r5
    40c0:	2208      	movs	r2, #8
    40c2:	3110      	adds	r1, #16
    40c4:	a80c      	add	r0, sp, #48	; 0x30
    40c6:	47b0      	blx	r6
		0B11111,
		0B11111,
		0B11111,
		0B11111
	};
	byte Network_4[8]={
    40c8:	0029      	movs	r1, r5
    40ca:	2208      	movs	r2, #8
    40cc:	3118      	adds	r1, #24
    40ce:	a80e      	add	r0, sp, #56	; 0x38
    40d0:	47b0      	blx	r6
		0B11111,
		0B11111,
		0B11111
	};

	byte Network_5[8]={
    40d2:	0029      	movs	r1, r5
    40d4:	2208      	movs	r2, #8
    40d6:	3120      	adds	r1, #32
    40d8:	a810      	add	r0, sp, #64	; 0x40
    40da:	47b0      	blx	r6
		0B11111,
		0B11111,
		0B11111
	};
	
	LCD_Create_Custom_createChar(0,Network_0);
    40dc:	4d8c      	ldr	r5, [pc, #560]	; (4310 <lcd_displaying_task+0x298>)
    40de:	a906      	add	r1, sp, #24
    40e0:	0020      	movs	r0, r4
    40e2:	47a8      	blx	r5
	LCD_Create_Custom_createChar(1,Network_1);
    40e4:	a908      	add	r1, sp, #32
    40e6:	2001      	movs	r0, #1
    40e8:	47a8      	blx	r5
	LCD_Create_Custom_createChar(2,Network_2);
    40ea:	a90a      	add	r1, sp, #40	; 0x28
    40ec:	2002      	movs	r0, #2
    40ee:	47a8      	blx	r5
	LCD_Create_Custom_createChar(3,Network_3);
    40f0:	a90c      	add	r1, sp, #48	; 0x30
    40f2:	2003      	movs	r0, #3
    40f4:	47a8      	blx	r5
	LCD_Create_Custom_createChar(4,Network_4);
    40f6:	a90e      	add	r1, sp, #56	; 0x38
    40f8:	2004      	movs	r0, #4
    40fa:	47a8      	blx	r5
	LCD_Create_Custom_createChar(5,Network_5);
    40fc:	a910      	add	r1, sp, #64	; 0x40
    40fe:	2005      	movs	r0, #5
    4100:	47a8      	blx	r5
	
	LCD_clear();
    4102:	4f84      	ldr	r7, [pc, #528]	; (4314 <lcd_displaying_task+0x29c>)
    4104:	47b8      	blx	r7
	LCD_setCursor(0,0);
    4106:	4e84      	ldr	r6, [pc, #528]	; (4318 <lcd_displaying_task+0x2a0>)
    4108:	0021      	movs	r1, r4
    410a:	0020      	movs	r0, r4
    410c:	47b0      	blx	r6
	lcd_printf(" KRISHNA  SMART ");
    410e:	4d83      	ldr	r5, [pc, #524]	; (431c <lcd_displaying_task+0x2a4>)
    4110:	4883      	ldr	r0, [pc, #524]	; (4320 <lcd_displaying_task+0x2a8>)
    4112:	47a8      	blx	r5
	LCD_setCursor(0,1);
    4114:	2101      	movs	r1, #1
    4116:	0020      	movs	r0, r4
    4118:	47b0      	blx	r6
	lcd_printf("   TECHNOLOGY   ");
    411a:	4882      	ldr	r0, [pc, #520]	; (4324 <lcd_displaying_task+0x2ac>)
    411c:	47a8      	blx	r5
	vTaskDelay(3000);
    411e:	4b77      	ldr	r3, [pc, #476]	; (42fc <lcd_displaying_task+0x284>)
    4120:	4881      	ldr	r0, [pc, #516]	; (4328 <lcd_displaying_task+0x2b0>)
    4122:	4798      	blx	r3
	
	LCD_clear();
    4124:	47b8      	blx	r7
	LCD_setCursor(0,0);
    4126:	0021      	movs	r1, r4
    4128:	0020      	movs	r0, r4
    412a:	47b0      	blx	r6
	lcd_printf("  SOFTWARE VER  ");
    412c:	487f      	ldr	r0, [pc, #508]	; (432c <lcd_displaying_task+0x2b4>)
    412e:	47a8      	blx	r5
	LCD_setCursor(0,1);
    4130:	2101      	movs	r1, #1
    4132:	0020      	movs	r0, r4
    4134:	47b0      	blx	r6
	lcd_printf("%s",VERSION_NO);
    4136:	497e      	ldr	r1, [pc, #504]	; (4330 <lcd_displaying_task+0x2b8>)
    4138:	487e      	ldr	r0, [pc, #504]	; (4334 <lcd_displaying_task+0x2bc>)
    413a:	47a8      	blx	r5
	vTaskDelay(2000);
    413c:	20fa      	movs	r0, #250	; 0xfa
    413e:	4b6f      	ldr	r3, [pc, #444]	; (42fc <lcd_displaying_task+0x284>)
    4140:	00c0      	lsls	r0, r0, #3
    4142:	4798      	blx	r3
	
	four_Second_timeout_timer = xTimerCreate(NULL,(1 * 4000 / portTICK_PERIOD_MS), pdTRUE, NULL, four_second_timer_callback);
    4144:	21fa      	movs	r1, #250	; 0xfa
    4146:	4b7c      	ldr	r3, [pc, #496]	; (4338 <lcd_displaying_task+0x2c0>)
    4148:	2201      	movs	r2, #1
    414a:	0109      	lsls	r1, r1, #4
    414c:	9300      	str	r3, [sp, #0]
    414e:	4d7b      	ldr	r5, [pc, #492]	; (433c <lcd_displaying_task+0x2c4>)
    4150:	0023      	movs	r3, r4
    4152:	0020      	movs	r0, r4
    4154:	47a8      	blx	r5
    4156:	4b7a      	ldr	r3, [pc, #488]	; (4340 <lcd_displaying_task+0x2c8>)
    4158:	0005      	movs	r5, r0
    415a:	6018      	str	r0, [r3, #0]
	xTimerStart( four_Second_timeout_timer, 0 );
    415c:	4b79      	ldr	r3, [pc, #484]	; (4344 <lcd_displaying_task+0x2cc>)
    415e:	4798      	blx	r3
    4160:	9400      	str	r4, [sp, #0]
    4162:	0002      	movs	r2, r0
    4164:	0023      	movs	r3, r4
    4166:	0028      	movs	r0, r5
    4168:	2101      	movs	r1, #1
    416a:	4d77      	ldr	r5, [pc, #476]	; (4348 <lcd_displaying_task+0x2d0>)
    416c:	47a8      	blx	r5
	uint8_t screen=1;
    416e:	2501      	movs	r5, #1
	
	for (;;)
	{
		if (lcd_in_sleep)
		{
			lcd_in_sleep = false;
    4170:	9403      	str	r4, [sp, #12]
		if (lcd_in_sleep)
    4172:	4b5f      	ldr	r3, [pc, #380]	; (42f0 <lcd_displaying_task+0x278>)
    4174:	781b      	ldrb	r3, [r3, #0]
    4176:	2b00      	cmp	r3, #0
    4178:	d00a      	beq.n	4190 <lcd_displaying_task+0x118>
			lcd_in_sleep = false;
    417a:	466a      	mov	r2, sp
    417c:	4b5c      	ldr	r3, [pc, #368]	; (42f0 <lcd_displaying_task+0x278>)
    417e:	7b12      	ldrb	r2, [r2, #12]
    4180:	701a      	strb	r2, [r3, #0]
			LCD_PWR_EN();
    4182:	4b5d      	ldr	r3, [pc, #372]	; (42f8 <lcd_displaying_task+0x280>)
    4184:	4798      	blx	r3
			vTaskDelay(100);
    4186:	4b5d      	ldr	r3, [pc, #372]	; (42fc <lcd_displaying_task+0x284>)
    4188:	2064      	movs	r0, #100	; 0x64
    418a:	4798      	blx	r3
			LCD_init();
    418c:	4b5c      	ldr	r3, [pc, #368]	; (4300 <lcd_displaying_task+0x288>)
    418e:	4798      	blx	r3
		}
		switch(screen)
    4190:	1e68      	subs	r0, r5, #1
    4192:	2804      	cmp	r0, #4
    4194:	d81a      	bhi.n	41cc <lcd_displaying_task+0x154>
    4196:	4e60      	ldr	r6, [pc, #384]	; (4318 <lcd_displaying_task+0x2a0>)
    4198:	4c60      	ldr	r4, [pc, #384]	; (431c <lcd_displaying_task+0x2a4>)
				}
				break;
			}
			case 5:
			{
				LCD_setCursor(0,0);
    419a:	2100      	movs	r1, #0
		switch(screen)
    419c:	f006 f88a 	bl	a2b4 <__gnu_thumb1_case_uqi>
    41a0:	65493903 	.word	0x65493903
    41a4:	8b          	.byte	0x8b
    41a5:	00          	.byte	0x00
				LCD_setCursor(0,0);
    41a6:	0008      	movs	r0, r1
    41a8:	47b0      	blx	r6
				lcd_printf("VRY   VYB   VBR ");
    41aa:	4c5c      	ldr	r4, [pc, #368]	; (431c <lcd_displaying_task+0x2a4>)
    41ac:	4867      	ldr	r0, [pc, #412]	; (434c <lcd_displaying_task+0x2d4>)
    41ae:	47a0      	blx	r4
				LCD_setCursor(0,1);
    41b0:	2101      	movs	r1, #1
    41b2:	2000      	movs	r0, #0
    41b4:	47b0      	blx	r6
				lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseRY_Voltage));
    41b6:	4e66      	ldr	r6, [pc, #408]	; (4350 <lcd_displaying_task+0x2d8>)
    41b8:	4f66      	ldr	r7, [pc, #408]	; (4354 <lcd_displaying_task+0x2dc>)
    41ba:	6831      	ldr	r1, [r6, #0]
    41bc:	0038      	movs	r0, r7
    41be:	47a0      	blx	r4
				lcd_printf("%03lu   ",(Analog_Parameter_Struct.PhaseYB_Voltage));
    41c0:	6871      	ldr	r1, [r6, #4]
    41c2:	0038      	movs	r0, r7
    41c4:	47a0      	blx	r4
				lcd_printf("%03lu ",(Analog_Parameter_Struct.PhaseBR_Voltage));
    41c6:	68b1      	ldr	r1, [r6, #8]
    41c8:	4863      	ldr	r0, [pc, #396]	; (4358 <lcd_displaying_task+0x2e0>)
    41ca:	47a0      	blx	r4
				
				lcd_printf("       ");
				break;
			}
		}
		if (xQueueReceive(xfour_Second_Queue,&time,0))
    41cc:	210f      	movs	r1, #15
    41ce:	ab02      	add	r3, sp, #8
    41d0:	18c9      	adds	r1, r1, r3
    41d2:	4b62      	ldr	r3, [pc, #392]	; (435c <lcd_displaying_task+0x2e4>)
    41d4:	2200      	movs	r2, #0
    41d6:	6818      	ldr	r0, [r3, #0]
    41d8:	4b61      	ldr	r3, [pc, #388]	; (4360 <lcd_displaying_task+0x2e8>)
    41da:	4798      	blx	r3
    41dc:	2800      	cmp	r0, #0
    41de:	d010      	beq.n	4202 <lcd_displaying_task+0x18a>
		{
			xTimerChangePeriod( four_Second_timeout_timer, 4000/portTICK_PERIOD_MS, portMAX_DELAY);
    41e0:	2301      	movs	r3, #1
    41e2:	22fa      	movs	r2, #250	; 0xfa
    41e4:	425b      	negs	r3, r3
    41e6:	4856      	ldr	r0, [pc, #344]	; (4340 <lcd_displaying_task+0x2c8>)
    41e8:	9300      	str	r3, [sp, #0]
    41ea:	0112      	lsls	r2, r2, #4
    41ec:	2300      	movs	r3, #0
    41ee:	2104      	movs	r1, #4
    41f0:	6800      	ldr	r0, [r0, #0]
    41f2:	4c55      	ldr	r4, [pc, #340]	; (4348 <lcd_displaying_task+0x2d0>)
    41f4:	47a0      	blx	r4
			if(varPauseDisplay==false)
    41f6:	4b5b      	ldr	r3, [pc, #364]	; (4364 <lcd_displaying_task+0x2ec>)
    41f8:	781b      	ldrb	r3, [r3, #0]
    41fa:	2b00      	cmp	r3, #0
    41fc:	d101      	bne.n	4202 <lcd_displaying_task+0x18a>
			{
				screen++;
    41fe:	3501      	adds	r5, #1
    4200:	b2ed      	uxtb	r5, r5
			}
		}
		
		if (screen>5)
    4202:	2d05      	cmp	r5, #5
    4204:	d900      	bls.n	4208 <lcd_displaying_task+0x190>
		{
			screen=1;
    4206:	2501      	movs	r5, #1
		}
		
		vTaskDelay(500);
    4208:	20fa      	movs	r0, #250	; 0xfa
    420a:	4b3c      	ldr	r3, [pc, #240]	; (42fc <lcd_displaying_task+0x284>)
    420c:	0040      	lsls	r0, r0, #1
    420e:	4798      	blx	r3
		if (lcd_in_sleep)
    4210:	e7af      	b.n	4172 <lcd_displaying_task+0xfa>
				LCD_setCursor(0,0);
    4212:	0008      	movs	r0, r1
    4214:	47b0      	blx	r6
				lcd_printf("MOTOR CURRENT:  ");
    4216:	4854      	ldr	r0, [pc, #336]	; (4368 <lcd_displaying_task+0x2f0>)
    4218:	4c40      	ldr	r4, [pc, #256]	; (431c <lcd_displaying_task+0x2a4>)
    421a:	47a0      	blx	r4
				LCD_setCursor(0,1);
    421c:	2101      	movs	r1, #1
    421e:	2000      	movs	r0, #0
    4220:	47b0      	blx	r6
				lcd_printf("%03lu.%02lu            ",(Analog_Parameter_Struct.Motor_Current_IntPart),(Analog_Parameter_Struct.Motor_Current_DecPart));
    4222:	4b4b      	ldr	r3, [pc, #300]	; (4350 <lcd_displaying_task+0x2d8>)
    4224:	4851      	ldr	r0, [pc, #324]	; (436c <lcd_displaying_task+0x2f4>)
    4226:	8a99      	ldrh	r1, [r3, #20]
    4228:	8ada      	ldrh	r2, [r3, #22]
    422a:	b289      	uxth	r1, r1
    422c:	b292      	uxth	r2, r2
    422e:	47a0      	blx	r4
				break;
    4230:	e7cc      	b.n	41cc <lcd_displaying_task+0x154>
				LCD_setCursor(0,0);
    4232:	0008      	movs	r0, r1
    4234:	47b0      	blx	r6
				lcd_printf("3 PHASE SEQ:");
    4236:	484e      	ldr	r0, [pc, #312]	; (4370 <lcd_displaying_task+0x2f8>)
    4238:	47a0      	blx	r4
				if (structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
    423a:	4b4e      	ldr	r3, [pc, #312]	; (4374 <lcd_displaying_task+0x2fc>)
					lcd_printf(" OK ");
    423c:	484e      	ldr	r0, [pc, #312]	; (4378 <lcd_displaying_task+0x300>)
				if (structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
    423e:	781b      	ldrb	r3, [r3, #0]
    4240:	2b02      	cmp	r3, #2
    4242:	d000      	beq.n	4246 <lcd_displaying_task+0x1ce>
					lcd_printf(" ERR");
    4244:	484d      	ldr	r0, [pc, #308]	; (437c <lcd_displaying_task+0x304>)
    4246:	47a0      	blx	r4
				LCD_setCursor(0,1);
    4248:	2101      	movs	r1, #1
    424a:	2000      	movs	r0, #0
    424c:	47b0      	blx	r6
				lcd_printf("PHASE STATE:");
    424e:	484c      	ldr	r0, [pc, #304]	; (4380 <lcd_displaying_task+0x308>)
    4250:	47a0      	blx	r4
				if (structThreePhase_state.u8t_phase_ac_state == AC_3PH)
    4252:	4b48      	ldr	r3, [pc, #288]	; (4374 <lcd_displaying_task+0x2fc>)
					lcd_printf(" 3PH ");
    4254:	484b      	ldr	r0, [pc, #300]	; (4384 <lcd_displaying_task+0x30c>)
				if (structThreePhase_state.u8t_phase_ac_state == AC_3PH)
    4256:	785a      	ldrb	r2, [r3, #1]
    4258:	2a03      	cmp	r2, #3
    425a:	d004      	beq.n	4266 <lcd_displaying_task+0x1ee>
				else if(structThreePhase_state.u8t_phase_ac_state == AC_2PH)
    425c:	785b      	ldrb	r3, [r3, #1]
					lcd_printf(" 2PH ");
    425e:	484a      	ldr	r0, [pc, #296]	; (4388 <lcd_displaying_task+0x310>)
				else if(structThreePhase_state.u8t_phase_ac_state == AC_2PH)
    4260:	2b02      	cmp	r3, #2
    4262:	d000      	beq.n	4266 <lcd_displaying_task+0x1ee>
					lcd_printf(" OFF");
    4264:	4849      	ldr	r0, [pc, #292]	; (438c <lcd_displaying_task+0x314>)
				lcd_printf("       ");
    4266:	47a0      	blx	r4
				break;
    4268:	e7b0      	b.n	41cc <lcd_displaying_task+0x154>
				LCD_setCursor(0,0);
    426a:	0008      	movs	r0, r1
    426c:	47b0      	blx	r6
				lcd_printf("O-LEVEL : ");
    426e:	4848      	ldr	r0, [pc, #288]	; (4390 <lcd_displaying_task+0x318>)
    4270:	47a0      	blx	r4
				if (overheadLevel == OVERHEADHIGHLEVEL)
    4272:	4b48      	ldr	r3, [pc, #288]	; (4394 <lcd_displaying_task+0x31c>)
					lcd_printf("HIGH  ");
    4274:	4848      	ldr	r0, [pc, #288]	; (4398 <lcd_displaying_task+0x320>)
				if (overheadLevel == OVERHEADHIGHLEVEL)
    4276:	781a      	ldrb	r2, [r3, #0]
    4278:	2a02      	cmp	r2, #2
    427a:	d007      	beq.n	428c <lcd_displaying_task+0x214>
				else if (overheadLevel == OVERHEADMIDLEVEL)
    427c:	781a      	ldrb	r2, [r3, #0]
					lcd_printf("MID   ");
    427e:	4847      	ldr	r0, [pc, #284]	; (439c <lcd_displaying_task+0x324>)
				else if (overheadLevel == OVERHEADMIDLEVEL)
    4280:	2a01      	cmp	r2, #1
    4282:	d003      	beq.n	428c <lcd_displaying_task+0x214>
				else if (overheadLevel == OVERHEADCRITICALLEVEL)
    4284:	781b      	ldrb	r3, [r3, #0]
    4286:	2b00      	cmp	r3, #0
    4288:	d101      	bne.n	428e <lcd_displaying_task+0x216>
					lcd_printf("LOW   ");
    428a:	4845      	ldr	r0, [pc, #276]	; (43a0 <lcd_displaying_task+0x328>)
    428c:	47a0      	blx	r4
				LCD_setCursor(0,1);
    428e:	2101      	movs	r1, #1
    4290:	2000      	movs	r0, #0
    4292:	47b0      	blx	r6
				lcd_printf("U-LEVEL : ");
    4294:	4843      	ldr	r0, [pc, #268]	; (43a4 <lcd_displaying_task+0x32c>)
    4296:	47a0      	blx	r4
				if (undergroundLevel == CRITICALLEVEL)
    4298:	4b43      	ldr	r3, [pc, #268]	; (43a8 <lcd_displaying_task+0x330>)
					lcd_printf("CRTCL ");
    429a:	4844      	ldr	r0, [pc, #272]	; (43ac <lcd_displaying_task+0x334>)
				if (undergroundLevel == CRITICALLEVEL)
    429c:	781b      	ldrb	r3, [r3, #0]
    429e:	2b00      	cmp	r3, #0
    42a0:	d0e1      	beq.n	4266 <lcd_displaying_task+0x1ee>
					lcd_printf("LOW   ");
    42a2:	483f      	ldr	r0, [pc, #252]	; (43a0 <lcd_displaying_task+0x328>)
				else if (undergroundLevel == LOWLEVEL)
    42a4:	2b01      	cmp	r3, #1
    42a6:	d0de      	beq.n	4266 <lcd_displaying_task+0x1ee>
					lcd_printf("MID   ");
    42a8:	483c      	ldr	r0, [pc, #240]	; (439c <lcd_displaying_task+0x324>)
				else if (undergroundLevel == MIDLEVEL)
    42aa:	2b02      	cmp	r3, #2
    42ac:	d0db      	beq.n	4266 <lcd_displaying_task+0x1ee>
					lcd_printf("HIGH  ");
    42ae:	483a      	ldr	r0, [pc, #232]	; (4398 <lcd_displaying_task+0x320>)
				else if (undergroundLevel == HIGHLEVEL)
    42b0:	2b03      	cmp	r3, #3
    42b2:	d18b      	bne.n	41cc <lcd_displaying_task+0x154>
    42b4:	e7d7      	b.n	4266 <lcd_displaying_task+0x1ee>
				LCD_setCursor(0,0);
    42b6:	0008      	movs	r0, r1
    42b8:	47b0      	blx	r6
				lcd_printf("BatteryPer: %u%% ",Analog_Parameter_Struct.Battery_percentage);
    42ba:	4b25      	ldr	r3, [pc, #148]	; (4350 <lcd_displaying_task+0x2d8>)
    42bc:	483c      	ldr	r0, [pc, #240]	; (43b0 <lcd_displaying_task+0x338>)
    42be:	7f19      	ldrb	r1, [r3, #28]
    42c0:	4c16      	ldr	r4, [pc, #88]	; (431c <lcd_displaying_task+0x2a4>)
    42c2:	b2c9      	uxtb	r1, r1
    42c4:	47a0      	blx	r4
				LCD_setCursor(0,1);
    42c6:	2101      	movs	r1, #1
    42c8:	2000      	movs	r0, #0
    42ca:	47b0      	blx	r6
				lcd_printf("SIGNAL : ");
    42cc:	4839      	ldr	r0, [pc, #228]	; (43b4 <lcd_displaying_task+0x33c>)
    42ce:	47a0      	blx	r4
				LCD_setCursor(9,1);
    42d0:	2101      	movs	r1, #1
    42d2:	2009      	movs	r0, #9
    42d4:	47b0      	blx	r6
				for (uint8_t i=0;i<=Signal_Strength;i++)
    42d6:	2600      	movs	r6, #0
    42d8:	4b37      	ldr	r3, [pc, #220]	; (43b8 <lcd_displaying_task+0x340>)
    42da:	781b      	ldrb	r3, [r3, #0]
    42dc:	429e      	cmp	r6, r3
    42de:	d901      	bls.n	42e4 <lcd_displaying_task+0x26c>
				lcd_printf("       ");
    42e0:	4836      	ldr	r0, [pc, #216]	; (43bc <lcd_displaying_task+0x344>)
    42e2:	e7c0      	b.n	4266 <lcd_displaying_task+0x1ee>
					LCD_write(i);
    42e4:	0030      	movs	r0, r6
    42e6:	4b36      	ldr	r3, [pc, #216]	; (43c0 <lcd_displaying_task+0x348>)
				for (uint8_t i=0;i<=Signal_Strength;i++)
    42e8:	3601      	adds	r6, #1
					LCD_write(i);
    42ea:	4798      	blx	r3
				for (uint8_t i=0;i<=Signal_Strength;i++)
    42ec:	b2f6      	uxtb	r6, r6
    42ee:	e7f3      	b.n	42d8 <lcd_displaying_task+0x260>
    42f0:	20000728 	.word	0x20000728
    42f4:	00001ef9 	.word	0x00001ef9
    42f8:	00001f15 	.word	0x00001f15
    42fc:	00007fa1 	.word	0x00007fa1
    4300:	000020e9 	.word	0x000020e9
    4304:	0000c3f7 	.word	0x0000c3f7
    4308:	0000d67f 	.word	0x0000d67f
    430c:	0000c3c1 	.word	0x0000c3c1
    4310:	000022b5 	.word	0x000022b5
    4314:	00002045 	.word	0x00002045
    4318:	00002091 	.word	0x00002091
    431c:	000022e1 	.word	0x000022e1
    4320:	0000d6a7 	.word	0x0000d6a7
    4324:	0000d6b8 	.word	0x0000d6b8
    4328:	00000bb8 	.word	0x00000bb8
    432c:	0000d6c9 	.word	0x0000d6c9
    4330:	0000d6da 	.word	0x0000d6da
    4334:	0000d6eb 	.word	0x0000d6eb
    4338:	000043c5 	.word	0x000043c5
    433c:	00008459 	.word	0x00008459
    4340:	20000228 	.word	0x20000228
    4344:	00007d29 	.word	0x00007d29
    4348:	0000849d 	.word	0x0000849d
    434c:	0000d6ee 	.word	0x0000d6ee
    4350:	2000062c 	.word	0x2000062c
    4354:	0000d6ff 	.word	0x0000d6ff
    4358:	0000d708 	.word	0x0000d708
    435c:	2000022c 	.word	0x2000022c
    4360:	000076f9 	.word	0x000076f9
    4364:	200006b8 	.word	0x200006b8
    4368:	0000d70f 	.word	0x0000d70f
    436c:	0000d720 	.word	0x0000d720
    4370:	0000d738 	.word	0x0000d738
    4374:	20000669 	.word	0x20000669
    4378:	0000d745 	.word	0x0000d745
    437c:	0000d74a 	.word	0x0000d74a
    4380:	0000d74f 	.word	0x0000d74f
    4384:	0000d75c 	.word	0x0000d75c
    4388:	0000d762 	.word	0x0000d762
    438c:	0000d510 	.word	0x0000d510
    4390:	0000d768 	.word	0x0000d768
    4394:	2000069c 	.word	0x2000069c
    4398:	0000d773 	.word	0x0000d773
    439c:	0000d77a 	.word	0x0000d77a
    43a0:	0000d781 	.word	0x0000d781
    43a4:	0000d788 	.word	0x0000d788
    43a8:	20000725 	.word	0x20000725
    43ac:	0000d793 	.word	0x0000d793
    43b0:	0000d79a 	.word	0x0000d79a
    43b4:	0000d7ac 	.word	0x0000d7ac
    43b8:	20000696 	.word	0x20000696
    43bc:	0000d730 	.word	0x0000d730
    43c0:	00002035 	.word	0x00002035

000043c4 <four_second_timer_callback>:
	xTaskCreate(lcd_displaying_task,NULL,(uint16_t)400,NULL,1,NULL);
	
}

static void four_second_timer_callback(TimerHandle_t timer)
{
    43c4:	b513      	push	{r0, r1, r4, lr}
	uint8_t ucharfour_Second=1;
    43c6:	466b      	mov	r3, sp
    43c8:	1dd9      	adds	r1, r3, #7
    43ca:	2301      	movs	r3, #1
    43cc:	700b      	strb	r3, [r1, #0]
	xQueueSendFromISR(xfour_Second_Queue,&ucharfour_Second,0);
    43ce:	2300      	movs	r3, #0
    43d0:	4802      	ldr	r0, [pc, #8]	; (43dc <four_second_timer_callback+0x18>)
    43d2:	001a      	movs	r2, r3
    43d4:	4c02      	ldr	r4, [pc, #8]	; (43e0 <four_second_timer_callback+0x1c>)
    43d6:	6800      	ldr	r0, [r0, #0]
    43d8:	47a0      	blx	r4
    43da:	bd13      	pop	{r0, r1, r4, pc}
    43dc:	2000022c 	.word	0x2000022c
    43e0:	00007641 	.word	0x00007641

000043e4 <start_lcd_service>:
{
    43e4:	b513      	push	{r0, r1, r4, lr}
	xfour_Second_Queue=xQueueCreate(1,sizeof(uint8_t));	
    43e6:	2101      	movs	r1, #1
    43e8:	2200      	movs	r2, #0
    43ea:	0008      	movs	r0, r1
    43ec:	4b07      	ldr	r3, [pc, #28]	; (440c <start_lcd_service+0x28>)
    43ee:	4798      	blx	r3
    43f0:	4b07      	ldr	r3, [pc, #28]	; (4410 <start_lcd_service+0x2c>)
	xTaskCreate(lcd_displaying_task,NULL,(uint16_t)400,NULL,1,NULL);
    43f2:	2100      	movs	r1, #0
	xfour_Second_Queue=xQueueCreate(1,sizeof(uint8_t));	
    43f4:	6018      	str	r0, [r3, #0]
	xTaskCreate(lcd_displaying_task,NULL,(uint16_t)400,NULL,1,NULL);
    43f6:	22c8      	movs	r2, #200	; 0xc8
    43f8:	2301      	movs	r3, #1
    43fa:	9101      	str	r1, [sp, #4]
    43fc:	9300      	str	r3, [sp, #0]
    43fe:	0052      	lsls	r2, r2, #1
    4400:	000b      	movs	r3, r1
    4402:	4c04      	ldr	r4, [pc, #16]	; (4414 <start_lcd_service+0x30>)
    4404:	4804      	ldr	r0, [pc, #16]	; (4418 <start_lcd_service+0x34>)
    4406:	47a0      	blx	r4
}
    4408:	bd13      	pop	{r0, r1, r4, pc}
    440a:	46c0      	nop			; (mov r8, r8)
    440c:	0000749d 	.word	0x0000749d
    4410:	2000022c 	.word	0x2000022c
    4414:	00007b09 	.word	0x00007b09
    4418:	00004079 	.word	0x00004079

0000441c <button_detect_pin_callback>:
	}
}

static void button_detect_pin_callback(void)
{
	buttonEventOccured = true;
    441c:	2201      	movs	r2, #1
    441e:	4b01      	ldr	r3, [pc, #4]	; (4424 <button_detect_pin_callback+0x8>)
    4420:	701a      	strb	r2, [r3, #0]
}
    4422:	4770      	bx	lr
    4424:	200006ab 	.word	0x200006ab

00004428 <ac_detect_callback>:
	rtc_count_enable(&rtc_instance);
}

void ac_detect_callback(struct ac_module *const module_inst)
{
	eventOccured = true;
    4428:	2201      	movs	r2, #1
    442a:	4b01      	ldr	r3, [pc, #4]	; (4430 <ac_detect_callback+0x8>)
    442c:	701a      	strb	r2, [r3, #0]
}
    442e:	4770      	bx	lr
    4430:	20000663 	.word	0x20000663

00004434 <motor_feedback_callback>:

static void motor_feedback_callback(void)
{
	eventOccured = true;
    4434:	2201      	movs	r2, #1
    4436:	4b01      	ldr	r3, [pc, #4]	; (443c <motor_feedback_callback+0x8>)
    4438:	701a      	strb	r2, [r3, #0]
}
    443a:	4770      	bx	lr
    443c:	20000663 	.word	0x20000663

00004440 <vTask_100ms_Timer>:
{
    4440:	b537      	push	{r0, r1, r2, r4, r5, lr}
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
    4442:	4b13      	ldr	r3, [pc, #76]	; (4490 <vTask_100ms_Timer+0x50>)
    4444:	4798      	blx	r3
			ucharCurrent_Detect_Flag=1;
    4446:	2501      	movs	r5, #1
			ucharVoltage_Detect_Timer_Counter=0;
    4448:	2400      	movs	r4, #0
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
    444a:	9001      	str	r0, [sp, #4]
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (100/portTICK_PERIOD_MS));
    444c:	2164      	movs	r1, #100	; 0x64
    444e:	4b11      	ldr	r3, [pc, #68]	; (4494 <vTask_100ms_Timer+0x54>)
    4450:	a801      	add	r0, sp, #4
    4452:	4798      	blx	r3
		if(ucharVoltage_Detect_Timer_Counter++>4)
    4454:	4a10      	ldr	r2, [pc, #64]	; (4498 <vTask_100ms_Timer+0x58>)
    4456:	7813      	ldrb	r3, [r2, #0]
    4458:	b2db      	uxtb	r3, r3
    445a:	1c59      	adds	r1, r3, #1
    445c:	b2c9      	uxtb	r1, r1
    445e:	7011      	strb	r1, [r2, #0]
    4460:	2b04      	cmp	r3, #4
    4462:	d902      	bls.n	446a <vTask_100ms_Timer+0x2a>
			ucharCurrent_Detect_Flag=1;
    4464:	4b0d      	ldr	r3, [pc, #52]	; (449c <vTask_100ms_Timer+0x5c>)
			ucharVoltage_Detect_Timer_Counter=0;
    4466:	7014      	strb	r4, [r2, #0]
			ucharCurrent_Detect_Flag=1;
    4468:	701d      	strb	r5, [r3, #0]
		if (ucharPhase_Seq_Timer_Counter++>4)
    446a:	4a0d      	ldr	r2, [pc, #52]	; (44a0 <vTask_100ms_Timer+0x60>)
    446c:	7813      	ldrb	r3, [r2, #0]
    446e:	b2db      	uxtb	r3, r3
    4470:	1c59      	adds	r1, r3, #1
    4472:	b2c9      	uxtb	r1, r1
    4474:	7011      	strb	r1, [r2, #0]
    4476:	2b04      	cmp	r3, #4
    4478:	d9e8      	bls.n	444c <vTask_100ms_Timer+0xc>
			ucharPhase_Seq_Timer_Counter=0;
    447a:	7014      	strb	r4, [r2, #0]
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    447c:	2280      	movs	r2, #128	; 0x80
			ucharPhase_Seq_Check_Flag=1;//0=not check, 1=Check
    447e:	4b09      	ldr	r3, [pc, #36]	; (44a4 <vTask_100ms_Timer+0x64>)
    4480:	0112      	lsls	r2, r2, #4
    4482:	701d      	strb	r5, [r3, #0]
			ucharPhase_1_Timer_Counter=0;
    4484:	4b08      	ldr	r3, [pc, #32]	; (44a8 <vTask_100ms_Timer+0x68>)
    4486:	701c      	strb	r4, [r3, #0]
    4488:	4b08      	ldr	r3, [pc, #32]	; (44ac <vTask_100ms_Timer+0x6c>)
    448a:	611a      	str	r2, [r3, #16]
    448c:	e7de      	b.n	444c <vTask_100ms_Timer+0xc>
    448e:	46c0      	nop			; (mov r8, r8)
    4490:	00007d29 	.word	0x00007d29
    4494:	00007f29 	.word	0x00007f29
    4498:	2000000d 	.word	0x2000000d
    449c:	20000230 	.word	0x20000230
    44a0:	20000234 	.word	0x20000234
    44a4:	2000000c 	.word	0x2000000c
    44a8:	20000231 	.word	0x20000231
    44ac:	40001800 	.word	0x40001800

000044b0 <vTask_10ms_Timer>:
{
    44b0:	b507      	push	{r0, r1, r2, lr}
	xLastExecutionGsm_Send_Time = xTaskGetTickCount();
    44b2:	4b0d      	ldr	r3, [pc, #52]	; (44e8 <vTask_10ms_Timer+0x38>)
    44b4:	4798      	blx	r3
    44b6:	9001      	str	r0, [sp, #4]
		vTaskDelayUntil(&xLastExecutionGsm_Send_Time, (10/portTICK_PERIOD_MS));
    44b8:	a801      	add	r0, sp, #4
    44ba:	210a      	movs	r1, #10
    44bc:	4b0b      	ldr	r3, [pc, #44]	; (44ec <vTask_10ms_Timer+0x3c>)
    44be:	4798      	blx	r3
		if(ucharPhase_Seq_Check_Flag==1)
    44c0:	480b      	ldr	r0, [pc, #44]	; (44f0 <vTask_10ms_Timer+0x40>)
    44c2:	7802      	ldrb	r2, [r0, #0]
    44c4:	b2d2      	uxtb	r2, r2
    44c6:	2a01      	cmp	r2, #1
    44c8:	d1f6      	bne.n	44b8 <vTask_10ms_Timer+0x8>
			if(++ucharPhase_1_Timer_Counter>=20)
    44ca:	490a      	ldr	r1, [pc, #40]	; (44f4 <vTask_10ms_Timer+0x44>)
    44cc:	780b      	ldrb	r3, [r1, #0]
    44ce:	3301      	adds	r3, #1
    44d0:	b2db      	uxtb	r3, r3
    44d2:	700b      	strb	r3, [r1, #0]
    44d4:	2b13      	cmp	r3, #19
    44d6:	d9ef      	bls.n	44b8 <vTask_10ms_Timer+0x8>
				ucharPhase_1_Timer_Counter=0;
    44d8:	2300      	movs	r3, #0
    44da:	700b      	strb	r3, [r1, #0]
				structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
    44dc:	4906      	ldr	r1, [pc, #24]	; (44f8 <vTask_10ms_Timer+0x48>)
    44de:	700a      	strb	r2, [r1, #0]
				ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
    44e0:	4906      	ldr	r1, [pc, #24]	; (44fc <vTask_10ms_Timer+0x4c>)
    44e2:	700a      	strb	r2, [r1, #0]
				ucharPhase_Seq_Check_Flag=0;
    44e4:	7003      	strb	r3, [r0, #0]
    44e6:	e7e7      	b.n	44b8 <vTask_10ms_Timer+0x8>
    44e8:	00007d29 	.word	0x00007d29
    44ec:	00007f29 	.word	0x00007f29
    44f0:	2000000c 	.word	0x2000000c
    44f4:	20000231 	.word	0x20000231
    44f8:	20000669 	.word	0x20000669
    44fc:	20000233 	.word	0x20000233

00004500 <adc_get_status.constprop.30>:
 * \retval ADC_STATUS_RESULT_READY  ADC result is ready to be read
 * \retval ADC_STATUS_WINDOW        ADC has detected a value inside the set
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
    4500:	2001      	movs	r0, #1
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    4502:	4b07      	ldr	r3, [pc, #28]	; (4520 <adc_get_status.constprop.30+0x20>)
    4504:	2202      	movs	r2, #2
    4506:	681b      	ldr	r3, [r3, #0]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    4508:	7e1b      	ldrb	r3, [r3, #24]
    450a:	b2db      	uxtb	r3, r3
    450c:	4018      	ands	r0, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    450e:	0759      	lsls	r1, r3, #29
    4510:	d500      	bpl.n	4514 <adc_get_status.constprop.30+0x14>
		status_flags |= ADC_STATUS_WINDOW;
    4512:	4310      	orrs	r0, r2
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    4514:	4213      	tst	r3, r2
    4516:	d001      	beq.n	451c <adc_get_status.constprop.30+0x1c>
		status_flags |= ADC_STATUS_OVERRUN;
    4518:	2304      	movs	r3, #4
    451a:	4318      	orrs	r0, r3
	}

	return status_flags;
}
    451c:	4770      	bx	lr
    451e:	46c0      	nop			; (mov r8, r8)
    4520:	20000700 	.word	0x20000700

00004524 <adc_read.part.6.constprop.29>:
 * \retval STATUS_OK           The result was retrieved successfully
 * \retval STATUS_BUSY         A conversion result was not ready
 * \retval STATUS_ERR_OVERFLOW The result register has been overwritten by the
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
    4524:	b510      	push	{r4, lr}
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
		/* Result not ready */
		return STATUS_BUSY;
	}

	Adc *const adc_module = module_inst->hw;
    4526:	4c0a      	ldr	r4, [pc, #40]	; (4550 <adc_read.part.6.constprop.29+0x2c>)
    4528:	6822      	ldr	r2, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    452a:	7e53      	ldrb	r3, [r2, #25]
    452c:	b25b      	sxtb	r3, r3
    452e:	2b00      	cmp	r3, #0
    4530:	dbfb      	blt.n	452a <adc_read.part.6.constprop.29+0x6>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    4532:	8b53      	ldrh	r3, [r2, #26]
    4534:	8003      	strh	r3, [r0, #0]
	adc_module->INTFLAG.reg = int_flags;
    4536:	2301      	movs	r3, #1
    4538:	6822      	ldr	r2, [r4, #0]
    453a:	7613      	strb	r3, [r2, #24]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    453c:	4b05      	ldr	r3, [pc, #20]	; (4554 <adc_read.part.6.constprop.29+0x30>)
    453e:	4798      	blx	r3
    4540:	2304      	movs	r3, #4
    4542:	4018      	ands	r0, r3
    4544:	d003      	beq.n	454e <adc_read.part.6.constprop.29+0x2a>
	adc_module->INTFLAG.reg = int_flags;
    4546:	2202      	movs	r2, #2
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
		return STATUS_ERR_OVERFLOW;
    4548:	201e      	movs	r0, #30
	Adc *const adc_module = module_inst->hw;
    454a:	6823      	ldr	r3, [r4, #0]
	adc_module->INTFLAG.reg = int_flags;
    454c:	761a      	strb	r2, [r3, #24]
	}

	return STATUS_OK;
}
    454e:	bd10      	pop	{r4, pc}
    4550:	20000700 	.word	0x20000700
    4554:	00004501 	.word	0x00004501

00004558 <ac_chan_get_status.isra.5.constprop.32>:
 *  \param[in] module_inst   Software instance for the Analog Comparator peripheral
 *  \param[in] channel       Comparator channel to test
 *
 *  \return Bit mask of comparator channel status flags.
 */
static inline uint8_t ac_chan_get_status(
    4558:	0002      	movs	r2, r0

	Ac *const ac_module = module_inst->hw;

	uint8_t status_mask = 0;

	if (ac_module->INTFLAG.reg & (1 << channel)) {
    455a:	2301      	movs	r3, #1
    455c:	7980      	ldrb	r0, [r0, #6]
	return (ac_module->STATUSB.reg & (AC_STATUSB_READY0 << (uint8_t)channel));
    455e:	7a51      	ldrb	r1, [r2, #9]
		status_mask = AC_CHAN_STATUS_INTERRUPT_SET;
    4560:	4018      	ands	r0, r3
    4562:	00c0      	lsls	r0, r0, #3
	}

	if (ac_chan_is_ready(module_inst, channel) == false) {
    4564:	4219      	tst	r1, r3
    4566:	d101      	bne.n	456c <ac_chan_get_status.isra.5.constprop.32+0x14>
	}

	if (ac_module->STATUSA.reg & (AC_STATUSA_STATE0 << (uint8_t)channel)) {
		status_mask |= AC_CHAN_STATUS_POS_ABOVE_NEG;
	} else {
		status_mask |= AC_CHAN_STATUS_NEG_ABOVE_POS;
    4568:	4318      	orrs	r0, r3
	}
	return status_mask;
}
    456a:	4770      	bx	lr
	if (ac_module->STATUSA.reg & (AC_STATUSA_STATE0 << (uint8_t)channel)) {
    456c:	7a12      	ldrb	r2, [r2, #8]
    456e:	421a      	tst	r2, r3
    4570:	d001      	beq.n	4576 <ac_chan_get_status.isra.5.constprop.32+0x1e>
		status_mask |= AC_CHAN_STATUS_POS_ABOVE_NEG;
    4572:	2304      	movs	r3, #4
    4574:	e7f8      	b.n	4568 <ac_chan_get_status.isra.5.constprop.32+0x10>
		status_mask |= AC_CHAN_STATUS_NEG_ABOVE_POS;
    4576:	2302      	movs	r3, #2
    4578:	e7f6      	b.n	4568 <ac_chan_get_status.isra.5.constprop.32+0x10>
	...

0000457c <adc_start_conversion.constprop.26>:
	Adc *const adc_module = module_inst->hw;
    457c:	4b07      	ldr	r3, [pc, #28]	; (459c <adc_start_conversion.constprop.26+0x20>)
    457e:	681b      	ldr	r3, [r3, #0]
    4580:	7e5a      	ldrb	r2, [r3, #25]
    4582:	b252      	sxtb	r2, r2
    4584:	2a00      	cmp	r2, #0
    4586:	dbfb      	blt.n	4580 <adc_start_conversion.constprop.26+0x4>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    4588:	2202      	movs	r2, #2
    458a:	7b19      	ldrb	r1, [r3, #12]
    458c:	430a      	orrs	r2, r1
    458e:	731a      	strb	r2, [r3, #12]
    4590:	7e5a      	ldrb	r2, [r3, #25]
    4592:	b252      	sxtb	r2, r2
    4594:	2a00      	cmp	r2, #0
    4596:	dbfb      	blt.n	4590 <adc_start_conversion.constprop.26+0x14>
}
    4598:	4770      	bx	lr
    459a:	46c0      	nop			; (mov r8, r8)
    459c:	20000700 	.word	0x20000700

000045a0 <adc_set_positive_input.constprop.25>:
{
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    45a0:	4b07      	ldr	r3, [pc, #28]	; (45c0 <adc_set_positive_input.constprop.25+0x20>)
    45a2:	681a      	ldr	r2, [r3, #0]
    45a4:	7e53      	ldrb	r3, [r2, #25]
    45a6:	b25b      	sxtb	r3, r3
    45a8:	2b00      	cmp	r3, #0
    45aa:	dbfb      	blt.n	45a4 <adc_set_positive_input.constprop.25+0x4>
		/* Wait for synchronization */
	}

	/* Set positive input pin */
	adc_module->INPUTCTRL.reg =
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    45ac:	211f      	movs	r1, #31
    45ae:	6913      	ldr	r3, [r2, #16]
    45b0:	438b      	bics	r3, r1
    45b2:	4318      	orrs	r0, r3
	adc_module->INPUTCTRL.reg =
    45b4:	6110      	str	r0, [r2, #16]
    45b6:	7e53      	ldrb	r3, [r2, #25]
    45b8:	b25b      	sxtb	r3, r3
    45ba:	2b00      	cmp	r3, #0
    45bc:	dbfb      	blt.n	45b6 <adc_set_positive_input.constprop.25+0x16>
			(positive_input);

	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}
}
    45be:	4770      	bx	lr
    45c0:	20000700 	.word	0x20000700

000045c4 <PR2_ISR>:
{
    45c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (ucharPhase_Seq_Check_Flag==1)
    45c6:	4e3f      	ldr	r6, [pc, #252]	; (46c4 <PR2_ISR+0x100>)
    45c8:	7833      	ldrb	r3, [r6, #0]
    45ca:	2b01      	cmp	r3, #1
    45cc:	d153      	bne.n	4676 <PR2_ISR+0xb2>
		ucharPhase_1_Timer_Counter=0;
    45ce:	2400      	movs	r4, #0
    45d0:	4b3d      	ldr	r3, [pc, #244]	; (46c8 <PR2_ISR+0x104>)
		delay_ms(5);
    45d2:	0020      	movs	r0, r4
		ucharPhase_1_Timer_Counter=0;
    45d4:	701c      	strb	r4, [r3, #0]
		delay_ms(5);
    45d6:	4b3d      	ldr	r3, [pc, #244]	; (46cc <PR2_ISR+0x108>)
    45d8:	4798      	blx	r3
    45da:	4d3d      	ldr	r5, [pc, #244]	; (46d0 <PR2_ISR+0x10c>)
    45dc:	2205      	movs	r2, #5
    45de:	2300      	movs	r3, #0
    45e0:	0021      	movs	r1, r4
    45e2:	47a8      	blx	r5
    45e4:	2300      	movs	r3, #0
    45e6:	4a3b      	ldr	r2, [pc, #236]	; (46d4 <PR2_ISR+0x110>)
    45e8:	4d3b      	ldr	r5, [pc, #236]	; (46d8 <PR2_ISR+0x114>)
    45ea:	1880      	adds	r0, r0, r2
    45ec:	4159      	adcs	r1, r3
    45ee:	4a3b      	ldr	r2, [pc, #236]	; (46dc <PR2_ISR+0x118>)
    45f0:	2300      	movs	r3, #0
    45f2:	47a8      	blx	r5
    45f4:	4b3a      	ldr	r3, [pc, #232]	; (46e0 <PR2_ISR+0x11c>)
    45f6:	4798      	blx	r3
		volatile unsigned char ucharHigh_Flag=0,ucharLow_Flag=0,ucharHigh_To_Low_Flag=0,ucharLow_To_High_Flag=0;
    45f8:	ab01      	add	r3, sp, #4
    45fa:	701c      	strb	r4, [r3, #0]
    45fc:	466b      	mov	r3, sp
    45fe:	715c      	strb	r4, [r3, #5]
    4600:	466b      	mov	r3, sp
    4602:	719c      	strb	r4, [r3, #6]
    4604:	466b      	mov	r3, sp
    4606:	71dc      	strb	r4, [r3, #7]
    4608:	4c36      	ldr	r4, [pc, #216]	; (46e4 <PR2_ISR+0x120>)
    460a:	6823      	ldr	r3, [r4, #0]
		if (port_pin_get_input_level(PR2_PIN)==HIGH)
    460c:	051b      	lsls	r3, r3, #20
    460e:	d523      	bpl.n	4658 <PR2_ISR+0x94>
    4610:	2578      	movs	r5, #120	; 0x78
				delay_us(25);
    4612:	4b2e      	ldr	r3, [pc, #184]	; (46cc <PR2_ISR+0x108>)
    4614:	2000      	movs	r0, #0
    4616:	4798      	blx	r3
    4618:	4f2d      	ldr	r7, [pc, #180]	; (46d0 <PR2_ISR+0x10c>)
    461a:	2219      	movs	r2, #25
    461c:	2300      	movs	r3, #0
    461e:	2100      	movs	r1, #0
    4620:	47b8      	blx	r7
    4622:	2300      	movs	r3, #0
    4624:	4a30      	ldr	r2, [pc, #192]	; (46e8 <PR2_ISR+0x124>)
    4626:	4f2c      	ldr	r7, [pc, #176]	; (46d8 <PR2_ISR+0x114>)
    4628:	1880      	adds	r0, r0, r2
    462a:	4159      	adcs	r1, r3
    462c:	4a2f      	ldr	r2, [pc, #188]	; (46ec <PR2_ISR+0x128>)
    462e:	2300      	movs	r3, #0
    4630:	47b8      	blx	r7
    4632:	4b2b      	ldr	r3, [pc, #172]	; (46e0 <PR2_ISR+0x11c>)
    4634:	4798      	blx	r3
    4636:	6823      	ldr	r3, [r4, #0]
				if ((port_pin_get_input_level(PR1_PIN)==HIGH)&&(ucharHigh_Flag==0))
    4638:	055b      	lsls	r3, r3, #21
    463a:	d51d      	bpl.n	4678 <PR2_ISR+0xb4>
    463c:	ab01      	add	r3, sp, #4
    463e:	781a      	ldrb	r2, [r3, #0]
    4640:	2a00      	cmp	r2, #0
    4642:	d119      	bne.n	4678 <PR2_ISR+0xb4>
					ucharHigh_Flag=1;
    4644:	3201      	adds	r2, #1
    4646:	701a      	strb	r2, [r3, #0]
					if (ucharLow_Flag==1)
    4648:	466b      	mov	r3, sp
    464a:	3305      	adds	r3, #5
    464c:	781b      	ldrb	r3, [r3, #0]
    464e:	b2db      	uxtb	r3, r3
    4650:	4293      	cmp	r3, r2
    4652:	d111      	bne.n	4678 <PR2_ISR+0xb4>
						ucharLow_To_High_Flag=1;
    4654:	466a      	mov	r2, sp
    4656:	71d3      	strb	r3, [r2, #7]
		if (++ucharPhase_Seq_Err_Counter>2)
    4658:	4a25      	ldr	r2, [pc, #148]	; (46f0 <PR2_ISR+0x12c>)
    465a:	7813      	ldrb	r3, [r2, #0]
    465c:	3301      	adds	r3, #1
    465e:	b2db      	uxtb	r3, r3
    4660:	7013      	strb	r3, [r2, #0]
    4662:	2b02      	cmp	r3, #2
    4664:	d907      	bls.n	4676 <PR2_ISR+0xb2>
			ucharPhase_Seq_Err_Counter=0;
    4666:	2300      	movs	r3, #0
    4668:	7013      	strb	r3, [r2, #0]
			structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_ERROR;
    466a:	2201      	movs	r2, #1
    466c:	4921      	ldr	r1, [pc, #132]	; (46f4 <PR2_ISR+0x130>)
    466e:	700a      	strb	r2, [r1, #0]
			ucharPhase_Seq_Err_Flag=1;//0=undefined, 1=error, 2=ok
    4670:	4921      	ldr	r1, [pc, #132]	; (46f8 <PR2_ISR+0x134>)
    4672:	700a      	strb	r2, [r1, #0]
			ucharPhase_Seq_Check_Flag=0;
    4674:	7033      	strb	r3, [r6, #0]
}
    4676:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4678:	466a      	mov	r2, sp
    467a:	6823      	ldr	r3, [r4, #0]
    467c:	3206      	adds	r2, #6
				if ((port_pin_get_input_level(PR1_PIN)==LOW)&&(ucharLow_Flag==0))
    467e:	055b      	lsls	r3, r3, #21
    4680:	d40c      	bmi.n	469c <PR2_ISR+0xd8>
    4682:	466b      	mov	r3, sp
    4684:	7959      	ldrb	r1, [r3, #5]
    4686:	3305      	adds	r3, #5
    4688:	2900      	cmp	r1, #0
    468a:	d107      	bne.n	469c <PR2_ISR+0xd8>
					ucharLow_Flag=1;
    468c:	3101      	adds	r1, #1
    468e:	7019      	strb	r1, [r3, #0]
					if (ucharHigh_Flag==1)
    4690:	ab01      	add	r3, sp, #4
    4692:	781b      	ldrb	r3, [r3, #0]
    4694:	b2db      	uxtb	r3, r3
    4696:	428b      	cmp	r3, r1
    4698:	d100      	bne.n	469c <PR2_ISR+0xd8>
						ucharHigh_To_Low_Flag=1;
    469a:	7013      	strb	r3, [r2, #0]
				if (ucharHigh_To_Low_Flag==1)
    469c:	7813      	ldrb	r3, [r2, #0]
    469e:	2b01      	cmp	r3, #1
    46a0:	d109      	bne.n	46b6 <PR2_ISR+0xf2>
					structThreePhase_state.u8t_phase_sequence_flag = THREEPHASE_OK;
    46a2:	4a14      	ldr	r2, [pc, #80]	; (46f4 <PR2_ISR+0x130>)
    46a4:	3301      	adds	r3, #1
    46a6:	7013      	strb	r3, [r2, #0]
					ucharPhase_Seq_Err_Flag=2;//0=undefined, 1=error, 2=ok
    46a8:	4a13      	ldr	r2, [pc, #76]	; (46f8 <PR2_ISR+0x134>)
    46aa:	7013      	strb	r3, [r2, #0]
					ucharPhase_Seq_Err_Counter=0;
    46ac:	2300      	movs	r3, #0
    46ae:	4a10      	ldr	r2, [pc, #64]	; (46f0 <PR2_ISR+0x12c>)
    46b0:	7013      	strb	r3, [r2, #0]
					ucharPhase_Seq_Check_Flag=0;
    46b2:	7033      	strb	r3, [r6, #0]
    46b4:	e7d0      	b.n	4658 <PR2_ISR+0x94>
    46b6:	6823      	ldr	r3, [r4, #0]
				if ((port_pin_get_input_level(PR2_PIN)==LOW))
    46b8:	051b      	lsls	r3, r3, #20
    46ba:	d5cd      	bpl.n	4658 <PR2_ISR+0x94>
    46bc:	3d01      	subs	r5, #1
			for (unsigned int uintLoop=0;uintLoop<120;uintLoop++)
    46be:	2d00      	cmp	r5, #0
    46c0:	d1a7      	bne.n	4612 <PR2_ISR+0x4e>
    46c2:	e7c9      	b.n	4658 <PR2_ISR+0x94>
    46c4:	2000000c 	.word	0x2000000c
    46c8:	20000231 	.word	0x20000231
    46cc:	00009e11 	.word	0x00009e11
    46d0:	0000a689 	.word	0x0000a689
    46d4:	00001b57 	.word	0x00001b57
    46d8:	0000a649 	.word	0x0000a649
    46dc:	00001b58 	.word	0x00001b58
    46e0:	20000001 	.word	0x20000001
    46e4:	410044a0 	.word	0x410044a0
    46e8:	006acfbf 	.word	0x006acfbf
    46ec:	006acfc0 	.word	0x006acfc0
    46f0:	20000232 	.word	0x20000232
    46f4:	20000669 	.word	0x20000669
    46f8:	20000233 	.word	0x20000233

000046fc <readOverHeadWaterSensorState>:
{
    46fc:	b530      	push	{r4, r5, lr}
    46fe:	2501      	movs	r5, #1
    4700:	4c05      	ldr	r4, [pc, #20]	; (4718 <readOverHeadWaterSensorState+0x1c>)
    4702:	6a22      	ldr	r2, [r4, #32]
    4704:	34a0      	adds	r4, #160	; 0xa0
    4706:	0b52      	lsrs	r2, r2, #13
    4708:	402a      	ands	r2, r5
	*olow = port_pin_get_input_level(OVERHEAD_TANK_LL_PIN);
    470a:	7002      	strb	r2, [r0, #0]
    470c:	6823      	ldr	r3, [r4, #0]
    470e:	0bdb      	lsrs	r3, r3, #15
    4710:	402b      	ands	r3, r5
	*ohigh = port_pin_get_input_level(OVERHEAD_TANK_HL_PIN);
    4712:	700b      	strb	r3, [r1, #0]
}
    4714:	bd30      	pop	{r4, r5, pc}
    4716:	46c0      	nop			; (mov r8, r8)
    4718:	41004400 	.word	0x41004400

0000471c <getOverHeadWaterSensorState>:
{
    471c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	readOverHeadWaterSensorState(&olow,&ohigh);
    471e:	466b      	mov	r3, sp
    4720:	1d9d      	adds	r5, r3, #6
    4722:	1ddc      	adds	r4, r3, #7
    4724:	0028      	movs	r0, r5
    4726:	4b06      	ldr	r3, [pc, #24]	; (4740 <getOverHeadWaterSensorState+0x24>)
    4728:	0021      	movs	r1, r4
    472a:	4798      	blx	r3
	uint8_t ans=0;
    472c:	2000      	movs	r0, #0
	if(!olow)
    472e:	782b      	ldrb	r3, [r5, #0]
    4730:	4283      	cmp	r3, r0
    4732:	d103      	bne.n	473c <getOverHeadWaterSensorState+0x20>
			if (!ohigh)
    4734:	7820      	ldrb	r0, [r4, #0]
				ans++;
    4736:	4243      	negs	r3, r0
    4738:	4158      	adcs	r0, r3
    473a:	3001      	adds	r0, #1
}
    473c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    473e:	46c0      	nop			; (mov r8, r8)
    4740:	000046fd 	.word	0x000046fd

00004744 <overHeadWaterStatusOnCall>:
{
    4744:	b510      	push	{r4, lr}
	uint8_t temp = getOverHeadWaterSensorState();
    4746:	4b0a      	ldr	r3, [pc, #40]	; (4770 <overHeadWaterStatusOnCall+0x2c>)
{
    4748:	0004      	movs	r4, r0
	uint8_t temp = getOverHeadWaterSensorState();
    474a:	4798      	blx	r3
	if(current)
    474c:	2c00      	cmp	r4, #0
    474e:	d002      	beq.n	4756 <overHeadWaterStatusOnCall+0x12>
	temp = overheadLevel;
    4750:	4b08      	ldr	r3, [pc, #32]	; (4774 <overHeadWaterStatusOnCall+0x30>)
    4752:	7818      	ldrb	r0, [r3, #0]
    4754:	b2c0      	uxtb	r0, r0
	if(temp == OVERHEADHIGHLEVEL)
    4756:	2802      	cmp	r0, #2
    4758:	d103      	bne.n	4762 <overHeadWaterStatusOnCall+0x1e>
		setMotorMGRResponse('V');
    475a:	3054      	adds	r0, #84	; 0x54
		setMotorMGRResponse('W');
    475c:	4b06      	ldr	r3, [pc, #24]	; (4778 <overHeadWaterStatusOnCall+0x34>)
    475e:	4798      	blx	r3
}
    4760:	e005      	b.n	476e <overHeadWaterStatusOnCall+0x2a>
	else if(temp == OVERHEADMIDLEVEL)
    4762:	2801      	cmp	r0, #1
    4764:	d101      	bne.n	476a <overHeadWaterStatusOnCall+0x26>
		setMotorMGRResponse('W');
    4766:	3057      	adds	r0, #87	; 0x57
    4768:	e7f8      	b.n	475c <overHeadWaterStatusOnCall+0x18>
	else if (temp == OVERHEADCRITICALLEVEL)
    476a:	2800      	cmp	r0, #0
    476c:	d0fb      	beq.n	4766 <overHeadWaterStatusOnCall+0x22>
}
    476e:	bd10      	pop	{r4, pc}
    4770:	0000471d 	.word	0x0000471d
    4774:	2000069c 	.word	0x2000069c
    4778:	00002a1d 	.word	0x00002a1d

0000477c <readWaterSensorState>:
    477c:	4b08      	ldr	r3, [pc, #32]	; (47a0 <readWaterSensorState+0x24>)
{
    477e:	b530      	push	{r4, r5, lr}
    4780:	001c      	movs	r4, r3
    4782:	2501      	movs	r5, #1
    4784:	34a0      	adds	r4, #160	; 0xa0
    4786:	6824      	ldr	r4, [r4, #0]
    4788:	0de4      	lsrs	r4, r4, #23
    478a:	402c      	ands	r4, r5
	*low = port_pin_get_input_level(UNDERGRUND_TANK_LL_PIN);
    478c:	7004      	strb	r4, [r0, #0]
    478e:	6a18      	ldr	r0, [r3, #32]
    4790:	0bc0      	lsrs	r0, r0, #15
    4792:	4028      	ands	r0, r5
	*mid = port_pin_get_input_level(UNDERGRUND_TANK_ML_PIN);
    4794:	7008      	strb	r0, [r1, #0]
    4796:	6a1b      	ldr	r3, [r3, #32]
    4798:	0b9b      	lsrs	r3, r3, #14
    479a:	402b      	ands	r3, r5
	*high = port_pin_get_input_level(UNDERGRUND_TANK_HL_PIN);
    479c:	7013      	strb	r3, [r2, #0]
}
    479e:	bd30      	pop	{r4, r5, pc}
    47a0:	41004400 	.word	0x41004400

000047a4 <getWaterSensorState>:
{
    47a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	readWaterSensorState(&l,&m,&h);
    47a6:	466b      	mov	r3, sp
    47a8:	1d5e      	adds	r6, r3, #5
    47aa:	1ddc      	adds	r4, r3, #7
    47ac:	1d9d      	adds	r5, r3, #6
    47ae:	0030      	movs	r0, r6
    47b0:	4b08      	ldr	r3, [pc, #32]	; (47d4 <getWaterSensorState+0x30>)
    47b2:	0022      	movs	r2, r4
    47b4:	0029      	movs	r1, r5
    47b6:	4798      	blx	r3
	uint8_t ans=0;
    47b8:	2000      	movs	r0, #0
	if(!l)
    47ba:	7833      	ldrb	r3, [r6, #0]
    47bc:	4283      	cmp	r3, r0
    47be:	d107      	bne.n	47d0 <getWaterSensorState+0x2c>
		if(!m)
    47c0:	782b      	ldrb	r3, [r5, #0]
		ans++;
    47c2:	3001      	adds	r0, #1
		if(!m)
    47c4:	2b00      	cmp	r3, #0
    47c6:	d103      	bne.n	47d0 <getWaterSensorState+0x2c>
			if(!h)
    47c8:	7820      	ldrb	r0, [r4, #0]
				ans++;
    47ca:	4243      	negs	r3, r0
    47cc:	4158      	adcs	r0, r3
    47ce:	3002      	adds	r0, #2
}
    47d0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    47d2:	46c0      	nop			; (mov r8, r8)
    47d4:	0000477d 	.word	0x0000477d

000047d8 <waterStatusOnCall>:
{
    47d8:	b510      	push	{r4, lr}
	uint8_t temp = getWaterSensorState();
    47da:	4b0b      	ldr	r3, [pc, #44]	; (4808 <waterStatusOnCall+0x30>)
{
    47dc:	0004      	movs	r4, r0
	uint8_t temp = getWaterSensorState();
    47de:	4798      	blx	r3
	if(current)
    47e0:	2c00      	cmp	r4, #0
    47e2:	d001      	beq.n	47e8 <waterStatusOnCall+0x10>
	temp = undergroundLevel;
    47e4:	4b09      	ldr	r3, [pc, #36]	; (480c <waterStatusOnCall+0x34>)
    47e6:	7818      	ldrb	r0, [r3, #0]
	if(temp==CRITICALLEVEL)
    47e8:	2800      	cmp	r0, #0
    47ea:	d103      	bne.n	47f4 <waterStatusOnCall+0x1c>
		setMotorMGRResponse('T');	//water level insufficient
    47ec:	3054      	adds	r0, #84	; 0x54
		setMotorMGRResponse('E');	//well is full
    47ee:	4b08      	ldr	r3, [pc, #32]	; (4810 <waterStatusOnCall+0x38>)
    47f0:	4798      	blx	r3
}
    47f2:	bd10      	pop	{r4, pc}
	else if(temp==LOWLEVEL)
    47f4:	2801      	cmp	r0, #1
    47f6:	d101      	bne.n	47fc <waterStatusOnCall+0x24>
		setMotorMGRResponse('R');	//water below 1st sensor
    47f8:	3050      	adds	r0, #80	; 0x50
    47fa:	e7f8      	b.n	47ee <waterStatusOnCall+0x16>
	else if(temp==MIDLEVEL)
    47fc:	2802      	cmp	r0, #2
    47fe:	d0fb      	beq.n	47f8 <waterStatusOnCall+0x20>
	else if(temp==HIGHLEVEL)
    4800:	2803      	cmp	r0, #3
    4802:	d1f6      	bne.n	47f2 <waterStatusOnCall+0x1a>
		setMotorMGRResponse('E');	//well is full
    4804:	3042      	adds	r0, #66	; 0x42
    4806:	e7f2      	b.n	47ee <waterStatusOnCall+0x16>
    4808:	000047a5 	.word	0x000047a5
    480c:	20000725 	.word	0x20000725
    4810:	00002a1d 	.word	0x00002a1d

00004814 <Configure_ADC0>:
{
    4814:	b510      	push	{r4, lr}
    4816:	b08c      	sub	sp, #48	; 0x30
	adc_get_config_defaults(&config);
    4818:	4668      	mov	r0, sp
    481a:	4b17      	ldr	r3, [pc, #92]	; (4878 <Configure_ADC0+0x64>)
    481c:	4798      	blx	r3
	config.positive_input = ADC_POSITIVE_INPUT_PIN19;
    481e:	466a      	mov	r2, sp
    4820:	2313      	movs	r3, #19
    4822:	7313      	strb	r3, [r2, #12]
	config.negative_input = ADC_NEGATIVE_INPUT_GND;
    4824:	23c0      	movs	r3, #192	; 0xc0
    4826:	015b      	lsls	r3, r3, #5
    4828:	81d3      	strh	r3, [r2, #14]
	config.reference      = ADC_REFERENCE_AREFA;//ADC_REFERENCE_INT1V;
    482a:	2303      	movs	r3, #3
    482c:	7053      	strb	r3, [r2, #1]
	config.clock_source   = GCLK_GENERATOR_3;
    482e:	7013      	strb	r3, [r2, #0]
	config.gain_factor    = ADC_GAIN_FACTOR_1X;
    4830:	2300      	movs	r3, #0
    4832:	9302      	str	r3, [sp, #8]
	config.resolution	= ADC_RESOLUTION_12BIT;
    4834:	7113      	strb	r3, [r2, #4]
	config.clock_prescaler = ADC_CLOCK_PRESCALER_DIV64; //125kHz adc clock (8MHz/64)
    4836:	2380      	movs	r3, #128	; 0x80
    4838:	00db      	lsls	r3, r3, #3
    483a:	8053      	strh	r3, [r2, #2]
	config.run_in_standby = true;
    483c:	2301      	movs	r3, #1
	adc_init(&adc_inst, ADC, &config);// Initialize the ADC
    483e:	4c0f      	ldr	r4, [pc, #60]	; (487c <Configure_ADC0+0x68>)
	config.run_in_standby = true;
    4840:	7553      	strb	r3, [r2, #21]
	adc_init(&adc_inst, ADC, &config);// Initialize the ADC
    4842:	490f      	ldr	r1, [pc, #60]	; (4880 <Configure_ADC0+0x6c>)
    4844:	4b0f      	ldr	r3, [pc, #60]	; (4884 <Configure_ADC0+0x70>)
    4846:	0020      	movs	r0, r4
    4848:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    484a:	6823      	ldr	r3, [r4, #0]
    484c:	7e5a      	ldrb	r2, [r3, #25]
    484e:	b252      	sxtb	r2, r2
    4850:	2a00      	cmp	r2, #0
    4852:	dbfb      	blt.n	484c <Configure_ADC0+0x38>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4854:	2180      	movs	r1, #128	; 0x80
    4856:	4a0c      	ldr	r2, [pc, #48]	; (4888 <Configure_ADC0+0x74>)
    4858:	0409      	lsls	r1, r1, #16
    485a:	6011      	str	r1, [r2, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    485c:	220f      	movs	r2, #15
    485e:	759a      	strb	r2, [r3, #22]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    4860:	761a      	strb	r2, [r3, #24]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    4862:	7819      	ldrb	r1, [r3, #0]
    4864:	3a0d      	subs	r2, #13
    4866:	430a      	orrs	r2, r1
    4868:	701a      	strb	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    486a:	6822      	ldr	r2, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    486c:	7e53      	ldrb	r3, [r2, #25]
    486e:	b25b      	sxtb	r3, r3
    4870:	2b00      	cmp	r3, #0
    4872:	dbfb      	blt.n	486c <Configure_ADC0+0x58>
}
    4874:	b00c      	add	sp, #48	; 0x30
    4876:	bd10      	pop	{r4, pc}
    4878:	00006439 	.word	0x00006439
    487c:	20000700 	.word	0x20000700
    4880:	42004000 	.word	0x42004000
    4884:	0000647d 	.word	0x0000647d
    4888:	e000e100 	.word	0xe000e100

0000488c <Read_ADC0>:
{
    488c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
    488e:	2400      	movs	r4, #0
	uint32_t total_value = 0;
    4890:	0025      	movs	r5, r4
{
    4892:	b085      	sub	sp, #20
	adc_set_positive_input(&adc_inst, adc_pin);
    4894:	4b11      	ldr	r3, [pc, #68]	; (48dc <Read_ADC0+0x50>)
    4896:	b2c0      	uxtb	r0, r0
{
    4898:	9101      	str	r1, [sp, #4]
	adc_set_positive_input(&adc_inst, adc_pin);
    489a:	4798      	blx	r3
	uint16_t current_value = 0;
    489c:	ab02      	add	r3, sp, #8
    489e:	1d9e      	adds	r6, r3, #6
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
    48a0:	9b01      	ldr	r3, [sp, #4]
    48a2:	429c      	cmp	r4, r3
    48a4:	d105      	bne.n	48b2 <Read_ADC0+0x26>
	return (total_value/samples);
    48a6:	0021      	movs	r1, r4
    48a8:	0028      	movs	r0, r5
    48aa:	4b0d      	ldr	r3, [pc, #52]	; (48e0 <Read_ADC0+0x54>)
    48ac:	4798      	blx	r3
}
    48ae:	b005      	add	sp, #20
    48b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		current_value = 0;
    48b2:	2300      	movs	r3, #0
    48b4:	8033      	strh	r3, [r6, #0]
		adc_start_conversion(&adc_inst);
    48b6:	4b0b      	ldr	r3, [pc, #44]	; (48e4 <Read_ADC0+0x58>)
    48b8:	4798      	blx	r3
		while((adc_get_status(&adc_inst) & ADC_STATUS_RESULT_READY) != 1);
    48ba:	4f0b      	ldr	r7, [pc, #44]	; (48e8 <Read_ADC0+0x5c>)
    48bc:	47b8      	blx	r7
    48be:	2301      	movs	r3, #1
    48c0:	4218      	tst	r0, r3
    48c2:	d0fa      	beq.n	48ba <Read_ADC0+0x2e>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    48c4:	47b8      	blx	r7
    48c6:	2301      	movs	r3, #1
    48c8:	4218      	tst	r0, r3
    48ca:	d002      	beq.n	48d2 <Read_ADC0+0x46>
    48cc:	0030      	movs	r0, r6
    48ce:	4b07      	ldr	r3, [pc, #28]	; (48ec <Read_ADC0+0x60>)
    48d0:	4798      	blx	r3
		total_value+=current_value;
    48d2:	8833      	ldrh	r3, [r6, #0]
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
    48d4:	3401      	adds	r4, #1
		total_value+=current_value;
    48d6:	18ed      	adds	r5, r5, r3
	for (uint16_t uintLoop=0;uintLoop<samples;uintLoop++)
    48d8:	b2a4      	uxth	r4, r4
    48da:	e7e1      	b.n	48a0 <Read_ADC0+0x14>
    48dc:	000045a1 	.word	0x000045a1
    48e0:	0000a2c9 	.word	0x0000a2c9
    48e4:	0000457d 	.word	0x0000457d
    48e8:	00004501 	.word	0x00004501
    48ec:	00004525 	.word	0x00004525

000048f0 <Read_Voltage_ADC0>:
{
    48f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	adc_set_positive_input(&adc_inst, adc_pin);
    48f2:	4b1a      	ldr	r3, [pc, #104]	; (495c <Read_Voltage_ADC0+0x6c>)
{
    48f4:	af00      	add	r7, sp, #0
	adc_set_positive_input(&adc_inst, adc_pin);
    48f6:	b2c0      	uxtb	r0, r0
    48f8:	4798      	blx	r3
	uint16_t samples_buffer[no_of_samples];
    48fa:	4b19      	ldr	r3, [pc, #100]	; (4960 <Read_Voltage_ADC0+0x70>)
    48fc:	449d      	add	sp, r3
    48fe:	23fa      	movs	r3, #250	; 0xfa
    4900:	466c      	mov	r4, sp
    4902:	466d      	mov	r5, sp
    4904:	466e      	mov	r6, sp
    4906:	009b      	lsls	r3, r3, #2
    4908:	18e3      	adds	r3, r4, r3
    490a:	607b      	str	r3, [r7, #4]
		adc_start_conversion(&adc_inst);
    490c:	4b15      	ldr	r3, [pc, #84]	; (4964 <Read_Voltage_ADC0+0x74>)
    490e:	4798      	blx	r3
    4910:	4b15      	ldr	r3, [pc, #84]	; (4968 <Read_Voltage_ADC0+0x78>)
    4912:	4798      	blx	r3
    4914:	2301      	movs	r3, #1
    4916:	4218      	tst	r0, r3
    4918:	d0fa      	beq.n	4910 <Read_Voltage_ADC0+0x20>
    491a:	0030      	movs	r0, r6
    491c:	4b13      	ldr	r3, [pc, #76]	; (496c <Read_Voltage_ADC0+0x7c>)
    491e:	4798      	blx	r3
		while (adc_read(&adc_inst, &samples_buffer[i]) != STATUS_OK) {
    4920:	2800      	cmp	r0, #0
    4922:	d1f5      	bne.n	4910 <Read_Voltage_ADC0+0x20>
	for (uint16_t i=0;i<no_of_samples;i++)
    4924:	687b      	ldr	r3, [r7, #4]
    4926:	3602      	adds	r6, #2
    4928:	429e      	cmp	r6, r3
    492a:	d1ef      	bne.n	490c <Read_Voltage_ADC0+0x1c>
		for (c = b + 1; c < no_of_samples; ++c)
    492c:	3001      	adds	r0, #1
    492e:	b280      	uxth	r0, r0
    4930:	0003      	movs	r3, r0
    4932:	22fa      	movs	r2, #250	; 0xfa
    4934:	0052      	lsls	r2, r2, #1
    4936:	4293      	cmp	r3, r2
    4938:	d105      	bne.n	4946 <Read_Voltage_ADC0+0x56>
    493a:	3502      	adds	r5, #2
	for (b = 0; b < no_of_samples; ++b)
    493c:	4298      	cmp	r0, r3
    493e:	d1f5      	bne.n	492c <Read_Voltage_ADC0+0x3c>
}
    4940:	46bd      	mov	sp, r7
	return samples_buffer[5]; //0,1,2,3,4 are considered as voltage spikes
    4942:	8960      	ldrh	r0, [r4, #10]
}
    4944:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4946:	005a      	lsls	r2, r3, #1
    4948:	18a2      	adds	r2, r4, r2
			if (samples_buffer[b] < samples_buffer[c])
    494a:	8829      	ldrh	r1, [r5, #0]
    494c:	8816      	ldrh	r6, [r2, #0]
    494e:	42b1      	cmp	r1, r6
    4950:	d201      	bcs.n	4956 <Read_Voltage_ADC0+0x66>
				samples_buffer[b] = samples_buffer[c];
    4952:	802e      	strh	r6, [r5, #0]
				samples_buffer[c] = a;
    4954:	8011      	strh	r1, [r2, #0]
		for (c = b + 1; c < no_of_samples; ++c)
    4956:	3301      	adds	r3, #1
    4958:	b29b      	uxth	r3, r3
    495a:	e7ea      	b.n	4932 <Read_Voltage_ADC0+0x42>
    495c:	000045a1 	.word	0x000045a1
    4960:	fffffc10 	.word	0xfffffc10
    4964:	0000457d 	.word	0x0000457d
    4968:	00004501 	.word	0x00004501
    496c:	00004525 	.word	0x00004525

00004970 <autoSetCurrent>:
{
    4970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return mFeedback;
    4972:	4b1c      	ldr	r3, [pc, #112]	; (49e4 <autoSetCurrent+0x74>)
    4974:	4f1c      	ldr	r7, [pc, #112]	; (49e8 <autoSetCurrent+0x78>)
    4976:	781b      	ldrb	r3, [r3, #0]
	if(getMotorState() && !startSequenceOn && !starDeltaTimerOn && !stopSequenceOn && getAllPhaseState())
    4978:	2b00      	cmp	r3, #0
    497a:	d013      	beq.n	49a4 <autoSetCurrent+0x34>
    497c:	4b1b      	ldr	r3, [pc, #108]	; (49ec <autoSetCurrent+0x7c>)
    497e:	781b      	ldrb	r3, [r3, #0]
    4980:	2b00      	cmp	r3, #0
    4982:	d10f      	bne.n	49a4 <autoSetCurrent+0x34>
    4984:	4b1a      	ldr	r3, [pc, #104]	; (49f0 <autoSetCurrent+0x80>)
    4986:	781b      	ldrb	r3, [r3, #0]
    4988:	2b00      	cmp	r3, #0
    498a:	d10b      	bne.n	49a4 <autoSetCurrent+0x34>
    498c:	4b19      	ldr	r3, [pc, #100]	; (49f4 <autoSetCurrent+0x84>)
    498e:	781b      	ldrb	r3, [r3, #0]
    4990:	2b00      	cmp	r3, #0
    4992:	d107      	bne.n	49a4 <autoSetCurrent+0x34>
	return allPhase;
    4994:	4b18      	ldr	r3, [pc, #96]	; (49f8 <autoSetCurrent+0x88>)
    4996:	781b      	ldrb	r3, [r3, #0]
	if(getMotorState() && !startSequenceOn && !starDeltaTimerOn && !stopSequenceOn && getAllPhaseState())
    4998:	2b00      	cmp	r3, #0
    499a:	d003      	beq.n	49a4 <autoSetCurrent+0x34>
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current;
    499c:	4b17      	ldr	r3, [pc, #92]	; (49fc <autoSetCurrent+0x8c>)
    499e:	691c      	ldr	r4, [r3, #16]
		if(ADCcurrent<250)     //ADC VALUE FOR 2.5A
    49a0:	2cf9      	cmp	r4, #249	; 0xf9
    49a2:	d805      	bhi.n	49b0 <autoSetCurrent+0x40>
			setCurrentDetection(false);
    49a4:	2000      	movs	r0, #0
    49a6:	4b16      	ldr	r3, [pc, #88]	; (4a00 <autoSetCurrent+0x90>)
    49a8:	4798      	blx	r3
			setMotorMGRResponse('Y');		//ampere cleared
    49aa:	2059      	movs	r0, #89	; 0x59
		setMotorMGRResponse('K');		//ampere settings complete
    49ac:	47b8      	blx	r7
}
    49ae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		uint32_t tempUnder = ADCcurrent  * user_settings_parameter_struct.underloadPerAddress / 100;
    49b0:	4e14      	ldr	r6, [pc, #80]	; (4a04 <autoSetCurrent+0x94>)
    49b2:	4d15      	ldr	r5, [pc, #84]	; (4a08 <autoSetCurrent+0x98>)
    49b4:	7f30      	ldrb	r0, [r6, #28]
    49b6:	2164      	movs	r1, #100	; 0x64
    49b8:	4360      	muls	r0, r4
    49ba:	47a8      	blx	r5
    49bc:	9001      	str	r0, [sp, #4]
		uint32_t tempOver = ADCcurrent  * user_settings_parameter_struct.overloadPerAddress / 100;
    49be:	7f70      	ldrb	r0, [r6, #29]
    49c0:	2164      	movs	r1, #100	; 0x64
    49c2:	4360      	muls	r0, r4
    49c4:	47a8      	blx	r5
    49c6:	0005      	movs	r5, r0
		setNormalLoadValue(ADCcurrent);
    49c8:	4b10      	ldr	r3, [pc, #64]	; (4a0c <autoSetCurrent+0x9c>)
    49ca:	0020      	movs	r0, r4
    49cc:	4798      	blx	r3
		setUnderloadValue(tempUnder);
    49ce:	9801      	ldr	r0, [sp, #4]
    49d0:	4b0f      	ldr	r3, [pc, #60]	; (4a10 <autoSetCurrent+0xa0>)
    49d2:	4798      	blx	r3
		setOverloadValue(tempOver);
    49d4:	0028      	movs	r0, r5
    49d6:	4b0f      	ldr	r3, [pc, #60]	; (4a14 <autoSetCurrent+0xa4>)
    49d8:	4798      	blx	r3
		setCurrentDetection(true);
    49da:	2001      	movs	r0, #1
    49dc:	4b08      	ldr	r3, [pc, #32]	; (4a00 <autoSetCurrent+0x90>)
    49de:	4798      	blx	r3
		setMotorMGRResponse('K');		//ampere settings complete
    49e0:	204b      	movs	r0, #75	; 0x4b
    49e2:	e7e3      	b.n	49ac <autoSetCurrent+0x3c>
    49e4:	20000666 	.word	0x20000666
    49e8:	00002a1d 	.word	0x00002a1d
    49ec:	200006a5 	.word	0x200006a5
    49f0:	200006a7 	.word	0x200006a7
    49f4:	20000695 	.word	0x20000695
    49f8:	20000674 	.word	0x20000674
    49fc:	2000062c 	.word	0x2000062c
    4a00:	00000f35 	.word	0x00000f35
    4a04:	200005b0 	.word	0x200005b0
    4a08:	0000a2c9 	.word	0x0000a2c9
    4a0c:	00000f01 	.word	0x00000f01
    4a10:	00000d85 	.word	0x00000d85
    4a14:	00000db9 	.word	0x00000db9

00004a18 <speakAmpere>:
{
    4a18:	b507      	push	{r0, r1, r2, lr}
	return mFeedback;
    4a1a:	4b09      	ldr	r3, [pc, #36]	; (4a40 <speakAmpere+0x28>)
    4a1c:	781b      	ldrb	r3, [r3, #0]
	if(getMotorState())
    4a1e:	2b00      	cmp	r3, #0
    4a20:	d00a      	beq.n	4a38 <speakAmpere+0x20>
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
    4a22:	4b08      	ldr	r3, [pc, #32]	; (4a44 <speakAmpere+0x2c>)
		utoa(ADCcurrent, cTemp, 10);
    4a24:	220a      	movs	r2, #10
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
    4a26:	8a98      	ldrh	r0, [r3, #20]
		utoa(ADCcurrent, cTemp, 10);
    4a28:	4669      	mov	r1, sp
    4a2a:	4b07      	ldr	r3, [pc, #28]	; (4a48 <speakAmpere+0x30>)
		uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current_IntPart;
    4a2c:	b280      	uxth	r0, r0
		utoa(ADCcurrent, cTemp, 10);
    4a2e:	4798      	blx	r3
		playRepeatedFiles(cTemp);
    4a30:	4668      	mov	r0, sp
    4a32:	4b06      	ldr	r3, [pc, #24]	; (4a4c <speakAmpere+0x34>)
    4a34:	4798      	blx	r3
}
    4a36:	bd07      	pop	{r0, r1, r2, pc}
	setMotorMGRResponse('-');
    4a38:	202d      	movs	r0, #45	; 0x2d
    4a3a:	4b05      	ldr	r3, [pc, #20]	; (4a50 <speakAmpere+0x38>)
    4a3c:	4798      	blx	r3
    4a3e:	e7fa      	b.n	4a36 <speakAmpere+0x1e>
    4a40:	20000666 	.word	0x20000666
    4a44:	2000062c 	.word	0x2000062c
    4a48:	0000c93d 	.word	0x0000c93d
    4a4c:	000028bd 	.word	0x000028bd
    4a50:	00002a1d 	.word	0x00002a1d

00004a54 <detect_battery_voltage_and_percentage>:
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
    4a54:	2101      	movs	r1, #1
{
    4a56:	b570      	push	{r4, r5, r6, lr}
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
    4a58:	4d1b      	ldr	r5, [pc, #108]	; (4ac8 <detect_battery_voltage_and_percentage+0x74>)
    4a5a:	4249      	negs	r1, r1
    4a5c:	6828      	ldr	r0, [r5, #0]
    4a5e:	4b1b      	ldr	r3, [pc, #108]	; (4acc <detect_battery_voltage_and_percentage+0x78>)
    4a60:	4798      	blx	r3
    4a62:	2801      	cmp	r0, #1
    4a64:	d12e      	bne.n	4ac4 <detect_battery_voltage_and_percentage+0x70>
		uint32_t bat_v = Read_ADC0(ADC_POSITIVE_INPUT_PIN7,200);
    4a66:	21c8      	movs	r1, #200	; 0xc8
    4a68:	4b19      	ldr	r3, [pc, #100]	; (4ad0 <detect_battery_voltage_and_percentage+0x7c>)
    4a6a:	3006      	adds	r0, #6
    4a6c:	4798      	blx	r3
		Analog_Parameter_Struct.Battery_Voltage = (bat_v * 1457)/1000;
    4a6e:	21fa      	movs	r1, #250	; 0xfa
    4a70:	4b18      	ldr	r3, [pc, #96]	; (4ad4 <detect_battery_voltage_and_percentage+0x80>)
    4a72:	0089      	lsls	r1, r1, #2
    4a74:	4358      	muls	r0, r3
    4a76:	4b18      	ldr	r3, [pc, #96]	; (4ad8 <detect_battery_voltage_and_percentage+0x84>)
    4a78:	4798      	blx	r3
    4a7a:	4c18      	ldr	r4, [pc, #96]	; (4adc <detect_battery_voltage_and_percentage+0x88>)
		if (Analog_Parameter_Struct.Battery_Voltage <= 3300)
    4a7c:	4b18      	ldr	r3, [pc, #96]	; (4ae0 <detect_battery_voltage_and_percentage+0x8c>)
		Analog_Parameter_Struct.Battery_Voltage = (bat_v * 1457)/1000;
    4a7e:	61a0      	str	r0, [r4, #24]
		if (Analog_Parameter_Struct.Battery_Voltage <= 3300)
    4a80:	69a2      	ldr	r2, [r4, #24]
			bat_per = 0;
    4a82:	2000      	movs	r0, #0
		if (Analog_Parameter_Struct.Battery_Voltage <= 3300)
    4a84:	429a      	cmp	r2, r3
    4a86:	d916      	bls.n	4ab6 <detect_battery_voltage_and_percentage+0x62>
			bat_per = ((((float)Analog_Parameter_Struct.Battery_Voltage/1000)-3.3)*100)/0.9;
    4a88:	4b16      	ldr	r3, [pc, #88]	; (4ae4 <detect_battery_voltage_and_percentage+0x90>)
    4a8a:	69a0      	ldr	r0, [r4, #24]
    4a8c:	4798      	blx	r3
    4a8e:	4916      	ldr	r1, [pc, #88]	; (4ae8 <detect_battery_voltage_and_percentage+0x94>)
    4a90:	4b16      	ldr	r3, [pc, #88]	; (4aec <detect_battery_voltage_and_percentage+0x98>)
    4a92:	4798      	blx	r3
    4a94:	4b16      	ldr	r3, [pc, #88]	; (4af0 <detect_battery_voltage_and_percentage+0x9c>)
    4a96:	4798      	blx	r3
    4a98:	4a16      	ldr	r2, [pc, #88]	; (4af4 <detect_battery_voltage_and_percentage+0xa0>)
    4a9a:	4b17      	ldr	r3, [pc, #92]	; (4af8 <detect_battery_voltage_and_percentage+0xa4>)
    4a9c:	4e17      	ldr	r6, [pc, #92]	; (4afc <detect_battery_voltage_and_percentage+0xa8>)
    4a9e:	47b0      	blx	r6
    4aa0:	2200      	movs	r2, #0
    4aa2:	4b17      	ldr	r3, [pc, #92]	; (4b00 <detect_battery_voltage_and_percentage+0xac>)
    4aa4:	4e17      	ldr	r6, [pc, #92]	; (4b04 <detect_battery_voltage_and_percentage+0xb0>)
    4aa6:	47b0      	blx	r6
    4aa8:	4a17      	ldr	r2, [pc, #92]	; (4b08 <detect_battery_voltage_and_percentage+0xb4>)
    4aaa:	4b18      	ldr	r3, [pc, #96]	; (4b0c <detect_battery_voltage_and_percentage+0xb8>)
    4aac:	4e18      	ldr	r6, [pc, #96]	; (4b10 <detect_battery_voltage_and_percentage+0xbc>)
    4aae:	47b0      	blx	r6
    4ab0:	4b18      	ldr	r3, [pc, #96]	; (4b14 <detect_battery_voltage_and_percentage+0xc0>)
    4ab2:	4798      	blx	r3
    4ab4:	b2c0      	uxtb	r0, r0
		xSemaphoreGive(xADC_Semaphore);
    4ab6:	2300      	movs	r3, #0
		Analog_Parameter_Struct.Battery_percentage = bat_per;
    4ab8:	7720      	strb	r0, [r4, #28]
		xSemaphoreGive(xADC_Semaphore);
    4aba:	001a      	movs	r2, r3
    4abc:	0019      	movs	r1, r3
    4abe:	6828      	ldr	r0, [r5, #0]
    4ac0:	4c15      	ldr	r4, [pc, #84]	; (4b18 <detect_battery_voltage_and_percentage+0xc4>)
    4ac2:	47a0      	blx	r4
}
    4ac4:	bd70      	pop	{r4, r5, r6, pc}
    4ac6:	46c0      	nop			; (mov r8, r8)
    4ac8:	20000238 	.word	0x20000238
    4acc:	00007825 	.word	0x00007825
    4ad0:	0000488d 	.word	0x0000488d
    4ad4:	000005b1 	.word	0x000005b1
    4ad8:	0000a2c9 	.word	0x0000a2c9
    4adc:	2000062c 	.word	0x2000062c
    4ae0:	00000ce4 	.word	0x00000ce4
    4ae4:	0000ad69 	.word	0x0000ad69
    4ae8:	447a0000 	.word	0x447a0000
    4aec:	0000a899 	.word	0x0000a899
    4af0:	0000c1f1 	.word	0x0000c1f1
    4af4:	66666666 	.word	0x66666666
    4af8:	400a6666 	.word	0x400a6666
    4afc:	0000bb5d 	.word	0x0000bb5d
    4b00:	40590000 	.word	0x40590000
    4b04:	0000b65d 	.word	0x0000b65d
    4b08:	cccccccd 	.word	0xcccccccd
    4b0c:	3feccccc 	.word	0x3feccccc
    4b10:	0000adf5 	.word	0x0000adf5
    4b14:	0000a6dd 	.word	0x0000a6dd
    4b18:	000074e5 	.word	0x000074e5

00004b1c <set_Three_Phase_State_From_Voltage>:
void set_Three_Phase_State_From_Voltage(void) {
    4b1c:	b530      	push	{r4, r5, lr}
	uint8_t temp_phase_state = structThreePhase_state.u8t_phase_ac_state;		//save last AC Phase State, in case AC Phase State is going to change
    4b1e:	4a1d      	ldr	r2, [pc, #116]	; (4b94 <set_Three_Phase_State_From_Voltage+0x78>)
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 40) &&
    4b20:	4b1d      	ldr	r3, [pc, #116]	; (4b98 <set_Three_Phase_State_From_Voltage+0x7c>)
	uint8_t temp_phase_state = structThreePhase_state.u8t_phase_ac_state;		//save last AC Phase State, in case AC Phase State is going to change
    4b22:	7850      	ldrb	r0, [r2, #1]
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 40) &&
    4b24:	6819      	ldr	r1, [r3, #0]
	uint8_t temp_phase_state = structThreePhase_state.u8t_phase_ac_state;		//save last AC Phase State, in case AC Phase State is going to change
    4b26:	b2c0      	uxtb	r0, r0
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 40) &&
    4b28:	2927      	cmp	r1, #39	; 0x27
    4b2a:	d815      	bhi.n	4b58 <set_Three_Phase_State_From_Voltage+0x3c>
	(Analog_Parameter_Struct.PhaseYB_Voltage < 40) &&
    4b2c:	6859      	ldr	r1, [r3, #4]
	if ((Analog_Parameter_Struct.PhaseRY_Voltage < 40) &&
    4b2e:	2927      	cmp	r1, #39	; 0x27
    4b30:	d812      	bhi.n	4b58 <set_Three_Phase_State_From_Voltage+0x3c>
	(Analog_Parameter_Struct.PhaseBR_Voltage < 40))				// if All phase volt, less than 40
    4b32:	6899      	ldr	r1, [r3, #8]
	(Analog_Parameter_Struct.PhaseYB_Voltage < 40) &&
    4b34:	2927      	cmp	r1, #39	; 0x27
    4b36:	d80f      	bhi.n	4b58 <set_Three_Phase_State_From_Voltage+0x3c>
		structThreePhase_state.u8t_phase_ac_state = AC_OFF; //no phase is present, light is cut off
    4b38:	2300      	movs	r3, #0
	if (current_three_phase_state != structThreePhase_state.u8t_phase_ac_state)
    4b3a:	4918      	ldr	r1, [pc, #96]	; (4b9c <set_Three_Phase_State_From_Voltage+0x80>)
		structThreePhase_state.u8t_phase_ac_state = AC_3PH;
    4b3c:	7053      	strb	r3, [r2, #1]
	if (current_three_phase_state != structThreePhase_state.u8t_phase_ac_state)
    4b3e:	7854      	ldrb	r4, [r2, #1]
    4b40:	780b      	ldrb	r3, [r1, #0]
    4b42:	429c      	cmp	r4, r3
    4b44:	d007      	beq.n	4b56 <set_Three_Phase_State_From_Voltage+0x3a>
		last_three_phase_state  = 	temp_phase_state;								//assign saved temp AC Phase State to last_three_phase_state
    4b46:	4b16      	ldr	r3, [pc, #88]	; (4ba0 <set_Three_Phase_State_From_Voltage+0x84>)
    4b48:	7018      	strb	r0, [r3, #0]
		current_three_phase_state = structThreePhase_state.u8t_phase_ac_state;
    4b4a:	7853      	ldrb	r3, [r2, #1]
		eventOccured = true;
    4b4c:	2201      	movs	r2, #1
		current_three_phase_state = structThreePhase_state.u8t_phase_ac_state;
    4b4e:	b2db      	uxtb	r3, r3
    4b50:	700b      	strb	r3, [r1, #0]
		eventOccured = true;
    4b52:	4b14      	ldr	r3, [pc, #80]	; (4ba4 <set_Three_Phase_State_From_Voltage+0x88>)
    4b54:	701a      	strb	r2, [r3, #0]
}
    4b56:	bd30      	pop	{r4, r5, pc}
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
    4b58:	6819      	ldr	r1, [r3, #0]
    4b5a:	685d      	ldr	r5, [r3, #4]
    4b5c:	4c12      	ldr	r4, [pc, #72]	; (4ba8 <set_Three_Phase_State_From_Voltage+0x8c>)
    4b5e:	1b49      	subs	r1, r1, r5
    4b60:	17cd      	asrs	r5, r1, #31
    4b62:	8ce4      	ldrh	r4, [r4, #38]	; 0x26
    4b64:	1949      	adds	r1, r1, r5
    4b66:	4069      	eors	r1, r5
    4b68:	42a1      	cmp	r1, r4
    4b6a:	dc0f      	bgt.n	4b8c <set_Three_Phase_State_From_Voltage+0x70>
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
    4b6c:	6859      	ldr	r1, [r3, #4]
    4b6e:	689d      	ldr	r5, [r3, #8]
    4b70:	1b49      	subs	r1, r1, r5
    4b72:	17cd      	asrs	r5, r1, #31
    4b74:	1949      	adds	r1, r1, r5
    4b76:	4069      	eors	r1, r5
	else if((abs(Analog_Parameter_Struct.PhaseRY_Voltage-Analog_Parameter_Struct.PhaseYB_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
    4b78:	428c      	cmp	r4, r1
    4b7a:	db07      	blt.n	4b8c <set_Three_Phase_State_From_Voltage+0x70>
	(abs(Analog_Parameter_Struct.PhaseBR_Voltage-Analog_Parameter_Struct.PhaseRY_Voltage)>user_settings_parameter_struct.singlePhasingVoltage))  // if diff betweeen any 2 phases > 80
    4b7c:	6899      	ldr	r1, [r3, #8]
    4b7e:	681b      	ldr	r3, [r3, #0]
    4b80:	1acb      	subs	r3, r1, r3
    4b82:	17d9      	asrs	r1, r3, #31
    4b84:	185b      	adds	r3, r3, r1
    4b86:	404b      	eors	r3, r1
	(abs(Analog_Parameter_Struct.PhaseYB_Voltage-Analog_Parameter_Struct.PhaseBR_Voltage)>user_settings_parameter_struct.singlePhasingVoltage) ||
    4b88:	429c      	cmp	r4, r3
    4b8a:	da01      	bge.n	4b90 <set_Three_Phase_State_From_Voltage+0x74>
		structThreePhase_state.u8t_phase_ac_state = AC_2PH;//Single phasing Occured
    4b8c:	2302      	movs	r3, #2
    4b8e:	e7d4      	b.n	4b3a <set_Three_Phase_State_From_Voltage+0x1e>
		structThreePhase_state.u8t_phase_ac_state = AC_3PH;
    4b90:	2303      	movs	r3, #3
    4b92:	e7d2      	b.n	4b3a <set_Three_Phase_State_From_Voltage+0x1e>
    4b94:	20000669 	.word	0x20000669
    4b98:	2000062c 	.word	0x2000062c
    4b9c:	20000724 	.word	0x20000724
    4ba0:	20000660 	.word	0x20000660
    4ba4:	20000663 	.word	0x20000663
    4ba8:	200005b0 	.word	0x200005b0

00004bac <detect_Three_Phase_Voltage>:
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
    4bac:	2101      	movs	r1, #1
void detect_Three_Phase_Voltage(void) {
    4bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
    4bb0:	4e23      	ldr	r6, [pc, #140]	; (4c40 <detect_Three_Phase_Voltage+0x94>)
    4bb2:	4249      	negs	r1, r1
    4bb4:	6830      	ldr	r0, [r6, #0]
    4bb6:	4b23      	ldr	r3, [pc, #140]	; (4c44 <detect_Three_Phase_Voltage+0x98>)
    4bb8:	4798      	blx	r3
    4bba:	2801      	cmp	r0, #1
    4bbc:	d13f      	bne.n	4c3e <detect_Three_Phase_Voltage+0x92>
		int32_t adcRY = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN19);
    4bbe:	3012      	adds	r0, #18
    4bc0:	4f21      	ldr	r7, [pc, #132]	; (4c48 <detect_Three_Phase_Voltage+0x9c>)
    4bc2:	47b8      	blx	r7
			adcRY = 0;
    4bc4:	2500      	movs	r5, #0
		if (adcRY<0)
    4bc6:	2809      	cmp	r0, #9
    4bc8:	dd0b      	ble.n	4be2 <detect_Three_Phase_Voltage+0x36>
			adcRY = (((adcRY-10)*330)/1000);
    4bca:	23a5      	movs	r3, #165	; 0xa5
    4bcc:	21fa      	movs	r1, #250	; 0xfa
    4bce:	005b      	lsls	r3, r3, #1
    4bd0:	3814      	subs	r0, #20
    4bd2:	4358      	muls	r0, r3
    4bd4:	0089      	lsls	r1, r1, #2
    4bd6:	4b1d      	ldr	r3, [pc, #116]	; (4c4c <detect_Three_Phase_Voltage+0xa0>)
    4bd8:	4798      	blx	r3
    4bda:	43c3      	mvns	r3, r0
    4bdc:	0005      	movs	r5, r0
    4bde:	17db      	asrs	r3, r3, #31
    4be0:	401d      	ands	r5, r3
		int32_t adcYB = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN18);
    4be2:	2012      	movs	r0, #18
    4be4:	47b8      	blx	r7
			adcYB = 0;
    4be6:	2400      	movs	r4, #0
		if (adcYB<0)
    4be8:	2809      	cmp	r0, #9
    4bea:	dd0b      	ble.n	4c04 <detect_Three_Phase_Voltage+0x58>
			adcYB = (((adcYB-10)*320)/1000);
    4bec:	23a0      	movs	r3, #160	; 0xa0
    4bee:	21fa      	movs	r1, #250	; 0xfa
    4bf0:	005b      	lsls	r3, r3, #1
    4bf2:	3814      	subs	r0, #20
    4bf4:	4358      	muls	r0, r3
    4bf6:	0089      	lsls	r1, r1, #2
    4bf8:	4b14      	ldr	r3, [pc, #80]	; (4c4c <detect_Three_Phase_Voltage+0xa0>)
    4bfa:	4798      	blx	r3
    4bfc:	43c3      	mvns	r3, r0
    4bfe:	0004      	movs	r4, r0
    4c00:	17db      	asrs	r3, r3, #31
    4c02:	401c      	ands	r4, r3
		int32_t adcBR = Read_Voltage_ADC0(ADC_POSITIVE_INPUT_PIN17);
    4c04:	2011      	movs	r0, #17
    4c06:	47b8      	blx	r7
			adcBR = 0;
    4c08:	2300      	movs	r3, #0
		if (adcBR<0)
    4c0a:	280b      	cmp	r0, #11
    4c0c:	dd0b      	ble.n	4c26 <detect_Three_Phase_Voltage+0x7a>
			adcBR = (((adcBR-12)*325)/1000);
    4c0e:	2346      	movs	r3, #70	; 0x46
    4c10:	21fa      	movs	r1, #250	; 0xfa
    4c12:	33ff      	adds	r3, #255	; 0xff
    4c14:	3818      	subs	r0, #24
    4c16:	4358      	muls	r0, r3
    4c18:	0089      	lsls	r1, r1, #2
    4c1a:	4b0c      	ldr	r3, [pc, #48]	; (4c4c <detect_Three_Phase_Voltage+0xa0>)
    4c1c:	4798      	blx	r3
    4c1e:	43c2      	mvns	r2, r0
    4c20:	0003      	movs	r3, r0
    4c22:	17d2      	asrs	r2, r2, #31
    4c24:	4013      	ands	r3, r2
		Analog_Parameter_Struct.PhaseRY_Voltage = adcRY;
    4c26:	4a0a      	ldr	r2, [pc, #40]	; (4c50 <detect_Three_Phase_Voltage+0xa4>)
    4c28:	6015      	str	r5, [r2, #0]
		Analog_Parameter_Struct.PhaseYB_Voltage = adcYB;
    4c2a:	6054      	str	r4, [r2, #4]
		Analog_Parameter_Struct.PhaseBR_Voltage = adcBR;
    4c2c:	6093      	str	r3, [r2, #8]
		set_Three_Phase_State_From_Voltage();
    4c2e:	4b09      	ldr	r3, [pc, #36]	; (4c54 <detect_Three_Phase_Voltage+0xa8>)
    4c30:	4798      	blx	r3
		xSemaphoreGive(xADC_Semaphore);
    4c32:	2300      	movs	r3, #0
    4c34:	6830      	ldr	r0, [r6, #0]
    4c36:	001a      	movs	r2, r3
    4c38:	0019      	movs	r1, r3
    4c3a:	4c07      	ldr	r4, [pc, #28]	; (4c58 <detect_Three_Phase_Voltage+0xac>)
    4c3c:	47a0      	blx	r4
}
    4c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4c40:	20000238 	.word	0x20000238
    4c44:	00007825 	.word	0x00007825
    4c48:	000048f1 	.word	0x000048f1
    4c4c:	0000a3dd 	.word	0x0000a3dd
    4c50:	2000062c 	.word	0x2000062c
    4c54:	00004b1d 	.word	0x00004b1d
    4c58:	000074e5 	.word	0x000074e5

00004c5c <detect_Motor_Current>:
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
    4c5c:	2101      	movs	r1, #1
void detect_Motor_Current(void){
    4c5e:	b570      	push	{r4, r5, r6, lr}
	if(xSemaphoreTake(xADC_Semaphore,portMAX_DELAY)== pdTRUE)
    4c60:	4d1e      	ldr	r5, [pc, #120]	; (4cdc <detect_Motor_Current+0x80>)
    4c62:	4249      	negs	r1, r1
    4c64:	6828      	ldr	r0, [r5, #0]
    4c66:	4b1e      	ldr	r3, [pc, #120]	; (4ce0 <detect_Motor_Current+0x84>)
    4c68:	4798      	blx	r3
    4c6a:	2801      	cmp	r0, #1
    4c6c:	d134      	bne.n	4cd8 <detect_Motor_Current+0x7c>
		uint32_t ADCcurrent = Read_ADC0(ADC_POSITIVE_INPUT_PIN16,200);
    4c6e:	21c8      	movs	r1, #200	; 0xc8
    4c70:	300f      	adds	r0, #15
    4c72:	4b1c      	ldr	r3, [pc, #112]	; (4ce4 <detect_Motor_Current+0x88>)
    4c74:	4798      	blx	r3
		if(ADCcurrent>15)
    4c76:	2400      	movs	r4, #0
    4c78:	280f      	cmp	r0, #15
    4c7a:	d903      	bls.n	4c84 <detect_Motor_Current+0x28>
			ADCcurrent = abs(ADCcurrent - 15);
    4c7c:	380f      	subs	r0, #15
    4c7e:	17c3      	asrs	r3, r0, #31
    4c80:	18c4      	adds	r4, r0, r3
    4c82:	405c      	eors	r4, r3
		xSemaphoreGive(xADC_Semaphore);
    4c84:	2300      	movs	r3, #0
    4c86:	6828      	ldr	r0, [r5, #0]
    4c88:	001a      	movs	r2, r3
    4c8a:	0019      	movs	r1, r3
    4c8c:	4d16      	ldr	r5, [pc, #88]	; (4ce8 <detect_Motor_Current+0x8c>)
    4c8e:	47a8      	blx	r5
		ADCcurrent = (ADCcurrent*3425)/1000;
    4c90:	21fa      	movs	r1, #250	; 0xfa
		Analog_Parameter_Struct.Motor_Current_ADC_Value = ADCcurrent;				// does ADCcurrent here have ADC Value of Current ?
    4c92:	4d16      	ldr	r5, [pc, #88]	; (4cec <detect_Motor_Current+0x90>)
		ADCcurrent = (ADCcurrent*3425)/1000;
    4c94:	4816      	ldr	r0, [pc, #88]	; (4cf0 <detect_Motor_Current+0x94>)
		Analog_Parameter_Struct.Motor_Current_ADC_Value = ADCcurrent;				// does ADCcurrent here have ADC Value of Current ?
    4c96:	60ec      	str	r4, [r5, #12]
		ADCcurrent = (ADCcurrent*3425)/1000;
    4c98:	4360      	muls	r0, r4
    4c9a:	4e16      	ldr	r6, [pc, #88]	; (4cf4 <detect_Motor_Current+0x98>)
    4c9c:	0089      	lsls	r1, r1, #2
    4c9e:	47b0      	blx	r6
		if(ADCcurrent<1200 && ADCcurrent!=0)
    4ca0:	4b15      	ldr	r3, [pc, #84]	; (4cf8 <detect_Motor_Current+0x9c>)
    4ca2:	1e42      	subs	r2, r0, #1
		ADCcurrent = (ADCcurrent*3425)/1000;
    4ca4:	0004      	movs	r4, r0
		if(ADCcurrent<1200 && ADCcurrent!=0)
    4ca6:	429a      	cmp	r2, r3
    4ca8:	d807      	bhi.n	4cba <detect_Motor_Current+0x5e>
			ADCcurrent = ADCcurrent + (((1200-ADCcurrent)*272)/1000);
    4caa:	21fa      	movs	r1, #250	; 0xfa
    4cac:	4813      	ldr	r0, [pc, #76]	; (4cfc <detect_Motor_Current+0xa0>)
    4cae:	4b14      	ldr	r3, [pc, #80]	; (4d00 <detect_Motor_Current+0xa4>)
    4cb0:	4360      	muls	r0, r4
    4cb2:	0089      	lsls	r1, r1, #2
    4cb4:	18c0      	adds	r0, r0, r3
    4cb6:	47b0      	blx	r6
    4cb8:	1824      	adds	r4, r4, r0
		Analog_Parameter_Struct.Motor_Current_IntPart = ADCcurrent/100;
    4cba:	2164      	movs	r1, #100	; 0x64
		Analog_Parameter_Struct.Motor_Current = ADCcurrent;
    4cbc:	612c      	str	r4, [r5, #16]
		Analog_Parameter_Struct.Motor_Current_IntPart = ADCcurrent/100;
    4cbe:	0020      	movs	r0, r4
    4cc0:	47b0      	blx	r6
    4cc2:	b280      	uxth	r0, r0
    4cc4:	82a8      	strh	r0, [r5, #20]
		Analog_Parameter_Struct.Motor_Current_DecPart = ADCcurrent%100;
    4cc6:	4b0f      	ldr	r3, [pc, #60]	; (4d04 <detect_Motor_Current+0xa8>)
    4cc8:	2164      	movs	r1, #100	; 0x64
    4cca:	0020      	movs	r0, r4
    4ccc:	4798      	blx	r3
		ucharCurrent_Detect_Flag = 0;												//reset the flag, to disable current reading for next 500ms
    4cce:	2200      	movs	r2, #0
    4cd0:	4b0d      	ldr	r3, [pc, #52]	; (4d08 <detect_Motor_Current+0xac>)
		Analog_Parameter_Struct.Motor_Current_DecPart = ADCcurrent%100;
    4cd2:	b289      	uxth	r1, r1
    4cd4:	82e9      	strh	r1, [r5, #22]
		ucharCurrent_Detect_Flag = 0;												//reset the flag, to disable current reading for next 500ms
    4cd6:	701a      	strb	r2, [r3, #0]
}
    4cd8:	bd70      	pop	{r4, r5, r6, pc}
    4cda:	46c0      	nop			; (mov r8, r8)
    4cdc:	20000238 	.word	0x20000238
    4ce0:	00007825 	.word	0x00007825
    4ce4:	0000488d 	.word	0x0000488d
    4ce8:	000074e5 	.word	0x000074e5
    4cec:	2000062c 	.word	0x2000062c
    4cf0:	00000d61 	.word	0x00000d61
    4cf4:	0000a2c9 	.word	0x0000a2c9
    4cf8:	000004ae 	.word	0x000004ae
    4cfc:	fffffef0 	.word	0xfffffef0
    4d00:	0004fb00 	.word	0x0004fb00
    4d04:	0000a3d5 	.word	0x0000a3d5
    4d08:	20000230 	.word	0x20000230

00004d0c <getACPowerState>:
	return phaseAC;
    4d0c:	4b01      	ldr	r3, [pc, #4]	; (4d14 <getACPowerState+0x8>)
    4d0e:	7818      	ldrb	r0, [r3, #0]
    4d10:	b2c0      	uxtb	r0, r0
}
    4d12:	4770      	bx	lr
    4d14:	200006bb 	.word	0x200006bb

00004d18 <getMotorState>:
	return mFeedback;
    4d18:	4b01      	ldr	r3, [pc, #4]	; (4d20 <getMotorState+0x8>)
    4d1a:	7818      	ldrb	r0, [r3, #0]
    4d1c:	b2c0      	uxtb	r0, r0
}
    4d1e:	4770      	bx	lr
    4d20:	20000666 	.word	0x20000666

00004d24 <setMotorState>:
	mFeedback = state;
    4d24:	4b04      	ldr	r3, [pc, #16]	; (4d38 <setMotorState+0x14>)
    4d26:	2220      	movs	r2, #32
    4d28:	7018      	strb	r0, [r3, #0]
    4d2a:	4b04      	ldr	r3, [pc, #16]	; (4d3c <setMotorState+0x18>)
	if (state)
    4d2c:	2800      	cmp	r0, #0
    4d2e:	d001      	beq.n	4d34 <setMotorState+0x10>
		port_base->OUTCLR.reg = pin_mask;
    4d30:	615a      	str	r2, [r3, #20]
}
    4d32:	4770      	bx	lr
		port_base->OUTSET.reg = pin_mask;
    4d34:	619a      	str	r2, [r3, #24]
    4d36:	e7fc      	b.n	4d32 <setMotorState+0xe>
    4d38:	20000666 	.word	0x20000666
    4d3c:	41004400 	.word	0x41004400

00004d40 <readSensorState>:
{
    4d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d42:	001d      	movs	r5, r3
	*allPhase = structThreePhase_state.u8t_phase_ac_state;
    4d44:	4b12      	ldr	r3, [pc, #72]	; (4d90 <readSensorState+0x50>)
    4d46:	785c      	ldrb	r4, [r3, #1]
    4d48:	7004      	strb	r4, [r0, #0]
	if(structThreePhase_state.u8t_phase_sequence_flag == THREEPHASE_OK)
    4d4a:	781b      	ldrb	r3, [r3, #0]
    4d4c:	2b02      	cmp	r3, #2
    4d4e:	d11a      	bne.n	4d86 <readSensorState+0x46>
		*phaseSeq=true;
    4d50:	3b01      	subs	r3, #1
	*motor  = !(port_pin_get_input_level(PIN_MOTOR_FEEDBACK));
    4d52:	2401      	movs	r4, #1
		*phaseSeq = false;
    4d54:	700b      	strb	r3, [r1, #0]
	*motor  = !(port_pin_get_input_level(PIN_MOTOR_FEEDBACK));
    4d56:	0021      	movs	r1, r4
	return (port_base->IN.reg & pin_mask);
    4d58:	4b0e      	ldr	r3, [pc, #56]	; (4d94 <readSensorState+0x54>)
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
    4d5a:	4f0f      	ldr	r7, [pc, #60]	; (4d98 <readSensorState+0x58>)
    4d5c:	681b      	ldr	r3, [r3, #0]
    4d5e:	4e0f      	ldr	r6, [pc, #60]	; (4d9c <readSensorState+0x5c>)
	*motor  = !(port_pin_get_input_level(PIN_MOTOR_FEEDBACK));
    4d60:	0b9b      	lsrs	r3, r3, #14
    4d62:	4399      	bics	r1, r3
    4d64:	7011      	strb	r1, [r2, #0]
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
    4d66:	6838      	ldr	r0, [r7, #0]
    4d68:	47b0      	blx	r6
	vTaskDelay(500/portTICK_PERIOD_MS);
    4d6a:	20fa      	movs	r0, #250	; 0xfa
    4d6c:	4b0c      	ldr	r3, [pc, #48]	; (4da0 <readSensorState+0x60>)
    4d6e:	0040      	lsls	r0, r0, #1
    4d70:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
    4d72:	6838      	ldr	r0, [r7, #0]
    4d74:	47b0      	blx	r6
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
    4d76:	2304      	movs	r3, #4
    4d78:	4018      	ands	r0, r3
    4d7a:	4b0a      	ldr	r3, [pc, #40]	; (4da4 <readSensorState+0x64>)
    4d7c:	d005      	beq.n	4d8a <readSensorState+0x4a>
		isACpowerAvailable = true;
    4d7e:	701c      	strb	r4, [r3, #0]
	*acPhase =  isACpowerAvailable;
    4d80:	781b      	ldrb	r3, [r3, #0]
    4d82:	702b      	strb	r3, [r5, #0]
}
    4d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*phaseSeq = false;
    4d86:	2300      	movs	r3, #0
    4d88:	e7e3      	b.n	4d52 <readSensorState+0x12>
		isACpowerAvailable = false;
    4d8a:	7018      	strb	r0, [r3, #0]
    4d8c:	e7f8      	b.n	4d80 <readSensorState+0x40>
    4d8e:	46c0      	nop			; (mov r8, r8)
    4d90:	20000669 	.word	0x20000669
    4d94:	410044a0 	.word	0x410044a0
    4d98:	2000074c 	.word	0x2000074c
    4d9c:	00004559 	.word	0x00004559
    4da0:	00007fa1 	.word	0x00007fa1
    4da4:	20000699 	.word	0x20000699

00004da8 <getMotorState_from_pin>:
{
    4da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	readSensorState(&p1, &p2, &p3, &p4);
    4daa:	466b      	mov	r3, sp
    4dac:	4669      	mov	r1, sp
    4dae:	1d9c      	adds	r4, r3, #6
    4db0:	0022      	movs	r2, r4
    4db2:	3105      	adds	r1, #5
    4db4:	a801      	add	r0, sp, #4
    4db6:	4d04      	ldr	r5, [pc, #16]	; (4dc8 <getMotorState_from_pin+0x20>)
    4db8:	3307      	adds	r3, #7
    4dba:	47a8      	blx	r5
	setMotorState(p3);
    4dbc:	7820      	ldrb	r0, [r4, #0]
    4dbe:	4b03      	ldr	r3, [pc, #12]	; (4dcc <getMotorState_from_pin+0x24>)
    4dc0:	4798      	blx	r3
	return p3;
    4dc2:	7820      	ldrb	r0, [r4, #0]
}
    4dc4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    4dc6:	46c0      	nop			; (mov r8, r8)
    4dc8:	00004d41 	.word	0x00004d41
    4dcc:	00004d25 	.word	0x00004d25

00004dd0 <updateSensorState>:
{
    4dd0:	b570      	push	{r4, r5, r6, lr}
    4dd2:	001e      	movs	r6, r3
	allPhase = state;
    4dd4:	4d17      	ldr	r5, [pc, #92]	; (4e34 <updateSensorState+0x64>)
	vBoolPhaseSeq=phaseSequence;
    4dd6:	4c18      	ldr	r4, [pc, #96]	; (4e38 <updateSensorState+0x68>)
	allPhase = state;
    4dd8:	7028      	strb	r0, [r5, #0]
	setMotorState(motorState); // mFeedback = p2;
    4dda:	4b18      	ldr	r3, [pc, #96]	; (4e3c <updateSensorState+0x6c>)
    4ddc:	0010      	movs	r0, r2
	vBoolPhaseSeq=phaseSequence;
    4dde:	7021      	strb	r1, [r4, #0]
	setMotorState(motorState); // mFeedback = p2;
    4de0:	4798      	blx	r3
	phaseAC = state;
    4de2:	4b17      	ldr	r3, [pc, #92]	; (4e40 <updateSensorState+0x70>)
    4de4:	701e      	strb	r6, [r3, #0]
	return allPhase;
    4de6:	782a      	ldrb	r2, [r5, #0]
	if(getAllPhaseState()==AC_3PH && getACPowerState())
    4de8:	2a03      	cmp	r2, #3
    4dea:	d11a      	bne.n	4e22 <updateSensorState+0x52>
	return phaseAC;
    4dec:	781b      	ldrb	r3, [r3, #0]
	if(getAllPhaseState()==AC_3PH && getACPowerState())
    4dee:	2b00      	cmp	r3, #0
    4df0:	d017      	beq.n	4e22 <updateSensorState+0x52>
		if(user_settings_parameter_struct.detectPhaseSequence)			// if detection of Phase Sequence is enabled
    4df2:	4b14      	ldr	r3, [pc, #80]	; (4e44 <updateSensorState+0x74>)
		port_base->OUTCLR.reg = pin_mask;
    4df4:	2180      	movs	r1, #128	; 0x80
    4df6:	001a      	movs	r2, r3
    4df8:	3228      	adds	r2, #40	; 0x28
    4dfa:	7812      	ldrb	r2, [r2, #0]
    4dfc:	2a00      	cmp	r2, #0
    4dfe:	d002      	beq.n	4e06 <updateSensorState+0x36>
	return vBoolPhaseSeq;
    4e00:	7822      	ldrb	r2, [r4, #0]
		if(tempPhaseSequence)											// check if sequence is correct
    4e02:	2a00      	cmp	r2, #0
    4e04:	d009      	beq.n	4e1a <updateSensorState+0x4a>
    4e06:	4a10      	ldr	r2, [pc, #64]	; (4e48 <updateSensorState+0x78>)
		port_base->OUTSET.reg = pin_mask;
    4e08:	6011      	str	r1, [r2, #0]
		if((bool)user_settings_parameter_struct.autoStartAddress)
    4e0a:	785a      	ldrb	r2, [r3, #1]
    4e0c:	2380      	movs	r3, #128	; 0x80
    4e0e:	005b      	lsls	r3, r3, #1
    4e10:	2a00      	cmp	r2, #0
    4e12:	d004      	beq.n	4e1e <updateSensorState+0x4e>
		port_base->OUTCLR.reg = pin_mask;
    4e14:	4a0c      	ldr	r2, [pc, #48]	; (4e48 <updateSensorState+0x78>)
		port_base->OUTSET.reg = pin_mask;
    4e16:	6013      	str	r3, [r2, #0]
}
    4e18:	bd70      	pop	{r4, r5, r6, pc}
    4e1a:	4a0c      	ldr	r2, [pc, #48]	; (4e4c <updateSensorState+0x7c>)
    4e1c:	e7f4      	b.n	4e08 <updateSensorState+0x38>
    4e1e:	4a0b      	ldr	r2, [pc, #44]	; (4e4c <updateSensorState+0x7c>)
    4e20:	e7f9      	b.n	4e16 <updateSensorState+0x46>
    4e22:	2280      	movs	r2, #128	; 0x80
    4e24:	4b09      	ldr	r3, [pc, #36]	; (4e4c <updateSensorState+0x7c>)
    4e26:	601a      	str	r2, [r3, #0]
    4e28:	1892      	adds	r2, r2, r2
    4e2a:	601a      	str	r2, [r3, #0]
		startTimerOn=false;
    4e2c:	2200      	movs	r2, #0
    4e2e:	4b08      	ldr	r3, [pc, #32]	; (4e50 <updateSensorState+0x80>)
    4e30:	701a      	strb	r2, [r3, #0]
}
    4e32:	e7f1      	b.n	4e18 <updateSensorState+0x48>
    4e34:	20000674 	.word	0x20000674
    4e38:	20000687 	.word	0x20000687
    4e3c:	00004d25 	.word	0x00004d25
    4e40:	200006bb 	.word	0x200006bb
    4e44:	200005b0 	.word	0x200005b0
    4e48:	41004494 	.word	0x41004494
    4e4c:	41004498 	.word	0x41004498
    4e50:	200006a6 	.word	0x200006a6

00004e54 <triggerAutoStart>:
{
    4e54:	b510      	push	{r4, lr}
	return mFeedback;
    4e56:	4b0a      	ldr	r3, [pc, #40]	; (4e80 <triggerAutoStart+0x2c>)
    4e58:	781b      	ldrb	r3, [r3, #0]
	if (!getMotorState())
    4e5a:	2b00      	cmp	r3, #0
    4e5c:	d10e      	bne.n	4e7c <triggerAutoStart+0x28>
	return allPhase;
    4e5e:	4b09      	ldr	r3, [pc, #36]	; (4e84 <triggerAutoStart+0x30>)
    4e60:	781b      	ldrb	r3, [r3, #0]
		if (getAllPhaseState() && getACPowerState())
    4e62:	2b00      	cmp	r3, #0
    4e64:	d00a      	beq.n	4e7c <triggerAutoStart+0x28>
	return phaseAC;
    4e66:	4b08      	ldr	r3, [pc, #32]	; (4e88 <triggerAutoStart+0x34>)
    4e68:	781b      	ldrb	r3, [r3, #0]
		if (getAllPhaseState() && getACPowerState())
    4e6a:	2b00      	cmp	r3, #0
    4e6c:	d006      	beq.n	4e7c <triggerAutoStart+0x28>
			startTimerOn = true;
    4e6e:	2201      	movs	r2, #1
    4e70:	4b06      	ldr	r3, [pc, #24]	; (4e8c <triggerAutoStart+0x38>)
    4e72:	701a      	strb	r2, [r3, #0]
			tempStartTimer = xTaskGetTickCount();
    4e74:	4b06      	ldr	r3, [pc, #24]	; (4e90 <triggerAutoStart+0x3c>)
    4e76:	4798      	blx	r3
    4e78:	4b06      	ldr	r3, [pc, #24]	; (4e94 <triggerAutoStart+0x40>)
    4e7a:	6018      	str	r0, [r3, #0]
}
    4e7c:	bd10      	pop	{r4, pc}
    4e7e:	46c0      	nop			; (mov r8, r8)
    4e80:	20000666 	.word	0x20000666
    4e84:	20000674 	.word	0x20000674
    4e88:	200006bb 	.word	0x200006bb
    4e8c:	200006a6 	.word	0x200006a6
    4e90:	00007d29 	.word	0x00007d29
    4e94:	200006ac 	.word	0x200006ac

00004e98 <resetAutoStart>:
{
    4e98:	b510      	push	{r4, lr}
	if (!(bool)user_settings_parameter_struct.autoStartAddress)
    4e9a:	4b09      	ldr	r3, [pc, #36]	; (4ec0 <resetAutoStart+0x28>)
    4e9c:	785a      	ldrb	r2, [r3, #1]
    4e9e:	2380      	movs	r3, #128	; 0x80
    4ea0:	005b      	lsls	r3, r3, #1
    4ea2:	2a00      	cmp	r2, #0
    4ea4:	d104      	bne.n	4eb0 <resetAutoStart+0x18>
		startTimerOn=false;
    4ea6:	4907      	ldr	r1, [pc, #28]	; (4ec4 <resetAutoStart+0x2c>)
    4ea8:	700a      	strb	r2, [r1, #0]
    4eaa:	4a07      	ldr	r2, [pc, #28]	; (4ec8 <resetAutoStart+0x30>)
    4eac:	6013      	str	r3, [r2, #0]
}
    4eae:	bd10      	pop	{r4, pc}
		port_base->OUTCLR.reg = pin_mask;
    4eb0:	4a06      	ldr	r2, [pc, #24]	; (4ecc <resetAutoStart+0x34>)
    4eb2:	6013      	str	r3, [r2, #0]
		if (setChange)
    4eb4:	2800      	cmp	r0, #0
    4eb6:	d0fa      	beq.n	4eae <resetAutoStart+0x16>
			triggerAutoStart();
    4eb8:	4b05      	ldr	r3, [pc, #20]	; (4ed0 <resetAutoStart+0x38>)
    4eba:	4798      	blx	r3
}
    4ebc:	e7f7      	b.n	4eae <resetAutoStart+0x16>
    4ebe:	46c0      	nop			; (mov r8, r8)
    4ec0:	200005b0 	.word	0x200005b0
    4ec4:	200006a6 	.word	0x200006a6
    4ec8:	41004498 	.word	0x41004498
    4ecc:	41004494 	.word	0x41004494
    4ed0:	00004e55 	.word	0x00004e55

00004ed4 <operateOnStableLine>:
	waitStableLineOn = false;
    4ed4:	2200      	movs	r2, #0
{
    4ed6:	b510      	push	{r4, lr}
	waitStableLineOn = false;
    4ed8:	4b27      	ldr	r3, [pc, #156]	; (4f78 <operateOnStableLine+0xa4>)
    4eda:	701a      	strb	r2, [r3, #0]
	return structThreePhase_state.u8t_phase_ac_state;
    4edc:	4b27      	ldr	r3, [pc, #156]	; (4f7c <operateOnStableLine+0xa8>)
    4ede:	785b      	ldrb	r3, [r3, #1]
    4ee0:	b2db      	uxtb	r3, r3
	if (temp == AC_3PH)
    4ee2:	2b03      	cmp	r3, #3
    4ee4:	d124      	bne.n	4f30 <operateOnStableLine+0x5c>
		if(user_settings_parameter_struct.detectPhaseSequence)						// if Sequence Detection is needed
    4ee6:	4b26      	ldr	r3, [pc, #152]	; (4f80 <operateOnStableLine+0xac>)
    4ee8:	001a      	movs	r2, r3
    4eea:	3228      	adds	r2, #40	; 0x28
    4eec:	7812      	ldrb	r2, [r2, #0]
    4eee:	2a00      	cmp	r2, #0
    4ef0:	d003      	beq.n	4efa <operateOnStableLine+0x26>
	return vBoolPhaseSeq;
    4ef2:	4a24      	ldr	r2, [pc, #144]	; (4f84 <operateOnStableLine+0xb0>)
    4ef4:	7812      	ldrb	r2, [r2, #0]
		if(tempPhaseSeq)															// if correct phase seq than
    4ef6:	2a00      	cmp	r2, #0
    4ef8:	d011      	beq.n	4f1e <operateOnStableLine+0x4a>
    4efa:	2180      	movs	r1, #128	; 0x80
    4efc:	4a22      	ldr	r2, [pc, #136]	; (4f88 <operateOnStableLine+0xb4>)
    4efe:	6011      	str	r1, [r2, #0]
			if (user_settings_parameter_struct.autoStartAddress)
    4f00:	785a      	ldrb	r2, [r3, #1]
    4f02:	2a00      	cmp	r2, #0
    4f04:	d002      	beq.n	4f0c <operateOnStableLine+0x38>
				triggerAutoStart();
    4f06:	4b21      	ldr	r3, [pc, #132]	; (4f8c <operateOnStableLine+0xb8>)
    4f08:	4798      	blx	r3
}
    4f0a:	bd10      	pop	{r4, pc}
				if (user_settings_parameter_struct.dndAddress!=DND_LIGHT)			//DND IS OFF FOR ALL 3 PHASE LIGHT EVENTS, DND IS ON FOR SINGLE PHASING EVENTS
    4f0c:	791b      	ldrb	r3, [r3, #4]
    4f0e:	2b4c      	cmp	r3, #76	; 0x4c
    4f10:	d0fb      	beq.n	4f0a <operateOnStableLine+0x36>
					simEventTemp[4] = registerEvent('G');							//register TO SIM AC power ON
    4f12:	4b1f      	ldr	r3, [pc, #124]	; (4f90 <operateOnStableLine+0xbc>)
    4f14:	2047      	movs	r0, #71	; 0x47
    4f16:	4798      	blx	r3
    4f18:	4b1e      	ldr	r3, [pc, #120]	; (4f94 <operateOnStableLine+0xc0>)
    4f1a:	7118      	strb	r0, [r3, #4]
    4f1c:	e7f5      	b.n	4f0a <operateOnStableLine+0x36>
		port_base->OUTSET.reg = pin_mask;
    4f1e:	2280      	movs	r2, #128	; 0x80
    4f20:	4b1d      	ldr	r3, [pc, #116]	; (4f98 <operateOnStableLine+0xc4>)
    4f22:	601a      	str	r2, [r3, #0]
			simEventTemp[9] = registerEvent('A'); //register TO SIM 2 phase power ON
    4f24:	4b1a      	ldr	r3, [pc, #104]	; (4f90 <operateOnStableLine+0xbc>)
    4f26:	2041      	movs	r0, #65	; 0x41
    4f28:	4798      	blx	r3
    4f2a:	4b1a      	ldr	r3, [pc, #104]	; (4f94 <operateOnStableLine+0xc0>)
    4f2c:	7258      	strb	r0, [r3, #9]
    4f2e:	e7ec      	b.n	4f0a <operateOnStableLine+0x36>
	else if (temp == AC_2PH) //Got Power in 2 phase
    4f30:	2b02      	cmp	r3, #2
    4f32:	d10b      	bne.n	4f4c <operateOnStableLine+0x78>
    4f34:	2280      	movs	r2, #128	; 0x80
    4f36:	4b18      	ldr	r3, [pc, #96]	; (4f98 <operateOnStableLine+0xc4>)
    4f38:	601a      	str	r2, [r3, #0]
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
    4f3a:	4b11      	ldr	r3, [pc, #68]	; (4f80 <operateOnStableLine+0xac>)
    4f3c:	791a      	ldrb	r2, [r3, #4]
    4f3e:	2a4f      	cmp	r2, #79	; 0x4f
    4f40:	d1e3      	bne.n	4f0a <operateOnStableLine+0x36>
		!user_settings_parameter_struct.detectSinglePhasing)					//SINGLE PHASING PROTECTION IS ON
    4f42:	3305      	adds	r3, #5
		if (user_settings_parameter_struct.dndAddress == DND_OFF &&					//DND IS OFF FOR ALL KIND OF EVENTS
    4f44:	7fdb      	ldrb	r3, [r3, #31]
    4f46:	2b00      	cmp	r3, #0
    4f48:	d1df      	bne.n	4f0a <operateOnStableLine+0x36>
    4f4a:	e7eb      	b.n	4f24 <operateOnStableLine+0x50>
	else if (temp == AC_OFF)	//Lost Power in All Phase
    4f4c:	2b00      	cmp	r3, #0
    4f4e:	d1dc      	bne.n	4f0a <operateOnStableLine+0x36>
    4f50:	2280      	movs	r2, #128	; 0x80
    4f52:	4b11      	ldr	r3, [pc, #68]	; (4f98 <operateOnStableLine+0xc4>)
    4f54:	601a      	str	r2, [r3, #0]
		if ((user_settings_parameter_struct.dndAddress == DND_OFF) ||												//DND IS OFF FOR ALL EVENTS
    4f56:	4b0a      	ldr	r3, [pc, #40]	; (4f80 <operateOnStableLine+0xac>)
    4f58:	791b      	ldrb	r3, [r3, #4]
    4f5a:	2b4f      	cmp	r3, #79	; 0x4f
    4f5c:	d006      	beq.n	4f6c <operateOnStableLine+0x98>
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
    4f5e:	4a0f      	ldr	r2, [pc, #60]	; (4f9c <operateOnStableLine+0xc8>)
    4f60:	7811      	ldrb	r1, [r2, #0]
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
    4f62:	7812      	ldrb	r2, [r2, #0]
		(last_three_phase_state == AC_2PH && user_settings_parameter_struct.dndAddress == DND_OFF) ||			//PREVIOUSLY SINGLE PHASING , and DND OFF FOR ALL EVENTS
    4f64:	2a03      	cmp	r2, #3
    4f66:	d1d0      	bne.n	4f0a <operateOnStableLine+0x36>
		(last_three_phase_state == AC_3PH && user_settings_parameter_struct.dndAddress != DND_LIGHT))			//PREVIOSULY 3 PHASE, and NOT ON FOR ALL EVENTS
    4f68:	2b4c      	cmp	r3, #76	; 0x4c
    4f6a:	d0ce      	beq.n	4f0a <operateOnStableLine+0x36>
			simEventTemp[5] = registerEvent('L'); //register To SIM AC Power OFF
    4f6c:	4b08      	ldr	r3, [pc, #32]	; (4f90 <operateOnStableLine+0xbc>)
    4f6e:	204c      	movs	r0, #76	; 0x4c
    4f70:	4798      	blx	r3
    4f72:	4b08      	ldr	r3, [pc, #32]	; (4f94 <operateOnStableLine+0xc0>)
    4f74:	7158      	strb	r0, [r3, #5]
}
    4f76:	e7c8      	b.n	4f0a <operateOnStableLine+0x36>
    4f78:	200006f1 	.word	0x200006f1
    4f7c:	20000669 	.word	0x20000669
    4f80:	200005b0 	.word	0x200005b0
    4f84:	20000687 	.word	0x20000687
    4f88:	41004494 	.word	0x41004494
    4f8c:	00004e55 	.word	0x00004e55
    4f90:	00003ee9 	.word	0x00003ee9
    4f94:	2000064d 	.word	0x2000064d
    4f98:	41004498 	.word	0x41004498
    4f9c:	20000660 	.word	0x20000660

00004fa0 <waitStableLineOver>:
{
    4fa0:	b510      	push	{r4, lr}
	return (waitStableLineOn && xTaskGetTickCount() - waitStableLineTimer >= (waitStableLineTime * 100));
    4fa2:	2400      	movs	r4, #0
    4fa4:	4b08      	ldr	r3, [pc, #32]	; (4fc8 <waitStableLineOver+0x28>)
    4fa6:	781b      	ldrb	r3, [r3, #0]
    4fa8:	42a3      	cmp	r3, r4
    4faa:	d00a      	beq.n	4fc2 <waitStableLineOver+0x22>
    4fac:	4b07      	ldr	r3, [pc, #28]	; (4fcc <waitStableLineOver+0x2c>)
    4fae:	4798      	blx	r3
    4fb0:	4b07      	ldr	r3, [pc, #28]	; (4fd0 <waitStableLineOver+0x30>)
    4fb2:	681b      	ldr	r3, [r3, #0]
    4fb4:	1ac0      	subs	r0, r0, r3
    4fb6:	4b07      	ldr	r3, [pc, #28]	; (4fd4 <waitStableLineOver+0x34>)
    4fb8:	781a      	ldrb	r2, [r3, #0]
    4fba:	2364      	movs	r3, #100	; 0x64
    4fbc:	4353      	muls	r3, r2
    4fbe:	4298      	cmp	r0, r3
    4fc0:	4164      	adcs	r4, r4
    4fc2:	0020      	movs	r0, r4
}
    4fc4:	bd10      	pop	{r4, pc}
    4fc6:	46c0      	nop			; (mov r8, r8)
    4fc8:	200006f1 	.word	0x200006f1
    4fcc:	00007d29 	.word	0x00007d29
    4fd0:	200006c4 	.word	0x200006c4
    4fd4:	200006d5 	.word	0x200006d5

00004fd8 <startMotor>:
	startTimerOn = false;
    4fd8:	2200      	movs	r2, #0
{
    4fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	startTimerOn = false;
    4fdc:	4b3a      	ldr	r3, [pc, #232]	; (50c8 <startMotor+0xf0>)
{
    4fde:	0005      	movs	r5, r0
	startTimerOn = false;
    4fe0:	701a      	strb	r2, [r3, #0]
	return phaseAC;
    4fe2:	4b3a      	ldr	r3, [pc, #232]	; (50cc <startMotor+0xf4>)
    4fe4:	781b      	ldrb	r3, [r3, #0]
	if (getACPowerState() &&																														//AC Phase is Presnet
    4fe6:	4293      	cmp	r3, r2
    4fe8:	d069      	beq.n	50be <startMotor+0xe6>
	return allPhase;
    4fea:	4b39      	ldr	r3, [pc, #228]	; (50d0 <startMotor+0xf8>)
    4fec:	781a      	ldrb	r2, [r3, #0]
	if (getACPowerState() &&																														//AC Phase is Presnet
    4fee:	2a03      	cmp	r2, #3
    4ff0:	d007      	beq.n	5002 <startMotor+0x2a>
	return allPhase;
    4ff2:	781b      	ldrb	r3, [r3, #0]
			((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
    4ff4:	2b02      	cmp	r3, #2
    4ff6:	d162      	bne.n	50be <startMotor+0xe6>
    4ff8:	4b36      	ldr	r3, [pc, #216]	; (50d4 <startMotor+0xfc>)
    4ffa:	3305      	adds	r3, #5
    4ffc:	7fdb      	ldrb	r3, [r3, #31]
    4ffe:	2b00      	cmp	r3, #0
    5000:	d15d      	bne.n	50be <startMotor+0xe6>
			((user_settings_parameter_struct.detectSinglePhasing && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence)))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
    5002:	4c34      	ldr	r4, [pc, #208]	; (50d4 <startMotor+0xfc>)
    5004:	1d63      	adds	r3, r4, #5
			((getAllPhaseState()==AC_3PH) || (getAllPhaseState()==AC_2PH && !user_settings_parameter_struct.detectSinglePhasing)) &&				//3 phase is present, or SPP is OFF and 2 phase is present
    5006:	7fdb      	ldrb	r3, [r3, #31]
    5008:	2b00      	cmp	r3, #0
    500a:	d003      	beq.n	5014 <startMotor+0x3c>
	return vBoolPhaseSeq;
    500c:	4b32      	ldr	r3, [pc, #200]	; (50d8 <startMotor+0x100>)
    500e:	781b      	ldrb	r3, [r3, #0]
			((user_settings_parameter_struct.detectSinglePhasing && getPhaseSequence()) || (!user_settings_parameter_struct.detectPhaseSequence)))	//Phase Sequnce Protection is ON and correct phase seq, or Phase Seq Protection is off
    5010:	2b00      	cmp	r3, #0
    5012:	d104      	bne.n	501e <startMotor+0x46>
    5014:	0023      	movs	r3, r4
    5016:	3328      	adds	r3, #40	; 0x28
    5018:	781b      	ldrb	r3, [r3, #0]
    501a:	2b00      	cmp	r3, #0
    501c:	d14f      	bne.n	50be <startMotor+0xe6>
	return mFeedback;
    501e:	4f2f      	ldr	r7, [pc, #188]	; (50dc <startMotor+0x104>)
    5020:	783b      	ldrb	r3, [r7, #0]
		if (!getMotorState())
    5022:	2b00      	cmp	r3, #0
    5024:	d147      	bne.n	50b6 <startMotor+0xde>
			if (factory_settings_parameter_struct.ENABLE_WATER)
    5026:	4e2e      	ldr	r6, [pc, #184]	; (50e0 <startMotor+0x108>)
    5028:	7973      	ldrb	r3, [r6, #5]
    502a:	2b00      	cmp	r3, #0
    502c:	d026      	beq.n	507c <startMotor+0xa4>
				if(!(user_settings_parameter_struct.waterBypassAddress) && getWaterSensorState()==CRITICALLEVEL)
    502e:	1ca3      	adds	r3, r4, #2
    5030:	7fdb      	ldrb	r3, [r3, #31]
    5032:	2b00      	cmp	r3, #0
    5034:	d10f      	bne.n	5056 <startMotor+0x7e>
    5036:	4b2b      	ldr	r3, [pc, #172]	; (50e4 <startMotor+0x10c>)
    5038:	4798      	blx	r3
    503a:	2800      	cmp	r0, #0
    503c:	d10b      	bne.n	5056 <startMotor+0x7e>
					if (commanded)
    503e:	2d00      	cmp	r5, #0
    5040:	d003      	beq.n	504a <startMotor+0x72>
							setMotorMGRResponse('V');	//cannot start motor as OverHead Tank Full.
    5042:	3054      	adds	r0, #84	; 0x54
			setMotorMGRResponse('N');	//cannot start motor due to some problem
    5044:	4b28      	ldr	r3, [pc, #160]	; (50e8 <startMotor+0x110>)
    5046:	4798      	blx	r3
    5048:	e017      	b.n	507a <startMotor+0xa2>
						simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
    504a:	204e      	movs	r0, #78	; 0x4e
			simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
    504c:	4b27      	ldr	r3, [pc, #156]	; (50ec <startMotor+0x114>)
    504e:	4798      	blx	r3
    5050:	4b27      	ldr	r3, [pc, #156]	; (50f0 <startMotor+0x118>)
    5052:	7018      	strb	r0, [r3, #0]
    5054:	e011      	b.n	507a <startMotor+0xa2>
				if (factory_settings_parameter_struct.ENABLE_GP)
    5056:	7933      	ldrb	r3, [r6, #4]
    5058:	2b00      	cmp	r3, #0
    505a:	d00f      	beq.n	507c <startMotor+0xa4>
					if(!(user_settings_parameter_struct.waterBypassAddress) && getOverHeadWaterSensorState()==OVERHEADHIGHLEVEL)
    505c:	3402      	adds	r4, #2
    505e:	7fe3      	ldrb	r3, [r4, #31]
    5060:	2b00      	cmp	r3, #0
    5062:	d10b      	bne.n	507c <startMotor+0xa4>
    5064:	4b23      	ldr	r3, [pc, #140]	; (50f4 <startMotor+0x11c>)
    5066:	4798      	blx	r3
    5068:	2802      	cmp	r0, #2
    506a:	d107      	bne.n	507c <startMotor+0xa4>
						if(commanded)
    506c:	2d00      	cmp	r5, #0
    506e:	d1e8      	bne.n	5042 <startMotor+0x6a>
							simEventTemp[17] = registerEvent('V');//register To SIM motor not started due to ANY REASON
    5070:	4b1e      	ldr	r3, [pc, #120]	; (50ec <startMotor+0x114>)
    5072:	2056      	movs	r0, #86	; 0x56
    5074:	4798      	blx	r3
    5076:	4b1e      	ldr	r3, [pc, #120]	; (50f0 <startMotor+0x118>)
    5078:	7458      	strb	r0, [r3, #17]
}
    507a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    507c:	2280      	movs	r2, #128	; 0x80
    507e:	4b1e      	ldr	r3, [pc, #120]	; (50f8 <startMotor+0x120>)
    5080:	0152      	lsls	r2, r2, #5
    5082:	601a      	str	r2, [r3, #0]
    5084:	2280      	movs	r2, #128	; 0x80
    5086:	0192      	lsls	r2, r2, #6
    5088:	601a      	str	r2, [r3, #0]
			tempStartSequenceTimer = xTaskGetTickCount();
    508a:	4b1c      	ldr	r3, [pc, #112]	; (50fc <startMotor+0x124>)
    508c:	4798      	blx	r3
    508e:	4b1c      	ldr	r3, [pc, #112]	; (5100 <startMotor+0x128>)
			startSequenceOn = true;
    5090:	4a1c      	ldr	r2, [pc, #112]	; (5104 <startMotor+0x12c>)
			tempStartSequenceTimer = xTaskGetTickCount();
    5092:	6018      	str	r0, [r3, #0]
			startSequenceOn = true;
    5094:	2301      	movs	r3, #1
    5096:	7013      	strb	r3, [r2, #0]
		port_base->OUTCLR.reg = pin_mask;
    5098:	2220      	movs	r2, #32
	mFeedback = state;
    509a:	703b      	strb	r3, [r7, #0]
    509c:	4b1a      	ldr	r3, [pc, #104]	; (5108 <startMotor+0x130>)
    509e:	615a      	str	r2, [r3, #20]
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
    50a0:	7873      	ldrb	r3, [r6, #1]
    50a2:	2b00      	cmp	r3, #0
    50a4:	d004      	beq.n	50b0 <startMotor+0xd8>
				enableCurrentBuffer=false;
    50a6:	2300      	movs	r3, #0
    50a8:	4a18      	ldr	r2, [pc, #96]	; (510c <startMotor+0x134>)
    50aa:	7013      	strb	r3, [r2, #0]
				lastCurrentReading=CR_NORMAL;
    50ac:	4a18      	ldr	r2, [pc, #96]	; (5110 <startMotor+0x138>)
    50ae:	7013      	strb	r3, [r2, #0]
			gotOnCommand = commanded;
    50b0:	4b18      	ldr	r3, [pc, #96]	; (5114 <startMotor+0x13c>)
    50b2:	701d      	strb	r5, [r3, #0]
    50b4:	e7e1      	b.n	507a <startMotor+0xa2>
				setMotorMGRResponse('+');		//motor is already on
    50b6:	202b      	movs	r0, #43	; 0x2b
			if (commanded)
    50b8:	2d00      	cmp	r5, #0
    50ba:	d0de      	beq.n	507a <startMotor+0xa2>
    50bc:	e7c2      	b.n	5044 <startMotor+0x6c>
			setMotorMGRResponse('N');	//cannot start motor due to some problem
    50be:	204e      	movs	r0, #78	; 0x4e
		if (commanded)
    50c0:	2d00      	cmp	r5, #0
    50c2:	d0c3      	beq.n	504c <startMotor+0x74>
    50c4:	e7be      	b.n	5044 <startMotor+0x6c>
    50c6:	46c0      	nop			; (mov r8, r8)
    50c8:	200006a6 	.word	0x200006a6
    50cc:	200006bb 	.word	0x200006bb
    50d0:	20000674 	.word	0x20000674
    50d4:	200005b0 	.word	0x200005b0
    50d8:	20000687 	.word	0x20000687
    50dc:	20000666 	.word	0x20000666
    50e0:	2000057a 	.word	0x2000057a
    50e4:	000047a5 	.word	0x000047a5
    50e8:	00002a1d 	.word	0x00002a1d
    50ec:	00003ee9 	.word	0x00003ee9
    50f0:	2000064d 	.word	0x2000064d
    50f4:	0000471d 	.word	0x0000471d
    50f8:	41004498 	.word	0x41004498
    50fc:	00007d29 	.word	0x00007d29
    5100:	200006a0 	.word	0x200006a0
    5104:	200006a5 	.word	0x200006a5
    5108:	41004400 	.word	0x41004400
    510c:	20000673 	.word	0x20000673
    5110:	20000692 	.word	0x20000692
    5114:	2000064c 	.word	0x2000064c

00005118 <stopMotor>:
{
    5118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    511a:	0005      	movs	r5, r0
    511c:	0017      	movs	r7, r2
    511e:	4e14      	ldr	r6, [pc, #80]	; (5170 <stopMotor+0x58>)
	if (forceStop || getMotorState())
    5120:	2900      	cmp	r1, #0
    5122:	d102      	bne.n	512a <stopMotor+0x12>
	return mFeedback;
    5124:	7833      	ldrb	r3, [r6, #0]
	if (forceStop || getMotorState())
    5126:	2b00      	cmp	r3, #0
    5128:	d01c      	beq.n	5164 <stopMotor+0x4c>
		singlePhasingTimerOn = false;
    512a:	2400      	movs	r4, #0
    512c:	2280      	movs	r2, #128	; 0x80
    512e:	4b11      	ldr	r3, [pc, #68]	; (5174 <stopMotor+0x5c>)
    5130:	0152      	lsls	r2, r2, #5
    5132:	701c      	strb	r4, [r3, #0]
    5134:	4b10      	ldr	r3, [pc, #64]	; (5178 <stopMotor+0x60>)
    5136:	601a      	str	r2, [r3, #0]
		tempStopSequenceTimer = xTaskGetTickCount();
    5138:	4b10      	ldr	r3, [pc, #64]	; (517c <stopMotor+0x64>)
    513a:	4798      	blx	r3
		stopSequenceOn = true;
    513c:	2201      	movs	r2, #1
		tempStopSequenceTimer = xTaskGetTickCount();
    513e:	4b10      	ldr	r3, [pc, #64]	; (5180 <stopMotor+0x68>)
	mFeedback = state;
    5140:	7034      	strb	r4, [r6, #0]
		tempStopSequenceTimer = xTaskGetTickCount();
    5142:	6018      	str	r0, [r3, #0]
		stopSequenceOn = true;
    5144:	4b0f      	ldr	r3, [pc, #60]	; (5184 <stopMotor+0x6c>)
    5146:	701a      	strb	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
    5148:	4b0f      	ldr	r3, [pc, #60]	; (5188 <stopMotor+0x70>)
    514a:	321f      	adds	r2, #31
    514c:	619a      	str	r2, [r3, #24]
		gotOffCommand = commanded;
    514e:	4b0f      	ldr	r3, [pc, #60]	; (518c <stopMotor+0x74>)
    5150:	701d      	strb	r5, [r3, #0]
		offButtonPressed=offButton;
    5152:	4b0f      	ldr	r3, [pc, #60]	; (5190 <stopMotor+0x78>)
    5154:	701f      	strb	r7, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    5156:	4b0f      	ldr	r3, [pc, #60]	; (5194 <stopMotor+0x7c>)
    5158:	785b      	ldrb	r3, [r3, #1]
    515a:	42a3      	cmp	r3, r4
    515c:	d001      	beq.n	5162 <stopMotor+0x4a>
			lastCurrentReading=CR_NORMAL;			//to make the current readings normal
    515e:	4b0e      	ldr	r3, [pc, #56]	; (5198 <stopMotor+0x80>)
    5160:	701c      	strb	r4, [r3, #0]
}
    5162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (commanded)
    5164:	2800      	cmp	r0, #0
    5166:	d0fc      	beq.n	5162 <stopMotor+0x4a>
			setMotorMGRResponse('-');	//motor is already off
    5168:	202d      	movs	r0, #45	; 0x2d
    516a:	4b0c      	ldr	r3, [pc, #48]	; (519c <stopMotor+0x84>)
    516c:	4798      	blx	r3
}
    516e:	e7f8      	b.n	5162 <stopMotor+0x4a>
    5170:	20000666 	.word	0x20000666
    5174:	2000069d 	.word	0x2000069d
    5178:	41004494 	.word	0x41004494
    517c:	00007d29 	.word	0x00007d29
    5180:	200006b4 	.word	0x200006b4
    5184:	20000695 	.word	0x20000695
    5188:	41004400 	.word	0x41004400
    518c:	200006f0 	.word	0x200006f0
    5190:	200006b0 	.word	0x200006b0
    5194:	2000057a 	.word	0x2000057a
    5198:	20000692 	.word	0x20000692
    519c:	00002a1d 	.word	0x00002a1d

000051a0 <operateOnWaterEvent>:
{
    51a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t uLevel = tempUndergroundLevel;
    51a2:	4b7a      	ldr	r3, [pc, #488]	; (538c <operateOnWaterEvent+0x1ec>)
	if(uLevel == undergroundLevel)
    51a4:	4f7a      	ldr	r7, [pc, #488]	; (5390 <operateOnWaterEvent+0x1f0>)
	uint8_t uLevel = tempUndergroundLevel;
    51a6:	781c      	ldrb	r4, [r3, #0]
	uint8_t oLevel = tempOverheadLevel;
    51a8:	4b7a      	ldr	r3, [pc, #488]	; (5394 <operateOnWaterEvent+0x1f4>)
    51aa:	4d7b      	ldr	r5, [pc, #492]	; (5398 <operateOnWaterEvent+0x1f8>)
    51ac:	781e      	ldrb	r6, [r3, #0]
	if(uLevel == undergroundLevel)
    51ae:	783b      	ldrb	r3, [r7, #0]
	uint8_t oLevel = tempOverheadLevel;
    51b0:	b2f6      	uxtb	r6, r6
	if(uLevel == undergroundLevel)
    51b2:	429c      	cmp	r4, r3
    51b4:	d106      	bne.n	51c4 <operateOnWaterEvent+0x24>
		if (factory_settings_parameter_struct.ENABLE_GP)
    51b6:	792a      	ldrb	r2, [r5, #4]
    51b8:	2a00      	cmp	r2, #0
    51ba:	d13f      	bne.n	523c <operateOnWaterEvent+0x9c>
			if(oLevel==overheadLevel)
    51bc:	4a77      	ldr	r2, [pc, #476]	; (539c <operateOnWaterEvent+0x1fc>)
    51be:	7812      	ldrb	r2, [r2, #0]
    51c0:	4296      	cmp	r6, r2
    51c2:	d03b      	beq.n	523c <operateOnWaterEvent+0x9c>
	return mFeedback;
    51c4:	4a76      	ldr	r2, [pc, #472]	; (53a0 <operateOnWaterEvent+0x200>)
    51c6:	7812      	ldrb	r2, [r2, #0]
	if (getMotorState())
    51c8:	2a00      	cmp	r2, #0
    51ca:	d100      	bne.n	51ce <operateOnWaterEvent+0x2e>
    51cc:	e08b      	b.n	52e6 <operateOnWaterEvent+0x146>
		if ((uLevel == CRITICALLEVEL) && (undergroundLevel>CRITICALLEVEL))	//no water in well
    51ce:	2c00      	cmp	r4, #0
    51d0:	d135      	bne.n	523e <operateOnWaterEvent+0x9e>
    51d2:	2b00      	cmp	r3, #0
    51d4:	d016      	beq.n	5204 <operateOnWaterEvent+0x64>
			stopMotor(false,true,false);
    51d6:	0022      	movs	r2, r4
    51d8:	2101      	movs	r1, #1
    51da:	0020      	movs	r0, r4
    51dc:	4b71      	ldr	r3, [pc, #452]	; (53a4 <operateOnWaterEvent+0x204>)
    51de:	4798      	blx	r3
			simEventTemp[12] = registerEvent('I');	//report To SIM Motor Off due to insufficient water level
    51e0:	4b71      	ldr	r3, [pc, #452]	; (53a8 <operateOnWaterEvent+0x208>)
    51e2:	2049      	movs	r0, #73	; 0x49
    51e4:	4798      	blx	r3
    51e6:	4b71      	ldr	r3, [pc, #452]	; (53ac <operateOnWaterEvent+0x20c>)
    51e8:	7318      	strb	r0, [r3, #12]
			if (factory_settings_parameter_struct.ENABLE_M2M)
    51ea:	78eb      	ldrb	r3, [r5, #3]
    51ec:	2b00      	cmp	r3, #0
    51ee:	d009      	beq.n	5204 <operateOnWaterEvent+0x64>
				if ((m2m_Numbers_struct.m2mSetting) && (undergroundLevel>LOWLEVEL))
    51f0:	4b6f      	ldr	r3, [pc, #444]	; (53b0 <operateOnWaterEvent+0x210>)
    51f2:	795b      	ldrb	r3, [r3, #5]
    51f4:	2b00      	cmp	r3, #0
    51f6:	d005      	beq.n	5204 <operateOnWaterEvent+0x64>
    51f8:	783b      	ldrb	r3, [r7, #0]
    51fa:	2b01      	cmp	r3, #1
    51fc:	d902      	bls.n	5204 <operateOnWaterEvent+0x64>
					m2mEvent_arr[0] = ME_WAITREGISTER;
    51fe:	2201      	movs	r2, #1
    5200:	4b6c      	ldr	r3, [pc, #432]	; (53b4 <operateOnWaterEvent+0x214>)
    5202:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_GP)
    5204:	792b      	ldrb	r3, [r5, #4]
    5206:	2b00      	cmp	r3, #0
    5208:	d017      	beq.n	523a <operateOnWaterEvent+0x9a>
			if(oLevel!=overheadLevel)
    520a:	4b64      	ldr	r3, [pc, #400]	; (539c <operateOnWaterEvent+0x1fc>)
    520c:	781a      	ldrb	r2, [r3, #0]
    520e:	4296      	cmp	r6, r2
    5210:	d011      	beq.n	5236 <operateOnWaterEvent+0x96>
				if(oLevel==OVERHEADHIGHLEVEL && overheadLevel<OVERHEADHIGHLEVEL)		////overhead tank is full
    5212:	2e02      	cmp	r6, #2
    5214:	d15c      	bne.n	52d0 <operateOnWaterEvent+0x130>
    5216:	781b      	ldrb	r3, [r3, #0]
    5218:	2b01      	cmp	r3, #1
    521a:	d80c      	bhi.n	5236 <operateOnWaterEvent+0x96>
					stopMotor(false,true,false);
    521c:	2200      	movs	r2, #0
    521e:	2101      	movs	r1, #1
    5220:	0010      	movs	r0, r2
    5222:	4b60      	ldr	r3, [pc, #384]	; (53a4 <operateOnWaterEvent+0x204>)
    5224:	4798      	blx	r3
					simEventTemp[17] = registerEvent('V'); //report To SIM Motor Off due to overhead tank full
    5226:	4b60      	ldr	r3, [pc, #384]	; (53a8 <operateOnWaterEvent+0x208>)
    5228:	2056      	movs	r0, #86	; 0x56
    522a:	4798      	blx	r3
    522c:	4b5f      	ldr	r3, [pc, #380]	; (53ac <operateOnWaterEvent+0x20c>)
    522e:	7458      	strb	r0, [r3, #17]
	if (factory_settings_parameter_struct.ENABLE_GP)
    5230:	792b      	ldrb	r3, [r5, #4]
    5232:	2b00      	cmp	r3, #0
    5234:	d001      	beq.n	523a <operateOnWaterEvent+0x9a>
	overheadLevel=level;
    5236:	4b59      	ldr	r3, [pc, #356]	; (539c <operateOnWaterEvent+0x1fc>)
    5238:	701e      	strb	r6, [r3, #0]
	undergroundLevel=level;
    523a:	703c      	strb	r4, [r7, #0]
}
    523c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)
    523e:	2c03      	cmp	r4, #3
    5240:	d127      	bne.n	5292 <operateOnWaterEvent+0xf2>
    5242:	2b02      	cmp	r3, #2
    5244:	d8de      	bhi.n	5204 <operateOnWaterEvent+0x64>
			if (factory_settings_parameter_struct.ENABLE_M2M)
    5246:	78eb      	ldrb	r3, [r5, #3]
    5248:	2b00      	cmp	r3, #0
    524a:	d0db      	beq.n	5204 <operateOnWaterEvent+0x64>
				if (m2m_Numbers_struct.m2mSetting)
    524c:	4b58      	ldr	r3, [pc, #352]	; (53b0 <operateOnWaterEvent+0x210>)
    524e:	795b      	ldrb	r3, [r3, #5]
    5250:	2b00      	cmp	r3, #0
    5252:	d012      	beq.n	527a <operateOnWaterEvent+0xda>
					m2mEvent_arr[1] = ME_WAITREGISTER;
    5254:	2201      	movs	r2, #1
    5256:	4b57      	ldr	r3, [pc, #348]	; (53b4 <operateOnWaterEvent+0x214>)
    5258:	705a      	strb	r2, [r3, #1]
				if (user_settings_parameter_struct.preventOverFlowAddress)
    525a:	4b57      	ldr	r3, [pc, #348]	; (53b8 <operateOnWaterEvent+0x218>)
    525c:	3301      	adds	r3, #1
    525e:	7fdb      	ldrb	r3, [r3, #31]
    5260:	2b00      	cmp	r3, #0
    5262:	d010      	beq.n	5286 <operateOnWaterEvent+0xe6>
					stopMotor(false,true,false);
    5264:	2200      	movs	r2, #0
    5266:	2101      	movs	r1, #1
    5268:	0010      	movs	r0, r2
    526a:	4b4e      	ldr	r3, [pc, #312]	; (53a4 <operateOnWaterEvent+0x204>)
    526c:	4798      	blx	r3
					simEventTemp[14] = registerEvent('H'); //report To SIM well is full, so stopped motor
    526e:	4b4e      	ldr	r3, [pc, #312]	; (53a8 <operateOnWaterEvent+0x208>)
    5270:	2048      	movs	r0, #72	; 0x48
    5272:	4798      	blx	r3
    5274:	4b4d      	ldr	r3, [pc, #308]	; (53ac <operateOnWaterEvent+0x20c>)
    5276:	7398      	strb	r0, [r3, #14]
    5278:	e7c4      	b.n	5204 <operateOnWaterEvent+0x64>
					simEventTemp[15] = registerEvent('E');	//report To SIM well is full.
    527a:	4b4b      	ldr	r3, [pc, #300]	; (53a8 <operateOnWaterEvent+0x208>)
    527c:	2045      	movs	r0, #69	; 0x45
    527e:	4798      	blx	r3
    5280:	4b4a      	ldr	r3, [pc, #296]	; (53ac <operateOnWaterEvent+0x20c>)
    5282:	73d8      	strb	r0, [r3, #15]
    5284:	e7e9      	b.n	525a <operateOnWaterEvent+0xba>
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
    5286:	4b48      	ldr	r3, [pc, #288]	; (53a8 <operateOnWaterEvent+0x208>)
    5288:	2045      	movs	r0, #69	; 0x45
    528a:	4798      	blx	r3
    528c:	4b47      	ldr	r3, [pc, #284]	; (53ac <operateOnWaterEvent+0x20c>)
    528e:	73d8      	strb	r0, [r3, #15]
    5290:	e7b8      	b.n	5204 <operateOnWaterEvent+0x64>
		else if ((uLevel==LOWLEVEL) && (undergroundLevel>LOWLEVEL))		// decrease in water level
    5292:	2c01      	cmp	r4, #1
    5294:	d112      	bne.n	52bc <operateOnWaterEvent+0x11c>
    5296:	2b01      	cmp	r3, #1
    5298:	d9b4      	bls.n	5204 <operateOnWaterEvent+0x64>
			if (factory_settings_parameter_struct.ENABLE_M2M)
    529a:	78eb      	ldrb	r3, [r5, #3]
    529c:	2b00      	cmp	r3, #0
    529e:	d004      	beq.n	52aa <operateOnWaterEvent+0x10a>
				if (m2m_Numbers_struct.m2mSetting)
    52a0:	4b43      	ldr	r3, [pc, #268]	; (53b0 <operateOnWaterEvent+0x210>)
    52a2:	795b      	ldrb	r3, [r3, #5]
    52a4:	2b00      	cmp	r3, #0
    52a6:	d1aa      	bne.n	51fe <operateOnWaterEvent+0x5e>
    52a8:	e7ac      	b.n	5204 <operateOnWaterEvent+0x64>
				if (factory_settings_parameter_struct.NOLEVELCHANGECALL)
    52aa:	79eb      	ldrb	r3, [r5, #7]
    52ac:	2b00      	cmp	r3, #0
    52ae:	d0a9      	beq.n	5204 <operateOnWaterEvent+0x64>
					simEventTemp[13] = registerEvent('D'); //report To SIM water level is decrease..
    52b0:	4b3d      	ldr	r3, [pc, #244]	; (53a8 <operateOnWaterEvent+0x208>)
    52b2:	2044      	movs	r0, #68	; 0x44
    52b4:	4798      	blx	r3
    52b6:	4b3d      	ldr	r3, [pc, #244]	; (53ac <operateOnWaterEvent+0x20c>)
    52b8:	7358      	strb	r0, [r3, #13]
    52ba:	e7a3      	b.n	5204 <operateOnWaterEvent+0x64>
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// increase in water level
    52bc:	2c02      	cmp	r4, #2
    52be:	d1a1      	bne.n	5204 <operateOnWaterEvent+0x64>
    52c0:	2b01      	cmp	r3, #1
    52c2:	d89f      	bhi.n	5204 <operateOnWaterEvent+0x64>
			simEventTemp[16] = registerEvent('Z'); //report To SIM water level is increasing..
    52c4:	4b38      	ldr	r3, [pc, #224]	; (53a8 <operateOnWaterEvent+0x208>)
    52c6:	205a      	movs	r0, #90	; 0x5a
    52c8:	4798      	blx	r3
    52ca:	4b38      	ldr	r3, [pc, #224]	; (53ac <operateOnWaterEvent+0x20c>)
    52cc:	7418      	strb	r0, [r3, #16]
    52ce:	e799      	b.n	5204 <operateOnWaterEvent+0x64>
				else if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL)	// overhead tank empty.
    52d0:	2e00      	cmp	r6, #0
    52d2:	d1b0      	bne.n	5236 <operateOnWaterEvent+0x96>
    52d4:	781b      	ldrb	r3, [r3, #0]
    52d6:	2b00      	cmp	r3, #0
    52d8:	d0ad      	beq.n	5236 <operateOnWaterEvent+0x96>
					simEventTemp[18] = registerEvent('W'); //report To SIM overhead tank is empty.
    52da:	4b33      	ldr	r3, [pc, #204]	; (53a8 <operateOnWaterEvent+0x208>)
    52dc:	2057      	movs	r0, #87	; 0x57
    52de:	4798      	blx	r3
    52e0:	4b32      	ldr	r3, [pc, #200]	; (53ac <operateOnWaterEvent+0x20c>)
    52e2:	7498      	strb	r0, [r3, #18]
    52e4:	e7a4      	b.n	5230 <operateOnWaterEvent+0x90>
		if (factory_settings_parameter_struct.ENABLE_M2M)
    52e6:	78ea      	ldrb	r2, [r5, #3]
    52e8:	2a00      	cmp	r2, #0
    52ea:	d029      	beq.n	5340 <operateOnWaterEvent+0x1a0>
			if(m2m_Numbers_struct.m2mSetting && uLevel<MIDLEVEL && undergroundLevel>=MIDLEVEL)	//level is decreased
    52ec:	4a30      	ldr	r2, [pc, #192]	; (53b0 <operateOnWaterEvent+0x210>)
    52ee:	7952      	ldrb	r2, [r2, #5]
    52f0:	2a00      	cmp	r2, #0
    52f2:	d01b      	beq.n	532c <operateOnWaterEvent+0x18c>
    52f4:	2c01      	cmp	r4, #1
    52f6:	d819      	bhi.n	532c <operateOnWaterEvent+0x18c>
    52f8:	2b01      	cmp	r3, #1
    52fa:	d902      	bls.n	5302 <operateOnWaterEvent+0x162>
				m2mEvent_arr[0] = ME_WAITREGISTER;
    52fc:	2201      	movs	r2, #1
    52fe:	4b2d      	ldr	r3, [pc, #180]	; (53b4 <operateOnWaterEvent+0x214>)
    5300:	701a      	strb	r2, [r3, #0]
		if (factory_settings_parameter_struct.ENABLE_GP)
    5302:	792b      	ldrb	r3, [r5, #4]
    5304:	2b00      	cmp	r3, #0
    5306:	d098      	beq.n	523a <operateOnWaterEvent+0x9a>
			if (oLevel==OVERHEADCRITICALLEVEL && overheadLevel>OVERHEADCRITICALLEVEL && uLevel>CRITICALLEVEL) // overhead tank is empty, and underground not low
    5308:	2e00      	cmp	r6, #0
    530a:	d000      	beq.n	530e <operateOnWaterEvent+0x16e>
    530c:	e793      	b.n	5236 <operateOnWaterEvent+0x96>
    530e:	4b23      	ldr	r3, [pc, #140]	; (539c <operateOnWaterEvent+0x1fc>)
    5310:	781b      	ldrb	r3, [r3, #0]
    5312:	2b00      	cmp	r3, #0
    5314:	d100      	bne.n	5318 <operateOnWaterEvent+0x178>
    5316:	e78e      	b.n	5236 <operateOnWaterEvent+0x96>
    5318:	2c00      	cmp	r4, #0
    531a:	d100      	bne.n	531e <operateOnWaterEvent+0x17e>
    531c:	e78b      	b.n	5236 <operateOnWaterEvent+0x96>
				if(user_settings_parameter_struct.autoStartAddress)		//autoStart is ON
    531e:	4b26      	ldr	r3, [pc, #152]	; (53b8 <operateOnWaterEvent+0x218>)
    5320:	785b      	ldrb	r3, [r3, #1]
    5322:	2b00      	cmp	r3, #0
    5324:	d0d9      	beq.n	52da <operateOnWaterEvent+0x13a>
					triggerAutoStart();
    5326:	4b25      	ldr	r3, [pc, #148]	; (53bc <operateOnWaterEvent+0x21c>)
    5328:	4798      	blx	r3
    532a:	e781      	b.n	5230 <operateOnWaterEvent+0x90>
			else if (uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)			//well is full
    532c:	2c03      	cmp	r4, #3
    532e:	d1e8      	bne.n	5302 <operateOnWaterEvent+0x162>
    5330:	2b02      	cmp	r3, #2
    5332:	d8e6      	bhi.n	5302 <operateOnWaterEvent+0x162>
				if(m2m_Numbers_struct.m2mSetting)
    5334:	2a00      	cmp	r2, #0
    5336:	d007      	beq.n	5348 <operateOnWaterEvent+0x1a8>
					m2mEvent_arr[1] = ME_WAITREGISTER;
    5338:	2201      	movs	r2, #1
    533a:	4b1e      	ldr	r3, [pc, #120]	; (53b4 <operateOnWaterEvent+0x214>)
    533c:	705a      	strb	r2, [r3, #1]
    533e:	e7e0      	b.n	5302 <operateOnWaterEvent+0x162>
		else if(uLevel==HIGHLEVEL && undergroundLevel<HIGHLEVEL)		//well is full
    5340:	2c03      	cmp	r4, #3
    5342:	d107      	bne.n	5354 <operateOnWaterEvent+0x1b4>
    5344:	2b02      	cmp	r3, #2
    5346:	d8dc      	bhi.n	5302 <operateOnWaterEvent+0x162>
					simEventTemp[15] = registerEvent('E'); //report To SIM well is full.
    5348:	4b17      	ldr	r3, [pc, #92]	; (53a8 <operateOnWaterEvent+0x208>)
    534a:	2045      	movs	r0, #69	; 0x45
    534c:	4798      	blx	r3
    534e:	4b17      	ldr	r3, [pc, #92]	; (53ac <operateOnWaterEvent+0x20c>)
    5350:	73d8      	strb	r0, [r3, #15]
    5352:	e7d6      	b.n	5302 <operateOnWaterEvent+0x162>
		else if (uLevel==MIDLEVEL && undergroundLevel<MIDLEVEL)		// underground level is increasing
    5354:	2c02      	cmp	r4, #2
    5356:	d1d4      	bne.n	5302 <operateOnWaterEvent+0x162>
    5358:	2b01      	cmp	r3, #1
    535a:	d8d2      	bhi.n	5302 <operateOnWaterEvent+0x162>
			if (factory_settings_parameter_struct.ENABLE_GP)
    535c:	792b      	ldrb	r3, [r5, #4]
    535e:	2b00      	cmp	r3, #0
    5360:	d00a      	beq.n	5378 <operateOnWaterEvent+0x1d8>
				if (factory_settings_parameter_struct.DUAL_LEVEL)
    5362:	79ab      	ldrb	r3, [r5, #6]
    5364:	2b00      	cmp	r3, #0
    5366:	d007      	beq.n	5378 <operateOnWaterEvent+0x1d8>
					if(oLevel<OVERHEADHIGHLEVEL)
    5368:	2e01      	cmp	r6, #1
    536a:	d805      	bhi.n	5378 <operateOnWaterEvent+0x1d8>
						if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
    536c:	4b12      	ldr	r3, [pc, #72]	; (53b8 <operateOnWaterEvent+0x218>)
    536e:	785b      	ldrb	r3, [r3, #1]
    5370:	2b00      	cmp	r3, #0
    5372:	d001      	beq.n	5378 <operateOnWaterEvent+0x1d8>
							triggerAutoStart();
    5374:	4b11      	ldr	r3, [pc, #68]	; (53bc <operateOnWaterEvent+0x21c>)
    5376:	4798      	blx	r3
			if (factory_settings_parameter_struct.DUAL_LEVEL)
    5378:	79ab      	ldrb	r3, [r5, #6]
    537a:	2b00      	cmp	r3, #0
    537c:	d0c1      	beq.n	5302 <operateOnWaterEvent+0x162>
				if(user_settings_parameter_struct.autoStartAddress)			//autoStart is ON
    537e:	4b0e      	ldr	r3, [pc, #56]	; (53b8 <operateOnWaterEvent+0x218>)
    5380:	785b      	ldrb	r3, [r3, #1]
    5382:	2b00      	cmp	r3, #0
    5384:	d0bd      	beq.n	5302 <operateOnWaterEvent+0x162>
					triggerAutoStart();
    5386:	4b0d      	ldr	r3, [pc, #52]	; (53bc <operateOnWaterEvent+0x21c>)
    5388:	4798      	blx	r3
    538a:	e7ba      	b.n	5302 <operateOnWaterEvent+0x162>
    538c:	20000685 	.word	0x20000685
    5390:	20000725 	.word	0x20000725
    5394:	20000675 	.word	0x20000675
    5398:	2000057a 	.word	0x2000057a
    539c:	2000069c 	.word	0x2000069c
    53a0:	20000666 	.word	0x20000666
    53a4:	00005119 	.word	0x00005119
    53a8:	00003ee9 	.word	0x00003ee9
    53ac:	2000064d 	.word	0x2000064d
    53b0:	20000508 	.word	0x20000508
    53b4:	200006b9 	.word	0x200006b9
    53b8:	200005b0 	.word	0x200005b0
    53bc:	00004e55 	.word	0x00004e55

000053c0 <Water_Level_Task>:
{
    53c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	config->direction  = PORT_PIN_DIR_INPUT;
    53c2:	2600      	movs	r6, #0
	config->input_pull = PORT_PIN_PULL_UP;
    53c4:	2701      	movs	r7, #1
    53c6:	b085      	sub	sp, #20
	config->direction  = PORT_PIN_DIR_INPUT;
    53c8:	ac03      	add	r4, sp, #12
	port_pin_set_config(OVERHEAD_TANK_HL_PIN,	&water_level_sensor_pin_config);
    53ca:	4d4f      	ldr	r5, [pc, #316]	; (5508 <Water_Level_Task+0x148>)
    53cc:	0021      	movs	r1, r4
    53ce:	202f      	movs	r0, #47	; 0x2f
    53d0:	7026      	strb	r6, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    53d2:	7067      	strb	r7, [r4, #1]
	config->powersave  = false;
    53d4:	70a6      	strb	r6, [r4, #2]
    53d6:	47a8      	blx	r5
	port_pin_set_config(OVERHEAD_TANK_ML_PIN,	&water_level_sensor_pin_config);
    53d8:	0021      	movs	r1, r4
    53da:	200c      	movs	r0, #12
    53dc:	47a8      	blx	r5
	port_pin_set_config(OVERHEAD_TANK_LL_PIN,	&water_level_sensor_pin_config);
    53de:	0021      	movs	r1, r4
    53e0:	200d      	movs	r0, #13
    53e2:	47a8      	blx	r5
	port_pin_set_config(UNDERGRUND_TANK_HL_PIN, &water_level_sensor_pin_config);
    53e4:	0021      	movs	r1, r4
    53e6:	200e      	movs	r0, #14
    53e8:	47a8      	blx	r5
	port_pin_set_config(UNDERGRUND_TANK_ML_PIN, &water_level_sensor_pin_config);
    53ea:	0021      	movs	r1, r4
    53ec:	200f      	movs	r0, #15
    53ee:	47a8      	blx	r5
	port_pin_set_config(UNDERGRUND_TANK_LL_PIN, &water_level_sensor_pin_config);
    53f0:	0021      	movs	r1, r4
    53f2:	2037      	movs	r0, #55	; 0x37
    53f4:	47a8      	blx	r5
	undergroundLevel = MIDLEVEL;
    53f6:	2302      	movs	r3, #2
    53f8:	4a44      	ldr	r2, [pc, #272]	; (550c <Water_Level_Task+0x14c>)
	tempWaterEventCount = 0;
    53fa:	4d45      	ldr	r5, [pc, #276]	; (5510 <Water_Level_Task+0x150>)
	undergroundLevel = MIDLEVEL;
    53fc:	7013      	strb	r3, [r2, #0]
	tempUndergroundLevel = MIDLEVEL;
    53fe:	4a45      	ldr	r2, [pc, #276]	; (5514 <Water_Level_Task+0x154>)
	tempWaterEventCount = 0;
    5400:	702e      	strb	r6, [r5, #0]
	tempUndergroundLevel = MIDLEVEL;
    5402:	7013      	strb	r3, [r2, #0]
	overheadLevel = OVERHEADMIDLEVEL;
    5404:	4b44      	ldr	r3, [pc, #272]	; (5518 <Water_Level_Task+0x158>)
    5406:	701f      	strb	r7, [r3, #0]
	tempOverheadLevel = OVERHEADMIDLEVEL;
    5408:	4b44      	ldr	r3, [pc, #272]	; (551c <Water_Level_Task+0x15c>)
    540a:	701f      	strb	r7, [r3, #0]
	if (factory_settings_parameter_struct.ENABLE_GP)
    540c:	4b44      	ldr	r3, [pc, #272]	; (5520 <Water_Level_Task+0x160>)
    540e:	7919      	ldrb	r1, [r3, #4]
		j = 19;
    5410:	2313      	movs	r3, #19
	if (factory_settings_parameter_struct.ENABLE_GP)
    5412:	42b1      	cmp	r1, r6
    5414:	d100      	bne.n	5418 <Water_Level_Task+0x58>
		j= 17;
    5416:	3b02      	subs	r3, #2
    5418:	3b0d      	subs	r3, #13
    541a:	4842      	ldr	r0, [pc, #264]	; (5524 <Water_Level_Task+0x164>)
    541c:	b2db      	uxtb	r3, r3
    541e:	330d      	adds	r3, #13
    5420:	181b      	adds	r3, r3, r0
		simEventTemp[i] = true;
    5422:	2001      	movs	r0, #1
    5424:	4a40      	ldr	r2, [pc, #256]	; (5528 <Water_Level_Task+0x168>)
    5426:	7010      	strb	r0, [r2, #0]
    5428:	3201      	adds	r2, #1
	for (uint8_t i=12;i<j;i++)
    542a:	429a      	cmp	r2, r3
    542c:	d1fb      	bne.n	5426 <Water_Level_Task+0x66>
	simEvent[12] = 'I';
    542e:	2249      	movs	r2, #73	; 0x49
    5430:	4b3e      	ldr	r3, [pc, #248]	; (552c <Water_Level_Task+0x16c>)
    5432:	731a      	strb	r2, [r3, #12]
	simEvent[13] = 'D';
    5434:	3a05      	subs	r2, #5
    5436:	735a      	strb	r2, [r3, #13]
	simEvent[14] = 'H';
    5438:	3204      	adds	r2, #4
    543a:	739a      	strb	r2, [r3, #14]
	simEvent[15] = 'E';
    543c:	3a03      	subs	r2, #3
    543e:	73da      	strb	r2, [r3, #15]
	simEvent[16] = 'Z';
    5440:	3215      	adds	r2, #21
    5442:	741a      	strb	r2, [r3, #16]
	if (factory_settings_parameter_struct.ENABLE_GP)
    5444:	2900      	cmp	r1, #0
    5446:	d003      	beq.n	5450 <Water_Level_Task+0x90>
		simEvent[17] = 'V';
    5448:	3a04      	subs	r2, #4
    544a:	745a      	strb	r2, [r3, #17]
		simEvent[18] = 'W';
    544c:	3201      	adds	r2, #1
    544e:	749a      	strb	r2, [r3, #18]
	if (factory_settings_parameter_struct.ENABLE_M2M)
    5450:	4b33      	ldr	r3, [pc, #204]	; (5520 <Water_Level_Task+0x160>)
    5452:	78db      	ldrb	r3, [r3, #3]
    5454:	2b00      	cmp	r3, #0
    5456:	d008      	beq.n	546a <Water_Level_Task+0xaa>
		m2mEvent_arr[0] = ME_CLEARED;
    5458:	2200      	movs	r2, #0
    545a:	4b35      	ldr	r3, [pc, #212]	; (5530 <Water_Level_Task+0x170>)
    545c:	701a      	strb	r2, [r3, #0]
		m2mEvent_arr[1] = ME_CLEARED;
    545e:	705a      	strb	r2, [r3, #1]
		mapTable[0] = 13;
    5460:	4b34      	ldr	r3, [pc, #208]	; (5534 <Water_Level_Task+0x174>)
    5462:	320d      	adds	r2, #13
    5464:	701a      	strb	r2, [r3, #0]
		mapTable[1] = 15;
    5466:	3202      	adds	r2, #2
    5468:	705a      	strb	r2, [r3, #1]
		if (!(user_settings_parameter_struct.waterBypassAddress))
    546a:	4f33      	ldr	r7, [pc, #204]	; (5538 <Water_Level_Task+0x178>)
    546c:	3702      	adds	r7, #2
    546e:	7ffb      	ldrb	r3, [r7, #31]
    5470:	2b00      	cmp	r3, #0
    5472:	d145      	bne.n	5500 <Water_Level_Task+0x140>
			uLevel = getWaterSensorState();
    5474:	4b31      	ldr	r3, [pc, #196]	; (553c <Water_Level_Task+0x17c>)
    5476:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_GP)
    5478:	4e29      	ldr	r6, [pc, #164]	; (5520 <Water_Level_Task+0x160>)
			uLevel = getWaterSensorState();
    547a:	0004      	movs	r4, r0
			if (factory_settings_parameter_struct.ENABLE_GP)
    547c:	7933      	ldrb	r3, [r6, #4]
    547e:	2b00      	cmp	r3, #0
    5480:	d002      	beq.n	5488 <Water_Level_Task+0xc8>
				oLevel =getOverHeadWaterSensorState();
    5482:	4b2f      	ldr	r3, [pc, #188]	; (5540 <Water_Level_Task+0x180>)
    5484:	4798      	blx	r3
    5486:	9001      	str	r0, [sp, #4]
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
    5488:	7933      	ldrb	r3, [r6, #4]
    548a:	2b01      	cmp	r3, #1
    548c:	d12a      	bne.n	54e4 <Water_Level_Task+0x124>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel) ||(oLevel!=overheadLevel && oLevel==tempOverheadLevel)):
    548e:	4a1f      	ldr	r2, [pc, #124]	; (550c <Water_Level_Task+0x14c>)
    5490:	7812      	ldrb	r2, [r2, #0]
    5492:	42a2      	cmp	r2, r4
    5494:	d003      	beq.n	549e <Water_Level_Task+0xde>
    5496:	4a1f      	ldr	r2, [pc, #124]	; (5514 <Water_Level_Task+0x154>)
    5498:	7812      	ldrb	r2, [r2, #0]
    549a:	42a2      	cmp	r2, r4
    549c:	d00a      	beq.n	54b4 <Water_Level_Task+0xf4>
    549e:	4b1e      	ldr	r3, [pc, #120]	; (5518 <Water_Level_Task+0x158>)
    54a0:	9901      	ldr	r1, [sp, #4]
    54a2:	781a      	ldrb	r2, [r3, #0]
    54a4:	2300      	movs	r3, #0
    54a6:	4291      	cmp	r1, r2
    54a8:	d004      	beq.n	54b4 <Water_Level_Task+0xf4>
    54aa:	4b1c      	ldr	r3, [pc, #112]	; (551c <Water_Level_Task+0x15c>)
    54ac:	781b      	ldrb	r3, [r3, #0]
    54ae:	1acb      	subs	r3, r1, r3
    54b0:	425a      	negs	r2, r3
    54b2:	4153      	adcs	r3, r2
			if ((factory_settings_parameter_struct.ENABLE_GP == true)?
    54b4:	2b00      	cmp	r3, #0
    54b6:	d020      	beq.n	54fa <Water_Level_Task+0x13a>
				tempWaterEventCount++;
    54b8:	782b      	ldrb	r3, [r5, #0]
    54ba:	3301      	adds	r3, #1
    54bc:	b2db      	uxtb	r3, r3
    54be:	702b      	strb	r3, [r5, #0]
				if(tempWaterEventCount>9)
    54c0:	2b09      	cmp	r3, #9
    54c2:	d901      	bls.n	54c8 <Water_Level_Task+0x108>
					operateOnWaterEvent();
    54c4:	4b1f      	ldr	r3, [pc, #124]	; (5544 <Water_Level_Task+0x184>)
    54c6:	4798      	blx	r3
			tempUndergroundLevel=uLevel;
    54c8:	4b12      	ldr	r3, [pc, #72]	; (5514 <Water_Level_Task+0x154>)
    54ca:	701c      	strb	r4, [r3, #0]
			if (factory_settings_parameter_struct.ENABLE_GP)
    54cc:	4b14      	ldr	r3, [pc, #80]	; (5520 <Water_Level_Task+0x160>)
    54ce:	791b      	ldrb	r3, [r3, #4]
    54d0:	2b00      	cmp	r3, #0
    54d2:	d003      	beq.n	54dc <Water_Level_Task+0x11c>
				tempOverheadLevel=oLevel;
    54d4:	466a      	mov	r2, sp
    54d6:	4b11      	ldr	r3, [pc, #68]	; (551c <Water_Level_Task+0x15c>)
    54d8:	7912      	ldrb	r2, [r2, #4]
    54da:	701a      	strb	r2, [r3, #0]
		vTaskDelay(100/portTICK_PERIOD_MS);
    54dc:	2064      	movs	r0, #100	; 0x64
    54de:	4b1a      	ldr	r3, [pc, #104]	; (5548 <Water_Level_Task+0x188>)
    54e0:	4798      	blx	r3
	{
    54e2:	e7c4      	b.n	546e <Water_Level_Task+0xae>
			((uLevel!=undergroundLevel && uLevel==tempUndergroundLevel))
    54e4:	4b09      	ldr	r3, [pc, #36]	; (550c <Water_Level_Task+0x14c>)
    54e6:	781b      	ldrb	r3, [r3, #0]
    54e8:	42a3      	cmp	r3, r4
    54ea:	d006      	beq.n	54fa <Water_Level_Task+0x13a>
    54ec:	4b09      	ldr	r3, [pc, #36]	; (5514 <Water_Level_Task+0x154>)
    54ee:	781b      	ldrb	r3, [r3, #0]
    54f0:	1b1b      	subs	r3, r3, r4
    54f2:	425a      	negs	r2, r3
    54f4:	4153      	adcs	r3, r2
    54f6:	b2db      	uxtb	r3, r3
    54f8:	e7dc      	b.n	54b4 <Water_Level_Task+0xf4>
				tempWaterEventCount=0;
    54fa:	2300      	movs	r3, #0
    54fc:	702b      	strb	r3, [r5, #0]
    54fe:	e7e3      	b.n	54c8 <Water_Level_Task+0x108>
			vTaskDelay(5000/portTICK_PERIOD_MS);
    5500:	4812      	ldr	r0, [pc, #72]	; (554c <Water_Level_Task+0x18c>)
    5502:	4b11      	ldr	r3, [pc, #68]	; (5548 <Water_Level_Task+0x188>)
    5504:	4798      	blx	r3
    5506:	e7e9      	b.n	54dc <Water_Level_Task+0x11c>
    5508:	00009345 	.word	0x00009345
    550c:	20000725 	.word	0x20000725
    5510:	20000698 	.word	0x20000698
    5514:	20000685 	.word	0x20000685
    5518:	2000069c 	.word	0x2000069c
    551c:	20000675 	.word	0x20000675
    5520:	2000057a 	.word	0x2000057a
    5524:	2000064d 	.word	0x2000064d
    5528:	20000659 	.word	0x20000659
    552c:	200006dc 	.word	0x200006dc
    5530:	200006b9 	.word	0x200006b9
    5534:	20000664 	.word	0x20000664
    5538:	200005b0 	.word	0x200005b0
    553c:	000047a5 	.word	0x000047a5
    5540:	0000471d 	.word	0x0000471d
    5544:	000051a1 	.word	0x000051a1
    5548:	00007fa1 	.word	0x00007fa1
    554c:	00001388 	.word	0x00001388

00005550 <startMotorTimerOver>:
{
    5550:	b510      	push	{r4, lr}
	return (xTaskGetTickCount() - tempStartTimer >= (((unsigned long int)user_settings_parameter_struct.autoStartTimeAddress * 1000)));
    5552:	4b07      	ldr	r3, [pc, #28]	; (5570 <startMotorTimerOver+0x20>)
    5554:	4798      	blx	r3
    5556:	4b07      	ldr	r3, [pc, #28]	; (5574 <startMotorTimerOver+0x24>)
    5558:	681a      	ldr	r2, [r3, #0]
    555a:	4b07      	ldr	r3, [pc, #28]	; (5578 <startMotorTimerOver+0x28>)
    555c:	1a82      	subs	r2, r0, r2
    555e:	8859      	ldrh	r1, [r3, #2]
    5560:	23fa      	movs	r3, #250	; 0xfa
    5562:	2000      	movs	r0, #0
    5564:	009b      	lsls	r3, r3, #2
    5566:	434b      	muls	r3, r1
    5568:	429a      	cmp	r2, r3
    556a:	4140      	adcs	r0, r0
    556c:	b2c0      	uxtb	r0, r0
}
    556e:	bd10      	pop	{r4, pc}
    5570:	00007d29 	.word	0x00007d29
    5574:	200006ac 	.word	0x200006ac
    5578:	200005b0 	.word	0x200005b0

0000557c <unknownMotorOff>:
	stopMotor(false,true,false);
    557c:	2200      	movs	r2, #0
{
    557e:	b510      	push	{r4, lr}
	stopMotor(false,true,false);
    5580:	0010      	movs	r0, r2
    5582:	2101      	movs	r1, #1
    5584:	4b03      	ldr	r3, [pc, #12]	; (5594 <unknownMotorOff+0x18>)
    5586:	4798      	blx	r3
	simEventTemp[2] = registerEvent('U');
    5588:	4b03      	ldr	r3, [pc, #12]	; (5598 <unknownMotorOff+0x1c>)
    558a:	2055      	movs	r0, #85	; 0x55
    558c:	4798      	blx	r3
    558e:	4b03      	ldr	r3, [pc, #12]	; (559c <unknownMotorOff+0x20>)
    5590:	7098      	strb	r0, [r3, #2]
}
    5592:	bd10      	pop	{r4, pc}
    5594:	00005119 	.word	0x00005119
    5598:	00003ee9 	.word	0x00003ee9
    559c:	2000064d 	.word	0x2000064d

000055a0 <operateOnEvent>:
{
    55a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    55a2:	b085      	sub	sp, #20
	readSensorState(&t3Phase, &tPhaseSeq, &tMotor, &tacPhase);
    55a4:	ab02      	add	r3, sp, #8
    55a6:	1ddd      	adds	r5, r3, #7
    55a8:	1d9c      	adds	r4, r3, #6
    55aa:	1d5f      	adds	r7, r3, #5
    55ac:	ab03      	add	r3, sp, #12
    55ae:	9301      	str	r3, [sp, #4]
    55b0:	0022      	movs	r2, r4
    55b2:	002b      	movs	r3, r5
    55b4:	0039      	movs	r1, r7
    55b6:	9801      	ldr	r0, [sp, #4]
    55b8:	4e44      	ldr	r6, [pc, #272]	; (56cc <operateOnEvent+0x12c>)
    55ba:	47b0      	blx	r6
	eventOccured = false;
    55bc:	2200      	movs	r2, #0
    55be:	4b44      	ldr	r3, [pc, #272]	; (56d0 <operateOnEvent+0x130>)
    55c0:	701a      	strb	r2, [r3, #0]
	if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()) && (tacPhase == getACPowerState()))
    55c2:	9b01      	ldr	r3, [sp, #4]
	return allPhase;
    55c4:	4a43      	ldr	r2, [pc, #268]	; (56d4 <operateOnEvent+0x134>)
	if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()) && (tacPhase == getACPowerState()))
    55c6:	7818      	ldrb	r0, [r3, #0]
	return allPhase;
    55c8:	7811      	ldrb	r1, [r2, #0]
    55ca:	4b43      	ldr	r3, [pc, #268]	; (56d8 <operateOnEvent+0x138>)
	if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()) && (tacPhase == getACPowerState()))
    55cc:	4288      	cmp	r0, r1
    55ce:	d108      	bne.n	55e2 <operateOnEvent+0x42>
	return mFeedback;
    55d0:	7819      	ldrb	r1, [r3, #0]
	if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()) && (tacPhase == getACPowerState()))
    55d2:	7826      	ldrb	r6, [r4, #0]
    55d4:	428e      	cmp	r6, r1
    55d6:	d104      	bne.n	55e2 <operateOnEvent+0x42>
	return phaseAC;
    55d8:	4940      	ldr	r1, [pc, #256]	; (56dc <operateOnEvent+0x13c>)
	if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()) && (tacPhase == getACPowerState()))
    55da:	782e      	ldrb	r6, [r5, #0]
	return phaseAC;
    55dc:	7809      	ldrb	r1, [r1, #0]
	if ((t3Phase == getAllPhaseState()) && (tMotor == getMotorState()) && (tacPhase == getACPowerState()))
    55de:	428e      	cmp	r6, r1
    55e0:	d01e      	beq.n	5620 <operateOnEvent+0x80>
	return mFeedback;
    55e2:	781b      	ldrb	r3, [r3, #0]
    55e4:	b2db      	uxtb	r3, r3
	if (getMotorState())	//motorOn
    55e6:	2b00      	cmp	r3, #0
    55e8:	d048      	beq.n	567c <operateOnEvent+0xdc>
		if (t3Phase==AC_OFF && !tMotor && !tacPhase)	//acPower Cut Off
    55ea:	2800      	cmp	r0, #0
    55ec:	d11a      	bne.n	5624 <operateOnEvent+0x84>
    55ee:	7823      	ldrb	r3, [r4, #0]
    55f0:	2b00      	cmp	r3, #0
    55f2:	d117      	bne.n	5624 <operateOnEvent+0x84>
    55f4:	782b      	ldrb	r3, [r5, #0]
    55f6:	2b00      	cmp	r3, #0
    55f8:	d114      	bne.n	5624 <operateOnEvent+0x84>
			stopMotor(false,true,false);
    55fa:	0002      	movs	r2, r0
    55fc:	2101      	movs	r1, #1
    55fe:	4b38      	ldr	r3, [pc, #224]	; (56e0 <operateOnEvent+0x140>)
    5600:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    5602:	2280      	movs	r2, #128	; 0x80
    5604:	4b37      	ldr	r3, [pc, #220]	; (56e4 <operateOnEvent+0x144>)
			simEventTemp[6] = registerEvent('C'); //report To SIM Motor Off due to POWER CUT OFF
    5606:	2043      	movs	r0, #67	; 0x43
    5608:	601a      	str	r2, [r3, #0]
    560a:	4b37      	ldr	r3, [pc, #220]	; (56e8 <operateOnEvent+0x148>)
    560c:	4798      	blx	r3
    560e:	4b37      	ldr	r3, [pc, #220]	; (56ec <operateOnEvent+0x14c>)
    5610:	7198      	strb	r0, [r3, #6]
	updateSensorState(t3Phase,tPhaseSeq, tMotor,tacPhase);
    5612:	9801      	ldr	r0, [sp, #4]
    5614:	7822      	ldrb	r2, [r4, #0]
    5616:	782b      	ldrb	r3, [r5, #0]
    5618:	7839      	ldrb	r1, [r7, #0]
    561a:	7800      	ldrb	r0, [r0, #0]
    561c:	4c34      	ldr	r4, [pc, #208]	; (56f0 <operateOnEvent+0x150>)
    561e:	47a0      	blx	r4
}
    5620:	b005      	add	sp, #20
    5622:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
    5624:	7829      	ldrb	r1, [r5, #0]
    5626:	4b33      	ldr	r3, [pc, #204]	; (56f4 <operateOnEvent+0x154>)
    5628:	2900      	cmp	r1, #0
    562a:	d017      	beq.n	565c <operateOnEvent+0xbc>
	return phaseAC;
    562c:	4e2b      	ldr	r6, [pc, #172]	; (56dc <operateOnEvent+0x13c>)
    562e:	7836      	ldrb	r6, [r6, #0]
		else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
    5630:	2e00      	cmp	r6, #0
    5632:	d013      	beq.n	565c <operateOnEvent+0xbc>
		((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
    5634:	1d5e      	adds	r6, r3, #5
		else if ((tacPhase && getACPowerState()) &&																										//AC PHASE PRESENT
    5636:	7ff6      	ldrb	r6, [r6, #31]
    5638:	2e00      	cmp	r6, #0
    563a:	d00a      	beq.n	5652 <operateOnEvent+0xb2>
		((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
    563c:	2803      	cmp	r0, #3
    563e:	d10d      	bne.n	565c <operateOnEvent+0xbc>
	return allPhase;
    5640:	7812      	ldrb	r2, [r2, #0]
		((user_settings_parameter_struct.detectSinglePhasing && t3Phase==AC_3PH && getAllPhaseState()==AC_3PH) ||								//IF SPP ON, 3 phase old and current is present
    5642:	2a03      	cmp	r2, #3
    5644:	d10a      	bne.n	565c <operateOnEvent+0xbc>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
    5646:	7822      	ldrb	r2, [r4, #0]
    5648:	2a00      	cmp	r2, #0
    564a:	d107      	bne.n	565c <operateOnEvent+0xbc>
			unknownMotorOff();
    564c:	4b2a      	ldr	r3, [pc, #168]	; (56f8 <operateOnEvent+0x158>)
    564e:	4798      	blx	r3
    5650:	e7df      	b.n	5612 <operateOnEvent+0x72>
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
    5652:	2801      	cmp	r0, #1
    5654:	d902      	bls.n	565c <operateOnEvent+0xbc>
	return allPhase;
    5656:	7812      	ldrb	r2, [r2, #0]
		(!user_settings_parameter_struct.detectSinglePhasing) && t3Phase>=AC_2PH && getAllPhaseState()>=AC_2PH) &&							//IF SPP OFF, 3 phase old and current is >= 2 phase
    5658:	2a01      	cmp	r2, #1
    565a:	d8f4      	bhi.n	5646 <operateOnEvent+0xa6>
		else if (user_settings_parameter_struct.detectSinglePhasing &&																						//SPP IS ON
    565c:	3305      	adds	r3, #5
    565e:	7fdb      	ldrb	r3, [r3, #31]
    5660:	2b00      	cmp	r3, #0
    5662:	d0d6      	beq.n	5612 <operateOnEvent+0x72>
    5664:	2802      	cmp	r0, #2
    5666:	d1d4      	bne.n	5612 <operateOnEvent+0x72>
		t3Phase==AC_2PH &&																														// Only 2 Phase Present
    5668:	2900      	cmp	r1, #0
    566a:	d0d2      	beq.n	5612 <operateOnEvent+0x72>
			tempSinglePhasingTimer = xTaskGetTickCount();
    566c:	4b23      	ldr	r3, [pc, #140]	; (56fc <operateOnEvent+0x15c>)
    566e:	4798      	blx	r3
			singlePhasingTimerOn = true;
    5670:	2201      	movs	r2, #1
			tempSinglePhasingTimer = xTaskGetTickCount();
    5672:	4b23      	ldr	r3, [pc, #140]	; (5700 <operateOnEvent+0x160>)
    5674:	6018      	str	r0, [r3, #0]
			singlePhasingTimerOn = true;
    5676:	4b23      	ldr	r3, [pc, #140]	; (5704 <operateOnEvent+0x164>)
    5678:	701a      	strb	r2, [r3, #0]
    567a:	e7ca      	b.n	5612 <operateOnEvent+0x72>
		if (tMotor)		// motor turn on manually
    567c:	7822      	ldrb	r2, [r4, #0]
    567e:	2a00      	cmp	r2, #0
    5680:	d01b      	beq.n	56ba <operateOnEvent+0x11a>
			if (t3Phase==AC_3PH && tPhaseSeq && tacPhase)
    5682:	2803      	cmp	r0, #3
    5684:	d113      	bne.n	56ae <operateOnEvent+0x10e>
    5686:	783a      	ldrb	r2, [r7, #0]
    5688:	2a00      	cmp	r2, #0
    568a:	d010      	beq.n	56ae <operateOnEvent+0x10e>
    568c:	782a      	ldrb	r2, [r5, #0]
    568e:	2a00      	cmp	r2, #0
    5690:	d00d      	beq.n	56ae <operateOnEvent+0x10e>
				if (startTimerOn)
    5692:	4a1d      	ldr	r2, [pc, #116]	; (5708 <operateOnEvent+0x168>)
    5694:	7811      	ldrb	r1, [r2, #0]
    5696:	2900      	cmp	r1, #0
    5698:	d000      	beq.n	569c <operateOnEvent+0xfc>
					startTimerOn = false;
    569a:	7013      	strb	r3, [r2, #0]
		port_base->OUTCLR.reg = pin_mask;
    569c:	2280      	movs	r2, #128	; 0x80
    569e:	4b1b      	ldr	r3, [pc, #108]	; (570c <operateOnEvent+0x16c>)
				simEventTemp[7] = registerEvent('S');	//register To SIM Motor has started
    56a0:	2053      	movs	r0, #83	; 0x53
    56a2:	601a      	str	r2, [r3, #0]
    56a4:	4b10      	ldr	r3, [pc, #64]	; (56e8 <operateOnEvent+0x148>)
    56a6:	4798      	blx	r3
    56a8:	4b10      	ldr	r3, [pc, #64]	; (56ec <operateOnEvent+0x14c>)
    56aa:	71d8      	strb	r0, [r3, #7]
    56ac:	e7b1      	b.n	5612 <operateOnEvent+0x72>
				stopMotor(false,true,false);
    56ae:	2200      	movs	r2, #0
    56b0:	2101      	movs	r1, #1
    56b2:	0010      	movs	r0, r2
    56b4:	4b0a      	ldr	r3, [pc, #40]	; (56e0 <operateOnEvent+0x140>)
    56b6:	4798      	blx	r3
    56b8:	e7ab      	b.n	5612 <operateOnEvent+0x72>
			waitStableLineOn = true;
    56ba:	2201      	movs	r2, #1
    56bc:	4b14      	ldr	r3, [pc, #80]	; (5710 <operateOnEvent+0x170>)
    56be:	701a      	strb	r2, [r3, #0]
			waitStableLineTimer = xTaskGetTickCount();
    56c0:	4b0e      	ldr	r3, [pc, #56]	; (56fc <operateOnEvent+0x15c>)
    56c2:	4798      	blx	r3
    56c4:	4b13      	ldr	r3, [pc, #76]	; (5714 <operateOnEvent+0x174>)
    56c6:	6018      	str	r0, [r3, #0]
    56c8:	e7a3      	b.n	5612 <operateOnEvent+0x72>
    56ca:	46c0      	nop			; (mov r8, r8)
    56cc:	00004d41 	.word	0x00004d41
    56d0:	20000663 	.word	0x20000663
    56d4:	20000674 	.word	0x20000674
    56d8:	20000666 	.word	0x20000666
    56dc:	200006bb 	.word	0x200006bb
    56e0:	00005119 	.word	0x00005119
    56e4:	41004498 	.word	0x41004498
    56e8:	00003ee9 	.word	0x00003ee9
    56ec:	2000064d 	.word	0x2000064d
    56f0:	00004dd1 	.word	0x00004dd1
    56f4:	200005b0 	.word	0x200005b0
    56f8:	0000557d 	.word	0x0000557d
    56fc:	00007d29 	.word	0x00007d29
    5700:	2000068c 	.word	0x2000068c
    5704:	2000069d 	.word	0x2000069d
    5708:	200006a6 	.word	0x200006a6
    570c:	41004494 	.word	0x41004494
    5710:	200006f1 	.word	0x200006f1
    5714:	200006c4 	.word	0x200006c4

00005718 <singlePhasingTimerOver>:
	return (singlePhasingTimerOn && xTaskGetTickCount() - tempSinglePhasingTimer > ((unsigned int)singlePhasingTime * 100));
    5718:	2000      	movs	r0, #0
{
    571a:	b510      	push	{r4, lr}
	return (singlePhasingTimerOn && xTaskGetTickCount() - tempSinglePhasingTimer > ((unsigned int)singlePhasingTime * 100));
    571c:	4b08      	ldr	r3, [pc, #32]	; (5740 <singlePhasingTimerOver+0x28>)
    571e:	781b      	ldrb	r3, [r3, #0]
    5720:	4283      	cmp	r3, r0
    5722:	d00b      	beq.n	573c <singlePhasingTimerOver+0x24>
    5724:	4b07      	ldr	r3, [pc, #28]	; (5744 <singlePhasingTimerOver+0x2c>)
    5726:	4798      	blx	r3
    5728:	4b07      	ldr	r3, [pc, #28]	; (5748 <singlePhasingTimerOver+0x30>)
    572a:	4a08      	ldr	r2, [pc, #32]	; (574c <singlePhasingTimerOver+0x34>)
    572c:	681b      	ldr	r3, [r3, #0]
    572e:	7812      	ldrb	r2, [r2, #0]
    5730:	1ac3      	subs	r3, r0, r3
    5732:	2064      	movs	r0, #100	; 0x64
    5734:	4350      	muls	r0, r2
    5736:	4298      	cmp	r0, r3
    5738:	4180      	sbcs	r0, r0
    573a:	4240      	negs	r0, r0
}
    573c:	bd10      	pop	{r4, pc}
    573e:	46c0      	nop			; (mov r8, r8)
    5740:	2000069d 	.word	0x2000069d
    5744:	00007d29 	.word	0x00007d29
    5748:	2000068c 	.word	0x2000068c
    574c:	20000684 	.word	0x20000684

00005750 <operateOnSinglePhasing>:
		port_base->OUTSET.reg = pin_mask;
    5750:	2280      	movs	r2, #128	; 0x80
    5752:	4b07      	ldr	r3, [pc, #28]	; (5770 <operateOnSinglePhasing+0x20>)
{
    5754:	b510      	push	{r4, lr}
    5756:	601a      	str	r2, [r3, #0]
	stopMotor(false,true,false);
    5758:	2200      	movs	r2, #0
    575a:	2101      	movs	r1, #1
    575c:	0010      	movs	r0, r2
    575e:	4b05      	ldr	r3, [pc, #20]	; (5774 <operateOnSinglePhasing+0x24>)
    5760:	4798      	blx	r3
	simEventTemp[3] = registerEvent('F');
    5762:	4b05      	ldr	r3, [pc, #20]	; (5778 <operateOnSinglePhasing+0x28>)
    5764:	2046      	movs	r0, #70	; 0x46
    5766:	4798      	blx	r3
    5768:	4b04      	ldr	r3, [pc, #16]	; (577c <operateOnSinglePhasing+0x2c>)
    576a:	70d8      	strb	r0, [r3, #3]
}
    576c:	bd10      	pop	{r4, pc}
    576e:	46c0      	nop			; (mov r8, r8)
    5770:	41004498 	.word	0x41004498
    5774:	00005119 	.word	0x00005119
    5778:	00003ee9 	.word	0x00003ee9
    577c:	2000064d 	.word	0x2000064d

00005780 <terminateStopRelay>:
{
    5780:	b570      	push	{r4, r5, r6, lr}
	if (stopSequenceOn && xTaskGetTickCount() - tempStopSequenceTimer > (stopSequenceTimerTime * 100))
    5782:	4c1b      	ldr	r4, [pc, #108]	; (57f0 <terminateStopRelay+0x70>)
    5784:	7823      	ldrb	r3, [r4, #0]
    5786:	2b00      	cmp	r3, #0
    5788:	d025      	beq.n	57d6 <terminateStopRelay+0x56>
    578a:	4b1a      	ldr	r3, [pc, #104]	; (57f4 <terminateStopRelay+0x74>)
    578c:	4798      	blx	r3
    578e:	4b1a      	ldr	r3, [pc, #104]	; (57f8 <terminateStopRelay+0x78>)
    5790:	681b      	ldr	r3, [r3, #0]
    5792:	1ac0      	subs	r0, r0, r3
    5794:	4b19      	ldr	r3, [pc, #100]	; (57fc <terminateStopRelay+0x7c>)
    5796:	781a      	ldrb	r2, [r3, #0]
    5798:	2364      	movs	r3, #100	; 0x64
    579a:	4353      	muls	r3, r2
    579c:	4298      	cmp	r0, r3
    579e:	d91a      	bls.n	57d6 <terminateStopRelay+0x56>
		stopSequenceOn = false;
    57a0:	2500      	movs	r5, #0
		if (!getMotorState_from_pin())		//motor has turned off
    57a2:	4b17      	ldr	r3, [pc, #92]	; (5800 <terminateStopRelay+0x80>)
		stopSequenceOn = false;
    57a4:	7025      	strb	r5, [r4, #0]
		if (!getMotorState_from_pin())		//motor has turned off
    57a6:	4798      	blx	r3
    57a8:	4b16      	ldr	r3, [pc, #88]	; (5804 <terminateStopRelay+0x84>)
    57aa:	4c17      	ldr	r4, [pc, #92]	; (5808 <terminateStopRelay+0x88>)
			if (gotOffCommand)
    57ac:	781a      	ldrb	r2, [r3, #0]
		if (!getMotorState_from_pin())		//motor has turned off
    57ae:	42a8      	cmp	r0, r5
    57b0:	d112      	bne.n	57d8 <terminateStopRelay+0x58>
			if (gotOffCommand)
    57b2:	42aa      	cmp	r2, r5
    57b4:	d004      	beq.n	57c0 <terminateStopRelay+0x40>
				gotOffCommand = false;
    57b6:	7018      	strb	r0, [r3, #0]
				setMotorMGRResponse('O');		//motor has stopped
    57b8:	204f      	movs	r0, #79	; 0x4f
				setMotorMGRResponse('P');		//cannot turn off motor
    57ba:	4b14      	ldr	r3, [pc, #80]	; (580c <terminateStopRelay+0x8c>)
    57bc:	4798      	blx	r3
    57be:	e008      	b.n	57d2 <terminateStopRelay+0x52>
			else if(offButtonPressed)
    57c0:	7823      	ldrb	r3, [r4, #0]
    57c2:	2b00      	cmp	r3, #0
    57c4:	d005      	beq.n	57d2 <terminateStopRelay+0x52>
				simEventTemp[8] = registerEvent('O'); //register TO SIM motor has turned off
    57c6:	4b12      	ldr	r3, [pc, #72]	; (5810 <terminateStopRelay+0x90>)
    57c8:	204f      	movs	r0, #79	; 0x4f
				offButtonPressed=false;
    57ca:	7022      	strb	r2, [r4, #0]
				simEventTemp[8] = registerEvent('O'); //register TO SIM motor has turned off
    57cc:	4798      	blx	r3
    57ce:	4b11      	ldr	r3, [pc, #68]	; (5814 <terminateStopRelay+0x94>)
    57d0:	7218      	strb	r0, [r3, #8]
		offButtonPressed=false;
    57d2:	2300      	movs	r3, #0
    57d4:	7023      	strb	r3, [r4, #0]
}
    57d6:	bd70      	pop	{r4, r5, r6, pc}
			if (gotOffCommand)
    57d8:	2a00      	cmp	r2, #0
    57da:	d002      	beq.n	57e2 <terminateStopRelay+0x62>
				gotOffCommand = false;
    57dc:	701d      	strb	r5, [r3, #0]
				setMotorMGRResponse('P');		//cannot turn off motor
    57de:	2050      	movs	r0, #80	; 0x50
    57e0:	e7eb      	b.n	57ba <terminateStopRelay+0x3a>
				simEventTemp[1] = registerEvent('P');
    57e2:	4b0b      	ldr	r3, [pc, #44]	; (5810 <terminateStopRelay+0x90>)
    57e4:	2050      	movs	r0, #80	; 0x50
    57e6:	4798      	blx	r3
    57e8:	4b0a      	ldr	r3, [pc, #40]	; (5814 <terminateStopRelay+0x94>)
    57ea:	7058      	strb	r0, [r3, #1]
    57ec:	e7f1      	b.n	57d2 <terminateStopRelay+0x52>
    57ee:	46c0      	nop			; (mov r8, r8)
    57f0:	20000695 	.word	0x20000695
    57f4:	00007d29 	.word	0x00007d29
    57f8:	200006b4 	.word	0x200006b4
    57fc:	20000727 	.word	0x20000727
    5800:	00004da9 	.word	0x00004da9
    5804:	200006f0 	.word	0x200006f0
    5808:	200006b0 	.word	0x200006b0
    580c:	00002a1d 	.word	0x00002a1d
    5810:	00003ee9 	.word	0x00003ee9
    5814:	2000064d 	.word	0x2000064d

00005818 <terminateStarDeltaTimer>:
{
    5818:	b570      	push	{r4, r5, r6, lr}
	if(starDeltaTimerOn && xTaskGetTickCount() - tempStartSequenceTimer > ((unsigned long int)(user_settings_parameter_struct.starDeltaTimerAddress) *1000L))
    581a:	4e10      	ldr	r6, [pc, #64]	; (585c <terminateStarDeltaTimer+0x44>)
    581c:	7833      	ldrb	r3, [r6, #0]
    581e:	2b00      	cmp	r3, #0
    5820:	d01a      	beq.n	5858 <terminateStarDeltaTimer+0x40>
    5822:	4d0f      	ldr	r5, [pc, #60]	; (5860 <terminateStarDeltaTimer+0x48>)
    5824:	47a8      	blx	r5
    5826:	4c0f      	ldr	r4, [pc, #60]	; (5864 <terminateStarDeltaTimer+0x4c>)
    5828:	6823      	ldr	r3, [r4, #0]
    582a:	1ac0      	subs	r0, r0, r3
    582c:	4b0e      	ldr	r3, [pc, #56]	; (5868 <terminateStarDeltaTimer+0x50>)
    582e:	88da      	ldrh	r2, [r3, #6]
    5830:	23fa      	movs	r3, #250	; 0xfa
    5832:	009b      	lsls	r3, r3, #2
    5834:	4353      	muls	r3, r2
    5836:	4298      	cmp	r0, r3
    5838:	d90e      	bls.n	5858 <terminateStarDeltaTimer+0x40>
		port_base->OUTCLR.reg = pin_mask;
    583a:	2280      	movs	r2, #128	; 0x80
    583c:	4b0b      	ldr	r3, [pc, #44]	; (586c <terminateStarDeltaTimer+0x54>)
    583e:	0192      	lsls	r2, r2, #6
    5840:	601a      	str	r2, [r3, #0]
		starDeltaTimerOn=false;
    5842:	2300      	movs	r3, #0
    5844:	7033      	strb	r3, [r6, #0]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    5846:	4b0a      	ldr	r3, [pc, #40]	; (5870 <terminateStarDeltaTimer+0x58>)
    5848:	785b      	ldrb	r3, [r3, #1]
    584a:	2b00      	cmp	r3, #0
    584c:	d004      	beq.n	5858 <terminateStarDeltaTimer+0x40>
			enableCurrentBuffer=true;
    584e:	2201      	movs	r2, #1
    5850:	4b08      	ldr	r3, [pc, #32]	; (5874 <terminateStarDeltaTimer+0x5c>)
    5852:	701a      	strb	r2, [r3, #0]
			tempStartSequenceTimer=xTaskGetTickCount();
    5854:	47a8      	blx	r5
    5856:	6020      	str	r0, [r4, #0]
}
    5858:	bd70      	pop	{r4, r5, r6, pc}
    585a:	46c0      	nop			; (mov r8, r8)
    585c:	200006a7 	.word	0x200006a7
    5860:	00007d29 	.word	0x00007d29
    5864:	200006a0 	.word	0x200006a0
    5868:	200005b0 	.word	0x200005b0
    586c:	41004494 	.word	0x41004494
    5870:	2000057a 	.word	0x2000057a
    5874:	20000673 	.word	0x20000673

00005878 <terminateStartRelay>:
{
    5878:	b570      	push	{r4, r5, r6, lr}
	if (startSequenceOn &&  xTaskGetTickCount() - tempStartSequenceTimer > (startSequenceTimerTime * 100))
    587a:	4c25      	ldr	r4, [pc, #148]	; (5910 <terminateStartRelay+0x98>)
    587c:	7823      	ldrb	r3, [r4, #0]
    587e:	2b00      	cmp	r3, #0
    5880:	d02b      	beq.n	58da <terminateStartRelay+0x62>
    5882:	4e24      	ldr	r6, [pc, #144]	; (5914 <terminateStartRelay+0x9c>)
    5884:	47b0      	blx	r6
    5886:	4b24      	ldr	r3, [pc, #144]	; (5918 <terminateStartRelay+0xa0>)
    5888:	4d24      	ldr	r5, [pc, #144]	; (591c <terminateStartRelay+0xa4>)
    588a:	781a      	ldrb	r2, [r3, #0]
    588c:	682b      	ldr	r3, [r5, #0]
    588e:	1ac0      	subs	r0, r0, r3
    5890:	2364      	movs	r3, #100	; 0x64
    5892:	4353      	muls	r3, r2
    5894:	4298      	cmp	r0, r3
    5896:	d920      	bls.n	58da <terminateStartRelay+0x62>
		if(((unsigned int)user_settings_parameter_struct.starDeltaTimerAddress *10) <= startSequenceTimerTime)
    5898:	4b21      	ldr	r3, [pc, #132]	; (5920 <terminateStartRelay+0xa8>)
    589a:	88d9      	ldrh	r1, [r3, #6]
    589c:	230a      	movs	r3, #10
    589e:	434b      	muls	r3, r1
    58a0:	4293      	cmp	r3, r2
    58a2:	d81b      	bhi.n	58dc <terminateStartRelay+0x64>
    58a4:	2280      	movs	r2, #128	; 0x80
    58a6:	4b1f      	ldr	r3, [pc, #124]	; (5924 <terminateStartRelay+0xac>)
    58a8:	0192      	lsls	r2, r2, #6
    58aa:	601a      	str	r2, [r3, #0]
			tempStartSequenceTimer=xTaskGetTickCount();
    58ac:	47b0      	blx	r6
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
    58ae:	4b1e      	ldr	r3, [pc, #120]	; (5928 <terminateStartRelay+0xb0>)
			tempStartSequenceTimer=xTaskGetTickCount();
    58b0:	6028      	str	r0, [r5, #0]
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
    58b2:	785b      	ldrb	r3, [r3, #1]
    58b4:	2b00      	cmp	r3, #0
    58b6:	d002      	beq.n	58be <terminateStartRelay+0x46>
				enableCurrentBuffer=true;
    58b8:	2201      	movs	r2, #1
    58ba:	4b1c      	ldr	r3, [pc, #112]	; (592c <terminateStartRelay+0xb4>)
			starDeltaTimerOn=true;
    58bc:	701a      	strb	r2, [r3, #0]
		startSequenceOn = false;
    58be:	2500      	movs	r5, #0
		bool motor = getMotorState_from_pin();
    58c0:	4b1b      	ldr	r3, [pc, #108]	; (5930 <terminateStartRelay+0xb8>)
		startSequenceOn = false;
    58c2:	7025      	strb	r5, [r4, #0]
		bool motor = getMotorState_from_pin();
    58c4:	4798      	blx	r3
		if (gotOnCommand)
    58c6:	4b1b      	ldr	r3, [pc, #108]	; (5934 <terminateStartRelay+0xbc>)
    58c8:	781a      	ldrb	r2, [r3, #0]
    58ca:	42aa      	cmp	r2, r5
    58cc:	d00f      	beq.n	58ee <terminateStartRelay+0x76>
			gotOnCommand = false;
    58ce:	701d      	strb	r5, [r3, #0]
    58d0:	4c19      	ldr	r4, [pc, #100]	; (5938 <terminateStartRelay+0xc0>)
			if (motor)
    58d2:	42a8      	cmp	r0, r5
    58d4:	d005      	beq.n	58e2 <terminateStartRelay+0x6a>
				setMotorMGRResponse('S'); // motor has started
    58d6:	2053      	movs	r0, #83	; 0x53
				setMotorMGRResponse('N');	//cannot start motor due to some problem
    58d8:	47a0      	blx	r4
}
    58da:	bd70      	pop	{r4, r5, r6, pc}
			starDeltaTimerOn=true;
    58dc:	2201      	movs	r2, #1
    58de:	4b17      	ldr	r3, [pc, #92]	; (593c <terminateStartRelay+0xc4>)
    58e0:	e7ec      	b.n	58bc <terminateStartRelay+0x44>
				stopMotor(false,true,false);
    58e2:	0002      	movs	r2, r0
    58e4:	2101      	movs	r1, #1
    58e6:	4b16      	ldr	r3, [pc, #88]	; (5940 <terminateStartRelay+0xc8>)
    58e8:	4798      	blx	r3
				setMotorMGRResponse('N');	//cannot start motor due to some problem
    58ea:	204e      	movs	r0, #78	; 0x4e
    58ec:	e7f4      	b.n	58d8 <terminateStartRelay+0x60>
    58ee:	4d15      	ldr	r5, [pc, #84]	; (5944 <terminateStartRelay+0xcc>)
    58f0:	4c15      	ldr	r4, [pc, #84]	; (5948 <terminateStartRelay+0xd0>)
			if (motor)
    58f2:	2800      	cmp	r0, #0
    58f4:	d003      	beq.n	58fe <terminateStartRelay+0x86>
				simEventTemp[7] = registerEvent('S');// ;//register To SIM Motor has started
    58f6:	2053      	movs	r0, #83	; 0x53
    58f8:	47a8      	blx	r5
    58fa:	71e0      	strb	r0, [r4, #7]
    58fc:	e7ed      	b.n	58da <terminateStartRelay+0x62>
				stopMotor(false,true,false);
    58fe:	0002      	movs	r2, r0
    5900:	2101      	movs	r1, #1
    5902:	4b0f      	ldr	r3, [pc, #60]	; (5940 <terminateStartRelay+0xc8>)
    5904:	4798      	blx	r3
				simEventTemp[0] = registerEvent('N');//register To SIM motor not started due to ANY REASON
    5906:	204e      	movs	r0, #78	; 0x4e
    5908:	47a8      	blx	r5
    590a:	7020      	strb	r0, [r4, #0]
}
    590c:	e7e5      	b.n	58da <terminateStartRelay+0x62>
    590e:	46c0      	nop			; (mov r8, r8)
    5910:	200006a5 	.word	0x200006a5
    5914:	00007d29 	.word	0x00007d29
    5918:	200006fc 	.word	0x200006fc
    591c:	200006a0 	.word	0x200006a0
    5920:	200005b0 	.word	0x200005b0
    5924:	41004494 	.word	0x41004494
    5928:	2000057a 	.word	0x2000057a
    592c:	20000673 	.word	0x20000673
    5930:	00004da9 	.word	0x00004da9
    5934:	2000064c 	.word	0x2000064c
    5938:	00002a1d 	.word	0x00002a1d
    593c:	200006a7 	.word	0x200006a7
    5940:	00005119 	.word	0x00005119
    5944:	00003ee9 	.word	0x00003ee9
    5948:	2000064d 	.word	0x2000064d

0000594c <statusOnCall>:
{
    594c:	b513      	push	{r0, r1, r4, lr}
	return structThreePhase_state.u8t_phase_ac_state;
    594e:	4b11      	ldr	r3, [pc, #68]	; (5994 <statusOnCall+0x48>)
    5950:	ac01      	add	r4, sp, #4
    5952:	785b      	ldrb	r3, [r3, #1]
    5954:	b2db      	uxtb	r3, r3
	if (b == AC_OFF)
    5956:	2b00      	cmp	r3, #0
    5958:	d10d      	bne.n	5976 <statusOnCall+0x2a>
		status[0]='L';
    595a:	334c      	adds	r3, #76	; 0x4c
			status[0]='_';
    595c:	7023      	strb	r3, [r4, #0]
	if(user_settings_parameter_struct.autoStartAddress)
    595e:	4b0e      	ldr	r3, [pc, #56]	; (5998 <statusOnCall+0x4c>)
    5960:	785b      	ldrb	r3, [r3, #1]
    5962:	2b00      	cmp	r3, #0
    5964:	d014      	beq.n	5990 <statusOnCall+0x44>
	status[1]=')';
    5966:	2329      	movs	r3, #41	; 0x29
	status[1]='[';
    5968:	7063      	strb	r3, [r4, #1]
	status[2]='\0';
    596a:	2300      	movs	r3, #0
	playRepeatedFiles(status);
    596c:	0020      	movs	r0, r4
	status[2]='\0';
    596e:	70a3      	strb	r3, [r4, #2]
	playRepeatedFiles(status);
    5970:	4b0a      	ldr	r3, [pc, #40]	; (599c <statusOnCall+0x50>)
    5972:	4798      	blx	r3
}
    5974:	bd13      	pop	{r0, r1, r4, pc}
	else if (b == AC_2PH)	//power only in 2 phase
    5976:	2b02      	cmp	r3, #2
    5978:	d101      	bne.n	597e <statusOnCall+0x32>
		status[0]='A';
    597a:	333f      	adds	r3, #63	; 0x3f
    597c:	e7ee      	b.n	595c <statusOnCall+0x10>
	else if (b == AC_3PH)
    597e:	2b03      	cmp	r3, #3
    5980:	d1ed      	bne.n	595e <statusOnCall+0x12>
		bool temp = getMotorState_from_pin();
    5982:	4b07      	ldr	r3, [pc, #28]	; (59a0 <statusOnCall+0x54>)
    5984:	4798      	blx	r3
			status[0]='+';
    5986:	232b      	movs	r3, #43	; 0x2b
		if (temp)
    5988:	2800      	cmp	r0, #0
    598a:	d1e7      	bne.n	595c <statusOnCall+0x10>
			status[0]='_';
    598c:	235f      	movs	r3, #95	; 0x5f
    598e:	e7e5      	b.n	595c <statusOnCall+0x10>
	status[1]='[';
    5990:	235b      	movs	r3, #91	; 0x5b
    5992:	e7e9      	b.n	5968 <statusOnCall+0x1c>
    5994:	20000669 	.word	0x20000669
    5998:	200005b0 	.word	0x200005b0
    599c:	000028bd 	.word	0x000028bd
    59a0:	00004da9 	.word	0x00004da9

000059a4 <setM2MEventState>:
{
    59a4:	b510      	push	{r4, lr}
	if(m2mEvent_arr[eventNo]==ME_SERVICING)
    59a6:	4b06      	ldr	r3, [pc, #24]	; (59c0 <setM2MEventState+0x1c>)
    59a8:	5c1a      	ldrb	r2, [r3, r0]
    59aa:	2a02      	cmp	r2, #2
    59ac:	d106      	bne.n	59bc <setM2MEventState+0x18>
		if(state==ME_NOTAVAILABLE)
    59ae:	2903      	cmp	r1, #3
    59b0:	d104      	bne.n	59bc <setM2MEventState+0x18>
			simEventTemp[mapTable[eventNo]]=false;	//regsiter relevant Normal Event
    59b2:	2100      	movs	r1, #0
    59b4:	4a03      	ldr	r2, [pc, #12]	; (59c4 <setM2MEventState+0x20>)
    59b6:	4c04      	ldr	r4, [pc, #16]	; (59c8 <setM2MEventState+0x24>)
    59b8:	5c12      	ldrb	r2, [r2, r0]
    59ba:	54a1      	strb	r1, [r4, r2]
	m2mEvent_arr[eventNo]=state;
    59bc:	5419      	strb	r1, [r3, r0]
}
    59be:	bd10      	pop	{r4, pc}
    59c0:	200006b9 	.word	0x200006b9
    59c4:	20000664 	.word	0x20000664
    59c8:	2000064d 	.word	0x2000064d

000059cc <M2MEventManager>:
{
    59cc:	b510      	push	{r4, lr}
		if(m2mEvent_arr[j]==ME_WAITREGISTER)
    59ce:	4c06      	ldr	r4, [pc, #24]	; (59e8 <M2MEventManager+0x1c>)
    59d0:	7860      	ldrb	r0, [r4, #1]
    59d2:	2801      	cmp	r0, #1
    59d4:	d101      	bne.n	59da <M2MEventManager+0xe>
			registerM2MEvent(j);
    59d6:	4b05      	ldr	r3, [pc, #20]	; (59ec <M2MEventManager+0x20>)
    59d8:	4798      	blx	r3
		if(m2mEvent_arr[j]==ME_WAITREGISTER)
    59da:	7823      	ldrb	r3, [r4, #0]
    59dc:	2b01      	cmp	r3, #1
    59de:	d102      	bne.n	59e6 <M2MEventManager+0x1a>
			registerM2MEvent(j);
    59e0:	2000      	movs	r0, #0
    59e2:	4b02      	ldr	r3, [pc, #8]	; (59ec <M2MEventManager+0x20>)
    59e4:	4798      	blx	r3
}
    59e6:	bd10      	pop	{r4, pc}
    59e8:	200006b9 	.word	0x200006b9
    59ec:	00002999 	.word	0x00002999

000059f0 <SIMEventManager>:
{
    59f0:	b570      	push	{r4, r5, r6, lr}
	if (factory_settings_parameter_struct.ENABLE_WATER)
    59f2:	4b0d      	ldr	r3, [pc, #52]	; (5a28 <SIMEventManager+0x38>)
    59f4:	795a      	ldrb	r2, [r3, #5]
    59f6:	2a00      	cmp	r2, #0
    59f8:	d009      	beq.n	5a0e <SIMEventManager+0x1e>
			i = 19;
    59fa:	2413      	movs	r4, #19
		if (factory_settings_parameter_struct.ENABLE_GP)
    59fc:	791b      	ldrb	r3, [r3, #4]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    59fe:	2b00      	cmp	r3, #0
    5a00:	d100      	bne.n	5a04 <SIMEventManager+0x14>
			i = 12;
    5a02:	3c02      	subs	r4, #2
	while(i--)
    5a04:	3c01      	subs	r4, #1
    5a06:	b2e4      	uxtb	r4, r4
    5a08:	2cff      	cmp	r4, #255	; 0xff
    5a0a:	d103      	bne.n	5a14 <SIMEventManager+0x24>
}
    5a0c:	bd70      	pop	{r4, r5, r6, pc}
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    5a0e:	785b      	ldrb	r3, [r3, #1]
			i = 14;
    5a10:	240e      	movs	r4, #14
    5a12:	e7f4      	b.n	59fe <SIMEventManager+0xe>
		if (!simEventTemp[i])
    5a14:	4d05      	ldr	r5, [pc, #20]	; (5a2c <SIMEventManager+0x3c>)
    5a16:	5d2b      	ldrb	r3, [r5, r4]
    5a18:	2b00      	cmp	r3, #0
    5a1a:	d1f3      	bne.n	5a04 <SIMEventManager+0x14>
		simEventTemp[i] = registerEvent(simEvent[i]);
    5a1c:	4b04      	ldr	r3, [pc, #16]	; (5a30 <SIMEventManager+0x40>)
    5a1e:	5d18      	ldrb	r0, [r3, r4]
    5a20:	4b04      	ldr	r3, [pc, #16]	; (5a34 <SIMEventManager+0x44>)
    5a22:	4798      	blx	r3
    5a24:	5528      	strb	r0, [r5, r4]
    5a26:	e7ed      	b.n	5a04 <SIMEventManager+0x14>
    5a28:	2000057a 	.word	0x2000057a
    5a2c:	2000064d 	.word	0x2000064d
    5a30:	200006dc 	.word	0x200006dc
    5a34:	00003ee9 	.word	0x00003ee9

00005a38 <checkCurrentConsumption>:
{
    5a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(startSequenceOn || stopSequenceOn || !getMotorState() || !(user_settings_parameter_struct.currentDetectionAddress) || starDeltaTimerOn)
    5a3a:	4b3a      	ldr	r3, [pc, #232]	; (5b24 <checkCurrentConsumption+0xec>)
    5a3c:	781b      	ldrb	r3, [r3, #0]
    5a3e:	2b00      	cmp	r3, #0
    5a40:	d148      	bne.n	5ad4 <checkCurrentConsumption+0x9c>
    5a42:	4b39      	ldr	r3, [pc, #228]	; (5b28 <checkCurrentConsumption+0xf0>)
    5a44:	781b      	ldrb	r3, [r3, #0]
    5a46:	2b00      	cmp	r3, #0
    5a48:	d144      	bne.n	5ad4 <checkCurrentConsumption+0x9c>
	return mFeedback;
    5a4a:	4b38      	ldr	r3, [pc, #224]	; (5b2c <checkCurrentConsumption+0xf4>)
    5a4c:	781b      	ldrb	r3, [r3, #0]
	if(startSequenceOn || stopSequenceOn || !getMotorState() || !(user_settings_parameter_struct.currentDetectionAddress) || starDeltaTimerOn)
    5a4e:	2b00      	cmp	r3, #0
    5a50:	d040      	beq.n	5ad4 <checkCurrentConsumption+0x9c>
    5a52:	4c37      	ldr	r4, [pc, #220]	; (5b30 <checkCurrentConsumption+0xf8>)
    5a54:	7be3      	ldrb	r3, [r4, #15]
    5a56:	2b00      	cmp	r3, #0
    5a58:	d03c      	beq.n	5ad4 <checkCurrentConsumption+0x9c>
    5a5a:	4b36      	ldr	r3, [pc, #216]	; (5b34 <checkCurrentConsumption+0xfc>)
    5a5c:	781b      	ldrb	r3, [r3, #0]
    5a5e:	9301      	str	r3, [sp, #4]
    5a60:	2b00      	cmp	r3, #0
    5a62:	d137      	bne.n	5ad4 <checkCurrentConsumption+0x9c>
	if(enableCurrentBuffer && xTaskGetTickCount()-tempStartSequenceTimer>30000)
    5a64:	4e34      	ldr	r6, [pc, #208]	; (5b38 <checkCurrentConsumption+0x100>)
    5a66:	4d35      	ldr	r5, [pc, #212]	; (5b3c <checkCurrentConsumption+0x104>)
    5a68:	7833      	ldrb	r3, [r6, #0]
    5a6a:	4f35      	ldr	r7, [pc, #212]	; (5b40 <checkCurrentConsumption+0x108>)
    5a6c:	2b00      	cmp	r3, #0
    5a6e:	d04a      	beq.n	5b06 <checkCurrentConsumption+0xce>
    5a70:	47a8      	blx	r5
    5a72:	4b34      	ldr	r3, [pc, #208]	; (5b44 <checkCurrentConsumption+0x10c>)
    5a74:	681b      	ldr	r3, [r3, #0]
    5a76:	1ac0      	subs	r0, r0, r3
    5a78:	4b33      	ldr	r3, [pc, #204]	; (5b48 <checkCurrentConsumption+0x110>)
    5a7a:	4298      	cmp	r0, r3
    5a7c:	d902      	bls.n	5a84 <checkCurrentConsumption+0x4c>
		enableCurrentBuffer=false;
    5a7e:	466b      	mov	r3, sp
    5a80:	791b      	ldrb	r3, [r3, #4]
    5a82:	7033      	strb	r3, [r6, #0]
	if(enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))    //more than double  <<1 gives mulile of 2 value (double the orignal value)
    5a84:	7833      	ldrb	r3, [r6, #0]
	uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current;
    5a86:	693a      	ldr	r2, [r7, #16]
	if(enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))    //more than double  <<1 gives mulile of 2 value (double the orignal value)
    5a88:	2b00      	cmp	r3, #0
    5a8a:	d03d      	beq.n	5b08 <checkCurrentConsumption+0xd0>
    5a8c:	6921      	ldr	r1, [r4, #16]
    5a8e:	0049      	lsls	r1, r1, #1
    5a90:	428a      	cmp	r2, r1
    5a92:	d807      	bhi.n	5aa4 <checkCurrentConsumption+0x6c>
	else if(temp < user_settings_parameter_struct.underloadAddress && !enableCurrentBuffer)		// only consider noLoad after 30 secs
    5a94:	69a1      	ldr	r1, [r4, #24]
    5a96:	4291      	cmp	r1, r2
    5a98:	d902      	bls.n	5aa0 <checkCurrentConsumption+0x68>
		temp2 = CR_UNDER;
    5a9a:	2402      	movs	r4, #2
	else if(temp < user_settings_parameter_struct.underloadAddress && !enableCurrentBuffer)		// only consider noLoad after 30 secs
    5a9c:	2b00      	cmp	r3, #0
    5a9e:	d01b      	beq.n	5ad8 <checkCurrentConsumption+0xa0>
		temp2= CR_NORMAL;
    5aa0:	2400      	movs	r4, #0
    5aa2:	e03d      	b.n	5b20 <checkCurrentConsumption+0xe8>
		temp2 = CR_OVER2;
    5aa4:	2402      	movs	r4, #2
		overLoadDetectValue=18000;
    5aa6:	4e29      	ldr	r6, [pc, #164]	; (5b4c <checkCurrentConsumption+0x114>)
	if(lastCurrentReading == temp2)
    5aa8:	4b29      	ldr	r3, [pc, #164]	; (5b50 <checkCurrentConsumption+0x118>)
    5aaa:	4f2a      	ldr	r7, [pc, #168]	; (5b54 <checkCurrentConsumption+0x11c>)
    5aac:	781b      	ldrb	r3, [r3, #0]
    5aae:	42a3      	cmp	r3, r4
    5ab0:	d124      	bne.n	5afc <checkCurrentConsumption+0xc4>
		if(xTaskGetTickCount()-currentEventFilterTempTime>overLoadDetectValue)
    5ab2:	47a8      	blx	r5
    5ab4:	683b      	ldr	r3, [r7, #0]
    5ab6:	1ac0      	subs	r0, r0, r3
    5ab8:	42b0      	cmp	r0, r6
    5aba:	d90b      	bls.n	5ad4 <checkCurrentConsumption+0x9c>
			if(temp2==CR_OVER)
    5abc:	2c01      	cmp	r4, #1
    5abe:	d110      	bne.n	5ae2 <checkCurrentConsumption+0xaa>
				stopMotor(false,true,false);
    5ac0:	2200      	movs	r2, #0
    5ac2:	0021      	movs	r1, r4
    5ac4:	0010      	movs	r0, r2
    5ac6:	4b24      	ldr	r3, [pc, #144]	; (5b58 <checkCurrentConsumption+0x120>)
    5ac8:	4798      	blx	r3
				simEventTemp[12] = registerEvent('B');			//register overload Event
    5aca:	4b24      	ldr	r3, [pc, #144]	; (5b5c <checkCurrentConsumption+0x124>)
    5acc:	2042      	movs	r0, #66	; 0x42
    5ace:	4798      	blx	r3
    5ad0:	4b23      	ldr	r3, [pc, #140]	; (5b60 <checkCurrentConsumption+0x128>)
    5ad2:	7318      	strb	r0, [r3, #12]
}
    5ad4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		temp2 = CR_OVER;
    5ad6:	2401      	movs	r4, #1
		overLoadDetectValue=overLoadDetectValue>>2;
    5ad8:	4e22      	ldr	r6, [pc, #136]	; (5b64 <checkCurrentConsumption+0x12c>)
    5ada:	e7e5      	b.n	5aa8 <checkCurrentConsumption+0x70>
		temp2 = CR_OVER;
    5adc:	2401      	movs	r4, #1
		overLoadDetectValue=overLoadDetectValue>>1;
    5ade:	4e22      	ldr	r6, [pc, #136]	; (5b68 <checkCurrentConsumption+0x130>)
    5ae0:	e7e2      	b.n	5aa8 <checkCurrentConsumption+0x70>
			else if(temp2==CR_UNDER)
    5ae2:	2c02      	cmp	r4, #2
    5ae4:	d1f6      	bne.n	5ad4 <checkCurrentConsumption+0x9c>
				stopMotor(false,true,false);
    5ae6:	2200      	movs	r2, #0
    5ae8:	2101      	movs	r1, #1
    5aea:	0010      	movs	r0, r2
    5aec:	4b1a      	ldr	r3, [pc, #104]	; (5b58 <checkCurrentConsumption+0x120>)
    5aee:	4798      	blx	r3
				simEventTemp[13] = registerEvent('J');			// register Underload Event
    5af0:	4b1a      	ldr	r3, [pc, #104]	; (5b5c <checkCurrentConsumption+0x124>)
    5af2:	204a      	movs	r0, #74	; 0x4a
    5af4:	4798      	blx	r3
    5af6:	4b1a      	ldr	r3, [pc, #104]	; (5b60 <checkCurrentConsumption+0x128>)
    5af8:	7358      	strb	r0, [r3, #13]
    5afa:	e7eb      	b.n	5ad4 <checkCurrentConsumption+0x9c>
		currentEventFilterTempTime = xTaskGetTickCount();
    5afc:	47a8      	blx	r5
		lastCurrentReading=temp2;
    5afe:	4b14      	ldr	r3, [pc, #80]	; (5b50 <checkCurrentConsumption+0x118>)
		currentEventFilterTempTime = xTaskGetTickCount();
    5b00:	6038      	str	r0, [r7, #0]
		lastCurrentReading=temp2;
    5b02:	701c      	strb	r4, [r3, #0]
    5b04:	e7e6      	b.n	5ad4 <checkCurrentConsumption+0x9c>
	uint32_t ADCcurrent = Analog_Parameter_Struct.Motor_Current;
    5b06:	693a      	ldr	r2, [r7, #16]
	else if(!enableCurrentBuffer && temp>(user_settings_parameter_struct.normalLoadAddress<<1))			//more than double
    5b08:	6920      	ldr	r0, [r4, #16]
    5b0a:	0041      	lsls	r1, r0, #1
    5b0c:	4291      	cmp	r1, r2
    5b0e:	d3e2      	bcc.n	5ad6 <checkCurrentConsumption+0x9e>
	else if(!enableCurrentBuffer && temp> (user_settings_parameter_struct.normalLoadAddress+(user_settings_parameter_struct.normalLoadAddress>>1))) // more than 1.5
    5b10:	0841      	lsrs	r1, r0, #1
    5b12:	1809      	adds	r1, r1, r0
    5b14:	4291      	cmp	r1, r2
    5b16:	d3e1      	bcc.n	5adc <checkCurrentConsumption+0xa4>
	else if (!enableCurrentBuffer && temp>user_settings_parameter_struct.overloadAddress)		// more than 1.25 to 1.5
    5b18:	6961      	ldr	r1, [r4, #20]
    5b1a:	4291      	cmp	r1, r2
    5b1c:	d2ba      	bcs.n	5a94 <checkCurrentConsumption+0x5c>
		temp2 = CR_OVER;
    5b1e:	2401      	movs	r4, #1
	uint32_t overLoadDetectValue=12000;
    5b20:	4e12      	ldr	r6, [pc, #72]	; (5b6c <checkCurrentConsumption+0x134>)
    5b22:	e7c1      	b.n	5aa8 <checkCurrentConsumption+0x70>
    5b24:	200006a5 	.word	0x200006a5
    5b28:	20000695 	.word	0x20000695
    5b2c:	20000666 	.word	0x20000666
    5b30:	200005b0 	.word	0x200005b0
    5b34:	200006a7 	.word	0x200006a7
    5b38:	20000673 	.word	0x20000673
    5b3c:	00007d29 	.word	0x00007d29
    5b40:	2000062c 	.word	0x2000062c
    5b44:	200006a0 	.word	0x200006a0
    5b48:	00007530 	.word	0x00007530
    5b4c:	00004650 	.word	0x00004650
    5b50:	20000692 	.word	0x20000692
    5b54:	20000680 	.word	0x20000680
    5b58:	00005119 	.word	0x00005119
    5b5c:	00003ee9 	.word	0x00003ee9
    5b60:	2000064d 	.word	0x2000064d
    5b64:	00000bb8 	.word	0x00000bb8
    5b68:	00001770 	.word	0x00001770
    5b6c:	00002ee0 	.word	0x00002ee0

00005b70 <start_motor_service>:
{
    5b70:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b72:	b08b      	sub	sp, #44	; 0x2c
	extint_chan_get_config_defaults(&config_extint_chan_isr);
    5b74:	ad04      	add	r5, sp, #16
    5b76:	0028      	movs	r0, r5
    5b78:	4b65      	ldr	r3, [pc, #404]	; (5d10 <start_motor_service+0x1a0>)
    5b7a:	4798      	blx	r3
	config_extint_chan_isr.gpio_pin           = PIN_PB11A_EIC_EXTINT11;
    5b7c:	232b      	movs	r3, #43	; 0x2b
	config_extint_chan_isr.gpio_pin_mux       = MUX_PB11A_EIC_EXTINT11;
    5b7e:	2400      	movs	r4, #0
	config_extint_chan_isr.gpio_pin_pull      = EXTINT_PULL_UP;
    5b80:	2601      	movs	r6, #1
	config_extint_chan_isr.gpio_pin           = PIN_PB11A_EIC_EXTINT11;
    5b82:	9304      	str	r3, [sp, #16]
	extint_chan_set_config(11, &config_extint_chan_isr);
    5b84:	0029      	movs	r1, r5
    5b86:	200b      	movs	r0, #11
    5b88:	4b62      	ldr	r3, [pc, #392]	; (5d14 <start_motor_service+0x1a4>)
	config_extint_chan_isr.gpio_pin_mux       = MUX_PB11A_EIC_EXTINT11;
    5b8a:	606c      	str	r4, [r5, #4]
	config_extint_chan_isr.gpio_pin_pull      = EXTINT_PULL_UP;
    5b8c:	722e      	strb	r6, [r5, #8]
	config_extint_chan_isr.detection_criteria = EXTINT_DETECT_RISING;
    5b8e:	72ee      	strb	r6, [r5, #11]
	config_extint_chan_isr.wake_if_sleeping   = false;
    5b90:	726c      	strb	r4, [r5, #9]
	extint_chan_set_config(11, &config_extint_chan_isr);
    5b92:	4798      	blx	r3
	extint_register_callback(PR2_ISR,11,EXTINT_CALLBACK_TYPE_DETECT);
    5b94:	0022      	movs	r2, r4
    5b96:	210b      	movs	r1, #11
    5b98:	4b5f      	ldr	r3, [pc, #380]	; (5d18 <start_motor_service+0x1a8>)
    5b9a:	4860      	ldr	r0, [pc, #384]	; (5d1c <start_motor_service+0x1ac>)
    5b9c:	4798      	blx	r3
	extint_chan_enable_callback(11,EXTINT_CALLBACK_TYPE_DETECT);
    5b9e:	0021      	movs	r1, r4
    5ba0:	4b5f      	ldr	r3, [pc, #380]	; (5d20 <start_motor_service+0x1b0>)
    5ba2:	200b      	movs	r0, #11
    5ba4:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    5ba6:	a902      	add	r1, sp, #8
	port_pin_set_config(PR1_PIN, &pin_confg);
    5ba8:	202a      	movs	r0, #42	; 0x2a
    5baa:	4b5e      	ldr	r3, [pc, #376]	; (5d24 <start_motor_service+0x1b4>)
    5bac:	700c      	strb	r4, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5bae:	704e      	strb	r6, [r1, #1]
	config->powersave  = false;
    5bb0:	708c      	strb	r4, [r1, #2]
    5bb2:	4798      	blx	r3
	vSemaphoreCreateBinary(xADC_Semaphore);
    5bb4:	4b5c      	ldr	r3, [pc, #368]	; (5d28 <start_motor_service+0x1b8>)
    5bb6:	2203      	movs	r2, #3
    5bb8:	0021      	movs	r1, r4
    5bba:	0030      	movs	r0, r6
    5bbc:	4798      	blx	r3
    5bbe:	4b5b      	ldr	r3, [pc, #364]	; (5d2c <start_motor_service+0x1bc>)
    5bc0:	6018      	str	r0, [r3, #0]
    5bc2:	42a0      	cmp	r0, r4
    5bc4:	d004      	beq.n	5bd0 <start_motor_service+0x60>
    5bc6:	0023      	movs	r3, r4
    5bc8:	0022      	movs	r2, r4
    5bca:	0021      	movs	r1, r4
    5bcc:	4c58      	ldr	r4, [pc, #352]	; (5d30 <start_motor_service+0x1c0>)
    5bce:	47a0      	blx	r4
    5bd0:	2400      	movs	r4, #0
	config_pins.direction = PORT_PIN_DIR_OUTPUT;
    5bd2:	2601      	movs	r6, #1
    5bd4:	ad03      	add	r5, sp, #12
	port_pin_set_config(START_RELAY_PIN,&config_pins);
    5bd6:	0029      	movs	r1, r5
    5bd8:	4f52      	ldr	r7, [pc, #328]	; (5d24 <start_motor_service+0x1b4>)
    5bda:	202d      	movs	r0, #45	; 0x2d
    5bdc:	70ac      	strb	r4, [r5, #2]
	config_pins.direction = PORT_PIN_DIR_OUTPUT;
    5bde:	702e      	strb	r6, [r5, #0]
	config_pins.input_pull = PORT_PIN_PULL_NONE;
    5be0:	706c      	strb	r4, [r5, #1]
	port_pin_set_config(START_RELAY_PIN,&config_pins);
    5be2:	47b8      	blx	r7
	port_pin_set_config(STOP_RELAY_PIN,&config_pins);
    5be4:	0029      	movs	r1, r5
    5be6:	202c      	movs	r0, #44	; 0x2c
    5be8:	47b8      	blx	r7
	port_pin_set_config(AUTO_ON_LED_PIN,&config_pins);
    5bea:	0029      	movs	r1, r5
    5bec:	2028      	movs	r0, #40	; 0x28
    5bee:	47b8      	blx	r7
	port_pin_set_config(THREEPHASE_OK_LED_PIN,&config_pins);
    5bf0:	0029      	movs	r1, r5
    5bf2:	2027      	movs	r0, #39	; 0x27
    5bf4:	47b8      	blx	r7
	port_pin_set_config(MOTOR_ON_LED_PIN,&config_pins);
    5bf6:	0029      	movs	r1, r5
    5bf8:	2005      	movs	r0, #5
    5bfa:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    5bfc:	2280      	movs	r2, #128	; 0x80
    5bfe:	2120      	movs	r1, #32
    5c00:	4b4c      	ldr	r3, [pc, #304]	; (5d34 <start_motor_service+0x1c4>)
    5c02:	0052      	lsls	r2, r2, #1
    5c04:	601a      	str	r2, [r3, #0]
    5c06:	4a4c      	ldr	r2, [pc, #304]	; (5d38 <start_motor_service+0x1c8>)
	extint_chan_get_config_defaults(&config_extint_chan);
    5c08:	ad07      	add	r5, sp, #28
    5c0a:	6191      	str	r1, [r2, #24]
    5c0c:	2280      	movs	r2, #128	; 0x80
    5c0e:	0028      	movs	r0, r5
    5c10:	601a      	str	r2, [r3, #0]
    5c12:	4b3f      	ldr	r3, [pc, #252]	; (5d10 <start_motor_service+0x1a0>)
    5c14:	4798      	blx	r3
	config_extint_chan.gpio_pin = MOTOR_FEEDBACK_EIC_PIN;
    5c16:	232e      	movs	r3, #46	; 0x2e
    5c18:	9307      	str	r3, [sp, #28]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    5c1a:	3b2b      	subs	r3, #43	; 0x2b
    5c1c:	72eb      	strb	r3, [r5, #11]
	extint_chan_set_config(MOTOR_FEEDBACK_EIC_LINE, &config_extint_chan);
    5c1e:	0029      	movs	r1, r5
    5c20:	200e      	movs	r0, #14
    5c22:	4b3c      	ldr	r3, [pc, #240]	; (5d14 <start_motor_service+0x1a4>)
	config_extint_chan.gpio_pin_mux = START_BUTTON_EIC_MUX;
    5c24:	606c      	str	r4, [r5, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    5c26:	722e      	strb	r6, [r5, #8]
	extint_chan_set_config(MOTOR_FEEDBACK_EIC_LINE, &config_extint_chan);
    5c28:	4798      	blx	r3
	extint_chan_enable_callback(MOTOR_FEEDBACK_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    5c2a:	0021      	movs	r1, r4
    5c2c:	4b3c      	ldr	r3, [pc, #240]	; (5d20 <start_motor_service+0x1b0>)
    5c2e:	200e      	movs	r0, #14
    5c30:	4798      	blx	r3
	extint_register_callback(motor_feedback_callback,MOTOR_FEEDBACK_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    5c32:	4f39      	ldr	r7, [pc, #228]	; (5d18 <start_motor_service+0x1a8>)
    5c34:	0022      	movs	r2, r4
    5c36:	210e      	movs	r1, #14
    5c38:	4840      	ldr	r0, [pc, #256]	; (5d3c <start_motor_service+0x1cc>)
    5c3a:	47b8      	blx	r7
	config_extint_chan.gpio_pin = START_BUTTON_EIC_PIN;
    5c3c:	2326      	movs	r3, #38	; 0x26
    5c3e:	9307      	str	r3, [sp, #28]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    5c40:	3b24      	subs	r3, #36	; 0x24
    5c42:	72eb      	strb	r3, [r5, #11]
	extint_chan_set_config(START_BUTTON_EIC_LINE, &config_extint_chan);
    5c44:	0029      	movs	r1, r5
    5c46:	2006      	movs	r0, #6
    5c48:	4b32      	ldr	r3, [pc, #200]	; (5d14 <start_motor_service+0x1a4>)
	config_extint_chan.gpio_pin_mux = START_BUTTON_EIC_MUX;
    5c4a:	606c      	str	r4, [r5, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    5c4c:	722e      	strb	r6, [r5, #8]
	extint_chan_set_config(START_BUTTON_EIC_LINE, &config_extint_chan);
    5c4e:	4798      	blx	r3
	extint_chan_enable_callback(START_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    5c50:	0021      	movs	r1, r4
    5c52:	4b33      	ldr	r3, [pc, #204]	; (5d20 <start_motor_service+0x1b0>)
    5c54:	2006      	movs	r0, #6
    5c56:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,START_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    5c58:	0022      	movs	r2, r4
    5c5a:	2106      	movs	r1, #6
    5c5c:	4838      	ldr	r0, [pc, #224]	; (5d40 <start_motor_service+0x1d0>)
    5c5e:	47b8      	blx	r7
	config_extint_chan.gpio_pin = STOP_BUTTON_EIC_PIN;
    5c60:	2325      	movs	r3, #37	; 0x25
    5c62:	9307      	str	r3, [sp, #28]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    5c64:	3b23      	subs	r3, #35	; 0x23
    5c66:	72eb      	strb	r3, [r5, #11]
	extint_chan_set_config(STOP_BUTTON_EIC_LINE, &config_extint_chan);
    5c68:	0029      	movs	r1, r5
    5c6a:	2005      	movs	r0, #5
    5c6c:	4b29      	ldr	r3, [pc, #164]	; (5d14 <start_motor_service+0x1a4>)
	config_extint_chan.gpio_pin_mux = STOP_BUTTON_EIC_MUX;
    5c6e:	606c      	str	r4, [r5, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    5c70:	722e      	strb	r6, [r5, #8]
	extint_chan_set_config(STOP_BUTTON_EIC_LINE, &config_extint_chan);
    5c72:	4798      	blx	r3
	extint_chan_enable_callback(STOP_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    5c74:	0021      	movs	r1, r4
    5c76:	4b2a      	ldr	r3, [pc, #168]	; (5d20 <start_motor_service+0x1b0>)
    5c78:	2005      	movs	r0, #5
    5c7a:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,STOP_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    5c7c:	0022      	movs	r2, r4
    5c7e:	2105      	movs	r1, #5
    5c80:	482f      	ldr	r0, [pc, #188]	; (5d40 <start_motor_service+0x1d0>)
    5c82:	47b8      	blx	r7
	config_extint_chan.gpio_pin = AUTO_BUTTON_EIC_PIN;
    5c84:	231c      	movs	r3, #28
    5c86:	9307      	str	r3, [sp, #28]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    5c88:	3b1a      	subs	r3, #26
    5c8a:	72eb      	strb	r3, [r5, #11]
	extint_chan_set_config(AUTO_BUTTON_EIC_LINE, &config_extint_chan);
    5c8c:	0029      	movs	r1, r5
    5c8e:	2008      	movs	r0, #8
    5c90:	4b20      	ldr	r3, [pc, #128]	; (5d14 <start_motor_service+0x1a4>)
	config_extint_chan.gpio_pin_mux = AUTO_BUTTON_EIC_MUX;
    5c92:	606c      	str	r4, [r5, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    5c94:	722e      	strb	r6, [r5, #8]
	extint_chan_set_config(AUTO_BUTTON_EIC_LINE, &config_extint_chan);
    5c96:	4798      	blx	r3
	extint_chan_enable_callback(AUTO_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    5c98:	0021      	movs	r1, r4
    5c9a:	4b21      	ldr	r3, [pc, #132]	; (5d20 <start_motor_service+0x1b0>)
    5c9c:	2008      	movs	r0, #8
    5c9e:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,AUTO_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    5ca0:	0022      	movs	r2, r4
    5ca2:	2108      	movs	r1, #8
    5ca4:	4826      	ldr	r0, [pc, #152]	; (5d40 <start_motor_service+0x1d0>)
    5ca6:	47b8      	blx	r7
	config_extint_chan.gpio_pin = LCD_SHOW_BUTTON_EIC_PIN;
    5ca8:	2329      	movs	r3, #41	; 0x29
    5caa:	9307      	str	r3, [sp, #28]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    5cac:	3b27      	subs	r3, #39	; 0x27
    5cae:	72eb      	strb	r3, [r5, #11]
	extint_chan_set_config(LCD_SHOW_BUTTON_EIC_LINE, &config_extint_chan);
    5cb0:	0029      	movs	r1, r5
    5cb2:	2009      	movs	r0, #9
    5cb4:	4b17      	ldr	r3, [pc, #92]	; (5d14 <start_motor_service+0x1a4>)
	config_extint_chan.gpio_pin_mux = LCD_SHOW_BUTTON_EIC_MUX;
    5cb6:	606c      	str	r4, [r5, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    5cb8:	722e      	strb	r6, [r5, #8]
	extint_chan_set_config(LCD_SHOW_BUTTON_EIC_LINE, &config_extint_chan);
    5cba:	4798      	blx	r3
	extint_chan_enable_callback(LCD_SHOW_BUTTON_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    5cbc:	0021      	movs	r1, r4
    5cbe:	4b18      	ldr	r3, [pc, #96]	; (5d20 <start_motor_service+0x1b0>)
    5cc0:	2009      	movs	r0, #9
    5cc2:	4798      	blx	r3
	extint_register_callback(button_detect_pin_callback,LCD_SHOW_BUTTON_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    5cc4:	0022      	movs	r2, r4
    5cc6:	2109      	movs	r1, #9
    5cc8:	481d      	ldr	r0, [pc, #116]	; (5d40 <start_motor_service+0x1d0>)
    5cca:	47b8      	blx	r7
	xTaskCreate(vTask_10ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
    5ccc:	4d1d      	ldr	r5, [pc, #116]	; (5d44 <start_motor_service+0x1d4>)
    5cce:	0023      	movs	r3, r4
    5cd0:	0021      	movs	r1, r4
    5cd2:	9401      	str	r4, [sp, #4]
    5cd4:	9600      	str	r6, [sp, #0]
    5cd6:	2282      	movs	r2, #130	; 0x82
    5cd8:	481b      	ldr	r0, [pc, #108]	; (5d48 <start_motor_service+0x1d8>)
    5cda:	47a8      	blx	r5
	xTaskCreate(vTask_100ms_Timer,NULL,configMINIMAL_STACK_SIZE, NULL,1,NULL);
    5cdc:	0023      	movs	r3, r4
    5cde:	0021      	movs	r1, r4
    5ce0:	9401      	str	r4, [sp, #4]
    5ce2:	9600      	str	r6, [sp, #0]
    5ce4:	2282      	movs	r2, #130	; 0x82
    5ce6:	4819      	ldr	r0, [pc, #100]	; (5d4c <start_motor_service+0x1dc>)
    5ce8:	47a8      	blx	r5
	xTaskCreate(Water_Level_Task,NULL,(uint16_t)700,NULL,1,NULL);
    5cea:	22af      	movs	r2, #175	; 0xaf
    5cec:	0023      	movs	r3, r4
    5cee:	0021      	movs	r1, r4
    5cf0:	9401      	str	r4, [sp, #4]
    5cf2:	9600      	str	r6, [sp, #0]
    5cf4:	0092      	lsls	r2, r2, #2
    5cf6:	4816      	ldr	r0, [pc, #88]	; (5d50 <start_motor_service+0x1e0>)
    5cf8:	47a8      	blx	r5
	xTaskCreate(vTask_MOTORCONTROL,NULL,(uint16_t)700,NULL,1,NULL);
    5cfa:	22af      	movs	r2, #175	; 0xaf
    5cfc:	9401      	str	r4, [sp, #4]
    5cfe:	9600      	str	r6, [sp, #0]
    5d00:	0023      	movs	r3, r4
    5d02:	0092      	lsls	r2, r2, #2
    5d04:	0021      	movs	r1, r4
    5d06:	4813      	ldr	r0, [pc, #76]	; (5d54 <start_motor_service+0x1e4>)
    5d08:	47a8      	blx	r5
}
    5d0a:	b00b      	add	sp, #44	; 0x2c
    5d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d0e:	46c0      	nop			; (mov r8, r8)
    5d10:	00006a1d 	.word	0x00006a1d
    5d14:	00006a31 	.word	0x00006a31
    5d18:	00008e25 	.word	0x00008e25
    5d1c:	000045c5 	.word	0x000045c5
    5d20:	00008e4d 	.word	0x00008e4d
    5d24:	00009345 	.word	0x00009345
    5d28:	0000749d 	.word	0x0000749d
    5d2c:	20000238 	.word	0x20000238
    5d30:	000074e5 	.word	0x000074e5
    5d34:	41004498 	.word	0x41004498
    5d38:	41004400 	.word	0x41004400
    5d3c:	00004435 	.word	0x00004435
    5d40:	0000441d 	.word	0x0000441d
    5d44:	00007b09 	.word	0x00007b09
    5d48:	000044b1 	.word	0x000044b1
    5d4c:	00004441 	.word	0x00004441
    5d50:	000053c1 	.word	0x000053c1
    5d54:	00006099 	.word	0x00006099

00005d58 <motor_checkSleepElligible>:
	if (factory_settings_parameter_struct.ENABLE_WATER)
    5d58:	4922      	ldr	r1, [pc, #136]	; (5de4 <motor_checkSleepElligible+0x8c>)
    5d5a:	794b      	ldrb	r3, [r1, #5]
    5d5c:	2b00      	cmp	r3, #0
    5d5e:	d00b      	beq.n	5d78 <motor_checkSleepElligible+0x20>
			j = 19;
    5d60:	2313      	movs	r3, #19
		if (factory_settings_parameter_struct.ENABLE_GP)
    5d62:	790a      	ldrb	r2, [r1, #4]
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    5d64:	2a00      	cmp	r2, #0
    5d66:	d100      	bne.n	5d6a <motor_checkSleepElligible+0x12>
			j = 12;
    5d68:	3b02      	subs	r3, #2
		if(!simEventTemp[j])
    5d6a:	481f      	ldr	r0, [pc, #124]	; (5de8 <motor_checkSleepElligible+0x90>)
	while(j--)
    5d6c:	3b01      	subs	r3, #1
    5d6e:	b2db      	uxtb	r3, r3
    5d70:	2bff      	cmp	r3, #255	; 0xff
    5d72:	d104      	bne.n	5d7e <motor_checkSleepElligible+0x26>
	bool event=true;
    5d74:	2201      	movs	r2, #1
    5d76:	e005      	b.n	5d84 <motor_checkSleepElligible+0x2c>
		if (factory_settings_parameter_struct.ENABLE_CURRENT)
    5d78:	784a      	ldrb	r2, [r1, #1]
			j = 14;
    5d7a:	230e      	movs	r3, #14
    5d7c:	e7f2      	b.n	5d64 <motor_checkSleepElligible+0xc>
		if(!simEventTemp[j])
    5d7e:	5cc2      	ldrb	r2, [r0, r3]
    5d80:	2a00      	cmp	r2, #0
    5d82:	d1f3      	bne.n	5d6c <motor_checkSleepElligible+0x14>
	if (factory_settings_parameter_struct.ENABLE_M2M)
    5d84:	78cb      	ldrb	r3, [r1, #3]
    5d86:	2b00      	cmp	r3, #0
    5d88:	d009      	beq.n	5d9e <motor_checkSleepElligible+0x46>
    5d8a:	4b18      	ldr	r3, [pc, #96]	; (5dec <motor_checkSleepElligible+0x94>)
		if(event && m2mEvent_arr[0] == ME_WAITREGISTER || m2mEvent_arr[1]==ME_WAITREGISTER)
    5d8c:	2a00      	cmp	r2, #0
    5d8e:	d002      	beq.n	5d96 <motor_checkSleepElligible+0x3e>
    5d90:	7819      	ldrb	r1, [r3, #0]
    5d92:	2901      	cmp	r1, #1
    5d94:	d002      	beq.n	5d9c <motor_checkSleepElligible+0x44>
    5d96:	785b      	ldrb	r3, [r3, #1]
    5d98:	2b01      	cmp	r3, #1
    5d9a:	d100      	bne.n	5d9e <motor_checkSleepElligible+0x46>
			event = false;
    5d9c:	2200      	movs	r2, #0
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn);
    5d9e:	2000      	movs	r0, #0
	return phaseAC;
    5da0:	4b13      	ldr	r3, [pc, #76]	; (5df0 <motor_checkSleepElligible+0x98>)
    5da2:	781b      	ldrb	r3, [r3, #0]
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn);
    5da4:	4283      	cmp	r3, r0
    5da6:	d119      	bne.n	5ddc <motor_checkSleepElligible+0x84>
	return (!getACPowerState() && !eventOccured && event && !waitStableLineOn && !singlePhasingTimerOn
    5da8:	4b12      	ldr	r3, [pc, #72]	; (5df4 <motor_checkSleepElligible+0x9c>)
    5daa:	781b      	ldrb	r3, [r3, #0]
    5dac:	4283      	cmp	r3, r0
    5dae:	d115      	bne.n	5ddc <motor_checkSleepElligible+0x84>
    5db0:	4282      	cmp	r2, r0
    5db2:	d013      	beq.n	5ddc <motor_checkSleepElligible+0x84>
    5db4:	4b10      	ldr	r3, [pc, #64]	; (5df8 <motor_checkSleepElligible+0xa0>)
    5db6:	781b      	ldrb	r3, [r3, #0]
    5db8:	4283      	cmp	r3, r0
    5dba:	d10f      	bne.n	5ddc <motor_checkSleepElligible+0x84>
    5dbc:	4b0f      	ldr	r3, [pc, #60]	; (5dfc <motor_checkSleepElligible+0xa4>)
    5dbe:	781b      	ldrb	r3, [r3, #0]
    5dc0:	4283      	cmp	r3, r0
    5dc2:	d10b      	bne.n	5ddc <motor_checkSleepElligible+0x84>
	&& !startTimerOn && !startSequenceOn && !stopSequenceOn);
    5dc4:	4b0e      	ldr	r3, [pc, #56]	; (5e00 <motor_checkSleepElligible+0xa8>)
    5dc6:	781b      	ldrb	r3, [r3, #0]
    5dc8:	4283      	cmp	r3, r0
    5dca:	d107      	bne.n	5ddc <motor_checkSleepElligible+0x84>
    5dcc:	4b0d      	ldr	r3, [pc, #52]	; (5e04 <motor_checkSleepElligible+0xac>)
    5dce:	781b      	ldrb	r3, [r3, #0]
    5dd0:	4283      	cmp	r3, r0
    5dd2:	d103      	bne.n	5ddc <motor_checkSleepElligible+0x84>
    5dd4:	4b0c      	ldr	r3, [pc, #48]	; (5e08 <motor_checkSleepElligible+0xb0>)
    5dd6:	7818      	ldrb	r0, [r3, #0]
    5dd8:	2301      	movs	r3, #1
    5dda:	4058      	eors	r0, r3
    5ddc:	2301      	movs	r3, #1
    5dde:	4018      	ands	r0, r3
}
    5de0:	4770      	bx	lr
    5de2:	46c0      	nop			; (mov r8, r8)
    5de4:	2000057a 	.word	0x2000057a
    5de8:	2000064d 	.word	0x2000064d
    5dec:	200006b9 	.word	0x200006b9
    5df0:	200006bb 	.word	0x200006bb
    5df4:	20000663 	.word	0x20000663
    5df8:	200006f1 	.word	0x200006f1
    5dfc:	2000069d 	.word	0x2000069d
    5e00:	200006a6 	.word	0x200006a6
    5e04:	200006a5 	.word	0x200006a5
    5e08:	20000695 	.word	0x20000695

00005e0c <configure_ac>:
	config->ana_source_generator = GCLK_GENERATOR_3;
    5e0c:	2303      	movs	r3, #3
{
    5e0e:	b510      	push	{r4, lr}
    5e10:	b088      	sub	sp, #32
    5e12:	aa01      	add	r2, sp, #4
    5e14:	7093      	strb	r3, [r2, #2]
	ac_init(&ac_instance, AC, &conf_ac);
    5e16:	4c20      	ldr	r4, [pc, #128]	; (5e98 <configure_ac+0x8c>)
	conf_ac.run_in_standby[0] = true;
    5e18:	3b02      	subs	r3, #2
    5e1a:	7013      	strb	r3, [r2, #0]
	conf_ac.dig_source_generator = GCLK_GENERATOR_6;
    5e1c:	3305      	adds	r3, #5
    5e1e:	7053      	strb	r3, [r2, #1]
	ac_init(&ac_instance, AC, &conf_ac);
    5e20:	491e      	ldr	r1, [pc, #120]	; (5e9c <configure_ac+0x90>)
    5e22:	4b1f      	ldr	r3, [pc, #124]	; (5ea0 <configure_ac+0x94>)
    5e24:	0020      	movs	r0, r4
    5e26:	4798      	blx	r3
	conf_ac_channel.negative_input = AC_CHAN_NEG_MUX_SCALED_VCC;
    5e28:	23a0      	movs	r3, #160	; 0xa0
	conf_ac_channel.sample_mode = AC_CHAN_MODE_CONTINUOUS;
    5e2a:	aa02      	add	r2, sp, #8
	conf_ac_channel.negative_input = AC_CHAN_NEG_MUX_SCALED_VCC;
    5e2c:	00db      	lsls	r3, r3, #3
    5e2e:	8253      	strh	r3, [r2, #18]
	conf_ac_channel.vcc_scale_factor = 45;
    5e30:	232d      	movs	r3, #45	; 0x2d
	conf_ac_channel.sample_mode = AC_CHAN_MODE_CONTINUOUS;
    5e32:	2100      	movs	r1, #0
	conf_ac_channel.vcc_scale_factor = 45;
    5e34:	7513      	strb	r3, [r2, #20]
	ac_chan_set_config(&ac_instance, AC_CHAN_CHANNEL_0, &conf_ac_channel);
    5e36:	0020      	movs	r0, r4
    5e38:	4b1a      	ldr	r3, [pc, #104]	; (5ea4 <configure_ac+0x98>)
	conf_ac_channel.sample_mode = AC_CHAN_MODE_CONTINUOUS;
    5e3a:	7011      	strb	r1, [r2, #0]
	conf_ac_channel.filter = AC_CHAN_FILTER_NONE;
    5e3c:	6051      	str	r1, [r2, #4]
	conf_ac_channel.enable_hysteresis = false;
    5e3e:	7211      	strb	r1, [r2, #8]
	conf_ac_channel.output_mode = AC_CHAN_OUTPUT_INTERNAL;
    5e40:	60d1      	str	r1, [r2, #12]
	conf_ac_channel.positive_input = AC_CHAN_POS_MUX_PIN0;
    5e42:	8211      	strh	r1, [r2, #16]
	conf_ac_channel.interrupt_selection = AC_CHAN_INTERRUPT_SELECTION_TOGGLE;
    5e44:	7551      	strb	r1, [r2, #21]
	ac_chan_set_config(&ac_instance, AC_CHAN_CHANNEL_0, &conf_ac_channel);
    5e46:	4798      	blx	r3
    5e48:	6823      	ldr	r3, [r4, #0]
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
    5e4a:	7a5a      	ldrb	r2, [r3, #9]
    5e4c:	b252      	sxtb	r2, r2
    5e4e:	2a00      	cmp	r2, #0
    5e50:	dbfb      	blt.n	5e4a <configure_ac+0x3e>
	ac_module->COMPCTRL[(uint8_t)channel].reg |= AC_COMPCTRL_ENABLE;
    5e52:	2201      	movs	r2, #1
    5e54:	6919      	ldr	r1, [r3, #16]
    5e56:	430a      	orrs	r2, r1
    5e58:	611a      	str	r2, [r3, #16]
	ac_module->EVCTRL.reg |= event_mask;
    5e5a:	2280      	movs	r2, #128	; 0x80
    5e5c:	8859      	ldrh	r1, [r3, #2]
    5e5e:	0052      	lsls	r2, r2, #1
    5e60:	430a      	orrs	r2, r1
    5e62:	805a      	strh	r2, [r3, #2]
    5e64:	6823      	ldr	r3, [r4, #0]
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
    5e66:	7a5a      	ldrb	r2, [r3, #9]
    5e68:	b252      	sxtb	r2, r2
    5e6a:	2a00      	cmp	r2, #0
    5e6c:	dbfb      	blt.n	5e66 <configure_ac+0x5a>
	ac_module->CTRLA.reg |= AC_CTRLA_ENABLE;
    5e6e:	2202      	movs	r2, #2
    5e70:	7819      	ldrb	r1, [r3, #0]
	ac_register_callback(&ac_instance, ac_detect_callback,AC_CALLBACK_COMPARATOR_0);
    5e72:	0020      	movs	r0, r4
    5e74:	430a      	orrs	r2, r1
    5e76:	701a      	strb	r2, [r3, #0]
    5e78:	490b      	ldr	r1, [pc, #44]	; (5ea8 <configure_ac+0x9c>)
    5e7a:	2200      	movs	r2, #0
    5e7c:	4b0b      	ldr	r3, [pc, #44]	; (5eac <configure_ac+0xa0>)
    5e7e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Set software flag for the callback */
	module->enable_callback_mask |= (1 << callback_type);
    5e80:	2201      	movs	r2, #1
    5e82:	7e63      	ldrb	r3, [r4, #25]
    5e84:	4313      	orrs	r3, r2
    5e86:	7663      	strb	r3, [r4, #25]
		default:
			break;
	}

	/* Enable the interrupt for the callback */
	module->hw->INTENSET.reg = inenset_temp;
    5e88:	6823      	ldr	r3, [r4, #0]
    5e8a:	715a      	strb	r2, [r3, #5]
    5e8c:	2280      	movs	r2, #128	; 0x80
    5e8e:	4b08      	ldr	r3, [pc, #32]	; (5eb0 <configure_ac+0xa4>)
    5e90:	0452      	lsls	r2, r2, #17
    5e92:	601a      	str	r2, [r3, #0]
}
    5e94:	b008      	add	sp, #32
    5e96:	bd10      	pop	{r4, pc}
    5e98:	2000074c 	.word	0x2000074c
    5e9c:	42004400 	.word	0x42004400
    5ea0:	00006329 	.word	0x00006329
    5ea4:	000063ad 	.word	0x000063ad
    5ea8:	00004429 	.word	0x00004429
    5eac:	00008fd5 	.word	0x00008fd5
    5eb0:	e000e100 	.word	0xe000e100

00005eb4 <configure_rtc>:
{
    5eb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
	config->clear_on_match      = false;
    5eb6:	2300      	movs	r3, #0
    5eb8:	466a      	mov	r2, sp
	rtc_count_init(&rtc_instance, RTC, &conf_rtc_count);
    5eba:	4c0d      	ldr	r4, [pc, #52]	; (5ef0 <configure_rtc+0x3c>)
    5ebc:	70d3      	strb	r3, [r2, #3]
	conf_rtc_count.prescaler  = RTC_COUNT_PRESCALER_DIV_1;
    5ebe:	8013      	strh	r3, [r2, #0]
	conf_rtc_count.mode       = RTC_COUNT_MODE_16BIT;
    5ec0:	7093      	strb	r3, [r2, #2]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
#endif

	for (uint8_t i = 0; i < RTC_NUM_OF_COMP16; i++) {
		config->compare_values[i] = 0;
    5ec2:	9302      	str	r3, [sp, #8]
    5ec4:	9303      	str	r3, [sp, #12]
	conf_rtc_count.continuously_update =  true;
    5ec6:	3301      	adds	r3, #1
    5ec8:	7113      	strb	r3, [r2, #4]
	rtc_count_init(&rtc_instance, RTC, &conf_rtc_count);
    5eca:	490a      	ldr	r1, [pc, #40]	; (5ef4 <configure_rtc+0x40>)
    5ecc:	0020      	movs	r0, r4
    5ece:	4b0a      	ldr	r3, [pc, #40]	; (5ef8 <configure_rtc+0x44>)
    5ed0:	4798      	blx	r3
	rtc_count_set_period(&rtc_instance, 10);
    5ed2:	210a      	movs	r1, #10
    5ed4:	0020      	movs	r0, r4
    5ed6:	4b09      	ldr	r3, [pc, #36]	; (5efc <configure_rtc+0x48>)
    5ed8:	4798      	blx	r3
		event_mask |= RTC_MODE0_EVCTRL_TAMPEVEI;
	}
#endif

	/* Enable given event(s). */
	rtc_module->MODE0.EVCTRL.reg |= event_mask;
    5eda:	2180      	movs	r1, #128	; 0x80
	Rtc *const rtc_module = module->hw;
    5edc:	6822      	ldr	r2, [r4, #0]
	rtc_module->MODE0.EVCTRL.reg |= event_mask;
    5ede:	0209      	lsls	r1, r1, #8
    5ee0:	8893      	ldrh	r3, [r2, #4]
	rtc_count_enable(&rtc_instance);
    5ee2:	0020      	movs	r0, r4
    5ee4:	430b      	orrs	r3, r1
    5ee6:	8093      	strh	r3, [r2, #4]
    5ee8:	4b05      	ldr	r3, [pc, #20]	; (5f00 <configure_rtc+0x4c>)
    5eea:	4798      	blx	r3
}
    5eec:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    5eee:	46c0      	nop			; (mov r8, r8)
    5ef0:	2000072c 	.word	0x2000072c
    5ef4:	40001400 	.word	0x40001400
    5ef8:	00006b81 	.word	0x00006b81
    5efc:	00006c61 	.word	0x00006c61
    5f00:	00006aa9 	.word	0x00006aa9

00005f04 <configure_event>:

void configure_event(void)
{
    5f04:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct events_config conf_event;
	events_get_config_defaults(&conf_event);
    5f06:	ac01      	add	r4, sp, #4
    5f08:	0020      	movs	r0, r4
    5f0a:	4b09      	ldr	r3, [pc, #36]	; (5f30 <configure_event+0x2c>)
    5f0c:	4798      	blx	r3
	conf_event.generator = EVSYS_ID_GEN_RTC_OVF;
    5f0e:	2303      	movs	r3, #3
    5f10:	70a3      	strb	r3, [r4, #2]
	conf_event.edge_detect = EVENTS_EDGE_DETECT_NONE;
    5f12:	2300      	movs	r3, #0
	conf_event.path       = EVENTS_PATH_ASYNCHRONOUS;
	
	events_allocate(&resource, &conf_event);
    5f14:	4d07      	ldr	r5, [pc, #28]	; (5f34 <configure_event+0x30>)
	conf_event.edge_detect = EVENTS_EDGE_DETECT_NONE;
    5f16:	7023      	strb	r3, [r4, #0]
	conf_event.path       = EVENTS_PATH_ASYNCHRONOUS;
    5f18:	3302      	adds	r3, #2
    5f1a:	7063      	strb	r3, [r4, #1]
	events_allocate(&resource, &conf_event);
    5f1c:	0021      	movs	r1, r4
    5f1e:	0028      	movs	r0, r5
    5f20:	4b05      	ldr	r3, [pc, #20]	; (5f38 <configure_event+0x34>)
    5f22:	4798      	blx	r3
	events_attach_user(&resource, EVSYS_ID_USER_AC_SOC_0);
    5f24:	0028      	movs	r0, r5
    5f26:	2119      	movs	r1, #25
    5f28:	4b04      	ldr	r3, [pc, #16]	; (5f3c <configure_event+0x38>)
    5f2a:	4798      	blx	r3
}
    5f2c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    5f2e:	46c0      	nop			; (mov r8, r8)
    5f30:	00008f05 	.word	0x00008f05
    5f34:	20000744 	.word	0x20000744
    5f38:	00008f15 	.word	0x00008f15
    5f3c:	00008fb1 	.word	0x00008fb1

00005f40 <operateOnButtonEvent>:

void operateOnButtonEvent(void)
{
	buttonEventOccured=false;
    5f40:	2200      	movs	r2, #0
{
    5f42:	b510      	push	{r4, lr}
	buttonEventOccured=false;
    5f44:	4b14      	ldr	r3, [pc, #80]	; (5f98 <operateOnButtonEvent+0x58>)
    5f46:	701a      	strb	r2, [r3, #0]
	return (port_base->IN.reg & pin_mask);
    5f48:	4b14      	ldr	r3, [pc, #80]	; (5f9c <operateOnButtonEvent+0x5c>)
    5f4a:	681a      	ldr	r2, [r3, #0]
	if (START_BUTTON_INPUT_COMES)
    5f4c:	0652      	lsls	r2, r2, #25
    5f4e:	d407      	bmi.n	5f60 <operateOnButtonEvent+0x20>
	{
		lastPressTime=xTaskGetTickCount();
    5f50:	4b13      	ldr	r3, [pc, #76]	; (5fa0 <operateOnButtonEvent+0x60>)
    5f52:	4798      	blx	r3
		lastButtonEvent=BTNEVENTSTART;
    5f54:	2201      	movs	r2, #1
		lastPressTime=xTaskGetTickCount();
    5f56:	4b13      	ldr	r3, [pc, #76]	; (5fa4 <operateOnButtonEvent+0x64>)
    5f58:	6018      	str	r0, [r3, #0]
		lastButtonEvent=BTNEVENTAUTO;
	}
	else if(LCDSHOW_BUTTON_INPUT_COMES)
	{
		lastPressTime= xTaskGetTickCount();
		lastButtonEvent=BTNEVENTLCDSHOW;
    5f5a:	4b13      	ldr	r3, [pc, #76]	; (5fa8 <operateOnButtonEvent+0x68>)
    5f5c:	701a      	strb	r2, [r3, #0]
	}
}
    5f5e:	bd10      	pop	{r4, pc}
    5f60:	681a      	ldr	r2, [r3, #0]
	else if (STOP_BUTTON_INPUT_COMES)
    5f62:	0692      	lsls	r2, r2, #26
    5f64:	d405      	bmi.n	5f72 <operateOnButtonEvent+0x32>
		lastPressTime=xTaskGetTickCount();
    5f66:	4b0e      	ldr	r3, [pc, #56]	; (5fa0 <operateOnButtonEvent+0x60>)
    5f68:	4798      	blx	r3
    5f6a:	4b0e      	ldr	r3, [pc, #56]	; (5fa4 <operateOnButtonEvent+0x64>)
		lastButtonEvent=BTNEVENTSTOP;
    5f6c:	2202      	movs	r2, #2
		lastPressTime=xTaskGetTickCount();
    5f6e:	6018      	str	r0, [r3, #0]
    5f70:	e7f3      	b.n	5f5a <operateOnButtonEvent+0x1a>
    5f72:	4a0e      	ldr	r2, [pc, #56]	; (5fac <operateOnButtonEvent+0x6c>)
    5f74:	6a12      	ldr	r2, [r2, #32]
	else if (AUTO_BUTTON_INPUT_COMES)
    5f76:	00d2      	lsls	r2, r2, #3
    5f78:	d405      	bmi.n	5f86 <operateOnButtonEvent+0x46>
		lastPressTime=xTaskGetTickCount();
    5f7a:	4b09      	ldr	r3, [pc, #36]	; (5fa0 <operateOnButtonEvent+0x60>)
    5f7c:	4798      	blx	r3
    5f7e:	4b09      	ldr	r3, [pc, #36]	; (5fa4 <operateOnButtonEvent+0x64>)
		lastButtonEvent=BTNEVENTAUTO;
    5f80:	2203      	movs	r2, #3
		lastPressTime=xTaskGetTickCount();
    5f82:	6018      	str	r0, [r3, #0]
    5f84:	e7e9      	b.n	5f5a <operateOnButtonEvent+0x1a>
    5f86:	681b      	ldr	r3, [r3, #0]
	else if(LCDSHOW_BUTTON_INPUT_COMES)
    5f88:	059b      	lsls	r3, r3, #22
    5f8a:	d4e8      	bmi.n	5f5e <operateOnButtonEvent+0x1e>
		lastPressTime= xTaskGetTickCount();
    5f8c:	4b04      	ldr	r3, [pc, #16]	; (5fa0 <operateOnButtonEvent+0x60>)
    5f8e:	4798      	blx	r3
    5f90:	4b04      	ldr	r3, [pc, #16]	; (5fa4 <operateOnButtonEvent+0x64>)
		lastButtonEvent=BTNEVENTLCDSHOW;
    5f92:	2204      	movs	r2, #4
		lastPressTime= xTaskGetTickCount();
    5f94:	6018      	str	r0, [r3, #0]
    5f96:	e7e0      	b.n	5f5a <operateOnButtonEvent+0x1a>
    5f98:	200006ab 	.word	0x200006ab
    5f9c:	410044a0 	.word	0x410044a0
    5fa0:	00007d29 	.word	0x00007d29
    5fa4:	2000067c 	.word	0x2000067c
    5fa8:	20000694 	.word	0x20000694
    5fac:	41004400 	.word	0x41004400

00005fb0 <buttonFilter>:

void buttonFilter(void)
{
    5fb0:	b510      	push	{r4, lr}
	if(lastButtonEvent>0 && xTaskGetTickCount() - lastPressTime > 70)
    5fb2:	4c2c      	ldr	r4, [pc, #176]	; (6064 <buttonFilter+0xb4>)
    5fb4:	7823      	ldrb	r3, [r4, #0]
    5fb6:	2b00      	cmp	r3, #0
    5fb8:	d011      	beq.n	5fde <buttonFilter+0x2e>
    5fba:	4b2b      	ldr	r3, [pc, #172]	; (6068 <buttonFilter+0xb8>)
    5fbc:	4798      	blx	r3
    5fbe:	4b2b      	ldr	r3, [pc, #172]	; (606c <buttonFilter+0xbc>)
    5fc0:	681b      	ldr	r3, [r3, #0]
    5fc2:	1ac0      	subs	r0, r0, r3
    5fc4:	2846      	cmp	r0, #70	; 0x46
    5fc6:	d90a      	bls.n	5fde <buttonFilter+0x2e>
	{
		if(lastButtonEvent==BTNEVENTSTART && START_BUTTON_INPUT_COMES)
    5fc8:	7823      	ldrb	r3, [r4, #0]
    5fca:	2b01      	cmp	r3, #1
    5fcc:	d108      	bne.n	5fe0 <buttonFilter+0x30>
    5fce:	4b28      	ldr	r3, [pc, #160]	; (6070 <buttonFilter+0xc0>)
    5fd0:	6818      	ldr	r0, [r3, #0]
    5fd2:	2340      	movs	r3, #64	; 0x40
    5fd4:	4018      	ands	r0, r3
    5fd6:	d103      	bne.n	5fe0 <buttonFilter+0x30>
		{
			lastButtonEvent=0;
			startMotor(false);
    5fd8:	4b26      	ldr	r3, [pc, #152]	; (6074 <buttonFilter+0xc4>)
			lastButtonEvent=0;
    5fda:	7020      	strb	r0, [r4, #0]
			startMotor(false);
    5fdc:	4798      	blx	r3
		else
		{
			lastButtonEvent=0;
		}
	}
}
    5fde:	bd10      	pop	{r4, pc}
		else if(lastButtonEvent==BTNEVENTSTOP && STOP_BUTTON_INPUT_COMES)
    5fe0:	7823      	ldrb	r3, [r4, #0]
    5fe2:	2b02      	cmp	r3, #2
    5fe4:	d10a      	bne.n	5ffc <buttonFilter+0x4c>
    5fe6:	4b22      	ldr	r3, [pc, #136]	; (6070 <buttonFilter+0xc0>)
    5fe8:	6818      	ldr	r0, [r3, #0]
    5fea:	2320      	movs	r3, #32
    5fec:	4018      	ands	r0, r3
    5fee:	d105      	bne.n	5ffc <buttonFilter+0x4c>
			stopMotor(false,false,true);
    5ff0:	2201      	movs	r2, #1
    5ff2:	0001      	movs	r1, r0
    5ff4:	4b20      	ldr	r3, [pc, #128]	; (6078 <buttonFilter+0xc8>)
			lastButtonEvent=0;
    5ff6:	7020      	strb	r0, [r4, #0]
			stopMotor(false,false,true);
    5ff8:	4798      	blx	r3
    5ffa:	e7f0      	b.n	5fde <buttonFilter+0x2e>
		else if(lastButtonEvent==BTNEVENTAUTO && AUTO_BUTTON_INPUT_COMES)
    5ffc:	7823      	ldrb	r3, [r4, #0]
    5ffe:	2b03      	cmp	r3, #3
    6000:	d11d      	bne.n	603e <buttonFilter+0x8e>
    6002:	2280      	movs	r2, #128	; 0x80
    6004:	4b1d      	ldr	r3, [pc, #116]	; (607c <buttonFilter+0xcc>)
    6006:	0552      	lsls	r2, r2, #21
    6008:	6a1b      	ldr	r3, [r3, #32]
    600a:	4013      	ands	r3, r2
    600c:	d117      	bne.n	603e <buttonFilter+0x8e>
			lastButtonEvent=0;
    600e:	7023      	strb	r3, [r4, #0]
			saveAutoStartSettings(!((bool)user_settings_parameter_struct.autoStartAddress));  //set AutoStart to True in EEPROM
    6010:	4c1b      	ldr	r4, [pc, #108]	; (6080 <buttonFilter+0xd0>)
    6012:	7860      	ldrb	r0, [r4, #1]
    6014:	4243      	negs	r3, r0
    6016:	4158      	adcs	r0, r3
    6018:	4b1a      	ldr	r3, [pc, #104]	; (6084 <buttonFilter+0xd4>)
    601a:	b2c0      	uxtb	r0, r0
    601c:	4798      	blx	r3
			resetAutoStart(true);
    601e:	4b1a      	ldr	r3, [pc, #104]	; (6088 <buttonFilter+0xd8>)
    6020:	2001      	movs	r0, #1
    6022:	4798      	blx	r3
			if(user_settings_parameter_struct.autoStartAddress)
    6024:	7862      	ldrb	r2, [r4, #1]
    6026:	4b19      	ldr	r3, [pc, #100]	; (608c <buttonFilter+0xdc>)
    6028:	4c19      	ldr	r4, [pc, #100]	; (6090 <buttonFilter+0xe0>)
    602a:	2a00      	cmp	r2, #0
    602c:	d003      	beq.n	6036 <buttonFilter+0x86>
				simEventTemp[10] = registerEvent(')');
    602e:	2029      	movs	r0, #41	; 0x29
    6030:	4798      	blx	r3
    6032:	72a0      	strb	r0, [r4, #10]
    6034:	e7d3      	b.n	5fde <buttonFilter+0x2e>
				simEventTemp[11] = registerEvent('[');
    6036:	205b      	movs	r0, #91	; 0x5b
    6038:	4798      	blx	r3
    603a:	72e0      	strb	r0, [r4, #11]
    603c:	e7cf      	b.n	5fde <buttonFilter+0x2e>
		else if(lastButtonEvent==BTNEVENTLCDSHOW && LCDSHOW_BUTTON_INPUT_COMES)
    603e:	7823      	ldrb	r3, [r4, #0]
    6040:	2b04      	cmp	r3, #4
    6042:	d10c      	bne.n	605e <buttonFilter+0xae>
    6044:	2280      	movs	r2, #128	; 0x80
    6046:	4b0a      	ldr	r3, [pc, #40]	; (6070 <buttonFilter+0xc0>)
    6048:	0092      	lsls	r2, r2, #2
    604a:	681b      	ldr	r3, [r3, #0]
    604c:	4013      	ands	r3, r2
    604e:	d106      	bne.n	605e <buttonFilter+0xae>
			setDisplayPause(!varPauseDisplay);
    6050:	4a10      	ldr	r2, [pc, #64]	; (6094 <buttonFilter+0xe4>)
			lastButtonEvent=0;
    6052:	7023      	strb	r3, [r4, #0]
			setDisplayPause(!varPauseDisplay);
    6054:	7811      	ldrb	r1, [r2, #0]
    6056:	3301      	adds	r3, #1
    6058:	404b      	eors	r3, r1


void setDisplayPause(bool value)
{
	varPauseDisplay=value;
    605a:	7013      	strb	r3, [r2, #0]
    605c:	e7bf      	b.n	5fde <buttonFilter+0x2e>
			lastButtonEvent=0;
    605e:	2300      	movs	r3, #0
    6060:	7023      	strb	r3, [r4, #0]
}
    6062:	e7bc      	b.n	5fde <buttonFilter+0x2e>
    6064:	20000694 	.word	0x20000694
    6068:	00007d29 	.word	0x00007d29
    606c:	2000067c 	.word	0x2000067c
    6070:	410044a0 	.word	0x410044a0
    6074:	00004fd9 	.word	0x00004fd9
    6078:	00005119 	.word	0x00005119
    607c:	41004400 	.word	0x41004400
    6080:	200005b0 	.word	0x200005b0
    6084:	00000b69 	.word	0x00000b69
    6088:	00004e99 	.word	0x00004e99
    608c:	00003ee9 	.word	0x00003ee9
    6090:	2000064d 	.word	0x2000064d
    6094:	200006b8 	.word	0x200006b8

00006098 <vTask_MOTORCONTROL>:
{
    6098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Configure_ADC0();
    609a:	4b6e      	ldr	r3, [pc, #440]	; (6254 <vTask_MOTORCONTROL+0x1bc>)
    609c:	4798      	blx	r3
	configure_ac();
    609e:	4b6e      	ldr	r3, [pc, #440]	; (6258 <vTask_MOTORCONTROL+0x1c0>)
    60a0:	4798      	blx	r3
	configure_rtc();
    60a2:	4b6e      	ldr	r3, [pc, #440]	; (625c <vTask_MOTORCONTROL+0x1c4>)
    60a4:	4798      	blx	r3
	configure_event();
    60a6:	4b6e      	ldr	r3, [pc, #440]	; (6260 <vTask_MOTORCONTROL+0x1c8>)
    60a8:	4798      	blx	r3
	gotOffCommand = false;
    60aa:	2300      	movs	r3, #0
    60ac:	4a6d      	ldr	r2, [pc, #436]	; (6264 <vTask_MOTORCONTROL+0x1cc>)
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
    60ae:	4e6e      	ldr	r6, [pc, #440]	; (6268 <vTask_MOTORCONTROL+0x1d0>)
	gotOffCommand = false;
    60b0:	7013      	strb	r3, [r2, #0]
	eventOccured = false;
    60b2:	4c6e      	ldr	r4, [pc, #440]	; (626c <vTask_MOTORCONTROL+0x1d4>)
	gotOnCommand = false;
    60b4:	4a6e      	ldr	r2, [pc, #440]	; (6270 <vTask_MOTORCONTROL+0x1d8>)
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
    60b6:	4d6f      	ldr	r5, [pc, #444]	; (6274 <vTask_MOTORCONTROL+0x1dc>)
    60b8:	6830      	ldr	r0, [r6, #0]
	gotOnCommand = false;
    60ba:	7013      	strb	r3, [r2, #0]
	eventOccured = false;
    60bc:	7023      	strb	r3, [r4, #0]
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0);
    60be:	47a8      	blx	r5
	vTaskDelay(500/portTICK_PERIOD_MS);
    60c0:	20fa      	movs	r0, #250	; 0xfa
    60c2:	4b6d      	ldr	r3, [pc, #436]	; (6278 <vTask_MOTORCONTROL+0x1e0>)
    60c4:	0040      	lsls	r0, r0, #1
    60c6:	4798      	blx	r3
	last_comparison = ac_chan_get_status(&ac_instance,AC_CHAN_CHANNEL_0); //read again
    60c8:	6830      	ldr	r0, [r6, #0]
    60ca:	47a8      	blx	r5
	if (last_comparison & AC_CHAN_STATUS_POS_ABOVE_NEG)
    60cc:	2304      	movs	r3, #4
    60ce:	4018      	ands	r0, r3
    60d0:	4b6a      	ldr	r3, [pc, #424]	; (627c <vTask_MOTORCONTROL+0x1e4>)
    60d2:	d100      	bne.n	60d6 <vTask_MOTORCONTROL+0x3e>
    60d4:	e0b9      	b.n	624a <vTask_MOTORCONTROL+0x1b2>
		isACpowerAvailable = true;
    60d6:	2201      	movs	r2, #1
    60d8:	701a      	strb	r2, [r3, #0]
	current_three_phase_state = AC_OFF;
    60da:	2300      	movs	r3, #0
	singlePhasingTime = 10;
    60dc:	210a      	movs	r1, #10
	current_three_phase_state = AC_OFF;
    60de:	4a68      	ldr	r2, [pc, #416]	; (6280 <vTask_MOTORCONTROL+0x1e8>)
	startSequenceOn = false;
    60e0:	4d68      	ldr	r5, [pc, #416]	; (6284 <vTask_MOTORCONTROL+0x1ec>)
	current_three_phase_state = AC_OFF;
    60e2:	7013      	strb	r3, [r2, #0]
	startTimerOn = false;
    60e4:	4a68      	ldr	r2, [pc, #416]	; (6288 <vTask_MOTORCONTROL+0x1f0>)
	stopSequenceOn = false;
    60e6:	4e69      	ldr	r6, [pc, #420]	; (628c <vTask_MOTORCONTROL+0x1f4>)
	startTimerOn = false;
    60e8:	7013      	strb	r3, [r2, #0]
	singlePhasingTime = 10;
    60ea:	4a69      	ldr	r2, [pc, #420]	; (6290 <vTask_MOTORCONTROL+0x1f8>)
	startSequenceOn = false;
    60ec:	702b      	strb	r3, [r5, #0]
	singlePhasingTime = 10;
    60ee:	7011      	strb	r1, [r2, #0]
	singlePhasingTimerOn = false;
    60f0:	4a68      	ldr	r2, [pc, #416]	; (6294 <vTask_MOTORCONTROL+0x1fc>)
	startSequenceTimerTime = 20;
    60f2:	4969      	ldr	r1, [pc, #420]	; (6298 <vTask_MOTORCONTROL+0x200>)
	singlePhasingTimerOn = false;
    60f4:	7013      	strb	r3, [r2, #0]
	startSequenceTimerTime = 20;
    60f6:	2214      	movs	r2, #20
    60f8:	700a      	strb	r2, [r1, #0]
	starDeltaTimerOn=false;
    60fa:	4968      	ldr	r1, [pc, #416]	; (629c <vTask_MOTORCONTROL+0x204>)
	stopSequenceOn = false;
    60fc:	7033      	strb	r3, [r6, #0]
	starDeltaTimerOn=false;
    60fe:	700b      	strb	r3, [r1, #0]
	stopSequenceTimerTime = 20;
    6100:	4967      	ldr	r1, [pc, #412]	; (62a0 <vTask_MOTORCONTROL+0x208>)
    6102:	700a      	strb	r2, [r1, #0]
		port_base->OUTSET.reg = pin_mask;
    6104:	2120      	movs	r1, #32
	allPhase = state;
    6106:	4a67      	ldr	r2, [pc, #412]	; (62a4 <vTask_MOTORCONTROL+0x20c>)
    6108:	7013      	strb	r3, [r2, #0]
	mFeedback = state;
    610a:	4a67      	ldr	r2, [pc, #412]	; (62a8 <vTask_MOTORCONTROL+0x210>)
    610c:	7013      	strb	r3, [r2, #0]
    610e:	4a67      	ldr	r2, [pc, #412]	; (62ac <vTask_MOTORCONTROL+0x214>)
    6110:	6191      	str	r1, [r2, #24]
	phaseAC = state;
    6112:	4a67      	ldr	r2, [pc, #412]	; (62b0 <vTask_MOTORCONTROL+0x218>)
    6114:	7013      	strb	r3, [r2, #0]
	lastPressTime=0;
    6116:	4a67      	ldr	r2, [pc, #412]	; (62b4 <vTask_MOTORCONTROL+0x21c>)
    6118:	6013      	str	r3, [r2, #0]
	lastButtonEvent=0;
    611a:	4a67      	ldr	r2, [pc, #412]	; (62b8 <vTask_MOTORCONTROL+0x220>)
    611c:	7013      	strb	r3, [r2, #0]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    611e:	4b67      	ldr	r3, [pc, #412]	; (62bc <vTask_MOTORCONTROL+0x224>)
    6120:	785a      	ldrb	r2, [r3, #1]
		i=14;
    6122:	230e      	movs	r3, #14
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    6124:	2a00      	cmp	r2, #0
    6126:	d100      	bne.n	612a <vTask_MOTORCONTROL+0x92>
		i = 12;
    6128:	3b02      	subs	r3, #2
		simEventTemp[i] = true;
    612a:	2001      	movs	r0, #1
    612c:	4964      	ldr	r1, [pc, #400]	; (62c0 <vTask_MOTORCONTROL+0x228>)
	while(i--)
    612e:	3b01      	subs	r3, #1
    6130:	b2db      	uxtb	r3, r3
    6132:	2bff      	cmp	r3, #255	; 0xff
    6134:	d000      	beq.n	6138 <vTask_MOTORCONTROL+0xa0>
    6136:	e08a      	b.n	624e <vTask_MOTORCONTROL+0x1b6>
	simEvent[0] = 'N';
    6138:	214e      	movs	r1, #78	; 0x4e
    613a:	4b62      	ldr	r3, [pc, #392]	; (62c4 <vTask_MOTORCONTROL+0x22c>)
    613c:	7019      	strb	r1, [r3, #0]
	simEvent[1] = 'P';
    613e:	3102      	adds	r1, #2
    6140:	7059      	strb	r1, [r3, #1]
	simEvent[2] = 'U';
    6142:	3105      	adds	r1, #5
    6144:	7099      	strb	r1, [r3, #2]
	simEvent[3] = 'F';
    6146:	390f      	subs	r1, #15
    6148:	70d9      	strb	r1, [r3, #3]
	simEvent[4] = 'G';
    614a:	3101      	adds	r1, #1
    614c:	7119      	strb	r1, [r3, #4]
	simEvent[5] = 'L';
    614e:	3105      	adds	r1, #5
    6150:	7159      	strb	r1, [r3, #5]
	simEvent[6] = 'C';
    6152:	3909      	subs	r1, #9
    6154:	7199      	strb	r1, [r3, #6]
	simEvent[7] = 'S';
    6156:	3110      	adds	r1, #16
    6158:	71d9      	strb	r1, [r3, #7]
	simEvent[8] = 'O';
    615a:	3904      	subs	r1, #4
    615c:	7219      	strb	r1, [r3, #8]
	simEvent[9] = 'A';
    615e:	390e      	subs	r1, #14
    6160:	7259      	strb	r1, [r3, #9]
	simEvent[10] = ')';		//AUTO ON EVENT
    6162:	3918      	subs	r1, #24
    6164:	7299      	strb	r1, [r3, #10]
	simEvent[11] = '[';		//AUTO OFF EVENT
    6166:	3132      	adds	r1, #50	; 0x32
    6168:	72d9      	strb	r1, [r3, #11]
	if (factory_settings_parameter_struct.ENABLE_CURRENT)
    616a:	2a00      	cmp	r2, #0
    616c:	d003      	beq.n	6176 <vTask_MOTORCONTROL+0xde>
		simEvent[12] = 'B';		//Overload Event
    616e:	2242      	movs	r2, #66	; 0x42
    6170:	731a      	strb	r2, [r3, #12]
		simEvent[13] = 'J';		//Underload EVENT
    6172:	3208      	adds	r2, #8
    6174:	735a      	strb	r2, [r3, #13]
	resetAutoStart(true);
    6176:	4b54      	ldr	r3, [pc, #336]	; (62c8 <vTask_MOTORCONTROL+0x230>)
    6178:	2001      	movs	r0, #1
    617a:	4798      	blx	r3
	eventOccured=true;
    617c:	2301      	movs	r3, #1
    617e:	7023      	strb	r3, [r4, #0]
		if(!startSequenceOn && !stopSequenceOn)
    6180:	782b      	ldrb	r3, [r5, #0]
    6182:	2b00      	cmp	r3, #0
    6184:	d114      	bne.n	61b0 <vTask_MOTORCONTROL+0x118>
    6186:	7833      	ldrb	r3, [r6, #0]
    6188:	2b00      	cmp	r3, #0
    618a:	d111      	bne.n	61b0 <vTask_MOTORCONTROL+0x118>
			uint8_t tempButtonEventOccured=buttonEventOccured;
    618c:	4a4f      	ldr	r2, [pc, #316]	; (62cc <vTask_MOTORCONTROL+0x234>)
			uint8_t tempEventOccured=eventOccured;
    618e:	7823      	ldrb	r3, [r4, #0]
			uint8_t tempButtonEventOccured=buttonEventOccured;
    6190:	7817      	ldrb	r7, [r2, #0]
    6192:	b2ff      	uxtb	r7, r7
			if(tempEventOccured)
    6194:	2b00      	cmp	r3, #0
    6196:	d001      	beq.n	619c <vTask_MOTORCONTROL+0x104>
				operateOnEvent();
    6198:	4b4d      	ldr	r3, [pc, #308]	; (62d0 <vTask_MOTORCONTROL+0x238>)
    619a:	4798      	blx	r3
			if(tempButtonEventOccured)
    619c:	2f00      	cmp	r7, #0
    619e:	d001      	beq.n	61a4 <vTask_MOTORCONTROL+0x10c>
				operateOnButtonEvent();
    61a0:	4b4c      	ldr	r3, [pc, #304]	; (62d4 <vTask_MOTORCONTROL+0x23c>)
    61a2:	4798      	blx	r3
			if(lastButtonEvent)
    61a4:	4b44      	ldr	r3, [pc, #272]	; (62b8 <vTask_MOTORCONTROL+0x220>)
    61a6:	781b      	ldrb	r3, [r3, #0]
    61a8:	2b00      	cmp	r3, #0
    61aa:	d001      	beq.n	61b0 <vTask_MOTORCONTROL+0x118>
				buttonFilter();
    61ac:	4b4a      	ldr	r3, [pc, #296]	; (62d8 <vTask_MOTORCONTROL+0x240>)
    61ae:	4798      	blx	r3
	return (ucharVoltage_Detect_Timer_Counter == 0);
    61b0:	4b4a      	ldr	r3, [pc, #296]	; (62dc <vTask_MOTORCONTROL+0x244>)
    61b2:	781b      	ldrb	r3, [r3, #0]
		if(should_Detect_New_Voltage()) {
    61b4:	2b00      	cmp	r3, #0
    61b6:	d103      	bne.n	61c0 <vTask_MOTORCONTROL+0x128>
			detect_battery_voltage_and_percentage();
    61b8:	4b49      	ldr	r3, [pc, #292]	; (62e0 <vTask_MOTORCONTROL+0x248>)
    61ba:	4798      	blx	r3
			detect_Three_Phase_Voltage();
    61bc:	4b49      	ldr	r3, [pc, #292]	; (62e4 <vTask_MOTORCONTROL+0x24c>)
    61be:	4798      	blx	r3
	return (ucharCurrent_Detect_Flag == 1);
    61c0:	4b49      	ldr	r3, [pc, #292]	; (62e8 <vTask_MOTORCONTROL+0x250>)
    61c2:	4f3e      	ldr	r7, [pc, #248]	; (62bc <vTask_MOTORCONTROL+0x224>)
    61c4:	781b      	ldrb	r3, [r3, #0]
		if(should_Detect_New_Current()) {
    61c6:	2b01      	cmp	r3, #1
    61c8:	d106      	bne.n	61d8 <vTask_MOTORCONTROL+0x140>
			detect_Motor_Current();
    61ca:	4b48      	ldr	r3, [pc, #288]	; (62ec <vTask_MOTORCONTROL+0x254>)
    61cc:	4798      	blx	r3
			if (factory_settings_parameter_struct.ENABLE_CURRENT)
    61ce:	787b      	ldrb	r3, [r7, #1]
    61d0:	2b00      	cmp	r3, #0
    61d2:	d001      	beq.n	61d8 <vTask_MOTORCONTROL+0x140>
				checkCurrentConsumption();
    61d4:	4b46      	ldr	r3, [pc, #280]	; (62f0 <vTask_MOTORCONTROL+0x258>)
    61d6:	4798      	blx	r3
		if (waitStableLineOn && waitStableLineOver())
    61d8:	4b46      	ldr	r3, [pc, #280]	; (62f4 <vTask_MOTORCONTROL+0x25c>)
    61da:	781b      	ldrb	r3, [r3, #0]
    61dc:	2b00      	cmp	r3, #0
    61de:	d005      	beq.n	61ec <vTask_MOTORCONTROL+0x154>
    61e0:	4b45      	ldr	r3, [pc, #276]	; (62f8 <vTask_MOTORCONTROL+0x260>)
    61e2:	4798      	blx	r3
    61e4:	2800      	cmp	r0, #0
    61e6:	d001      	beq.n	61ec <vTask_MOTORCONTROL+0x154>
			operateOnStableLine();
    61e8:	4b44      	ldr	r3, [pc, #272]	; (62fc <vTask_MOTORCONTROL+0x264>)
    61ea:	4798      	blx	r3
		if(singlePhasingTimerOn)
    61ec:	4b29      	ldr	r3, [pc, #164]	; (6294 <vTask_MOTORCONTROL+0x1fc>)
    61ee:	781b      	ldrb	r3, [r3, #0]
    61f0:	2b00      	cmp	r3, #0
    61f2:	d007      	beq.n	6204 <vTask_MOTORCONTROL+0x16c>
			if (structThreePhase_state.u8t_phase_ac_state != AC_3PH)
    61f4:	4b42      	ldr	r3, [pc, #264]	; (6300 <vTask_MOTORCONTROL+0x268>)
    61f6:	785b      	ldrb	r3, [r3, #1]
				if(singlePhasingTimerOver())
    61f8:	4b42      	ldr	r3, [pc, #264]	; (6304 <vTask_MOTORCONTROL+0x26c>)
    61fa:	4798      	blx	r3
    61fc:	2800      	cmp	r0, #0
    61fe:	d001      	beq.n	6204 <vTask_MOTORCONTROL+0x16c>
					operateOnSinglePhasing();
    6200:	4b41      	ldr	r3, [pc, #260]	; (6308 <vTask_MOTORCONTROL+0x270>)
    6202:	4798      	blx	r3
		if (startTimerOn)
    6204:	4b20      	ldr	r3, [pc, #128]	; (6288 <vTask_MOTORCONTROL+0x1f0>)
    6206:	781b      	ldrb	r3, [r3, #0]
    6208:	2b00      	cmp	r3, #0
    620a:	d006      	beq.n	621a <vTask_MOTORCONTROL+0x182>
			if (startMotorTimerOver())
    620c:	4b3f      	ldr	r3, [pc, #252]	; (630c <vTask_MOTORCONTROL+0x274>)
    620e:	4798      	blx	r3
    6210:	2800      	cmp	r0, #0
    6212:	d002      	beq.n	621a <vTask_MOTORCONTROL+0x182>
				startMotor(false);
    6214:	2000      	movs	r0, #0
    6216:	4b3e      	ldr	r3, [pc, #248]	; (6310 <vTask_MOTORCONTROL+0x278>)
    6218:	4798      	blx	r3
		if (startSequenceOn)
    621a:	782b      	ldrb	r3, [r5, #0]
    621c:	2b00      	cmp	r3, #0
    621e:	d001      	beq.n	6224 <vTask_MOTORCONTROL+0x18c>
			terminateStartRelay();
    6220:	4b3c      	ldr	r3, [pc, #240]	; (6314 <vTask_MOTORCONTROL+0x27c>)
    6222:	4798      	blx	r3
		if(starDeltaTimerOn)
    6224:	4b1d      	ldr	r3, [pc, #116]	; (629c <vTask_MOTORCONTROL+0x204>)
    6226:	781b      	ldrb	r3, [r3, #0]
    6228:	2b00      	cmp	r3, #0
    622a:	d001      	beq.n	6230 <vTask_MOTORCONTROL+0x198>
			terminateStarDeltaTimer();
    622c:	4b3a      	ldr	r3, [pc, #232]	; (6318 <vTask_MOTORCONTROL+0x280>)
    622e:	4798      	blx	r3
		if(stopSequenceOn)
    6230:	7833      	ldrb	r3, [r6, #0]
    6232:	2b00      	cmp	r3, #0
    6234:	d001      	beq.n	623a <vTask_MOTORCONTROL+0x1a2>
			terminateStopRelay();
    6236:	4b39      	ldr	r3, [pc, #228]	; (631c <vTask_MOTORCONTROL+0x284>)
    6238:	4798      	blx	r3
		SIMEventManager();
    623a:	4b39      	ldr	r3, [pc, #228]	; (6320 <vTask_MOTORCONTROL+0x288>)
    623c:	4798      	blx	r3
		if (factory_settings_parameter_struct.ENABLE_M2M)
    623e:	78fb      	ldrb	r3, [r7, #3]
    6240:	2b00      	cmp	r3, #0
    6242:	d09d      	beq.n	6180 <vTask_MOTORCONTROL+0xe8>
			M2MEventManager();
    6244:	4b37      	ldr	r3, [pc, #220]	; (6324 <vTask_MOTORCONTROL+0x28c>)
    6246:	4798      	blx	r3
    6248:	e79a      	b.n	6180 <vTask_MOTORCONTROL+0xe8>
		isACpowerAvailable = false;
    624a:	7018      	strb	r0, [r3, #0]
    624c:	e745      	b.n	60da <vTask_MOTORCONTROL+0x42>
		simEventTemp[i] = true;
    624e:	54c8      	strb	r0, [r1, r3]
    6250:	e76d      	b.n	612e <vTask_MOTORCONTROL+0x96>
    6252:	46c0      	nop			; (mov r8, r8)
    6254:	00004815 	.word	0x00004815
    6258:	00005e0d 	.word	0x00005e0d
    625c:	00005eb5 	.word	0x00005eb5
    6260:	00005f05 	.word	0x00005f05
    6264:	200006f0 	.word	0x200006f0
    6268:	2000074c 	.word	0x2000074c
    626c:	20000663 	.word	0x20000663
    6270:	2000064c 	.word	0x2000064c
    6274:	00004559 	.word	0x00004559
    6278:	00007fa1 	.word	0x00007fa1
    627c:	20000699 	.word	0x20000699
    6280:	20000724 	.word	0x20000724
    6284:	200006a5 	.word	0x200006a5
    6288:	200006a6 	.word	0x200006a6
    628c:	20000695 	.word	0x20000695
    6290:	20000684 	.word	0x20000684
    6294:	2000069d 	.word	0x2000069d
    6298:	200006fc 	.word	0x200006fc
    629c:	200006a7 	.word	0x200006a7
    62a0:	20000727 	.word	0x20000727
    62a4:	20000674 	.word	0x20000674
    62a8:	20000666 	.word	0x20000666
    62ac:	41004400 	.word	0x41004400
    62b0:	200006bb 	.word	0x200006bb
    62b4:	2000067c 	.word	0x2000067c
    62b8:	20000694 	.word	0x20000694
    62bc:	2000057a 	.word	0x2000057a
    62c0:	2000064d 	.word	0x2000064d
    62c4:	200006dc 	.word	0x200006dc
    62c8:	00004e99 	.word	0x00004e99
    62cc:	200006ab 	.word	0x200006ab
    62d0:	000055a1 	.word	0x000055a1
    62d4:	00005f41 	.word	0x00005f41
    62d8:	00005fb1 	.word	0x00005fb1
    62dc:	2000000d 	.word	0x2000000d
    62e0:	00004a55 	.word	0x00004a55
    62e4:	00004bad 	.word	0x00004bad
    62e8:	20000230 	.word	0x20000230
    62ec:	00004c5d 	.word	0x00004c5d
    62f0:	00005a39 	.word	0x00005a39
    62f4:	200006f1 	.word	0x200006f1
    62f8:	00004fa1 	.word	0x00004fa1
    62fc:	00004ed5 	.word	0x00004ed5
    6300:	20000669 	.word	0x20000669
    6304:	00005719 	.word	0x00005719
    6308:	00005751 	.word	0x00005751
    630c:	00005551 	.word	0x00005551
    6310:	00004fd9 	.word	0x00004fd9
    6314:	00005879 	.word	0x00005879
    6318:	00005819 	.word	0x00005819
    631c:	00005781 	.word	0x00005781
    6320:	000059f1 	.word	0x000059f1
    6324:	000059cd 	.word	0x000059cd

00006328 <ac_init>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    6328:	2300      	movs	r3, #0
 */
enum status_code ac_init(
		struct ac_module *const module_inst,
		Ac *const hw,
		struct ac_config *const config)
{
    632a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    632c:	ad01      	add	r5, sp, #4
    632e:	702b      	strb	r3, [r5, #0]

	/* Turn on the digital interface clock and GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);

	if (hw == AC) {
    6330:	4b19      	ldr	r3, [pc, #100]	; (6398 <ac_init+0x70>)
{
    6332:	0004      	movs	r4, r0
    6334:	0016      	movs	r6, r2
	module_inst->hw = hw;
    6336:	6001      	str	r1, [r0, #0]
	if (hw == AC) {
    6338:	4299      	cmp	r1, r3
    633a:	d116      	bne.n	636a <ac_init+0x42>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    633c:	2380      	movs	r3, #128	; 0x80
    633e:	4a17      	ldr	r2, [pc, #92]	; (639c <ac_init+0x74>)
    6340:	029b      	lsls	r3, r3, #10
    6342:	6a11      	ldr	r1, [r2, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_AC);
		gclk_chan_conf.source_generator = config->dig_source_generator;
		system_gclk_chan_set_config(AC_GCLK_ID_DIG, &gclk_chan_conf);
    6344:	201f      	movs	r0, #31
    6346:	430b      	orrs	r3, r1
    6348:	6213      	str	r3, [r2, #32]
		gclk_chan_conf.source_generator = config->dig_source_generator;
    634a:	7873      	ldrb	r3, [r6, #1]
		system_gclk_chan_set_config(AC_GCLK_ID_DIG, &gclk_chan_conf);
    634c:	0029      	movs	r1, r5
    634e:	4f14      	ldr	r7, [pc, #80]	; (63a0 <ac_init+0x78>)
		gclk_chan_conf.source_generator = config->dig_source_generator;
    6350:	702b      	strb	r3, [r5, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_DIG, &gclk_chan_conf);
    6352:	47b8      	blx	r7
		system_gclk_chan_enable(AC_GCLK_ID_DIG);
    6354:	201f      	movs	r0, #31
    6356:	4b13      	ldr	r3, [pc, #76]	; (63a4 <ac_init+0x7c>)
    6358:	4798      	blx	r3
		gclk_chan_conf.source_generator = config->ana_source_generator;
    635a:	78b3      	ldrb	r3, [r6, #2]
		system_gclk_chan_set_config(AC_GCLK_ID_ANA, &gclk_chan_conf);
    635c:	2020      	movs	r0, #32
    635e:	0029      	movs	r1, r5
		gclk_chan_conf.source_generator = config->ana_source_generator;
    6360:	702b      	strb	r3, [r5, #0]
		system_gclk_chan_set_config(AC_GCLK_ID_ANA, &gclk_chan_conf);
    6362:	47b8      	blx	r7
		system_gclk_chan_enable(AC_GCLK_ID_ANA);
    6364:	2020      	movs	r0, #32
    6366:	4b0f      	ldr	r3, [pc, #60]	; (63a4 <ac_init+0x7c>)
    6368:	4798      	blx	r3
#endif

#if AC_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < AC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    636a:	2300      	movs	r3, #0
    636c:	6063      	str	r3, [r4, #4]
    636e:	60a3      	str	r3, [r4, #8]
    6370:	60e3      	str	r3, [r4, #12]
    6372:	6123      	str	r3, [r4, #16]
    6374:	6163      	str	r3, [r4, #20]
	}

	/* Initialize software flags*/
	module_inst->register_callback_mask = 0x00;
    6376:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask   = 0x00;
    6378:	7663      	strb	r3, [r4, #25]

#  if (AC_INST_NUM == 1)
	_ac_instance[0] = module_inst;
    637a:	4b0b      	ldr	r3, [pc, #44]	; (63a8 <ac_init+0x80>)
    637c:	601c      	str	r4, [r3, #0]
		if (config->run_in_standby[i] == true) {
    637e:	7833      	ldrb	r3, [r6, #0]
    6380:	6821      	ldr	r1, [r4, #0]
			ctrla_temp |= (AC_CTRLA_RUNSTDBY_Msk << i);
    6382:	1e5a      	subs	r2, r3, #1
    6384:	4193      	sbcs	r3, r2
    6386:	009b      	lsls	r3, r3, #2
	if (ac_module->STATUSB.reg & AC_STATUSB_SYNCBUSY) {
    6388:	7a4a      	ldrb	r2, [r1, #9]
    638a:	b252      	sxtb	r2, r2
    638c:	2a00      	cmp	r2, #0
    638e:	dbfb      	blt.n	6388 <ac_init+0x60>
	ac_module->CTRLA.reg = ctrla_temp;
    6390:	b2db      	uxtb	r3, r3
#  endif
#endif

	/* Write configuration to module */
	return _ac_set_config(module_inst, config);
}
    6392:	2000      	movs	r0, #0
	ac_module->CTRLA.reg = ctrla_temp;
    6394:	700b      	strb	r3, [r1, #0]
}
    6396:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6398:	42004400 	.word	0x42004400
    639c:	40000400 	.word	0x40000400
    63a0:	00009f21 	.word	0x00009f21
    63a4:	00009e99 	.word	0x00009e99
    63a8:	20000844 	.word	0x20000844

000063ac <ac_chan_set_config>:
 */
enum status_code ac_chan_set_config(
		struct ac_module *const module_inst,
		const enum ac_chan_channel channel,
		struct ac_chan_config *const config)
{
    63ac:	b570      	push	{r4, r5, r6, lr}

	/* Enable output filter mode */
	compctrl_temp |= config->filter;

	/* Enable output hysteresis if required */
	if (config->enable_hysteresis == true) {
    63ae:	7a13      	ldrb	r3, [r2, #8]
	Ac *const ac_module = module_inst->hw;
    63b0:	6800      	ldr	r0, [r0, #0]
	compctrl_temp |= config->filter;
    63b2:	6854      	ldr	r4, [r2, #4]
	if (config->enable_hysteresis == true) {
    63b4:	2b00      	cmp	r3, #0
    63b6:	d002      	beq.n	63be <ac_chan_set_config+0x12>
		compctrl_temp |= AC_COMPCTRL_HYST;
    63b8:	2380      	movs	r3, #128	; 0x80
    63ba:	031b      	lsls	r3, r3, #12
    63bc:	431c      	orrs	r4, r3

	/* Set sampling mode (single shot or continuous) */
	compctrl_temp |= config->sample_mode;

	/* Set channel interrupt selection */
	compctrl_temp |= config->interrupt_selection;
    63be:	7d55      	ldrb	r5, [r2, #21]
    63c0:	7813      	ldrb	r3, [r2, #0]
			(uint32_t)config->positive_input |
    63c2:	8a56      	ldrh	r6, [r2, #18]
	compctrl_temp |= config->interrupt_selection;
    63c4:	432b      	orrs	r3, r5
			(uint32_t)config->positive_input |
    63c6:	8a15      	ldrh	r5, [r2, #16]
    63c8:	4335      	orrs	r5, r6
	compctrl_temp |= config->interrupt_selection;
    63ca:	432b      	orrs	r3, r5
    63cc:	68d5      	ldr	r5, [r2, #12]
    63ce:	432b      	orrs	r3, r5
    63d0:	4323      	orrs	r3, r4
    63d2:	7a44      	ldrb	r4, [r0, #9]
    63d4:	b264      	sxtb	r4, r4
    63d6:	2c00      	cmp	r4, #0
    63d8:	dbfb      	blt.n	63d2 <ac_chan_set_config+0x26>
	while (ac_is_syncing(module_inst)) {
		/* Wait until synchronization is complete */
	}

	/* Write the final configuration to the module's control register */
	ac_module->COMPCTRL[(uint8_t)channel].reg = compctrl_temp;
    63da:	1d0c      	adds	r4, r1, #4
    63dc:	00a4      	lsls	r4, r4, #2
    63de:	5023      	str	r3, [r4, r0]

	/* Configure VCC voltage scaling for the comparator */
	ac_module->SCALER[(uint8_t)channel].reg   = config->vcc_scale_factor - 1;
    63e0:	7d13      	ldrb	r3, [r2, #20]
    63e2:	1840      	adds	r0, r0, r1
    63e4:	3b01      	subs	r3, #1
    63e6:	b2db      	uxtb	r3, r3
    63e8:	3001      	adds	r0, #1
    63ea:	77c3      	strb	r3, [r0, #31]

	return STATUS_OK;
}
    63ec:	2000      	movs	r0, #0
    63ee:	bd70      	pop	{r4, r5, r6, pc}

000063f0 <adc_is_syncing>:
	Adc *const adc_module = module_inst->hw;
    63f0:	6803      	ldr	r3, [r0, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    63f2:	7e58      	ldrb	r0, [r3, #25]
    63f4:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
    63f6:	4770      	bx	lr

000063f8 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
    63f8:	b530      	push	{r4, r5, lr}
    63fa:	b097      	sub	sp, #92	; 0x5c
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
    63fc:	ad02      	add	r5, sp, #8
{
    63fe:	0004      	movs	r4, r0
	const uint32_t pinmapping[] = {
    6400:	2250      	movs	r2, #80	; 0x50
    6402:	490a      	ldr	r1, [pc, #40]	; (642c <_adc_configure_ain_pin+0x34>)
    6404:	0028      	movs	r0, r5
    6406:	4b0a      	ldr	r3, [pc, #40]	; (6430 <_adc_configure_ain_pin+0x38>)
    6408:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
    640a:	2c13      	cmp	r4, #19
    640c:	d80b      	bhi.n	6426 <_adc_configure_ain_pin+0x2e>
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    640e:	2300      	movs	r3, #0
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    6410:	00a4      	lsls	r4, r4, #2
    6412:	a901      	add	r1, sp, #4
    6414:	5960      	ldr	r0, [r4, r5]
    6416:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    6418:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    641a:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    641c:	3301      	adds	r3, #1
    641e:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
    6420:	b2c0      	uxtb	r0, r0
    6422:	4b04      	ldr	r3, [pc, #16]	; (6434 <_adc_configure_ain_pin+0x3c>)
    6424:	4798      	blx	r3
	}
}
    6426:	b017      	add	sp, #92	; 0x5c
    6428:	bd30      	pop	{r4, r5, pc}
    642a:	46c0      	nop			; (mov r8, r8)
    642c:	0000d7b8 	.word	0x0000d7b8
    6430:	0000c3c1 	.word	0x0000c3c1
    6434:	00009ff5 	.word	0x00009ff5

00006438 <adc_get_config_defaults>:
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    6438:	22c0      	movs	r2, #192	; 0xc0
    643a:	0152      	lsls	r2, r2, #5
    643c:	81c2      	strh	r2, [r0, #14]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    643e:	0002      	movs	r2, r0
	config->clock_source                  = GCLK_GENERATOR_0;
    6440:	2300      	movs	r3, #0
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    6442:	322a      	adds	r2, #42	; 0x2a
	config->clock_source                  = GCLK_GENERATOR_0;
    6444:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
    6446:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
    6448:	8043      	strh	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    644a:	7103      	strb	r3, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    644c:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    644e:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
    6450:	61c3      	str	r3, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
    6452:	6083      	str	r3, [r0, #8]
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
    6454:	7303      	strb	r3, [r0, #12]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    6456:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    6458:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
    645a:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
    645c:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
    645e:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    6460:	7013      	strb	r3, [r2, #0]
	config->correction.correction_enable  = false;
    6462:	1d42      	adds	r2, r0, #5
	config->run_in_standby                = false;
    6464:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
    6466:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
    6468:	77d3      	strb	r3, [r2, #31]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    646a:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    646c:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    646e:	75c3      	strb	r3, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
    6470:	3226      	adds	r2, #38	; 0x26
	config->pin_scan.inputs_to_scan       = 0;
    6472:	302c      	adds	r0, #44	; 0x2c
	config->pin_scan.offset_start_scan    = 0;
    6474:	7013      	strb	r3, [r2, #0]
	config->pin_scan.inputs_to_scan       = 0;
    6476:	7003      	strb	r3, [r0, #0]
}
    6478:	4770      	bx	lr
	...

0000647c <adc_init>:
    647c:	2380      	movs	r3, #128	; 0x80
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    647e:	b5f0      	push	{r4, r5, r6, r7, lr}
    6480:	0014      	movs	r4, r2
    6482:	4ab8      	ldr	r2, [pc, #736]	; (6764 <adc_init+0x2e8>)
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    6484:	6001      	str	r1, [r0, #0]
{
    6486:	0006      	movs	r6, r0
    6488:	6a10      	ldr	r0, [r2, #32]
    648a:	025b      	lsls	r3, r3, #9
    648c:	4303      	orrs	r3, r0
    648e:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    6490:	780b      	ldrb	r3, [r1, #0]
{
    6492:	b087      	sub	sp, #28
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    6494:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    6496:	07db      	lsls	r3, r3, #31
    6498:	d500      	bpl.n	649c <adc_init+0x20>
    649a:	e0ff      	b.n	669c <adc_init+0x220>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    649c:	780b      	ldrb	r3, [r1, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    649e:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    64a0:	079b      	lsls	r3, r3, #30
    64a2:	d500      	bpl.n	64a6 <adc_init+0x2a>
    64a4:	e0fa      	b.n	669c <adc_init+0x220>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
    64a6:	7863      	ldrb	r3, [r4, #1]
    64a8:	7133      	strb	r3, [r6, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    64aa:	2b00      	cmp	r3, #0
    64ac:	d104      	bne.n	64b8 <adc_init+0x3c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    64ae:	4aae      	ldr	r2, [pc, #696]	; (6768 <adc_init+0x2ec>)
    64b0:	3304      	adds	r3, #4
    64b2:	6c11      	ldr	r1, [r2, #64]	; 0x40
    64b4:	430b      	orrs	r3, r1
    64b6:	6413      	str	r3, [r2, #64]	; 0x40
	module_inst->registered_callback_mask = 0;
	module_inst->enabled_callback_mask = 0;
	module_inst->remaining_conversions = 0;
	module_inst->job_status = STATUS_OK;

	_adc_instances[0] = module_inst;
    64b8:	4aac      	ldr	r2, [pc, #688]	; (676c <adc_init+0x2f0>)
		module_inst->callback[i] = NULL;
    64ba:	2300      	movs	r3, #0
	_adc_instances[0] = module_inst;
    64bc:	6016      	str	r6, [r2, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    64be:	0022      	movs	r2, r4
    64c0:	322a      	adds	r2, #42	; 0x2a
	module_inst->remaining_conversions = 0;
    64c2:	8333      	strh	r3, [r6, #24]
		module_inst->callback[i] = NULL;
    64c4:	60b3      	str	r3, [r6, #8]
    64c6:	60f3      	str	r3, [r6, #12]
    64c8:	6133      	str	r3, [r6, #16]
	module_inst->registered_callback_mask = 0;
    64ca:	76b3      	strb	r3, [r6, #26]
	module_inst->enabled_callback_mask = 0;
    64cc:	76f3      	strb	r3, [r6, #27]
	module_inst->job_status = STATUS_OK;
    64ce:	7733      	strb	r3, [r6, #28]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    64d0:	9202      	str	r2, [sp, #8]
    64d2:	7812      	ldrb	r2, [r2, #0]
    64d4:	429a      	cmp	r2, r3
    64d6:	d103      	bne.n	64e0 <adc_init+0x64>
    64d8:	7d22      	ldrb	r2, [r4, #20]
    64da:	429a      	cmp	r2, r3
    64dc:	d100      	bne.n	64e0 <adc_init+0x64>
			!config->freerunning) {
		module_inst->software_trigger = true;
    64de:	3301      	adds	r3, #1
	} else {
		module_inst->software_trigger = false;
    64e0:	7773      	strb	r3, [r6, #29]
	gclk_chan_conf.source_generator = config->clock_source;
    64e2:	7823      	ldrb	r3, [r4, #0]
    64e4:	a905      	add	r1, sp, #20
    64e6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    64e8:	201e      	movs	r0, #30
    64ea:	4ba1      	ldr	r3, [pc, #644]	; (6770 <adc_init+0x2f4>)
	Adc *const adc_module = module_inst->hw;
    64ec:	6837      	ldr	r7, [r6, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
    64ee:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
    64f0:	4ba0      	ldr	r3, [pc, #640]	; (6774 <adc_init+0x2f8>)
    64f2:	201e      	movs	r0, #30
    64f4:	4798      	blx	r3
	if (config->pin_scan.inputs_to_scan != 0) {
    64f6:	0023      	movs	r3, r4
    64f8:	332c      	adds	r3, #44	; 0x2c
    64fa:	781b      	ldrb	r3, [r3, #0]
    64fc:	7b22      	ldrb	r2, [r4, #12]
    64fe:	9201      	str	r2, [sp, #4]
    6500:	2b00      	cmp	r3, #0
    6502:	d033      	beq.n	656c <adc_init+0xf0>
		uint8_t offset = config->pin_scan.offset_start_scan;
    6504:	0022      	movs	r2, r4
    6506:	322b      	adds	r2, #43	; 0x2b
		uint8_t start_pin =
    6508:	7815      	ldrb	r5, [r2, #0]
    650a:	9a01      	ldr	r2, [sp, #4]
    650c:	1955      	adds	r5, r2, r5
    650e:	b2ed      	uxtb	r5, r5
		uint8_t end_pin =
    6510:	195b      	adds	r3, r3, r5
    6512:	b2db      	uxtb	r3, r3
    6514:	9303      	str	r3, [sp, #12]
    6516:	9b01      	ldr	r3, [sp, #4]
    6518:	1ae8      	subs	r0, r5, r3
		while (start_pin < end_pin) {
    651a:	9b03      	ldr	r3, [sp, #12]
    651c:	b2c0      	uxtb	r0, r0
    651e:	42ab      	cmp	r3, r5
    6520:	d81b      	bhi.n	655a <adc_init+0xde>
		_adc_configure_ain_pin(config->negative_input);
    6522:	89e0      	ldrh	r0, [r4, #14]
    6524:	4b94      	ldr	r3, [pc, #592]	; (6778 <adc_init+0x2fc>)
    6526:	4798      	blx	r3
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
    6528:	7d63      	ldrb	r3, [r4, #21]
    652a:	009b      	lsls	r3, r3, #2
    652c:	b2db      	uxtb	r3, r3
    652e:	703b      	strb	r3, [r7, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
    6530:	7da3      	ldrb	r3, [r4, #22]
    6532:	7862      	ldrb	r2, [r4, #1]
    6534:	01db      	lsls	r3, r3, #7
    6536:	4313      	orrs	r3, r2
    6538:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    653a:	707b      	strb	r3, [r7, #1]
	switch (config->resolution) {
    653c:	7925      	ldrb	r5, [r4, #4]
    653e:	2d30      	cmp	r5, #48	; 0x30
    6540:	d100      	bne.n	6544 <adc_init+0xc8>
    6542:	e0b8      	b.n	66b6 <adc_init+0x23a>
    6544:	d818      	bhi.n	6578 <adc_init+0xfc>
    6546:	2d10      	cmp	r5, #16
    6548:	d100      	bne.n	654c <adc_init+0xd0>
    654a:	e0b1      	b.n	66b0 <adc_init+0x234>
    654c:	2d20      	cmp	r5, #32
    654e:	d100      	bne.n	6552 <adc_init+0xd6>
    6550:	e0b1      	b.n	66b6 <adc_init+0x23a>
    6552:	2d00      	cmp	r5, #0
    6554:	d11a      	bne.n	658c <adc_init+0x110>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    6556:	002b      	movs	r3, r5
    6558:	e0ab      	b.n	66b2 <adc_init+0x236>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    655a:	230f      	movs	r3, #15
    655c:	4018      	ands	r0, r3
    655e:	7b23      	ldrb	r3, [r4, #12]
			start_pin++;
    6560:	3501      	adds	r5, #1
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
    6562:	18c0      	adds	r0, r0, r3
    6564:	4b84      	ldr	r3, [pc, #528]	; (6778 <adc_init+0x2fc>)
    6566:	4798      	blx	r3
			start_pin++;
    6568:	b2ed      	uxtb	r5, r5
    656a:	e7d4      	b.n	6516 <adc_init+0x9a>
		_adc_configure_ain_pin(config->positive_input);
    656c:	9801      	ldr	r0, [sp, #4]
    656e:	4d82      	ldr	r5, [pc, #520]	; (6778 <adc_init+0x2fc>)
    6570:	47a8      	blx	r5
		_adc_configure_ain_pin(config->negative_input);
    6572:	89e0      	ldrh	r0, [r4, #14]
    6574:	47a8      	blx	r5
    6576:	e7d7      	b.n	6528 <adc_init+0xac>
	switch (config->resolution) {
    6578:	2d32      	cmp	r5, #50	; 0x32
    657a:	d009      	beq.n	6590 <adc_init+0x114>
    657c:	d200      	bcs.n	6580 <adc_init+0x104>
    657e:	e09c      	b.n	66ba <adc_init+0x23e>
    6580:	2d33      	cmp	r5, #51	; 0x33
    6582:	d100      	bne.n	6586 <adc_init+0x10a>
    6584:	e090      	b.n	66a8 <adc_init+0x22c>
    6586:	2d34      	cmp	r5, #52	; 0x34
    6588:	d100      	bne.n	658c <adc_init+0x110>
    658a:	e089      	b.n	66a0 <adc_init+0x224>
		return STATUS_ERR_INVALID_ARG;
    658c:	2017      	movs	r0, #23
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
    658e:	e085      	b.n	669c <adc_init+0x220>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    6590:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
    6592:	2510      	movs	r5, #16
		adjres = ADC_DIVIDE_RESULT_4;
    6594:	2202      	movs	r2, #2
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    6596:	2170      	movs	r1, #112	; 0x70
    6598:	0112      	lsls	r2, r2, #4
    659a:	400a      	ands	r2, r1
    659c:	4313      	orrs	r3, r2
    659e:	70bb      	strb	r3, [r7, #2]
	if (config->sample_length > 63) {
    65a0:	7de3      	ldrb	r3, [r4, #23]
    65a2:	2b3f      	cmp	r3, #63	; 0x3f
    65a4:	d8f2      	bhi.n	658c <adc_init+0x110>
		adc_module->SAMPCTRL.reg =
    65a6:	70fb      	strb	r3, [r7, #3]
	while (adc_is_syncing(module_inst)) {
    65a8:	0030      	movs	r0, r6
    65aa:	4b74      	ldr	r3, [pc, #464]	; (677c <adc_init+0x300>)
    65ac:	4798      	blx	r3
    65ae:	2800      	cmp	r0, #0
    65b0:	d1fa      	bne.n	65a8 <adc_init+0x12c>
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    65b2:	8862      	ldrh	r2, [r4, #2]
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
    65b4:	7ce3      	ldrb	r3, [r4, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    65b6:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
    65b8:	1d62      	adds	r2, r4, #5
    65ba:	9203      	str	r2, [sp, #12]
    65bc:	7fd2      	ldrb	r2, [r2, #31]
    65be:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    65c0:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
    65c2:	7d22      	ldrb	r2, [r4, #20]
    65c4:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
    65c6:	4313      	orrs	r3, r2
    65c8:	7ca2      	ldrb	r2, [r4, #18]
    65ca:	0052      	lsls	r2, r2, #1
    65cc:	4313      	orrs	r3, r2
    65ce:	432b      	orrs	r3, r5
	adc_module->CTRLB.reg =
    65d0:	80bb      	strh	r3, [r7, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    65d2:	7e23      	ldrb	r3, [r4, #24]
    65d4:	2b00      	cmp	r3, #0
    65d6:	d007      	beq.n	65e8 <adc_init+0x16c>
		switch (resolution) {
    65d8:	2d10      	cmp	r5, #16
    65da:	d100      	bne.n	65de <adc_init+0x162>
    65dc:	e0b3      	b.n	6746 <adc_init+0x2ca>
    65de:	d900      	bls.n	65e2 <adc_init+0x166>
    65e0:	e06d      	b.n	66be <adc_init+0x242>
    65e2:	2d00      	cmp	r5, #0
    65e4:	d100      	bne.n	65e8 <adc_init+0x16c>
    65e6:	e09f      	b.n	6728 <adc_init+0x2ac>
	while (adc_is_syncing(module_inst)) {
    65e8:	0030      	movs	r0, r6
    65ea:	4b64      	ldr	r3, [pc, #400]	; (677c <adc_init+0x300>)
    65ec:	4798      	blx	r3
    65ee:	2800      	cmp	r0, #0
    65f0:	d1fa      	bne.n	65e8 <adc_init+0x16c>
	adc_module->WINCTRL.reg = config->window.window_mode;
    65f2:	7e23      	ldrb	r3, [r4, #24]
    65f4:	723b      	strb	r3, [r7, #8]
	while (adc_is_syncing(module_inst)) {
    65f6:	0030      	movs	r0, r6
    65f8:	4b60      	ldr	r3, [pc, #384]	; (677c <adc_init+0x300>)
    65fa:	4798      	blx	r3
    65fc:	2800      	cmp	r0, #0
    65fe:	d1fa      	bne.n	65f6 <adc_init+0x17a>
	adc_module->WINLT.reg =
    6600:	8ba3      	ldrh	r3, [r4, #28]
    6602:	83bb      	strh	r3, [r7, #28]
	while (adc_is_syncing(module_inst)) {
    6604:	0030      	movs	r0, r6
    6606:	4b5d      	ldr	r3, [pc, #372]	; (677c <adc_init+0x300>)
    6608:	4798      	blx	r3
    660a:	2800      	cmp	r0, #0
    660c:	d1fa      	bne.n	6604 <adc_init+0x188>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    660e:	8c23      	ldrh	r3, [r4, #32]
    6610:	843b      	strh	r3, [r7, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
    6612:	0023      	movs	r3, r4
    6614:	332c      	adds	r3, #44	; 0x2c
    6616:	781d      	ldrb	r5, [r3, #0]
	if (inputs_to_scan > 0) {
    6618:	2d00      	cmp	r5, #0
    661a:	d003      	beq.n	6624 <adc_init+0x1a8>
		inputs_to_scan--;
    661c:	3d01      	subs	r5, #1
    661e:	b2ed      	uxtb	r5, r5
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    6620:	2d0f      	cmp	r5, #15
    6622:	d8b3      	bhi.n	658c <adc_init+0x110>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
    6624:	0023      	movs	r3, r4
    6626:	332b      	adds	r3, #43	; 0x2b
    6628:	9301      	str	r3, [sp, #4]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
    662a:	781b      	ldrb	r3, [r3, #0]
    662c:	2b0f      	cmp	r3, #15
    662e:	d8ad      	bhi.n	658c <adc_init+0x110>
	while (adc_is_syncing(module_inst)) {
    6630:	0030      	movs	r0, r6
    6632:	4b52      	ldr	r3, [pc, #328]	; (677c <adc_init+0x300>)
    6634:	4798      	blx	r3
    6636:	2800      	cmp	r0, #0
    6638:	d1fa      	bne.n	6630 <adc_init+0x1b4>
			config->positive_input;
    663a:	7b22      	ldrb	r2, [r4, #12]
			config->negative_input |
    663c:	89e3      	ldrh	r3, [r4, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
    663e:	042d      	lsls	r5, r5, #16
			config->negative_input |
    6640:	4313      	orrs	r3, r2
    6642:	68a2      	ldr	r2, [r4, #8]
    6644:	4313      	orrs	r3, r2
			(config->pin_scan.offset_start_scan <<
    6646:	9a01      	ldr	r2, [sp, #4]
    6648:	7812      	ldrb	r2, [r2, #0]
    664a:	0512      	lsls	r2, r2, #20
			config->negative_input |
    664c:	4313      	orrs	r3, r2
    664e:	431d      	orrs	r5, r3
	adc_module->EVCTRL.reg = config->event_action;
    6650:	9b02      	ldr	r3, [sp, #8]
	adc_module->INPUTCTRL.reg =
    6652:	613d      	str	r5, [r7, #16]
	adc_module->EVCTRL.reg = config->event_action;
    6654:	781b      	ldrb	r3, [r3, #0]
    6656:	753b      	strb	r3, [r7, #20]
	adc_module->INTENCLR.reg =
    6658:	230f      	movs	r3, #15
    665a:	75bb      	strb	r3, [r7, #22]
	if (config->correction.correction_enable){
    665c:	9b03      	ldr	r3, [sp, #12]
    665e:	7fdb      	ldrb	r3, [r3, #31]
    6660:	2b00      	cmp	r3, #0
    6662:	d00c      	beq.n	667e <adc_init+0x202>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    6664:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    6666:	4946      	ldr	r1, [pc, #280]	; (6780 <adc_init+0x304>)
    6668:	428b      	cmp	r3, r1
    666a:	d88f      	bhi.n	658c <adc_init+0x110>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    666c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
    666e:	2380      	movs	r3, #128	; 0x80
    6670:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    6672:	011b      	lsls	r3, r3, #4
    6674:	18d3      	adds	r3, r2, r3
    6676:	b29b      	uxth	r3, r3
    6678:	428b      	cmp	r3, r1
    667a:	d887      	bhi.n	658c <adc_init+0x110>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    667c:	84fa      	strh	r2, [r7, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
    667e:	22e0      	movs	r2, #224	; 0xe0
    6680:	4b40      	ldr	r3, [pc, #256]	; (6784 <adc_init+0x308>)
	return STATUS_OK;
    6682:	2000      	movs	r0, #0
			ADC_CALIB_BIAS_CAL(
    6684:	6819      	ldr	r1, [r3, #0]
    6686:	00d2      	lsls	r2, r2, #3
    6688:	014b      	lsls	r3, r1, #5
			ADC_CALIB_LINEARITY_CAL(
    668a:	0019      	movs	r1, r3
			ADC_CALIB_BIAS_CAL(
    668c:	401a      	ands	r2, r3
			ADC_CALIB_LINEARITY_CAL(
    668e:	4b3e      	ldr	r3, [pc, #248]	; (6788 <adc_init+0x30c>)
    6690:	681b      	ldr	r3, [r3, #0]
    6692:	0edb      	lsrs	r3, r3, #27
    6694:	430b      	orrs	r3, r1
    6696:	b2db      	uxtb	r3, r3
			) |
    6698:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    669a:	853b      	strh	r3, [r7, #40]	; 0x28
}
    669c:	b007      	add	sp, #28
    669e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		adjres = config->divide_result;
    66a0:	7c62      	ldrb	r2, [r4, #17]
		accumulate = config->accumulate_samples;
    66a2:	7c23      	ldrb	r3, [r4, #16]
		resolution = ADC_RESOLUTION_16BIT;
    66a4:	2510      	movs	r5, #16
    66a6:	e776      	b.n	6596 <adc_init+0x11a>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    66a8:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
    66aa:	2510      	movs	r5, #16
		adjres = ADC_DIVIDE_RESULT_2;
    66ac:	2201      	movs	r2, #1
    66ae:	e772      	b.n	6596 <adc_init+0x11a>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    66b0:	2308      	movs	r3, #8
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    66b2:	2200      	movs	r2, #0
    66b4:	e76f      	b.n	6596 <adc_init+0x11a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    66b6:	2300      	movs	r3, #0
    66b8:	e7fb      	b.n	66b2 <adc_init+0x236>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    66ba:	2302      	movs	r3, #2
    66bc:	e7f5      	b.n	66aa <adc_init+0x22e>
		switch (resolution) {
    66be:	2d20      	cmp	r5, #32
    66c0:	d018      	beq.n	66f4 <adc_init+0x278>
    66c2:	2d30      	cmp	r5, #48	; 0x30
    66c4:	d000      	beq.n	66c8 <adc_init+0x24c>
    66c6:	e78f      	b.n	65e8 <adc_init+0x16c>
			if (config->differential_mode &&
    66c8:	7ce3      	ldrb	r3, [r4, #19]
    66ca:	69e2      	ldr	r2, [r4, #28]
    66cc:	2b00      	cmp	r3, #0
    66ce:	d009      	beq.n	66e4 <adc_init+0x268>
					(config->window.window_lower_value > 127 ||
    66d0:	0013      	movs	r3, r2
    66d2:	3380      	adds	r3, #128	; 0x80
			if (config->differential_mode &&
    66d4:	2bff      	cmp	r3, #255	; 0xff
    66d6:	d900      	bls.n	66da <adc_init+0x25e>
    66d8:	e758      	b.n	658c <adc_init+0x110>
					config->window.window_lower_value < -128 ||
    66da:	6a23      	ldr	r3, [r4, #32]
    66dc:	3380      	adds	r3, #128	; 0x80
    66de:	2bff      	cmp	r3, #255	; 0xff
    66e0:	d900      	bls.n	66e4 <adc_init+0x268>
    66e2:	e753      	b.n	658c <adc_init+0x110>
			} else if (config->window.window_lower_value > 255 ||
    66e4:	2aff      	cmp	r2, #255	; 0xff
    66e6:	dd00      	ble.n	66ea <adc_init+0x26e>
    66e8:	e750      	b.n	658c <adc_init+0x110>
    66ea:	6a23      	ldr	r3, [r4, #32]
    66ec:	2bff      	cmp	r3, #255	; 0xff
    66ee:	dd00      	ble.n	66f2 <adc_init+0x276>
    66f0:	e74c      	b.n	658c <adc_init+0x110>
    66f2:	e779      	b.n	65e8 <adc_init+0x16c>
			if (config->differential_mode &&
    66f4:	7ce2      	ldrb	r2, [r4, #19]
    66f6:	69e1      	ldr	r1, [r4, #28]
    66f8:	4b24      	ldr	r3, [pc, #144]	; (678c <adc_init+0x310>)
    66fa:	2a00      	cmp	r2, #0
    66fc:	d00c      	beq.n	6718 <adc_init+0x29c>
					(config->window.window_lower_value > 511 ||
    66fe:	2280      	movs	r2, #128	; 0x80
    6700:	0092      	lsls	r2, r2, #2
    6702:	188a      	adds	r2, r1, r2
			if (config->differential_mode &&
    6704:	429a      	cmp	r2, r3
    6706:	d900      	bls.n	670a <adc_init+0x28e>
    6708:	e740      	b.n	658c <adc_init+0x110>
					config->window.window_lower_value < -512 ||
    670a:	2080      	movs	r0, #128	; 0x80
    670c:	6a22      	ldr	r2, [r4, #32]
    670e:	0080      	lsls	r0, r0, #2
					config->window.window_lower_value < -2048 ||
    6710:	1812      	adds	r2, r2, r0
    6712:	429a      	cmp	r2, r3
    6714:	d900      	bls.n	6718 <adc_init+0x29c>
    6716:	e739      	b.n	658c <adc_init+0x110>
			} else if (config->window.window_lower_value > 65535 ||
    6718:	4299      	cmp	r1, r3
    671a:	dd00      	ble.n	671e <adc_init+0x2a2>
    671c:	e736      	b.n	658c <adc_init+0x110>
    671e:	6a22      	ldr	r2, [r4, #32]
    6720:	429a      	cmp	r2, r3
    6722:	dd00      	ble.n	6726 <adc_init+0x2aa>
    6724:	e732      	b.n	658c <adc_init+0x110>
    6726:	e75f      	b.n	65e8 <adc_init+0x16c>
			if (config->differential_mode &&
    6728:	7ce2      	ldrb	r2, [r4, #19]
    672a:	69e1      	ldr	r1, [r4, #28]
    672c:	4b14      	ldr	r3, [pc, #80]	; (6780 <adc_init+0x304>)
    672e:	2a00      	cmp	r2, #0
    6730:	d0f2      	beq.n	6718 <adc_init+0x29c>
					(config->window.window_lower_value > 2047 ||
    6732:	2280      	movs	r2, #128	; 0x80
    6734:	0112      	lsls	r2, r2, #4
    6736:	188a      	adds	r2, r1, r2
			if (config->differential_mode &&
    6738:	429a      	cmp	r2, r3
    673a:	d900      	bls.n	673e <adc_init+0x2c2>
    673c:	e726      	b.n	658c <adc_init+0x110>
					config->window.window_lower_value < -2048 ||
    673e:	2080      	movs	r0, #128	; 0x80
    6740:	6a22      	ldr	r2, [r4, #32]
    6742:	0100      	lsls	r0, r0, #4
    6744:	e7e4      	b.n	6710 <adc_init+0x294>
			if (config->differential_mode &&
    6746:	7ce2      	ldrb	r2, [r4, #19]
    6748:	69e1      	ldr	r1, [r4, #28]
    674a:	4b11      	ldr	r3, [pc, #68]	; (6790 <adc_init+0x314>)
    674c:	2a00      	cmp	r2, #0
    674e:	d0e3      	beq.n	6718 <adc_init+0x29c>
					(config->window.window_lower_value > 32767 ||
    6750:	2280      	movs	r2, #128	; 0x80
    6752:	0212      	lsls	r2, r2, #8
    6754:	188a      	adds	r2, r1, r2
			if (config->differential_mode &&
    6756:	429a      	cmp	r2, r3
    6758:	d900      	bls.n	675c <adc_init+0x2e0>
    675a:	e717      	b.n	658c <adc_init+0x110>
					config->window.window_lower_value < -32768 ||
    675c:	2080      	movs	r0, #128	; 0x80
    675e:	6a22      	ldr	r2, [r4, #32]
    6760:	0200      	lsls	r0, r0, #8
    6762:	e7d5      	b.n	6710 <adc_init+0x294>
    6764:	40000400 	.word	0x40000400
    6768:	40000800 	.word	0x40000800
    676c:	20000768 	.word	0x20000768
    6770:	00009f21 	.word	0x00009f21
    6774:	00009e99 	.word	0x00009e99
    6778:	000063f9 	.word	0x000063f9
    677c:	000063f1 	.word	0x000063f1
    6780:	00000fff 	.word	0x00000fff
    6784:	00806024 	.word	0x00806024
    6788:	00806020 	.word	0x00806020
    678c:	000003ff 	.word	0x000003ff
    6790:	0000ffff 	.word	0x0000ffff

00006794 <adc_start_conversion>:
	Adc *const adc_module = module_inst->hw;
    6794:	6803      	ldr	r3, [r0, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    6796:	7e5a      	ldrb	r2, [r3, #25]
    6798:	b252      	sxtb	r2, r2
    679a:	2a00      	cmp	r2, #0
    679c:	dbfb      	blt.n	6796 <adc_start_conversion+0x2>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    679e:	2202      	movs	r2, #2
    67a0:	7b19      	ldrb	r1, [r3, #12]
    67a2:	430a      	orrs	r2, r1
    67a4:	731a      	strb	r2, [r3, #12]
	Adc *const adc_module = module_inst->hw;
    67a6:	6802      	ldr	r2, [r0, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    67a8:	7e53      	ldrb	r3, [r2, #25]
    67aa:	b25b      	sxtb	r3, r3
    67ac:	2b00      	cmp	r3, #0
    67ae:	dbfb      	blt.n	67a8 <adc_start_conversion+0x14>
}
    67b0:	4770      	bx	lr
	...

000067b4 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    67b4:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    67b6:	4b28      	ldr	r3, [pc, #160]	; (6858 <ADC_Handler+0xa4>)
    67b8:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    67ba:	6823      	ldr	r3, [r4, #0]
    67bc:	7e1a      	ldrb	r2, [r3, #24]
    67be:	7ddd      	ldrb	r5, [r3, #23]
    67c0:	4015      	ands	r5, r2
	if (flags & ADC_INTFLAG_RESRDY) {
    67c2:	2201      	movs	r2, #1
    67c4:	4215      	tst	r5, r2
    67c6:	d028      	beq.n	681a <ADC_Handler+0x66>
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    67c8:	761a      	strb	r2, [r3, #24]
	Adc *const adc_module = module_inst->hw;
    67ca:	6821      	ldr	r1, [r4, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    67cc:	7e4b      	ldrb	r3, [r1, #25]
    67ce:	b25b      	sxtb	r3, r3
    67d0:	2b00      	cmp	r3, #0
    67d2:	dbfb      	blt.n	67cc <ADC_Handler+0x18>
		*(module->job_buffer++) = module->hw->RESULT.reg;
    67d4:	6962      	ldr	r2, [r4, #20]
    67d6:	1c93      	adds	r3, r2, #2
    67d8:	6163      	str	r3, [r4, #20]
    67da:	8b4b      	ldrh	r3, [r1, #26]
    67dc:	b29b      	uxth	r3, r3
    67de:	8013      	strh	r3, [r2, #0]
		if (--module->remaining_conversions > 0) {
    67e0:	8b23      	ldrh	r3, [r4, #24]
    67e2:	3b01      	subs	r3, #1
    67e4:	b29b      	uxth	r3, r3
    67e6:	8323      	strh	r3, [r4, #24]
    67e8:	2b00      	cmp	r3, #0
    67ea:	d110      	bne.n	680e <ADC_Handler+0x5a>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    67ec:	2201      	movs	r2, #1
    67ee:	6821      	ldr	r1, [r4, #0]
    67f0:	758a      	strb	r2, [r1, #22]
			if (module->job_status == STATUS_BUSY) {
    67f2:	7f21      	ldrb	r1, [r4, #28]
    67f4:	2905      	cmp	r1, #5
    67f6:	d110      	bne.n	681a <ADC_Handler+0x66>
				module->job_status = STATUS_OK;
    67f8:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
    67fa:	7ee3      	ldrb	r3, [r4, #27]
    67fc:	4213      	tst	r3, r2
    67fe:	d00c      	beq.n	681a <ADC_Handler+0x66>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    6800:	7ea3      	ldrb	r3, [r4, #26]
    6802:	4213      	tst	r3, r2
    6804:	d009      	beq.n	681a <ADC_Handler+0x66>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    6806:	0020      	movs	r0, r4
    6808:	68a3      	ldr	r3, [r4, #8]
    680a:	4798      	blx	r3
    680c:	e005      	b.n	681a <ADC_Handler+0x66>
			if (module->software_trigger == true) {
    680e:	7f63      	ldrb	r3, [r4, #29]
    6810:	2b00      	cmp	r3, #0
    6812:	d002      	beq.n	681a <ADC_Handler+0x66>
				adc_start_conversion(module);
    6814:	0020      	movs	r0, r4
    6816:	4b11      	ldr	r3, [pc, #68]	; (685c <ADC_Handler+0xa8>)
    6818:	4798      	blx	r3
	if (flags & ADC_INTFLAG_WINMON) {
    681a:	2304      	movs	r3, #4
    681c:	421d      	tst	r5, r3
    681e:	d00b      	beq.n	6838 <ADC_Handler+0x84>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    6820:	6822      	ldr	r2, [r4, #0]
    6822:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    6824:	7ee2      	ldrb	r2, [r4, #27]
    6826:	3b02      	subs	r3, #2
    6828:	421a      	tst	r2, r3
    682a:	d005      	beq.n	6838 <ADC_Handler+0x84>
    682c:	7ea2      	ldrb	r2, [r4, #26]
    682e:	421a      	tst	r2, r3
    6830:	d002      	beq.n	6838 <ADC_Handler+0x84>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    6832:	0020      	movs	r0, r4
    6834:	68e3      	ldr	r3, [r4, #12]
    6836:	4798      	blx	r3
	if (flags & ADC_INTFLAG_OVERRUN) {
    6838:	2302      	movs	r3, #2
    683a:	421d      	tst	r5, r3
    683c:	d00b      	beq.n	6856 <ADC_Handler+0xa2>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    683e:	6822      	ldr	r2, [r4, #0]
    6840:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    6842:	7ee2      	ldrb	r2, [r4, #27]
    6844:	18db      	adds	r3, r3, r3
    6846:	421a      	tst	r2, r3
    6848:	d005      	beq.n	6856 <ADC_Handler+0xa2>
    684a:	7ea2      	ldrb	r2, [r4, #26]
    684c:	421a      	tst	r2, r3
    684e:	d002      	beq.n	6856 <ADC_Handler+0xa2>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    6850:	6923      	ldr	r3, [r4, #16]
    6852:	0020      	movs	r0, r4
    6854:	4798      	blx	r3
	_adc_interrupt_handler(0);
}
    6856:	bd70      	pop	{r4, r5, r6, pc}
    6858:	20000768 	.word	0x20000768
    685c:	00006795 	.word	0x00006795

00006860 <DAC_Handler>:
	}
}

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
    6860:	b570      	push	{r4, r5, r6, lr}
	struct dac_module *module = _dac_instances[instance];
    6862:	4b1e      	ldr	r3, [pc, #120]	; (68dc <DAC_Handler+0x7c>)
    6864:	681c      	ldr	r4, [r3, #0]
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
    6866:	2301      	movs	r3, #1
	Dac *const dac_hw = module->hw;
    6868:	6825      	ldr	r5, [r4, #0]
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
    686a:	79aa      	ldrb	r2, [r5, #6]
    686c:	421a      	tst	r2, r3
    686e:	d006      	beq.n	687e <DAC_Handler+0x1e>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
    6870:	71ab      	strb	r3, [r5, #6]
		if ((module->callback) &&
    6872:	7c63      	ldrb	r3, [r4, #17]
    6874:	2b00      	cmp	r3, #0
    6876:	d002      	beq.n	687e <DAC_Handler+0x1e>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
    6878:	2000      	movs	r0, #0
    687a:	69a3      	ldr	r3, [r4, #24]
    687c:	4798      	blx	r3
	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
    687e:	2202      	movs	r2, #2
    6880:	79ab      	ldrb	r3, [r5, #6]
    6882:	4213      	tst	r3, r2
    6884:	d029      	beq.n	68da <DAC_Handler+0x7a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    6886:	71aa      	strb	r2, [r5, #6]
		if (module->remaining_conversions) {
    6888:	89a3      	ldrh	r3, [r4, #12]
    688a:	2b00      	cmp	r3, #0
    688c:	d01f      	beq.n	68ce <DAC_Handler+0x6e>
				module->job_buffer[module->transferred_conversions++];
    688e:	89e3      	ldrh	r3, [r4, #14]
    6890:	b29b      	uxth	r3, r3
    6892:	1c59      	adds	r1, r3, #1
    6894:	b289      	uxth	r1, r1
    6896:	81e1      	strh	r1, [r4, #14]
    6898:	68a1      	ldr	r1, [r4, #8]
    689a:	005b      	lsls	r3, r3, #1
    689c:	18cb      	adds	r3, r1, r3
    689e:	881b      	ldrh	r3, [r3, #0]
    68a0:	b29b      	uxth	r3, r3
			dac_hw->DATABUF.reg =
    68a2:	81ab      	strh	r3, [r5, #12]
			module->remaining_conversions --;
    68a4:	89a3      	ldrh	r3, [r4, #12]
    68a6:	3b01      	subs	r3, #1
    68a8:	b29b      	uxth	r3, r3
    68aa:	81a3      	strh	r3, [r4, #12]
			if (module->remaining_conversions == 0) {
    68ac:	89a0      	ldrh	r0, [r4, #12]
    68ae:	b280      	uxth	r0, r0
    68b0:	2800      	cmp	r0, #0
    68b2:	d10c      	bne.n	68ce <DAC_Handler+0x6e>
				module->job_status = STATUS_OK;
    68b4:	1c63      	adds	r3, r4, #1
    68b6:	77d8      	strb	r0, [r3, #31]
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
    68b8:	712a      	strb	r2, [r5, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
    68ba:	71aa      	strb	r2, [r5, #6]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    68bc:	2280      	movs	r2, #128	; 0x80
    68be:	4b08      	ldr	r3, [pc, #32]	; (68e0 <DAC_Handler+0x80>)
    68c0:	0492      	lsls	r2, r2, #18
    68c2:	67da      	str	r2, [r3, #124]	; 0x7c
				if ((module->callback) &&
    68c4:	7ca3      	ldrb	r3, [r4, #18]
    68c6:	2b00      	cmp	r3, #0
    68c8:	d001      	beq.n	68ce <DAC_Handler+0x6e>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
    68ca:	69e3      	ldr	r3, [r4, #28]
    68cc:	4798      	blx	r3
		if ((module->callback) &&
    68ce:	7c23      	ldrb	r3, [r4, #16]
    68d0:	2b00      	cmp	r3, #0
    68d2:	d002      	beq.n	68da <DAC_Handler+0x7a>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
    68d4:	6963      	ldr	r3, [r4, #20]
    68d6:	2000      	movs	r0, #0
    68d8:	4798      	blx	r3
	_dac_interrupt_handler(0);
}
    68da:	bd70      	pop	{r4, r5, r6, pc}
    68dc:	2000076c 	.word	0x2000076c
    68e0:	e000e104 	.word	0xe000e104

000068e4 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    68e4:	b570      	push	{r4, r5, r6, lr}
	cpu_irq_enter_critical();
    68e6:	4b20      	ldr	r3, [pc, #128]	; (6968 <DMAC_Handler+0x84>)
    68e8:	4798      	blx	r3
	uint32_t total_size;

	system_interrupt_enter_critical_section();

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    68ea:	220f      	movs	r2, #15
    68ec:	4b1f      	ldr	r3, [pc, #124]	; (696c <DMAC_Handler+0x88>)

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
    68ee:	4920      	ldr	r1, [pc, #128]	; (6970 <DMAC_Handler+0x8c>)
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    68f0:	8c1b      	ldrh	r3, [r3, #32]
	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
	isr = DMAC->CHINTFLAG.reg;

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    68f2:	4c20      	ldr	r4, [pc, #128]	; (6974 <DMAC_Handler+0x90>)
	resource = _dma_active_resource[active_channel];
    68f4:	4013      	ands	r3, r2
    68f6:	009b      	lsls	r3, r3, #2
    68f8:	5858      	ldr	r0, [r3, r1]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    68fa:	4d1f      	ldr	r5, [pc, #124]	; (6978 <DMAC_Handler+0x94>)
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    68fc:	7803      	ldrb	r3, [r0, #0]
    68fe:	4013      	ands	r3, r2
    6900:	4a1e      	ldr	r2, [pc, #120]	; (697c <DMAC_Handler+0x98>)
    6902:	7013      	strb	r3, [r2, #0]
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    6904:	7801      	ldrb	r1, [r0, #0]
	isr = DMAC->CHINTFLAG.reg;
    6906:	4a1e      	ldr	r2, [pc, #120]	; (6980 <DMAC_Handler+0x9c>)
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    6908:	0109      	lsls	r1, r1, #4
    690a:	1864      	adds	r4, r4, r1
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    690c:	1869      	adds	r1, r5, r1
	isr = DMAC->CHINTFLAG.reg;
    690e:	7813      	ldrb	r3, [r2, #0]
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    6910:	8864      	ldrh	r4, [r4, #2]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    6912:	8849      	ldrh	r1, [r1, #2]
	isr = DMAC->CHINTFLAG.reg;
    6914:	b2db      	uxtb	r3, r3
	resource->transfered_size = total_size - write_size;
    6916:	1a61      	subs	r1, r4, r1
    6918:	6141      	str	r1, [r0, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    691a:	001c      	movs	r4, r3
    691c:	2101      	movs	r1, #1
    691e:	400c      	ands	r4, r1
    6920:	d00c      	beq.n	693c <DMAC_Handler+0x58>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    6922:	2310      	movs	r3, #16
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    6924:	7011      	strb	r1, [r2, #0]
		resource->job_status = STATUS_ERR_IO;
    6926:	7443      	strb	r3, [r0, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    6928:	7c03      	ldrb	r3, [r0, #16]
    692a:	420b      	tst	r3, r1
    692c:	d003      	beq.n	6936 <DMAC_Handler+0x52>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    692e:	6843      	ldr	r3, [r0, #4]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    6930:	2b00      	cmp	r3, #0
    6932:	d000      	beq.n	6936 <DMAC_Handler+0x52>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    6934:	4798      	blx	r3
	cpu_irq_leave_critical();
    6936:	4b13      	ldr	r3, [pc, #76]	; (6984 <DMAC_Handler+0xa0>)
    6938:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
}
    693a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    693c:	2102      	movs	r1, #2
    693e:	420b      	tst	r3, r1
    6940:	d006      	beq.n	6950 <DMAC_Handler+0x6c>
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    6942:	7011      	strb	r1, [r2, #0]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    6944:	7c03      	ldrb	r3, [r0, #16]
		resource->job_status = STATUS_OK;
    6946:	7444      	strb	r4, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    6948:	420b      	tst	r3, r1
    694a:	d0f4      	beq.n	6936 <DMAC_Handler+0x52>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    694c:	6883      	ldr	r3, [r0, #8]
    694e:	e7ef      	b.n	6930 <DMAC_Handler+0x4c>
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    6950:	2104      	movs	r1, #4
    6952:	420b      	tst	r3, r1
    6954:	d0ef      	beq.n	6936 <DMAC_Handler+0x52>
		resource->job_status = STATUS_SUSPEND;
    6956:	2306      	movs	r3, #6
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    6958:	7011      	strb	r1, [r2, #0]
		resource->job_status = STATUS_SUSPEND;
    695a:	7443      	strb	r3, [r0, #17]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    695c:	7c03      	ldrb	r3, [r0, #16]
    695e:	420b      	tst	r3, r1
    6960:	d0e9      	beq.n	6936 <DMAC_Handler+0x52>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    6962:	68c3      	ldr	r3, [r0, #12]
    6964:	e7e4      	b.n	6930 <DMAC_Handler+0x4c>
    6966:	46c0      	nop			; (mov r8, r8)
    6968:	00009851 	.word	0x00009851
    696c:	41004800 	.word	0x41004800
    6970:	2000023c 	.word	0x2000023c
    6974:	20000770 	.word	0x20000770
    6978:	20000250 	.word	0x20000250
    697c:	4100483f 	.word	0x4100483f
    6980:	4100484e 	.word	0x4100484e
    6984:	00009885 	.word	0x00009885

00006988 <extint_is_syncing>:
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    6988:	4b01      	ldr	r3, [pc, #4]	; (6990 <extint_is_syncing+0x8>)
    698a:	7858      	ldrb	r0, [r3, #1]
    698c:	09c0      	lsrs	r0, r0, #7
			return true;
		}
	}
	return false;
}
    698e:	4770      	bx	lr
    6990:	40001800 	.word	0x40001800

00006994 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    6994:	2302      	movs	r3, #2
{
    6996:	b510      	push	{r4, lr}
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    6998:	4a04      	ldr	r2, [pc, #16]	; (69ac <_extint_enable+0x18>)
    699a:	7811      	ldrb	r1, [r2, #0]
    699c:	430b      	orrs	r3, r1
    699e:	7013      	strb	r3, [r2, #0]
	}

	while (extint_is_syncing()) {
    69a0:	4b03      	ldr	r3, [pc, #12]	; (69b0 <_extint_enable+0x1c>)
    69a2:	4798      	blx	r3
    69a4:	2800      	cmp	r0, #0
    69a6:	d1fb      	bne.n	69a0 <_extint_enable+0xc>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    69a8:	bd10      	pop	{r4, pc}
    69aa:	46c0      	nop			; (mov r8, r8)
    69ac:	40001800 	.word	0x40001800
    69b0:	00006989 	.word	0x00006989

000069b4 <_system_extint_init>:
			PM->APBAMASK.reg |= mask;
    69b4:	2340      	movs	r3, #64	; 0x40
{
    69b6:	b507      	push	{r0, r1, r2, lr}
    69b8:	4a10      	ldr	r2, [pc, #64]	; (69fc <_system_extint_init+0x48>)
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    69ba:	2005      	movs	r0, #5
    69bc:	6991      	ldr	r1, [r2, #24]
    69be:	430b      	orrs	r3, r1
    69c0:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    69c2:	2306      	movs	r3, #6
    69c4:	a901      	add	r1, sp, #4
    69c6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    69c8:	4b0d      	ldr	r3, [pc, #52]	; (6a00 <_system_extint_init+0x4c>)
    69ca:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    69cc:	4b0d      	ldr	r3, [pc, #52]	; (6a04 <_system_extint_init+0x50>)
    69ce:	2005      	movs	r0, #5
    69d0:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    69d2:	2301      	movs	r3, #1
    69d4:	4a0c      	ldr	r2, [pc, #48]	; (6a08 <_system_extint_init+0x54>)
    69d6:	7811      	ldrb	r1, [r2, #0]
    69d8:	430b      	orrs	r3, r1
    69da:	7013      	strb	r3, [r2, #0]
	while (extint_is_syncing()) {
    69dc:	4b0b      	ldr	r3, [pc, #44]	; (6a0c <_system_extint_init+0x58>)
    69de:	4798      	blx	r3
    69e0:	2800      	cmp	r0, #0
    69e2:	d1fb      	bne.n	69dc <_system_extint_init+0x28>
		_extint_dev.callbacks[j] = NULL;
    69e4:	0002      	movs	r2, r0
    69e6:	4b0a      	ldr	r3, [pc, #40]	; (6a10 <_system_extint_init+0x5c>)
    69e8:	501a      	str	r2, [r3, r0]
    69ea:	3004      	adds	r0, #4
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    69ec:	2840      	cmp	r0, #64	; 0x40
    69ee:	d1fb      	bne.n	69e8 <_system_extint_init+0x34>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    69f0:	2210      	movs	r2, #16
    69f2:	4b08      	ldr	r3, [pc, #32]	; (6a14 <_system_extint_init+0x60>)
    69f4:	601a      	str	r2, [r3, #0]
	_extint_enable();
    69f6:	4b08      	ldr	r3, [pc, #32]	; (6a18 <_system_extint_init+0x64>)
    69f8:	4798      	blx	r3
}
    69fa:	bd07      	pop	{r0, r1, r2, pc}
    69fc:	40000400 	.word	0x40000400
    6a00:	00009f21 	.word	0x00009f21
    6a04:	00009e99 	.word	0x00009e99
    6a08:	40001800 	.word	0x40001800
    6a0c:	00006989 	.word	0x00006989
    6a10:	200007c0 	.word	0x200007c0
    6a14:	e000e100 	.word	0xe000e100
    6a18:	00006995 	.word	0x00006995

00006a1c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    6a1c:	2300      	movs	r3, #0
	config->gpio_pin_mux        = 0;
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    6a1e:	2201      	movs	r2, #1
	config->gpio_pin            = 0;
    6a20:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    6a22:	6043      	str	r3, [r0, #4]
	config->wake_if_sleeping    = true;
	config->filter_input_signal = false;
    6a24:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    6a26:	3302      	adds	r3, #2
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    6a28:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    6a2a:	7242      	strb	r2, [r0, #9]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    6a2c:	72c3      	strb	r3, [r0, #11]
}
    6a2e:	4770      	bx	lr

00006a30 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    6a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6a32:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6a34:	2600      	movs	r6, #0
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    6a36:	7923      	ldrb	r3, [r4, #4]
    6a38:	a901      	add	r1, sp, #4
    6a3a:	704e      	strb	r6, [r1, #1]
	config->powersave    = false;
    6a3c:	70ce      	strb	r6, [r1, #3]
    6a3e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    6a40:	7a23      	ldrb	r3, [r4, #8]
{
    6a42:	0005      	movs	r5, r0
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    6a44:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    6a46:	7820      	ldrb	r0, [r4, #0]
    6a48:	4b13      	ldr	r3, [pc, #76]	; (6a98 <extint_chan_set_config+0x68>)
    6a4a:	4798      	blx	r3
		return NULL;
    6a4c:	0033      	movs	r3, r6
	if (eic_index < EIC_INST_NUM) {
    6a4e:	2d1f      	cmp	r5, #31
    6a50:	d800      	bhi.n	6a54 <extint_chan_set_config+0x24>
		return eics[eic_index];
    6a52:	4b12      	ldr	r3, [pc, #72]	; (6a9c <extint_chan_set_config+0x6c>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    6a54:	2107      	movs	r1, #7

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    6a56:	7aa2      	ldrb	r2, [r4, #10]
	uint32_t config_pos = (4 * (channel % 8));
    6a58:	4029      	ands	r1, r5
    6a5a:	0089      	lsls	r1, r1, #2
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    6a5c:	7ae6      	ldrb	r6, [r4, #11]
	if (config->filter_input_signal) {
    6a5e:	2a00      	cmp	r2, #0
    6a60:	d001      	beq.n	6a66 <extint_chan_set_config+0x36>
    6a62:	2208      	movs	r2, #8
    6a64:	4316      	orrs	r6, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6a66:	270f      	movs	r7, #15
			(new_config << config_pos);
    6a68:	408e      	lsls	r6, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6a6a:	408f      	lsls	r7, r1
			(new_config << config_pos);
    6a6c:	0031      	movs	r1, r6
    6a6e:	08ea      	lsrs	r2, r5, #3
    6a70:	0092      	lsls	r2, r2, #2
    6a72:	189a      	adds	r2, r3, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    6a74:	6990      	ldr	r0, [r2, #24]
    6a76:	43b8      	bics	r0, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6a78:	4301      	orrs	r1, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    6a7a:	6191      	str	r1, [r2, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    6a7c:	7a61      	ldrb	r1, [r4, #9]
    6a7e:	2201      	movs	r2, #1
    6a80:	2900      	cmp	r1, #0
    6a82:	d004      	beq.n	6a8e <extint_chan_set_config+0x5e>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    6a84:	40aa      	lsls	r2, r5
    6a86:	6959      	ldr	r1, [r3, #20]
    6a88:	430a      	orrs	r2, r1
    6a8a:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    6a8c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    6a8e:	40aa      	lsls	r2, r5
    6a90:	6959      	ldr	r1, [r3, #20]
    6a92:	4391      	bics	r1, r2
    6a94:	6159      	str	r1, [r3, #20]
}
    6a96:	e7f9      	b.n	6a8c <extint_chan_set_config+0x5c>
    6a98:	00009ff5 	.word	0x00009ff5
    6a9c:	40001800 	.word	0x40001800

00006aa0 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    6aa0:	6803      	ldr	r3, [r0, #0]

        if (rtc_module->MODE0.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    6aa2:	7a98      	ldrb	r0, [r3, #10]
    6aa4:	09c0      	lsrs	r0, r0, #7
                return true;
        }

        return false;
}
    6aa6:	4770      	bx	lr

00006aa8 <rtc_count_enable>:
    6aa8:	2208      	movs	r2, #8
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    6aaa:	b570      	push	{r4, r5, r6, lr}
    6aac:	0005      	movs	r5, r0
    6aae:	4b06      	ldr	r3, [pc, #24]	; (6ac8 <rtc_count_enable+0x20>)
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    6ab0:	6804      	ldr	r4, [r0, #0]
    6ab2:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    6ab4:	0028      	movs	r0, r5
    6ab6:	4b05      	ldr	r3, [pc, #20]	; (6acc <rtc_count_enable+0x24>)
    6ab8:	4798      	blx	r3
    6aba:	2800      	cmp	r0, #0
    6abc:	d1fa      	bne.n	6ab4 <rtc_count_enable+0xc>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
    6abe:	2302      	movs	r3, #2
    6ac0:	8822      	ldrh	r2, [r4, #0]
    6ac2:	4313      	orrs	r3, r2
    6ac4:	8023      	strh	r3, [r4, #0]
}
    6ac6:	bd70      	pop	{r4, r5, r6, pc}
    6ac8:	e000e100 	.word	0xe000e100
    6acc:	00006aa1 	.word	0x00006aa1

00006ad0 <rtc_count_disable>:
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6ad0:	2208      	movs	r2, #8
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    6ad2:	b570      	push	{r4, r5, r6, lr}
    6ad4:	0005      	movs	r5, r0
    6ad6:	4b08      	ldr	r3, [pc, #32]	; (6af8 <rtc_count_disable+0x28>)
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    6ad8:	6804      	ldr	r4, [r0, #0]
    6ada:	67da      	str	r2, [r3, #124]	; 0x7c

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    6adc:	0028      	movs	r0, r5
    6ade:	4b07      	ldr	r3, [pc, #28]	; (6afc <rtc_count_disable+0x2c>)
    6ae0:	4798      	blx	r3
    6ae2:	2800      	cmp	r0, #0
    6ae4:	d1fa      	bne.n	6adc <rtc_count_disable+0xc>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    6ae6:	23c1      	movs	r3, #193	; 0xc1
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;

	/* Disable RTC module. */
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    6ae8:	2202      	movs	r2, #2
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    6aea:	71a3      	strb	r3, [r4, #6]
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    6aec:	7223      	strb	r3, [r4, #8]
	rtc_module->MODE0.CTRL.reg &= ~RTC_MODE0_CTRL_ENABLE;
    6aee:	8823      	ldrh	r3, [r4, #0]
    6af0:	4393      	bics	r3, r2
    6af2:	8023      	strh	r3, [r4, #0]
}
    6af4:	bd70      	pop	{r4, r5, r6, pc}
    6af6:	46c0      	nop			; (mov r8, r8)
    6af8:	e000e104 	.word	0xe000e104
    6afc:	00006aa1 	.word	0x00006aa1

00006b00 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    6b00:	b570      	push	{r4, r5, r6, lr}
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Disable module before reset. */
	rtc_count_disable(module);
    6b02:	4b08      	ldr	r3, [pc, #32]	; (6b24 <rtc_count_reset+0x24>)
{
    6b04:	0004      	movs	r4, r0
	Rtc *const rtc_module = module->hw;
    6b06:	6805      	ldr	r5, [r0, #0]
	rtc_count_disable(module);
    6b08:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
    6b0a:	2300      	movs	r3, #0
    6b0c:	82a3      	strh	r3, [r4, #20]
	module->enabled_callback    = 0;
    6b0e:	82e3      	strh	r3, [r4, #22]
#endif

	while (rtc_count_is_syncing(module)) {
    6b10:	0020      	movs	r0, r4
    6b12:	4b05      	ldr	r3, [pc, #20]	; (6b28 <rtc_count_reset+0x28>)
    6b14:	4798      	blx	r3
    6b16:	2800      	cmp	r0, #0
    6b18:	d1fa      	bne.n	6b10 <rtc_count_reset+0x10>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_SWRST;
    6b1a:	2301      	movs	r3, #1
    6b1c:	882a      	ldrh	r2, [r5, #0]
    6b1e:	4313      	orrs	r3, r2
    6b20:	802b      	strh	r3, [r5, #0]
}
    6b22:	bd70      	pop	{r4, r5, r6, pc}
    6b24:	00006ad1 	.word	0x00006ad1
    6b28:	00006aa1 	.word	0x00006aa1

00006b2c <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    6b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b2e:	0007      	movs	r7, r0
    6b30:	000e      	movs	r6, r1
    6b32:	0014      	movs	r4, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    6b34:	6805      	ldr	r5, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    6b36:	0038      	movs	r0, r7
    6b38:	4b0f      	ldr	r3, [pc, #60]	; (6b78 <rtc_count_set_compare+0x4c>)
    6b3a:	4798      	blx	r3
    6b3c:	2800      	cmp	r0, #0
    6b3e:	d1fa      	bne.n	6b36 <rtc_count_set_compare+0xa>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    6b40:	793a      	ldrb	r2, [r7, #4]
    6b42:	2a00      	cmp	r2, #0
    6b44:	d00b      	beq.n	6b5e <rtc_count_set_compare+0x32>

			break;

		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
    6b46:	231a      	movs	r3, #26
	switch (module->mode) {
    6b48:	2a01      	cmp	r2, #1
    6b4a:	d106      	bne.n	6b5a <rtc_count_set_compare+0x2e>
				return STATUS_ERR_INVALID_ARG;
    6b4c:	2317      	movs	r3, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP32) {
    6b4e:	2c01      	cmp	r4, #1
    6b50:	d803      	bhi.n	6b5a <rtc_count_set_compare+0x2e>
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
    6b52:	0003      	movs	r3, r0
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    6b54:	3406      	adds	r4, #6
    6b56:	00a4      	lsls	r4, r4, #2
    6b58:	5166      	str	r6, [r4, r5]
}
    6b5a:	0018      	movs	r0, r3
    6b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return STATUS_ERR_INVALID_ARG;
    6b5e:	2317      	movs	r3, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    6b60:	2c02      	cmp	r4, #2
    6b62:	d8fa      	bhi.n	6b5a <rtc_count_set_compare+0x2e>
			if (comp_value > 0xffff) {
    6b64:	4905      	ldr	r1, [pc, #20]	; (6b7c <rtc_count_set_compare+0x50>)
    6b66:	428e      	cmp	r6, r1
    6b68:	d8f7      	bhi.n	6b5a <rtc_count_set_compare+0x2e>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    6b6a:	340c      	adds	r4, #12
    6b6c:	b2b6      	uxth	r6, r6
    6b6e:	0064      	lsls	r4, r4, #1
    6b70:	5366      	strh	r6, [r4, r5]
	return STATUS_OK;
    6b72:	0013      	movs	r3, r2
			break;
    6b74:	e7f1      	b.n	6b5a <rtc_count_set_compare+0x2e>
    6b76:	46c0      	nop			; (mov r8, r8)
    6b78:	00006aa1 	.word	0x00006aa1
    6b7c:	0000ffff 	.word	0x0000ffff

00006b80 <rtc_count_init>:
    6b80:	2320      	movs	r3, #32
{
    6b82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6b84:	0016      	movs	r6, r2
    6b86:	4a2f      	ldr	r2, [pc, #188]	; (6c44 <rtc_count_init+0xc4>)
	module->hw = hw;
    6b88:	6001      	str	r1, [r0, #0]
    6b8a:	6991      	ldr	r1, [r2, #24]
{
    6b8c:	0004      	movs	r4, r0
    6b8e:	430b      	orrs	r3, r1
    6b90:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    6b92:	2302      	movs	r3, #2
    6b94:	a901      	add	r1, sp, #4
    6b96:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    6b98:	2004      	movs	r0, #4
    6b9a:	4b2b      	ldr	r3, [pc, #172]	; (6c48 <rtc_count_init+0xc8>)
    6b9c:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    6b9e:	2004      	movs	r0, #4
    6ba0:	4b2a      	ldr	r3, [pc, #168]	; (6c4c <rtc_count_init+0xcc>)
    6ba2:	4798      	blx	r3
	rtc_count_reset(module);
    6ba4:	4b2a      	ldr	r3, [pc, #168]	; (6c50 <rtc_count_init+0xd0>)
    6ba6:	0020      	movs	r0, r4
    6ba8:	4798      	blx	r3
	module->mode                = config->mode;
    6baa:	78b3      	ldrb	r3, [r6, #2]
    6bac:	7123      	strb	r3, [r4, #4]
	module->continuously_update = config->continuously_update;
    6bae:	7933      	ldrb	r3, [r6, #4]
    6bb0:	7163      	strb	r3, [r4, #5]
	_rtc_instance[0] = module;
    6bb2:	4b28      	ldr	r3, [pc, #160]	; (6c54 <rtc_count_init+0xd4>)
    6bb4:	601c      	str	r4, [r3, #0]
	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
    6bb6:	8833      	ldrh	r3, [r6, #0]
	Rtc *const rtc_module = module->hw;
    6bb8:	6825      	ldr	r5, [r4, #0]
	rtc_module->MODE0.CTRL.reg = RTC_MODE0_CTRL_MODE(0) | config->prescaler;
    6bba:	802b      	strh	r3, [r5, #0]
	switch (config->mode) {
    6bbc:	78b3      	ldrb	r3, [r6, #2]
    6bbe:	2b00      	cmp	r3, #0
    6bc0:	d024      	beq.n	6c0c <rtc_count_init+0x8c>
			return STATUS_ERR_INVALID_ARG;
    6bc2:	2017      	movs	r0, #23
	switch (config->mode) {
    6bc4:	2b01      	cmp	r3, #1
    6bc6:	d120      	bne.n	6c0a <rtc_count_init+0x8a>
			rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MODE(0);
    6bc8:	882b      	ldrh	r3, [r5, #0]
    6bca:	b29b      	uxth	r3, r3
    6bcc:	802b      	strh	r3, [r5, #0]
			if (config->clear_on_match) {
    6bce:	78f3      	ldrb	r3, [r6, #3]
    6bd0:	2b00      	cmp	r3, #0
    6bd2:	d003      	beq.n	6bdc <rtc_count_init+0x5c>
				rtc_module->MODE0.CTRL.reg |= RTC_MODE0_CTRL_MATCHCLR;
    6bd4:	2380      	movs	r3, #128	; 0x80
    6bd6:	882a      	ldrh	r2, [r5, #0]
    6bd8:	4313      	orrs	r3, r2
    6bda:	802b      	strh	r3, [r5, #0]
				while (rtc_count_is_syncing(module)) {
    6bdc:	0020      	movs	r0, r4
    6bde:	4b1e      	ldr	r3, [pc, #120]	; (6c58 <rtc_count_init+0xd8>)
    6be0:	4798      	blx	r3
    6be2:	1e02      	subs	r2, r0, #0
    6be4:	d1fa      	bne.n	6bdc <rtc_count_init+0x5c>
				rtc_count_set_compare(module, config->compare_values[i],
    6be6:	68b1      	ldr	r1, [r6, #8]
    6be8:	0020      	movs	r0, r4
    6bea:	4b1c      	ldr	r3, [pc, #112]	; (6c5c <rtc_count_init+0xdc>)
    6bec:	4798      	blx	r3
	return STATUS_OK;
    6bee:	2000      	movs	r0, #0
	if (config->continuously_update) {
    6bf0:	7933      	ldrb	r3, [r6, #4]
    6bf2:	4283      	cmp	r3, r0
    6bf4:	d009      	beq.n	6c0a <rtc_count_init+0x8a>
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    6bf6:	2380      	movs	r3, #128	; 0x80
    6bf8:	886a      	ldrh	r2, [r5, #2]
    6bfa:	01db      	lsls	r3, r3, #7
    6bfc:	4313      	orrs	r3, r2
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
    6bfe:	2280      	movs	r2, #128	; 0x80
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RCONT;
    6c00:	806b      	strh	r3, [r5, #2]
		rtc_module->MODE0.READREQ.reg |= RTC_READREQ_RREQ;
    6c02:	886b      	ldrh	r3, [r5, #2]
    6c04:	0212      	lsls	r2, r2, #8
    6c06:	4313      	orrs	r3, r2
    6c08:	806b      	strh	r3, [r5, #2]
}
    6c0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
    6c0c:	2304      	movs	r3, #4
    6c0e:	882a      	ldrh	r2, [r5, #0]
				return STATUS_ERR_INVALID_ARG;
    6c10:	2017      	movs	r0, #23
			rtc_module->MODE1.CTRL.reg |= RTC_MODE1_CTRL_MODE(1);
    6c12:	4313      	orrs	r3, r2
    6c14:	802b      	strh	r3, [r5, #0]
			if (config->clear_on_match) {
    6c16:	78f3      	ldrb	r3, [r6, #3]
    6c18:	2b00      	cmp	r3, #0
    6c1a:	d1f6      	bne.n	6c0a <rtc_count_init+0x8a>
				while (rtc_count_is_syncing(module)) {
    6c1c:	0020      	movs	r0, r4
    6c1e:	4b0e      	ldr	r3, [pc, #56]	; (6c58 <rtc_count_init+0xd8>)
    6c20:	4798      	blx	r3
    6c22:	1e02      	subs	r2, r0, #0
    6c24:	d1fa      	bne.n	6c1c <rtc_count_init+0x9c>
				rtc_count_set_compare(module, config->compare_values[i],
    6c26:	68b1      	ldr	r1, [r6, #8]
    6c28:	0020      	movs	r0, r4
    6c2a:	4f0c      	ldr	r7, [pc, #48]	; (6c5c <rtc_count_init+0xdc>)
    6c2c:	47b8      	blx	r7
				while (rtc_count_is_syncing(module)) {
    6c2e:	0020      	movs	r0, r4
    6c30:	4b09      	ldr	r3, [pc, #36]	; (6c58 <rtc_count_init+0xd8>)
    6c32:	4798      	blx	r3
    6c34:	2800      	cmp	r0, #0
    6c36:	d1fa      	bne.n	6c2e <rtc_count_init+0xae>
				rtc_count_set_compare(module, config->compare_values[i],
    6c38:	2201      	movs	r2, #1
    6c3a:	68f1      	ldr	r1, [r6, #12]
    6c3c:	0020      	movs	r0, r4
    6c3e:	47b8      	blx	r7
    6c40:	e7d5      	b.n	6bee <rtc_count_init+0x6e>
    6c42:	46c0      	nop			; (mov r8, r8)
    6c44:	40000400 	.word	0x40000400
    6c48:	00009f21 	.word	0x00009f21
    6c4c:	00009e99 	.word	0x00009e99
    6c50:	00006b01 	.word	0x00006b01
    6c54:	20000800 	.word	0x20000800
    6c58:	00006aa1 	.word	0x00006aa1
    6c5c:	00006b2d 	.word	0x00006b2d

00006c60 <rtc_count_set_period>:
 * \retval STATUS_ERR_UNSUPPORTED_DEV  If module is not operated in 16-bit mode
 */
enum status_code rtc_count_set_period(
		struct rtc_module *const module,
		const uint16_t period_value)
{
    6c60:	b570      	push	{r4, r5, r6, lr}
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Check that correct mode is set. */
	if (module->mode != RTC_COUNT_MODE_16BIT) {
    6c62:	7903      	ldrb	r3, [r0, #4]
{
    6c64:	0004      	movs	r4, r0
    6c66:	000d      	movs	r5, r1
		return STATUS_ERR_UNSUPPORTED_DEV;
    6c68:	2015      	movs	r0, #21
	if (module->mode != RTC_COUNT_MODE_16BIT) {
    6c6a:	2b00      	cmp	r3, #0
    6c6c:	d106      	bne.n	6c7c <rtc_count_set_period+0x1c>
	Rtc *const rtc_module = module->hw;
    6c6e:	6826      	ldr	r6, [r4, #0]
	}

	while (rtc_count_is_syncing(module)) {
    6c70:	0020      	movs	r0, r4
    6c72:	4b03      	ldr	r3, [pc, #12]	; (6c80 <rtc_count_set_period+0x20>)
    6c74:	4798      	blx	r3
    6c76:	2800      	cmp	r0, #0
    6c78:	d1fa      	bne.n	6c70 <rtc_count_set_period+0x10>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE1.PER.reg = period_value;
    6c7a:	82b5      	strh	r5, [r6, #20]

	return STATUS_OK;
}
    6c7c:	bd70      	pop	{r4, r5, r6, pc}
    6c7e:	46c0      	nop			; (mov r8, r8)
    6c80:	00006aa1 	.word	0x00006aa1

00006c84 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    6c84:	b570      	push	{r4, r5, r6, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    6c86:	4b11      	ldr	r3, [pc, #68]	; (6ccc <RTC_Handler+0x48>)
    6c88:	681b      	ldr	r3, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    6c8a:	8ad9      	ldrh	r1, [r3, #22]
	Rtc *const rtc_module = module->hw;
    6c8c:	681c      	ldr	r4, [r3, #0]
	callback_mask &= module->registered_callback;
    6c8e:	8a9a      	ldrh	r2, [r3, #20]
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    6c90:	7a20      	ldrb	r0, [r4, #8]
	callback_mask &= module->registered_callback;
    6c92:	400a      	ands	r2, r1
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    6c94:	79e1      	ldrb	r1, [r4, #7]
    6c96:	4001      	ands	r1, r0
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    6c98:	b248      	sxtb	r0, r1
    6c9a:	2800      	cmp	r0, #0
    6c9c:	da06      	bge.n	6cac <RTC_Handler+0x28>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    6c9e:	0752      	lsls	r2, r2, #29
    6ca0:	d501      	bpl.n	6ca6 <RTC_Handler+0x22>
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    6ca2:	691b      	ldr	r3, [r3, #16]
    6ca4:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    6ca6:	2380      	movs	r3, #128	; 0x80
    6ca8:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
    6caa:	bd70      	pop	{r4, r5, r6, pc}
    6cac:	2501      	movs	r5, #1
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    6cae:	4229      	tst	r1, r5
    6cb0:	d005      	beq.n	6cbe <RTC_Handler+0x3a>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    6cb2:	422a      	tst	r2, r5
    6cb4:	d001      	beq.n	6cba <RTC_Handler+0x36>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    6cb6:	689b      	ldr	r3, [r3, #8]
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    6cb8:	4798      	blx	r3
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    6cba:	7225      	strb	r5, [r4, #8]
}
    6cbc:	e7f5      	b.n	6caa <RTC_Handler+0x26>
    6cbe:	2502      	movs	r5, #2
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    6cc0:	4229      	tst	r1, r5
    6cc2:	d0f2      	beq.n	6caa <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    6cc4:	422a      	tst	r2, r5
    6cc6:	d0f8      	beq.n	6cba <RTC_Handler+0x36>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    6cc8:	68db      	ldr	r3, [r3, #12]
    6cca:	e7f5      	b.n	6cb8 <RTC_Handler+0x34>
    6ccc:	20000800 	.word	0x20000800

00006cd0 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    6cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    6cd2:	2400      	movs	r4, #0
{
    6cd4:	b089      	sub	sp, #36	; 0x24
    6cd6:	9200      	str	r2, [sp, #0]
    6cd8:	9301      	str	r3, [sp, #4]
	for (i = 63; i >= 0; i--) {
    6cda:	233f      	movs	r3, #63	; 0x3f
	uint64_t q = 0, r = 0, bit_shift;
    6cdc:	2600      	movs	r6, #0
    6cde:	2700      	movs	r7, #0
    6ce0:	0025      	movs	r5, r4
{
    6ce2:	9006      	str	r0, [sp, #24]
    6ce4:	9107      	str	r1, [sp, #28]
	for (i = 63; i >= 0; i--) {
    6ce6:	9303      	str	r3, [sp, #12]
		bit_shift = (uint64_t)1 << i;
    6ce8:	9a03      	ldr	r2, [sp, #12]
    6cea:	4b13      	ldr	r3, [pc, #76]	; (6d38 <long_division+0x68>)
    6cec:	2001      	movs	r0, #1
    6cee:	2100      	movs	r1, #0
    6cf0:	4798      	blx	r3

		r = r << 1;
    6cf2:	19b6      	adds	r6, r6, r6
    6cf4:	417f      	adcs	r7, r7

		if (n & bit_shift) {
    6cf6:	9b06      	ldr	r3, [sp, #24]
    6cf8:	9a07      	ldr	r2, [sp, #28]
    6cfa:	4003      	ands	r3, r0
    6cfc:	400a      	ands	r2, r1
		r = r << 1;
    6cfe:	9604      	str	r6, [sp, #16]
    6d00:	9705      	str	r7, [sp, #20]
		if (n & bit_shift) {
    6d02:	4313      	orrs	r3, r2
    6d04:	d003      	beq.n	6d0e <long_division+0x3e>
			r |= 0x01;
    6d06:	2301      	movs	r3, #1
    6d08:	4333      	orrs	r3, r6
    6d0a:	001e      	movs	r6, r3
    6d0c:	9f05      	ldr	r7, [sp, #20]
		}

		if (r >= d) {
    6d0e:	9b01      	ldr	r3, [sp, #4]
    6d10:	42bb      	cmp	r3, r7
    6d12:	d809      	bhi.n	6d28 <long_division+0x58>
    6d14:	d102      	bne.n	6d1c <long_division+0x4c>
    6d16:	9b00      	ldr	r3, [sp, #0]
    6d18:	42b3      	cmp	r3, r6
    6d1a:	d805      	bhi.n	6d28 <long_division+0x58>
			r = r - d;
    6d1c:	9a00      	ldr	r2, [sp, #0]
    6d1e:	9b01      	ldr	r3, [sp, #4]
    6d20:	1ab6      	subs	r6, r6, r2
    6d22:	419f      	sbcs	r7, r3
			q |= bit_shift;
    6d24:	4304      	orrs	r4, r0
    6d26:	430d      	orrs	r5, r1
	for (i = 63; i >= 0; i--) {
    6d28:	9b03      	ldr	r3, [sp, #12]
    6d2a:	1e5a      	subs	r2, r3, #1
    6d2c:	9203      	str	r2, [sp, #12]
    6d2e:	d2db      	bcs.n	6ce8 <long_division+0x18>
		}
	}

	return q;
}
    6d30:	0020      	movs	r0, r4
    6d32:	0029      	movs	r1, r5
    6d34:	b009      	add	sp, #36	; 0x24
    6d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d38:	0000a5b5 	.word	0x0000a5b5

00006d3c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    6d3c:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    6d3e:	0849      	lsrs	r1, r1, #1
{
    6d40:	0004      	movs	r4, r0
    6d42:	2300      	movs	r3, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6d44:	2040      	movs	r0, #64	; 0x40
	if (baudrate > (external_clock / 2)) {
    6d46:	42a1      	cmp	r1, r4
    6d48:	d201      	bcs.n	6d4e <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    6d4a:	bd10      	pop	{r4, pc}
		baud_calculated++;
    6d4c:	0003      	movs	r3, r0
    6d4e:	1c58      	adds	r0, r3, #1
		clock_value = clock_value - baudrate;
    6d50:	1b09      	subs	r1, r1, r4
		baud_calculated++;
    6d52:	b280      	uxth	r0, r0
	while (clock_value >= baudrate) {
    6d54:	428c      	cmp	r4, r1
    6d56:	d9f9      	bls.n	6d4c <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6d58:	2040      	movs	r0, #64	; 0x40
	if (baud_calculated > 0xFF) {
    6d5a:	2bff      	cmp	r3, #255	; 0xff
    6d5c:	d8f5      	bhi.n	6d4a <_sercom_get_sync_baud_val+0xe>
		*baudvalue = baud_calculated;
    6d5e:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
    6d60:	2000      	movs	r0, #0
    6d62:	e7f2      	b.n	6d4a <_sercom_get_sync_baud_val+0xe>

00006d64 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    6d64:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d66:	b085      	sub	sp, #20
    6d68:	001e      	movs	r6, r3
    6d6a:	ab0a      	add	r3, sp, #40	; 0x28
    6d6c:	000d      	movs	r5, r1
    6d6e:	7819      	ldrb	r1, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    6d70:	0003      	movs	r3, r0
    6d72:	434b      	muls	r3, r1
{
    6d74:	9203      	str	r2, [sp, #12]
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    6d76:	2740      	movs	r7, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    6d78:	42ab      	cmp	r3, r5
    6d7a:	d817      	bhi.n	6dac <_sercom_get_async_baud_val+0x48>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    6d7c:	2e00      	cmp	r6, #0
    6d7e:	d118      	bne.n	6db2 <_sercom_get_async_baud_val+0x4e>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    6d80:	0002      	movs	r2, r0
    6d82:	0033      	movs	r3, r6
    6d84:	0008      	movs	r0, r1
    6d86:	4c1b      	ldr	r4, [pc, #108]	; (6df4 <_sercom_get_async_baud_val+0x90>)
    6d88:	0031      	movs	r1, r6
    6d8a:	47a0      	blx	r4
		ratio = long_division(temp1, peripheral_clock);
    6d8c:	002a      	movs	r2, r5
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    6d8e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    6d90:	0033      	movs	r3, r6
    6d92:	4c19      	ldr	r4, [pc, #100]	; (6df8 <_sercom_get_async_baud_val+0x94>)
    6d94:	0030      	movs	r0, r6
    6d96:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    6d98:	2200      	movs	r2, #0
    6d9a:	2301      	movs	r3, #1
    6d9c:	1a12      	subs	r2, r2, r0
    6d9e:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    6da0:	0c14      	lsrs	r4, r2, #16
    6da2:	0418      	lsls	r0, r3, #16
    6da4:	4304      	orrs	r4, r0
		baud_fp = temp1 - 8 * baud_int;
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
    6da6:	2700      	movs	r7, #0
	*baudval = baud_calculated;
    6da8:	9b03      	ldr	r3, [sp, #12]
    6daa:	801c      	strh	r4, [r3, #0]
}
    6dac:	0038      	movs	r0, r7
    6dae:	b005      	add	sp, #20
    6db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint64_t baud_calculated = 0;
    6db2:	2400      	movs	r4, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    6db4:	2e01      	cmp	r6, #1
    6db6:	d1f6      	bne.n	6da6 <_sercom_get_async_baud_val+0x42>
		temp1 = ((uint64_t)baudrate * sample_num);
    6db8:	000a      	movs	r2, r1
    6dba:	0023      	movs	r3, r4
    6dbc:	0021      	movs	r1, r4
    6dbe:	4e0d      	ldr	r6, [pc, #52]	; (6df4 <_sercom_get_async_baud_val+0x90>)
    6dc0:	47b0      	blx	r6
    6dc2:	9000      	str	r0, [sp, #0]
    6dc4:	9101      	str	r1, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    6dc6:	000b      	movs	r3, r1
    6dc8:	0002      	movs	r2, r0
    6dca:	0021      	movs	r1, r4
    6dcc:	0028      	movs	r0, r5
    6dce:	4c0a      	ldr	r4, [pc, #40]	; (6df8 <_sercom_get_async_baud_val+0x94>)
    6dd0:	47a0      	blx	r4
		if(baud_int > BAUD_INT_MAX) {
    6dd2:	2380      	movs	r3, #128	; 0x80
		baud_int = long_division( peripheral_clock, temp1);
    6dd4:	0006      	movs	r6, r0
		if(baud_int > BAUD_INT_MAX) {
    6dd6:	019b      	lsls	r3, r3, #6
    6dd8:	4298      	cmp	r0, r3
    6dda:	d8e7      	bhi.n	6dac <_sercom_get_async_baud_val+0x48>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    6ddc:	9a00      	ldr	r2, [sp, #0]
    6dde:	9b01      	ldr	r3, [sp, #4]
    6de0:	0f69      	lsrs	r1, r5, #29
    6de2:	00e8      	lsls	r0, r5, #3
    6de4:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    6de6:	00f4      	lsls	r4, r6, #3
    6de8:	1b04      	subs	r4, r0, r4
		baud_calculated = baud_int | (baud_fp << 13);
    6dea:	b2e4      	uxtb	r4, r4
    6dec:	0364      	lsls	r4, r4, #13
    6dee:	4334      	orrs	r4, r6
    6df0:	e7d9      	b.n	6da6 <_sercom_get_async_baud_val+0x42>
    6df2:	46c0      	nop			; (mov r8, r8)
    6df4:	0000a689 	.word	0x0000a689
    6df8:	00006cd1 	.word	0x00006cd1

00006dfc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    6dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    6dfe:	4c0d      	ldr	r4, [pc, #52]	; (6e34 <sercom_set_gclk_generator+0x38>)
{
    6e00:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
    6e02:	7823      	ldrb	r3, [r4, #0]
    6e04:	2b00      	cmp	r3, #0
    6e06:	d001      	beq.n	6e0c <sercom_set_gclk_generator+0x10>
    6e08:	2900      	cmp	r1, #0
    6e0a:	d00c      	beq.n	6e26 <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    6e0c:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    6e0e:	2013      	movs	r0, #19
    6e10:	4b09      	ldr	r3, [pc, #36]	; (6e38 <sercom_set_gclk_generator+0x3c>)
		gclk_chan_conf.source_generator = generator_source;
    6e12:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    6e14:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    6e16:	2013      	movs	r0, #19
    6e18:	4b08      	ldr	r3, [pc, #32]	; (6e3c <sercom_set_gclk_generator+0x40>)
    6e1a:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
    6e1c:	2301      	movs	r3, #1

		return STATUS_OK;
    6e1e:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
    6e20:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
    6e22:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    6e24:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
    6e26:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
    6e28:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
    6e2a:	42ab      	cmp	r3, r5
    6e2c:	d0fa      	beq.n	6e24 <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
    6e2e:	201d      	movs	r0, #29
    6e30:	e7f8      	b.n	6e24 <sercom_set_gclk_generator+0x28>
    6e32:	46c0      	nop			; (mov r8, r8)
    6e34:	200002a0 	.word	0x200002a0
    6e38:	00009f21 	.word	0x00009f21
    6e3c:	00009e99 	.word	0x00009e99

00006e40 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    6e40:	4a39      	ldr	r2, [pc, #228]	; (6f28 <_sercom_get_default_pad+0xe8>)
{
    6e42:	0003      	movs	r3, r0
    6e44:	b500      	push	{lr}
    6e46:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
    6e48:	4293      	cmp	r3, r2
    6e4a:	d033      	beq.n	6eb4 <_sercom_get_default_pad+0x74>
    6e4c:	d807      	bhi.n	6e5e <_sercom_get_default_pad+0x1e>
    6e4e:	4a37      	ldr	r2, [pc, #220]	; (6f2c <_sercom_get_default_pad+0xec>)
    6e50:	4293      	cmp	r3, r2
    6e52:	d014      	beq.n	6e7e <_sercom_get_default_pad+0x3e>
    6e54:	4a36      	ldr	r2, [pc, #216]	; (6f30 <_sercom_get_default_pad+0xf0>)
    6e56:	4293      	cmp	r3, r2
    6e58:	d01f      	beq.n	6e9a <_sercom_get_default_pad+0x5a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    6e5a:	2300      	movs	r3, #0
    6e5c:	e017      	b.n	6e8e <_sercom_get_default_pad+0x4e>
	switch ((uintptr_t)sercom_module) {
    6e5e:	4a35      	ldr	r2, [pc, #212]	; (6f34 <_sercom_get_default_pad+0xf4>)
    6e60:	4293      	cmp	r3, r2
    6e62:	d03a      	beq.n	6eda <_sercom_get_default_pad+0x9a>
    6e64:	4a34      	ldr	r2, [pc, #208]	; (6f38 <_sercom_get_default_pad+0xf8>)
    6e66:	4293      	cmp	r3, r2
    6e68:	d044      	beq.n	6ef4 <_sercom_get_default_pad+0xb4>
    6e6a:	4a34      	ldr	r2, [pc, #208]	; (6f3c <_sercom_get_default_pad+0xfc>)
    6e6c:	4293      	cmp	r3, r2
    6e6e:	d1f4      	bne.n	6e5a <_sercom_get_default_pad+0x1a>
	return 0;
    6e70:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6e72:	2903      	cmp	r1, #3
    6e74:	d80b      	bhi.n	6e8e <_sercom_get_default_pad+0x4e>
    6e76:	f003 fa1d 	bl	a2b4 <__gnu_thumb1_case_uqi>
    6e7a:	2a50      	.short	0x2a50
    6e7c:	2e2c      	.short	0x2e2c
	return 0;
    6e7e:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6e80:	2903      	cmp	r1, #3
    6e82:	d804      	bhi.n	6e8e <_sercom_get_default_pad+0x4e>
    6e84:	f003 fa16 	bl	a2b4 <__gnu_thumb1_case_uqi>
    6e88:	07050243 	.word	0x07050243
    6e8c:	4b2c      	ldr	r3, [pc, #176]	; (6f40 <_sercom_get_default_pad+0x100>)
}
    6e8e:	0018      	movs	r0, r3
    6e90:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6e92:	4b2c      	ldr	r3, [pc, #176]	; (6f44 <_sercom_get_default_pad+0x104>)
    6e94:	e7fb      	b.n	6e8e <_sercom_get_default_pad+0x4e>
    6e96:	4b2c      	ldr	r3, [pc, #176]	; (6f48 <_sercom_get_default_pad+0x108>)
    6e98:	e7f9      	b.n	6e8e <_sercom_get_default_pad+0x4e>
	return 0;
    6e9a:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6e9c:	2903      	cmp	r1, #3
    6e9e:	d8f6      	bhi.n	6e8e <_sercom_get_default_pad+0x4e>
    6ea0:	f003 fa08 	bl	a2b4 <__gnu_thumb1_case_uqi>
    6ea4:	06040237 	.word	0x06040237
    6ea8:	4b28      	ldr	r3, [pc, #160]	; (6f4c <_sercom_get_default_pad+0x10c>)
    6eaa:	e7f0      	b.n	6e8e <_sercom_get_default_pad+0x4e>
    6eac:	4b28      	ldr	r3, [pc, #160]	; (6f50 <_sercom_get_default_pad+0x110>)
    6eae:	e7ee      	b.n	6e8e <_sercom_get_default_pad+0x4e>
    6eb0:	4b28      	ldr	r3, [pc, #160]	; (6f54 <_sercom_get_default_pad+0x114>)
    6eb2:	e7ec      	b.n	6e8e <_sercom_get_default_pad+0x4e>
	return 0;
    6eb4:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6eb6:	2903      	cmp	r1, #3
    6eb8:	d8e9      	bhi.n	6e8e <_sercom_get_default_pad+0x4e>
    6eba:	f003 f9fb 	bl	a2b4 <__gnu_thumb1_case_uqi>
    6ebe:	022c      	.short	0x022c
    6ec0:	0604      	.short	0x0604
    6ec2:	4b25      	ldr	r3, [pc, #148]	; (6f58 <_sercom_get_default_pad+0x118>)
    6ec4:	e7e3      	b.n	6e8e <_sercom_get_default_pad+0x4e>
    6ec6:	4b25      	ldr	r3, [pc, #148]	; (6f5c <_sercom_get_default_pad+0x11c>)
    6ec8:	e7e1      	b.n	6e8e <_sercom_get_default_pad+0x4e>
    6eca:	4b25      	ldr	r3, [pc, #148]	; (6f60 <_sercom_get_default_pad+0x120>)
    6ecc:	e7df      	b.n	6e8e <_sercom_get_default_pad+0x4e>
    6ece:	4b25      	ldr	r3, [pc, #148]	; (6f64 <_sercom_get_default_pad+0x124>)
    6ed0:	e7dd      	b.n	6e8e <_sercom_get_default_pad+0x4e>
    6ed2:	4b25      	ldr	r3, [pc, #148]	; (6f68 <_sercom_get_default_pad+0x128>)
    6ed4:	e7db      	b.n	6e8e <_sercom_get_default_pad+0x4e>
    6ed6:	4b25      	ldr	r3, [pc, #148]	; (6f6c <_sercom_get_default_pad+0x12c>)
    6ed8:	e7d9      	b.n	6e8e <_sercom_get_default_pad+0x4e>
	return 0;
    6eda:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6edc:	2903      	cmp	r1, #3
    6ede:	d8d6      	bhi.n	6e8e <_sercom_get_default_pad+0x4e>
    6ee0:	f003 f9e8 	bl	a2b4 <__gnu_thumb1_case_uqi>
    6ee4:	0604021d 	.word	0x0604021d
    6ee8:	4b21      	ldr	r3, [pc, #132]	; (6f70 <_sercom_get_default_pad+0x130>)
    6eea:	e7d0      	b.n	6e8e <_sercom_get_default_pad+0x4e>
    6eec:	4b21      	ldr	r3, [pc, #132]	; (6f74 <_sercom_get_default_pad+0x134>)
    6eee:	e7ce      	b.n	6e8e <_sercom_get_default_pad+0x4e>
    6ef0:	4b21      	ldr	r3, [pc, #132]	; (6f78 <_sercom_get_default_pad+0x138>)
    6ef2:	e7cc      	b.n	6e8e <_sercom_get_default_pad+0x4e>
	return 0;
    6ef4:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    6ef6:	2903      	cmp	r1, #3
    6ef8:	d8c9      	bhi.n	6e8e <_sercom_get_default_pad+0x4e>
    6efa:	f003 f9db 	bl	a2b4 <__gnu_thumb1_case_uqi>
    6efe:	0212      	.short	0x0212
    6f00:	0604      	.short	0x0604
    6f02:	4b1e      	ldr	r3, [pc, #120]	; (6f7c <_sercom_get_default_pad+0x13c>)
    6f04:	e7c3      	b.n	6e8e <_sercom_get_default_pad+0x4e>
    6f06:	4b1e      	ldr	r3, [pc, #120]	; (6f80 <_sercom_get_default_pad+0x140>)
    6f08:	e7c1      	b.n	6e8e <_sercom_get_default_pad+0x4e>
    6f0a:	4b1e      	ldr	r3, [pc, #120]	; (6f84 <_sercom_get_default_pad+0x144>)
    6f0c:	e7bf      	b.n	6e8e <_sercom_get_default_pad+0x4e>
    6f0e:	4b1e      	ldr	r3, [pc, #120]	; (6f88 <_sercom_get_default_pad+0x148>)
    6f10:	e7bd      	b.n	6e8e <_sercom_get_default_pad+0x4e>
    6f12:	2303      	movs	r3, #3
    6f14:	e7bb      	b.n	6e8e <_sercom_get_default_pad+0x4e>
    6f16:	4b1d      	ldr	r3, [pc, #116]	; (6f8c <_sercom_get_default_pad+0x14c>)
    6f18:	e7b9      	b.n	6e8e <_sercom_get_default_pad+0x4e>
    6f1a:	4b1d      	ldr	r3, [pc, #116]	; (6f90 <_sercom_get_default_pad+0x150>)
    6f1c:	e7b7      	b.n	6e8e <_sercom_get_default_pad+0x4e>
    6f1e:	4b1d      	ldr	r3, [pc, #116]	; (6f94 <_sercom_get_default_pad+0x154>)
    6f20:	e7b5      	b.n	6e8e <_sercom_get_default_pad+0x4e>
    6f22:	4b1d      	ldr	r3, [pc, #116]	; (6f98 <_sercom_get_default_pad+0x158>)
    6f24:	e7b3      	b.n	6e8e <_sercom_get_default_pad+0x4e>
    6f26:	46c0      	nop			; (mov r8, r8)
    6f28:	42001000 	.word	0x42001000
    6f2c:	42000800 	.word	0x42000800
    6f30:	42000c00 	.word	0x42000c00
    6f34:	42001800 	.word	0x42001800
    6f38:	42001c00 	.word	0x42001c00
    6f3c:	42001400 	.word	0x42001400
    6f40:	00050003 	.word	0x00050003
    6f44:	00060003 	.word	0x00060003
    6f48:	00070003 	.word	0x00070003
    6f4c:	00010003 	.word	0x00010003
    6f50:	001e0003 	.word	0x001e0003
    6f54:	001f0003 	.word	0x001f0003
    6f58:	00090003 	.word	0x00090003
    6f5c:	000a0003 	.word	0x000a0003
    6f60:	000b0003 	.word	0x000b0003
    6f64:	00110003 	.word	0x00110003
    6f68:	00120003 	.word	0x00120003
    6f6c:	00130003 	.word	0x00130003
    6f70:	000d0003 	.word	0x000d0003
    6f74:	000e0003 	.word	0x000e0003
    6f78:	000f0003 	.word	0x000f0003
    6f7c:	00170003 	.word	0x00170003
    6f80:	00180003 	.word	0x00180003
    6f84:	00190003 	.word	0x00190003
    6f88:	00040003 	.word	0x00040003
    6f8c:	00080003 	.word	0x00080003
    6f90:	00100003 	.word	0x00100003
    6f94:	000c0003 	.word	0x000c0003
    6f98:	00160003 	.word	0x00160003

00006f9c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    6f9c:	b570      	push	{r4, r5, r6, lr}
    6f9e:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    6fa0:	4669      	mov	r1, sp
    6fa2:	4b09      	ldr	r3, [pc, #36]	; (6fc8 <_sercom_get_sercom_inst_index+0x2c>)
    6fa4:	466a      	mov	r2, sp
    6fa6:	cb70      	ldmia	r3!, {r4, r5, r6}
    6fa8:	c170      	stmia	r1!, {r4, r5, r6}
    6faa:	cb70      	ldmia	r3!, {r4, r5, r6}
    6fac:	c170      	stmia	r1!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6fae:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    6fb0:	0099      	lsls	r1, r3, #2
    6fb2:	5851      	ldr	r1, [r2, r1]
    6fb4:	4281      	cmp	r1, r0
    6fb6:	d102      	bne.n	6fbe <_sercom_get_sercom_inst_index+0x22>
			return i;
    6fb8:	b2d8      	uxtb	r0, r3
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
    6fba:	b006      	add	sp, #24
    6fbc:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6fbe:	3301      	adds	r3, #1
    6fc0:	2b06      	cmp	r3, #6
    6fc2:	d1f5      	bne.n	6fb0 <_sercom_get_sercom_inst_index+0x14>
	return 0;
    6fc4:	2000      	movs	r0, #0
    6fc6:	e7f8      	b.n	6fba <_sercom_get_sercom_inst_index+0x1e>
    6fc8:	0000d808 	.word	0x0000d808

00006fcc <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
    6fcc:	2300      	movs	r3, #0
{
    6fce:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
    6fd0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    6fd2:	4b06      	ldr	r3, [pc, #24]	; (6fec <prvTaskExitError+0x20>)
    6fd4:	681b      	ldr	r3, [r3, #0]
    6fd6:	3301      	adds	r3, #1
    6fd8:	d001      	beq.n	6fde <prvTaskExitError+0x12>
    6fda:	b672      	cpsid	i
    6fdc:	e7fe      	b.n	6fdc <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
    6fde:	b672      	cpsid	i
	while( ulDummy == 0 )
    6fe0:	9b01      	ldr	r3, [sp, #4]
    6fe2:	2b00      	cmp	r3, #0
    6fe4:	d0fc      	beq.n	6fe0 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    6fe6:	b002      	add	sp, #8
    6fe8:	4770      	bx	lr
    6fea:	46c0      	nop			; (mov r8, r8)
    6fec:	20000010 	.word	0x20000010

00006ff0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    6ff0:	4a0b      	ldr	r2, [pc, #44]	; (7020 <pxCurrentTCBConst2>)
    6ff2:	6813      	ldr	r3, [r2, #0]
    6ff4:	6818      	ldr	r0, [r3, #0]
    6ff6:	3020      	adds	r0, #32
    6ff8:	f380 8809 	msr	PSP, r0
    6ffc:	2002      	movs	r0, #2
    6ffe:	f380 8814 	msr	CONTROL, r0
    7002:	f3bf 8f6f 	isb	sy
    7006:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    7008:	46ae      	mov	lr, r5
    700a:	bc08      	pop	{r3}
    700c:	bc04      	pop	{r2}
    700e:	b662      	cpsie	i
    7010:	4718      	bx	r3
    7012:	46c0      	nop			; (mov r8, r8)
    7014:	46c0      	nop			; (mov r8, r8)
    7016:	46c0      	nop			; (mov r8, r8)
    7018:	46c0      	nop			; (mov r8, r8)
    701a:	46c0      	nop			; (mov r8, r8)
    701c:	46c0      	nop			; (mov r8, r8)
    701e:	46c0      	nop			; (mov r8, r8)

00007020 <pxCurrentTCBConst2>:
    7020:	200002a4 	.word	0x200002a4

00007024 <pxPortInitialiseStack>:
{
    7024:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    7026:	2480      	movs	r4, #128	; 0x80
    7028:	1f03      	subs	r3, r0, #4
    702a:	0464      	lsls	r4, r4, #17
    702c:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    702e:	3b04      	subs	r3, #4
    7030:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    7032:	4903      	ldr	r1, [pc, #12]	; (7040 <pxPortInitialiseStack+0x1c>)
    7034:	3b04      	subs	r3, #4
    7036:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    7038:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
    703a:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    703c:	601a      	str	r2, [r3, #0]
}
    703e:	bd10      	pop	{r4, pc}
    7040:	00006fcd 	.word	0x00006fcd

00007044 <SVC_Handler>:
}
    7044:	4770      	bx	lr
	...

00007048 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    7048:	22ff      	movs	r2, #255	; 0xff
{
    704a:	b570      	push	{r4, r5, r6, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    704c:	4b13      	ldr	r3, [pc, #76]	; (709c <xPortStartScheduler+0x54>)
    704e:	0412      	lsls	r2, r2, #16
    7050:	6819      	ldr	r1, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    7052:	2400      	movs	r4, #0
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    7054:	430a      	orrs	r2, r1
    7056:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    7058:	22ff      	movs	r2, #255	; 0xff
    705a:	6819      	ldr	r1, [r3, #0]
    705c:	0612      	lsls	r2, r2, #24
    705e:	430a      	orrs	r2, r1
    7060:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    7062:	4d0f      	ldr	r5, [pc, #60]	; (70a0 <xPortStartScheduler+0x58>)
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    7064:	4b0f      	ldr	r3, [pc, #60]	; (70a4 <xPortStartScheduler+0x5c>)
	*(portNVIC_SYSTICK_CTRL) = 0UL;
    7066:	602c      	str	r4, [r5, #0]
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    7068:	0020      	movs	r0, r4
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
    706a:	601c      	str	r4, [r3, #0]
    706c:	4b0e      	ldr	r3, [pc, #56]	; (70a8 <xPortStartScheduler+0x60>)
    706e:	4798      	blx	r3

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    7070:	21fa      	movs	r1, #250	; 0xfa
    7072:	4b0e      	ldr	r3, [pc, #56]	; (70ac <xPortStartScheduler+0x64>)
    7074:	0089      	lsls	r1, r1, #2
    7076:	7a1b      	ldrb	r3, [r3, #8]
    7078:	40d8      	lsrs	r0, r3
    707a:	4b0d      	ldr	r3, [pc, #52]	; (70b0 <xPortStartScheduler+0x68>)
    707c:	4798      	blx	r3
    707e:	4b0d      	ldr	r3, [pc, #52]	; (70b4 <xPortStartScheduler+0x6c>)
    7080:	3801      	subs	r0, #1
    7082:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    7084:	2307      	movs	r3, #7
    7086:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
    7088:	4b0b      	ldr	r3, [pc, #44]	; (70b8 <xPortStartScheduler+0x70>)
    708a:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
    708c:	4b0b      	ldr	r3, [pc, #44]	; (70bc <xPortStartScheduler+0x74>)
    708e:	4798      	blx	r3
	vTaskSwitchContext();
    7090:	4b0b      	ldr	r3, [pc, #44]	; (70c0 <xPortStartScheduler+0x78>)
    7092:	4798      	blx	r3
	prvTaskExitError();
    7094:	4b0b      	ldr	r3, [pc, #44]	; (70c4 <xPortStartScheduler+0x7c>)
    7096:	4798      	blx	r3
}
    7098:	0020      	movs	r0, r4
    709a:	bd70      	pop	{r4, r5, r6, pc}
    709c:	e000ed20 	.word	0xe000ed20
    70a0:	e000e010 	.word	0xe000e010
    70a4:	e000e018 	.word	0xe000e018
    70a8:	00009e11 	.word	0x00009e11
    70ac:	40000400 	.word	0x40000400
    70b0:	0000a2c9 	.word	0x0000a2c9
    70b4:	e000e014 	.word	0xe000e014
    70b8:	20000010 	.word	0x20000010
    70bc:	00006ff1 	.word	0x00006ff1
    70c0:	00007fe5 	.word	0x00007fe5
    70c4:	00006fcd 	.word	0x00006fcd

000070c8 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    70c8:	2280      	movs	r2, #128	; 0x80
    70ca:	4b04      	ldr	r3, [pc, #16]	; (70dc <vPortYield+0x14>)
    70cc:	0552      	lsls	r2, r2, #21
    70ce:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
    70d0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    70d4:	f3bf 8f6f 	isb	sy
}
    70d8:	4770      	bx	lr
    70da:	46c0      	nop			; (mov r8, r8)
    70dc:	e000ed04 	.word	0xe000ed04

000070e0 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
    70e0:	b672      	cpsid	i
    uxCriticalNesting++;
    70e2:	4a04      	ldr	r2, [pc, #16]	; (70f4 <vPortEnterCritical+0x14>)
    70e4:	6813      	ldr	r3, [r2, #0]
    70e6:	3301      	adds	r3, #1
    70e8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
    70ea:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    70ee:	f3bf 8f6f 	isb	sy
}
    70f2:	4770      	bx	lr
    70f4:	20000010 	.word	0x20000010

000070f8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
    70f8:	4a05      	ldr	r2, [pc, #20]	; (7110 <vPortExitCritical+0x18>)
    70fa:	6813      	ldr	r3, [r2, #0]
    70fc:	2b00      	cmp	r3, #0
    70fe:	d101      	bne.n	7104 <vPortExitCritical+0xc>
    7100:	b672      	cpsid	i
    7102:	e7fe      	b.n	7102 <vPortExitCritical+0xa>
    uxCriticalNesting--;
    7104:	3b01      	subs	r3, #1
    7106:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
    7108:	2b00      	cmp	r3, #0
    710a:	d100      	bne.n	710e <vPortExitCritical+0x16>
        portENABLE_INTERRUPTS();
    710c:	b662      	cpsie	i
}
    710e:	4770      	bx	lr
    7110:	20000010 	.word	0x20000010

00007114 <ulSetInterruptMaskFromISR>:
	__asm volatile(
    7114:	f3ef 8010 	mrs	r0, PRIMASK
    7118:	b672      	cpsid	i
    711a:	4770      	bx	lr

0000711c <vClearInterruptMaskFromISR>:
	__asm volatile(
    711c:	f380 8810 	msr	PRIMASK, r0
    7120:	4770      	bx	lr
	...

00007130 <PendSV_Handler>:
	__asm volatile
    7130:	f3ef 8009 	mrs	r0, PSP
    7134:	4b0e      	ldr	r3, [pc, #56]	; (7170 <pxCurrentTCBConst>)
    7136:	681a      	ldr	r2, [r3, #0]
    7138:	3820      	subs	r0, #32
    713a:	6010      	str	r0, [r2, #0]
    713c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    713e:	4644      	mov	r4, r8
    7140:	464d      	mov	r5, r9
    7142:	4656      	mov	r6, sl
    7144:	465f      	mov	r7, fp
    7146:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    7148:	b508      	push	{r3, lr}
    714a:	b672      	cpsid	i
    714c:	f000 ff4a 	bl	7fe4 <vTaskSwitchContext>
    7150:	b662      	cpsie	i
    7152:	bc0c      	pop	{r2, r3}
    7154:	6811      	ldr	r1, [r2, #0]
    7156:	6808      	ldr	r0, [r1, #0]
    7158:	3010      	adds	r0, #16
    715a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    715c:	46a0      	mov	r8, r4
    715e:	46a9      	mov	r9, r5
    7160:	46b2      	mov	sl, r6
    7162:	46bb      	mov	fp, r7
    7164:	f380 8809 	msr	PSP, r0
    7168:	3820      	subs	r0, #32
    716a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    716c:	4718      	bx	r3
    716e:	46c0      	nop			; (mov r8, r8)

00007170 <pxCurrentTCBConst>:
    7170:	200002a4 	.word	0x200002a4

00007174 <SysTick_Handler>:
{
    7174:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    7176:	4b07      	ldr	r3, [pc, #28]	; (7194 <SysTick_Handler+0x20>)
    7178:	4798      	blx	r3
		if( xTaskIncrementTick() != pdFALSE )
    717a:	4b07      	ldr	r3, [pc, #28]	; (7198 <SysTick_Handler+0x24>)
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    717c:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
    717e:	4798      	blx	r3
    7180:	2800      	cmp	r0, #0
    7182:	d003      	beq.n	718c <SysTick_Handler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    7184:	2280      	movs	r2, #128	; 0x80
    7186:	4b05      	ldr	r3, [pc, #20]	; (719c <SysTick_Handler+0x28>)
    7188:	0552      	lsls	r2, r2, #21
    718a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    718c:	0020      	movs	r0, r4
    718e:	4b04      	ldr	r3, [pc, #16]	; (71a0 <SysTick_Handler+0x2c>)
    7190:	4798      	blx	r3
}
    7192:	bd10      	pop	{r4, pc}
    7194:	00007115 	.word	0x00007115
    7198:	00007d35 	.word	0x00007d35
    719c:	e000ed04 	.word	0xe000ed04
    71a0:	0000711d 	.word	0x0000711d

000071a4 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    71a4:	b510      	push	{r4, lr}
    71a6:	0004      	movs	r4, r0
void *pvReturn;

	vTaskSuspendAll();
    71a8:	4b04      	ldr	r3, [pc, #16]	; (71bc <pvPortMalloc+0x18>)
    71aa:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
    71ac:	0020      	movs	r0, r4
    71ae:	4b04      	ldr	r3, [pc, #16]	; (71c0 <pvPortMalloc+0x1c>)
    71b0:	4798      	blx	r3
    71b2:	0004      	movs	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    71b4:	4b03      	ldr	r3, [pc, #12]	; (71c4 <pvPortMalloc+0x20>)
    71b6:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
    71b8:	0020      	movs	r0, r4
    71ba:	bd10      	pop	{r4, pc}
    71bc:	00007d19 	.word	0x00007d19
    71c0:	0000c375 	.word	0x0000c375
    71c4:	00007e3d 	.word	0x00007e3d

000071c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    71c8:	b510      	push	{r4, lr}
    71ca:	1e04      	subs	r4, r0, #0
	if( pv )
    71cc:	d006      	beq.n	71dc <vPortFree+0x14>
	{
		vTaskSuspendAll();
    71ce:	4b04      	ldr	r3, [pc, #16]	; (71e0 <vPortFree+0x18>)
    71d0:	4798      	blx	r3
		{
			free( pv );
    71d2:	4b04      	ldr	r3, [pc, #16]	; (71e4 <vPortFree+0x1c>)
    71d4:	0020      	movs	r0, r4
    71d6:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
    71d8:	4b03      	ldr	r3, [pc, #12]	; (71e8 <vPortFree+0x20>)
    71da:	4798      	blx	r3
	}
}
    71dc:	bd10      	pop	{r4, pc}
    71de:	46c0      	nop			; (mov r8, r8)
    71e0:	00007d19 	.word	0x00007d19
    71e4:	0000c389 	.word	0x0000c389
    71e8:	00007e3d 	.word	0x00007e3d

000071ec <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    71ec:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    71ee:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    71f0:	3308      	adds	r3, #8
    71f2:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    71f4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    71f6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    71f8:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    71fa:	4252      	negs	r2, r2
    71fc:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    71fe:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    7200:	4770      	bx	lr

00007202 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    7202:	2300      	movs	r3, #0
    7204:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    7206:	4770      	bx	lr

00007208 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
    7208:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    720a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    720c:	689a      	ldr	r2, [r3, #8]
    720e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    7210:	689a      	ldr	r2, [r3, #8]
    7212:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
    7214:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    7216:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    7218:	6803      	ldr	r3, [r0, #0]
    721a:	3301      	adds	r3, #1
    721c:	6003      	str	r3, [r0, #0]
}
    721e:	4770      	bx	lr

00007220 <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    7220:	0003      	movs	r3, r0
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    7222:	680a      	ldr	r2, [r1, #0]
{
    7224:	b530      	push	{r4, r5, lr}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    7226:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
    7228:	1c54      	adds	r4, r2, #1
    722a:	d10b      	bne.n	7244 <vListInsert+0x24>
		pxIterator = pxList->xListEnd.pxPrevious;
    722c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    722e:	685a      	ldr	r2, [r3, #4]
    7230:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    7232:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
    7234:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
    7236:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    7238:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
    723a:	6803      	ldr	r3, [r0, #0]
    723c:	3301      	adds	r3, #1
    723e:	6003      	str	r3, [r0, #0]
}
    7240:	bd30      	pop	{r4, r5, pc}
    7242:	0023      	movs	r3, r4
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    7244:	685c      	ldr	r4, [r3, #4]
    7246:	6825      	ldr	r5, [r4, #0]
    7248:	42aa      	cmp	r2, r5
    724a:	d2fa      	bcs.n	7242 <vListInsert+0x22>
    724c:	e7ef      	b.n	722e <vListInsert+0xe>

0000724e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    724e:	6842      	ldr	r2, [r0, #4]
    7250:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    7252:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    7254:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    7256:	6882      	ldr	r2, [r0, #8]
    7258:	6841      	ldr	r1, [r0, #4]
    725a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    725c:	685a      	ldr	r2, [r3, #4]
    725e:	4290      	cmp	r0, r2
    7260:	d101      	bne.n	7266 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    7262:	6882      	ldr	r2, [r0, #8]
    7264:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    7266:	2200      	movs	r2, #0
    7268:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
    726a:	681a      	ldr	r2, [r3, #0]
    726c:	3a01      	subs	r2, #1
    726e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    7270:	6818      	ldr	r0, [r3, #0]
}
    7272:	4770      	bx	lr

00007274 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    7274:	b510      	push	{r4, lr}
    7276:	0004      	movs	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
    7278:	4b03      	ldr	r3, [pc, #12]	; (7288 <prvIsQueueEmpty+0x14>)
    727a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    727c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    727e:	4b03      	ldr	r3, [pc, #12]	; (728c <prvIsQueueEmpty+0x18>)
    7280:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    7282:	4260      	negs	r0, r4
    7284:	4160      	adcs	r0, r4

	return xReturn;
}
    7286:	bd10      	pop	{r4, pc}
    7288:	000070e1 	.word	0x000070e1
    728c:	000070f9 	.word	0x000070f9

00007290 <prvCopyDataToQueue>:
{
    7290:	b570      	push	{r4, r5, r6, lr}
    7292:	0016      	movs	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    7294:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
    7296:	0004      	movs	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    7298:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    729a:	2a00      	cmp	r2, #0
    729c:	d10a      	bne.n	72b4 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    729e:	6806      	ldr	r6, [r0, #0]
BaseType_t xReturn = pdFALSE;
    72a0:	0010      	movs	r0, r2
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    72a2:	2e00      	cmp	r6, #0
    72a4:	d103      	bne.n	72ae <prvCopyDataToQueue+0x1e>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    72a6:	6860      	ldr	r0, [r4, #4]
    72a8:	4b15      	ldr	r3, [pc, #84]	; (7300 <prvCopyDataToQueue+0x70>)
    72aa:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    72ac:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
    72ae:	3501      	adds	r5, #1
    72b0:	63a5      	str	r5, [r4, #56]	; 0x38
}
    72b2:	bd70      	pop	{r4, r5, r6, pc}
    72b4:	4b13      	ldr	r3, [pc, #76]	; (7304 <prvCopyDataToQueue+0x74>)
	else if( xPosition == queueSEND_TO_BACK )
    72b6:	2e00      	cmp	r6, #0
    72b8:	d10c      	bne.n	72d4 <prvCopyDataToQueue+0x44>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    72ba:	6880      	ldr	r0, [r0, #8]
    72bc:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    72be:	68a3      	ldr	r3, [r4, #8]
    72c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
BaseType_t xReturn = pdFALSE;
    72c2:	0030      	movs	r0, r6
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    72c4:	189b      	adds	r3, r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    72c6:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    72c8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    72ca:	4293      	cmp	r3, r2
    72cc:	d3ef      	bcc.n	72ae <prvCopyDataToQueue+0x1e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    72ce:	6823      	ldr	r3, [r4, #0]
    72d0:	60a3      	str	r3, [r4, #8]
    72d2:	e7ec      	b.n	72ae <prvCopyDataToQueue+0x1e>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    72d4:	68c0      	ldr	r0, [r0, #12]
    72d6:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    72d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    72da:	68e2      	ldr	r2, [r4, #12]
    72dc:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    72de:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    72e0:	18d2      	adds	r2, r2, r3
    72e2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    72e4:	428a      	cmp	r2, r1
    72e6:	d202      	bcs.n	72ee <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    72e8:	6862      	ldr	r2, [r4, #4]
    72ea:	18d3      	adds	r3, r2, r3
    72ec:	60e3      	str	r3, [r4, #12]
BaseType_t xReturn = pdFALSE;
    72ee:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
    72f0:	2e02      	cmp	r6, #2
    72f2:	d1dc      	bne.n	72ae <prvCopyDataToQueue+0x1e>
				--uxMessagesWaiting;
    72f4:	002b      	movs	r3, r5
    72f6:	1e5a      	subs	r2, r3, #1
    72f8:	4193      	sbcs	r3, r2
    72fa:	1aed      	subs	r5, r5, r3
    72fc:	e7d7      	b.n	72ae <prvCopyDataToQueue+0x1e>
    72fe:	46c0      	nop			; (mov r8, r8)
    7300:	00008269 	.word	0x00008269
    7304:	0000c3c1 	.word	0x0000c3c1

00007308 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    7308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    730a:	6c84      	ldr	r4, [r0, #72]	; 0x48
	{
    730c:	9001      	str	r0, [sp, #4]
    730e:	000a      	movs	r2, r1
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    7310:	2c00      	cmp	r4, #0
    7312:	d101      	bne.n	7318 <prvNotifyQueueSetContainer+0x10>
    7314:	b672      	cpsid	i
    7316:	e7fe      	b.n	7316 <prvNotifyQueueSetContainer+0xe>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    7318:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    731a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    731c:	4299      	cmp	r1, r3
    731e:	d301      	bcc.n	7324 <prvNotifyQueueSetContainer+0x1c>
    7320:	b672      	cpsid	i
    7322:	e7fe      	b.n	7322 <prvNotifyQueueSetContainer+0x1a>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    7324:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	BaseType_t xReturn = pdFALSE;
    7326:	2600      	movs	r6, #0
		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    7328:	428b      	cmp	r3, r1
    732a:	d914      	bls.n	7356 <prvNotifyQueueSetContainer+0x4e>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    732c:	0027      	movs	r7, r4

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    732e:	a901      	add	r1, sp, #4
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    7330:	3745      	adds	r7, #69	; 0x45
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    7332:	0020      	movs	r0, r4
    7334:	4b0b      	ldr	r3, [pc, #44]	; (7364 <prvNotifyQueueSetContainer+0x5c>)
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    7336:	783d      	ldrb	r5, [r7, #0]
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    7338:	4798      	blx	r3
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    733a:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    733c:	0006      	movs	r6, r0

			if( cTxLock == queueUNLOCKED )
    733e:	1c6b      	adds	r3, r5, #1
    7340:	d10b      	bne.n	735a <prvNotifyQueueSetContainer+0x52>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    7342:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7344:	2b00      	cmp	r3, #0
    7346:	d006      	beq.n	7356 <prvNotifyQueueSetContainer+0x4e>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    7348:	0020      	movs	r0, r4
    734a:	4b07      	ldr	r3, [pc, #28]	; (7368 <prvNotifyQueueSetContainer+0x60>)
    734c:	3024      	adds	r0, #36	; 0x24
    734e:	4798      	blx	r3
    7350:	2800      	cmp	r0, #0
    7352:	d000      	beq.n	7356 <prvNotifyQueueSetContainer+0x4e>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    7354:	2601      	movs	r6, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
    7356:	0030      	movs	r0, r6
    7358:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    735a:	3501      	adds	r5, #1
    735c:	b26d      	sxtb	r5, r5
    735e:	703d      	strb	r5, [r7, #0]
    7360:	e7f9      	b.n	7356 <prvNotifyQueueSetContainer+0x4e>
    7362:	46c0      	nop			; (mov r8, r8)
    7364:	00007291 	.word	0x00007291
    7368:	000080b5 	.word	0x000080b5

0000736c <prvCopyDataFromQueue>:
{
    736c:	0003      	movs	r3, r0
    736e:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    7370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
    7372:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    7374:	2a00      	cmp	r2, #0
    7376:	d00a      	beq.n	738e <prvCopyDataFromQueue+0x22>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    7378:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    737a:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    737c:	1889      	adds	r1, r1, r2
    737e:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    7380:	42a1      	cmp	r1, r4
    7382:	d301      	bcc.n	7388 <prvCopyDataFromQueue+0x1c>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    7384:	6819      	ldr	r1, [r3, #0]
    7386:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    7388:	68d9      	ldr	r1, [r3, #12]
    738a:	4b01      	ldr	r3, [pc, #4]	; (7390 <prvCopyDataFromQueue+0x24>)
    738c:	4798      	blx	r3
}
    738e:	bd10      	pop	{r4, pc}
    7390:	0000c3c1 	.word	0x0000c3c1

00007394 <prvUnlockQueue>:
{
    7394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7396:	0004      	movs	r4, r0
		int8_t cTxLock = pxQueue->cTxLock;
    7398:	0026      	movs	r6, r4
	taskENTER_CRITICAL();
    739a:	4f1c      	ldr	r7, [pc, #112]	; (740c <prvUnlockQueue+0x78>)
		int8_t cTxLock = pxQueue->cTxLock;
    739c:	3645      	adds	r6, #69	; 0x45
	taskENTER_CRITICAL();
    739e:	47b8      	blx	r7
		int8_t cTxLock = pxQueue->cTxLock;
    73a0:	7835      	ldrb	r5, [r6, #0]
    73a2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
    73a4:	2d00      	cmp	r5, #0
    73a6:	dc0e      	bgt.n	73c6 <prvUnlockQueue+0x32>
		pxQueue->cTxLock = queueUNLOCKED;
    73a8:	23ff      	movs	r3, #255	; 0xff
    73aa:	7033      	strb	r3, [r6, #0]
	taskEXIT_CRITICAL();
    73ac:	4e18      	ldr	r6, [pc, #96]	; (7410 <prvUnlockQueue+0x7c>)
    73ae:	47b0      	blx	r6
	taskENTER_CRITICAL();
    73b0:	47b8      	blx	r7
		int8_t cRxLock = pxQueue->cRxLock;
    73b2:	0027      	movs	r7, r4
    73b4:	3744      	adds	r7, #68	; 0x44
    73b6:	783d      	ldrb	r5, [r7, #0]
    73b8:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
    73ba:	2d00      	cmp	r5, #0
    73bc:	dc18      	bgt.n	73f0 <prvUnlockQueue+0x5c>
		pxQueue->cRxLock = queueUNLOCKED;
    73be:	23ff      	movs	r3, #255	; 0xff
    73c0:	703b      	strb	r3, [r7, #0]
	taskEXIT_CRITICAL();
    73c2:	47b0      	blx	r6
}
    73c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxQueue->pxQueueSetContainer != NULL )
    73c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    73c8:	2b00      	cmp	r3, #0
    73ca:	d009      	beq.n	73e0 <prvUnlockQueue+0x4c>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    73cc:	2100      	movs	r1, #0
    73ce:	0020      	movs	r0, r4
    73d0:	4b10      	ldr	r3, [pc, #64]	; (7414 <prvUnlockQueue+0x80>)
    73d2:	4798      	blx	r3
    73d4:	2800      	cmp	r0, #0
    73d6:	d001      	beq.n	73dc <prvUnlockQueue+0x48>
						vTaskMissedYield();
    73d8:	4b0f      	ldr	r3, [pc, #60]	; (7418 <prvUnlockQueue+0x84>)
    73da:	4798      	blx	r3
    73dc:	3d01      	subs	r5, #1
    73de:	e7e0      	b.n	73a2 <prvUnlockQueue+0xe>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    73e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    73e2:	2b00      	cmp	r3, #0
    73e4:	d0e0      	beq.n	73a8 <prvUnlockQueue+0x14>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    73e6:	0020      	movs	r0, r4
    73e8:	4b0c      	ldr	r3, [pc, #48]	; (741c <prvUnlockQueue+0x88>)
    73ea:	3024      	adds	r0, #36	; 0x24
    73ec:	4798      	blx	r3
    73ee:	e7f1      	b.n	73d4 <prvUnlockQueue+0x40>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    73f0:	6923      	ldr	r3, [r4, #16]
    73f2:	2b00      	cmp	r3, #0
    73f4:	d0e3      	beq.n	73be <prvUnlockQueue+0x2a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    73f6:	0020      	movs	r0, r4
    73f8:	4b08      	ldr	r3, [pc, #32]	; (741c <prvUnlockQueue+0x88>)
    73fa:	3010      	adds	r0, #16
    73fc:	4798      	blx	r3
    73fe:	2800      	cmp	r0, #0
    7400:	d001      	beq.n	7406 <prvUnlockQueue+0x72>
					vTaskMissedYield();
    7402:	4b05      	ldr	r3, [pc, #20]	; (7418 <prvUnlockQueue+0x84>)
    7404:	4798      	blx	r3
    7406:	3d01      	subs	r5, #1
    7408:	e7d6      	b.n	73b8 <prvUnlockQueue+0x24>
    740a:	46c0      	nop			; (mov r8, r8)
    740c:	000070e1 	.word	0x000070e1
    7410:	000070f9 	.word	0x000070f9
    7414:	00007309 	.word	0x00007309
    7418:	000081b9 	.word	0x000081b9
    741c:	000080b5 	.word	0x000080b5

00007420 <xQueueGenericReset>:
{
    7420:	b570      	push	{r4, r5, r6, lr}
    7422:	0004      	movs	r4, r0
    7424:	000d      	movs	r5, r1
	configASSERT( pxQueue );
    7426:	2800      	cmp	r0, #0
    7428:	d101      	bne.n	742e <xQueueGenericReset+0xe>
    742a:	b672      	cpsid	i
    742c:	e7fe      	b.n	742c <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
    742e:	4b16      	ldr	r3, [pc, #88]	; (7488 <xQueueGenericReset+0x68>)
    7430:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    7432:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7434:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    7436:	6822      	ldr	r2, [r4, #0]
    7438:	434b      	muls	r3, r1
    743a:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    743c:	1a5b      	subs	r3, r3, r1
    743e:	18d3      	adds	r3, r2, r3
    7440:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    7442:	0023      	movs	r3, r4
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    7444:	6060      	str	r0, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
    7446:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    7448:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
    744a:	22ff      	movs	r2, #255	; 0xff
    744c:	3344      	adds	r3, #68	; 0x44
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    744e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
    7450:	701a      	strb	r2, [r3, #0]
		pxQueue->cTxLock = queueUNLOCKED;
    7452:	705a      	strb	r2, [r3, #1]
		if( xNewQueue == pdFALSE )
    7454:	4285      	cmp	r5, r0
    7456:	d10e      	bne.n	7476 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    7458:	6923      	ldr	r3, [r4, #16]
    745a:	4283      	cmp	r3, r0
    745c:	d007      	beq.n	746e <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    745e:	0020      	movs	r0, r4
    7460:	4b0a      	ldr	r3, [pc, #40]	; (748c <xQueueGenericReset+0x6c>)
    7462:	3010      	adds	r0, #16
    7464:	4798      	blx	r3
    7466:	2800      	cmp	r0, #0
    7468:	d001      	beq.n	746e <xQueueGenericReset+0x4e>
					queueYIELD_IF_USING_PREEMPTION();
    746a:	4b09      	ldr	r3, [pc, #36]	; (7490 <xQueueGenericReset+0x70>)
    746c:	4798      	blx	r3
	taskEXIT_CRITICAL();
    746e:	4b09      	ldr	r3, [pc, #36]	; (7494 <xQueueGenericReset+0x74>)
    7470:	4798      	blx	r3
}
    7472:	2001      	movs	r0, #1
    7474:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    7476:	0020      	movs	r0, r4
    7478:	4d07      	ldr	r5, [pc, #28]	; (7498 <xQueueGenericReset+0x78>)
    747a:	3010      	adds	r0, #16
    747c:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    747e:	0020      	movs	r0, r4
    7480:	3024      	adds	r0, #36	; 0x24
    7482:	47a8      	blx	r5
    7484:	e7f3      	b.n	746e <xQueueGenericReset+0x4e>
    7486:	46c0      	nop			; (mov r8, r8)
    7488:	000070e1 	.word	0x000070e1
    748c:	000080b5 	.word	0x000080b5
    7490:	000070c9 	.word	0x000070c9
    7494:	000070f9 	.word	0x000070f9
    7498:	000071ed 	.word	0x000071ed

0000749c <xQueueGenericCreate>:
	{
    749c:	b570      	push	{r4, r5, r6, lr}
    749e:	0006      	movs	r6, r0
    74a0:	000d      	movs	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    74a2:	2800      	cmp	r0, #0
    74a4:	d101      	bne.n	74aa <xQueueGenericCreate+0xe>
    74a6:	b672      	cpsid	i
    74a8:	e7fe      	b.n	74a8 <xQueueGenericCreate+0xc>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    74aa:	0008      	movs	r0, r1
    74ac:	4370      	muls	r0, r6
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    74ae:	4b0b      	ldr	r3, [pc, #44]	; (74dc <xQueueGenericCreate+0x40>)
    74b0:	304c      	adds	r0, #76	; 0x4c
    74b2:	4798      	blx	r3
    74b4:	1e04      	subs	r4, r0, #0
		if( pxNewQueue != NULL )
    74b6:	d00a      	beq.n	74ce <xQueueGenericCreate+0x32>
	if( uxItemSize == ( UBaseType_t ) 0 )
    74b8:	2d00      	cmp	r5, #0
    74ba:	d10a      	bne.n	74d2 <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    74bc:	6020      	str	r0, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    74be:	4b08      	ldr	r3, [pc, #32]	; (74e0 <xQueueGenericCreate+0x44>)
	pxNewQueue->uxLength = uxQueueLength;
    74c0:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    74c2:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    74c4:	2101      	movs	r1, #1
    74c6:	0020      	movs	r0, r4
    74c8:	4798      	blx	r3
		pxNewQueue->pxQueueSetContainer = NULL;
    74ca:	2300      	movs	r3, #0
    74cc:	64a3      	str	r3, [r4, #72]	; 0x48
	}
    74ce:	0020      	movs	r0, r4
    74d0:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    74d2:	0003      	movs	r3, r0
    74d4:	334c      	adds	r3, #76	; 0x4c
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    74d6:	6003      	str	r3, [r0, #0]
    74d8:	e7f1      	b.n	74be <xQueueGenericCreate+0x22>
    74da:	46c0      	nop			; (mov r8, r8)
    74dc:	000071a5 	.word	0x000071a5
    74e0:	00007421 	.word	0x00007421

000074e4 <xQueueGenericSend>:
{
    74e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    74e6:	b089      	sub	sp, #36	; 0x24
    74e8:	1e04      	subs	r4, r0, #0
    74ea:	9102      	str	r1, [sp, #8]
    74ec:	9205      	str	r2, [sp, #20]
    74ee:	9301      	str	r3, [sp, #4]
	configASSERT( pxQueue );
    74f0:	d101      	bne.n	74f6 <xQueueGenericSend+0x12>
    74f2:	b672      	cpsid	i
    74f4:	e7fe      	b.n	74f4 <xQueueGenericSend+0x10>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    74f6:	9b02      	ldr	r3, [sp, #8]
    74f8:	2b00      	cmp	r3, #0
    74fa:	d000      	beq.n	74fe <xQueueGenericSend+0x1a>
    74fc:	e074      	b.n	75e8 <xQueueGenericSend+0x104>
    74fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
    7500:	2b00      	cmp	r3, #0
    7502:	d100      	bne.n	7506 <xQueueGenericSend+0x22>
    7504:	e070      	b.n	75e8 <xQueueGenericSend+0x104>
    7506:	b672      	cpsid	i
    7508:	e7fe      	b.n	7508 <xQueueGenericSend+0x24>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    750a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    750c:	2b00      	cmp	r3, #0
    750e:	d05b      	beq.n	75c8 <xQueueGenericSend+0xe4>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    7510:	0020      	movs	r0, r4
    7512:	4b3e      	ldr	r3, [pc, #248]	; (760c <xQueueGenericSend+0x128>)
    7514:	3024      	adds	r0, #36	; 0x24
    7516:	4798      	blx	r3
    7518:	e056      	b.n	75c8 <xQueueGenericSend+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
    751a:	9d05      	ldr	r5, [sp, #20]
    751c:	2d00      	cmp	r5, #0
    751e:	d102      	bne.n	7526 <xQueueGenericSend+0x42>
					taskEXIT_CRITICAL();
    7520:	47b8      	blx	r7
			return errQUEUE_FULL;
    7522:	2000      	movs	r0, #0
    7524:	e056      	b.n	75d4 <xQueueGenericSend+0xf0>
				else if( xEntryTimeSet == pdFALSE )
    7526:	2e00      	cmp	r6, #0
    7528:	d102      	bne.n	7530 <xQueueGenericSend+0x4c>
					vTaskInternalSetTimeOutState( &xTimeOut );
    752a:	a806      	add	r0, sp, #24
    752c:	4b38      	ldr	r3, [pc, #224]	; (7610 <xQueueGenericSend+0x12c>)
    752e:	4798      	blx	r3
		taskEXIT_CRITICAL();
    7530:	47b8      	blx	r7
		vTaskSuspendAll();
    7532:	4b38      	ldr	r3, [pc, #224]	; (7614 <xQueueGenericSend+0x130>)
    7534:	4798      	blx	r3
		prvLockQueue( pxQueue );
    7536:	4b38      	ldr	r3, [pc, #224]	; (7618 <xQueueGenericSend+0x134>)
    7538:	4798      	blx	r3
    753a:	0022      	movs	r2, r4
    753c:	3244      	adds	r2, #68	; 0x44
    753e:	7813      	ldrb	r3, [r2, #0]
    7540:	b25b      	sxtb	r3, r3
    7542:	3301      	adds	r3, #1
    7544:	d101      	bne.n	754a <xQueueGenericSend+0x66>
    7546:	2300      	movs	r3, #0
    7548:	7013      	strb	r3, [r2, #0]
    754a:	0022      	movs	r2, r4
    754c:	3245      	adds	r2, #69	; 0x45
    754e:	7813      	ldrb	r3, [r2, #0]
    7550:	b25b      	sxtb	r3, r3
    7552:	3301      	adds	r3, #1
    7554:	d101      	bne.n	755a <xQueueGenericSend+0x76>
    7556:	2300      	movs	r3, #0
    7558:	7013      	strb	r3, [r2, #0]
    755a:	47b8      	blx	r7
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    755c:	a905      	add	r1, sp, #20
    755e:	a806      	add	r0, sp, #24
    7560:	4b2e      	ldr	r3, [pc, #184]	; (761c <xQueueGenericSend+0x138>)
    7562:	4798      	blx	r3
    7564:	4e2e      	ldr	r6, [pc, #184]	; (7620 <xQueueGenericSend+0x13c>)
    7566:	4d2f      	ldr	r5, [pc, #188]	; (7624 <xQueueGenericSend+0x140>)
    7568:	2800      	cmp	r0, #0
    756a:	d139      	bne.n	75e0 <xQueueGenericSend+0xfc>
	taskENTER_CRITICAL();
    756c:	4b2a      	ldr	r3, [pc, #168]	; (7618 <xQueueGenericSend+0x134>)
    756e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    7570:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7572:	9303      	str	r3, [sp, #12]
    7574:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    7576:	9304      	str	r3, [sp, #16]
	taskEXIT_CRITICAL();
    7578:	47b8      	blx	r7
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    757a:	9b03      	ldr	r3, [sp, #12]
    757c:	9a04      	ldr	r2, [sp, #16]
    757e:	4293      	cmp	r3, r2
    7580:	d12a      	bne.n	75d8 <xQueueGenericSend+0xf4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    7582:	0020      	movs	r0, r4
    7584:	9905      	ldr	r1, [sp, #20]
    7586:	3010      	adds	r0, #16
    7588:	4b27      	ldr	r3, [pc, #156]	; (7628 <xQueueGenericSend+0x144>)
    758a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    758c:	0020      	movs	r0, r4
    758e:	47b0      	blx	r6
				if( xTaskResumeAll() == pdFALSE )
    7590:	47a8      	blx	r5
    7592:	2800      	cmp	r0, #0
    7594:	d101      	bne.n	759a <xQueueGenericSend+0xb6>
					portYIELD_WITHIN_API();
    7596:	4b25      	ldr	r3, [pc, #148]	; (762c <xQueueGenericSend+0x148>)
    7598:	4798      	blx	r3
    759a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    759c:	4b1e      	ldr	r3, [pc, #120]	; (7618 <xQueueGenericSend+0x134>)
    759e:	4798      	blx	r3
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    75a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    75a2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    75a4:	4f22      	ldr	r7, [pc, #136]	; (7630 <xQueueGenericSend+0x14c>)
    75a6:	4293      	cmp	r3, r2
    75a8:	d302      	bcc.n	75b0 <xQueueGenericSend+0xcc>
    75aa:	9b01      	ldr	r3, [sp, #4]
    75ac:	2b02      	cmp	r3, #2
    75ae:	d1b4      	bne.n	751a <xQueueGenericSend+0x36>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    75b0:	4b20      	ldr	r3, [pc, #128]	; (7634 <xQueueGenericSend+0x150>)
    75b2:	9a01      	ldr	r2, [sp, #4]
    75b4:	9902      	ldr	r1, [sp, #8]
    75b6:	0020      	movs	r0, r4
    75b8:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
    75ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    75bc:	2b00      	cmp	r3, #0
    75be:	d0a4      	beq.n	750a <xQueueGenericSend+0x26>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    75c0:	9901      	ldr	r1, [sp, #4]
    75c2:	0020      	movs	r0, r4
    75c4:	4b1c      	ldr	r3, [pc, #112]	; (7638 <xQueueGenericSend+0x154>)
    75c6:	4798      	blx	r3
    75c8:	2800      	cmp	r0, #0
    75ca:	d001      	beq.n	75d0 <xQueueGenericSend+0xec>
							queueYIELD_IF_USING_PREEMPTION();
    75cc:	4b17      	ldr	r3, [pc, #92]	; (762c <xQueueGenericSend+0x148>)
    75ce:	4798      	blx	r3
				taskEXIT_CRITICAL();
    75d0:	47b8      	blx	r7
				return pdPASS;
    75d2:	2001      	movs	r0, #1
}
    75d4:	b009      	add	sp, #36	; 0x24
    75d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
    75d8:	0020      	movs	r0, r4
    75da:	47b0      	blx	r6
				( void ) xTaskResumeAll();
    75dc:	47a8      	blx	r5
    75de:	e7dc      	b.n	759a <xQueueGenericSend+0xb6>
			prvUnlockQueue( pxQueue );
    75e0:	0020      	movs	r0, r4
    75e2:	47b0      	blx	r6
			( void ) xTaskResumeAll();
    75e4:	47a8      	blx	r5
    75e6:	e79c      	b.n	7522 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    75e8:	9b01      	ldr	r3, [sp, #4]
    75ea:	2b02      	cmp	r3, #2
    75ec:	d102      	bne.n	75f4 <xQueueGenericSend+0x110>
    75ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    75f0:	2b01      	cmp	r3, #1
    75f2:	d109      	bne.n	7608 <xQueueGenericSend+0x124>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    75f4:	4b11      	ldr	r3, [pc, #68]	; (763c <xQueueGenericSend+0x158>)
    75f6:	4798      	blx	r3
    75f8:	2600      	movs	r6, #0
    75fa:	2800      	cmp	r0, #0
    75fc:	d1ce      	bne.n	759c <xQueueGenericSend+0xb8>
    75fe:	9e05      	ldr	r6, [sp, #20]
    7600:	2e00      	cmp	r6, #0
    7602:	d0cb      	beq.n	759c <xQueueGenericSend+0xb8>
    7604:	b672      	cpsid	i
    7606:	e7fe      	b.n	7606 <xQueueGenericSend+0x122>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    7608:	b672      	cpsid	i
    760a:	e7fe      	b.n	760a <xQueueGenericSend+0x126>
    760c:	000080b5 	.word	0x000080b5
    7610:	00008131 	.word	0x00008131
    7614:	00007d19 	.word	0x00007d19
    7618:	000070e1 	.word	0x000070e1
    761c:	00008149 	.word	0x00008149
    7620:	00007395 	.word	0x00007395
    7624:	00007e3d 	.word	0x00007e3d
    7628:	00008051 	.word	0x00008051
    762c:	000070c9 	.word	0x000070c9
    7630:	000070f9 	.word	0x000070f9
    7634:	00007291 	.word	0x00007291
    7638:	00007309 	.word	0x00007309
    763c:	000081c5 	.word	0x000081c5

00007640 <xQueueGenericSendFromISR>:
{
    7640:	b5f0      	push	{r4, r5, r6, r7, lr}
    7642:	b085      	sub	sp, #20
    7644:	0004      	movs	r4, r0
    7646:	9101      	str	r1, [sp, #4]
    7648:	0017      	movs	r7, r2
    764a:	001e      	movs	r6, r3
	configASSERT( pxQueue );
    764c:	2800      	cmp	r0, #0
    764e:	d101      	bne.n	7654 <xQueueGenericSendFromISR+0x14>
    7650:	b672      	cpsid	i
    7652:	e7fe      	b.n	7652 <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    7654:	9b01      	ldr	r3, [sp, #4]
    7656:	2b00      	cmp	r3, #0
    7658:	d11b      	bne.n	7692 <xQueueGenericSendFromISR+0x52>
    765a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    765c:	2b00      	cmp	r3, #0
    765e:	d018      	beq.n	7692 <xQueueGenericSendFromISR+0x52>
    7660:	b672      	cpsid	i
    7662:	e7fe      	b.n	7662 <xQueueGenericSendFromISR+0x22>
							if( pxHigherPriorityTaskWoken != NULL )
    7664:	2f00      	cmp	r7, #0
    7666:	d038      	beq.n	76da <xQueueGenericSendFromISR+0x9a>
								*pxHigherPriorityTaskWoken = pdTRUE;
    7668:	2501      	movs	r5, #1
    766a:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    766c:	9803      	ldr	r0, [sp, #12]
    766e:	4b1d      	ldr	r3, [pc, #116]	; (76e4 <xQueueGenericSendFromISR+0xa4>)
    7670:	4798      	blx	r3
}
    7672:	0028      	movs	r0, r5
    7674:	b005      	add	sp, #20
    7676:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    7678:	6a63      	ldr	r3, [r4, #36]	; 0x24
    767a:	2b00      	cmp	r3, #0
    767c:	d02d      	beq.n	76da <xQueueGenericSendFromISR+0x9a>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    767e:	0020      	movs	r0, r4
    7680:	4b19      	ldr	r3, [pc, #100]	; (76e8 <xQueueGenericSendFromISR+0xa8>)
    7682:	3024      	adds	r0, #36	; 0x24
    7684:	4798      	blx	r3
    7686:	e026      	b.n	76d6 <xQueueGenericSendFromISR+0x96>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    7688:	3501      	adds	r5, #1
    768a:	9b02      	ldr	r3, [sp, #8]
    768c:	b26d      	sxtb	r5, r5
    768e:	701d      	strb	r5, [r3, #0]
    7690:	e023      	b.n	76da <xQueueGenericSendFromISR+0x9a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    7692:	2e02      	cmp	r6, #2
    7694:	d102      	bne.n	769c <xQueueGenericSendFromISR+0x5c>
    7696:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    7698:	2b01      	cmp	r3, #1
    769a:	d120      	bne.n	76de <xQueueGenericSendFromISR+0x9e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    769c:	4b13      	ldr	r3, [pc, #76]	; (76ec <xQueueGenericSendFromISR+0xac>)
    769e:	4798      	blx	r3
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    76a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    76a2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    76a4:	9003      	str	r0, [sp, #12]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    76a6:	4293      	cmp	r3, r2
    76a8:	d302      	bcc.n	76b0 <xQueueGenericSendFromISR+0x70>
			xReturn = errQUEUE_FULL;
    76aa:	2500      	movs	r5, #0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    76ac:	2e02      	cmp	r6, #2
    76ae:	d1dd      	bne.n	766c <xQueueGenericSendFromISR+0x2c>
			const int8_t cTxLock = pxQueue->cTxLock;
    76b0:	0023      	movs	r3, r4
    76b2:	3345      	adds	r3, #69	; 0x45
    76b4:	9302      	str	r3, [sp, #8]
    76b6:	781d      	ldrb	r5, [r3, #0]
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    76b8:	0032      	movs	r2, r6
			const int8_t cTxLock = pxQueue->cTxLock;
    76ba:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    76bc:	4b0c      	ldr	r3, [pc, #48]	; (76f0 <xQueueGenericSendFromISR+0xb0>)
    76be:	9901      	ldr	r1, [sp, #4]
    76c0:	0020      	movs	r0, r4
    76c2:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
    76c4:	1c6b      	adds	r3, r5, #1
    76c6:	d1df      	bne.n	7688 <xQueueGenericSendFromISR+0x48>
					if( pxQueue->pxQueueSetContainer != NULL )
    76c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    76ca:	2b00      	cmp	r3, #0
    76cc:	d0d4      	beq.n	7678 <xQueueGenericSendFromISR+0x38>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    76ce:	0031      	movs	r1, r6
    76d0:	0020      	movs	r0, r4
    76d2:	4b08      	ldr	r3, [pc, #32]	; (76f4 <xQueueGenericSendFromISR+0xb4>)
    76d4:	4798      	blx	r3
    76d6:	2800      	cmp	r0, #0
    76d8:	d1c4      	bne.n	7664 <xQueueGenericSendFromISR+0x24>
			xReturn = pdPASS;
    76da:	2501      	movs	r5, #1
    76dc:	e7c6      	b.n	766c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    76de:	b672      	cpsid	i
    76e0:	e7fe      	b.n	76e0 <xQueueGenericSendFromISR+0xa0>
    76e2:	46c0      	nop			; (mov r8, r8)
    76e4:	0000711d 	.word	0x0000711d
    76e8:	000080b5 	.word	0x000080b5
    76ec:	00007115 	.word	0x00007115
    76f0:	00007291 	.word	0x00007291
    76f4:	00007309 	.word	0x00007309

000076f8 <xQueueReceive>:
{
    76f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    76fa:	b085      	sub	sp, #20
    76fc:	1e04      	subs	r4, r0, #0
    76fe:	9100      	str	r1, [sp, #0]
    7700:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
    7702:	d101      	bne.n	7708 <xQueueReceive+0x10>
    7704:	b672      	cpsid	i
    7706:	e7fe      	b.n	7706 <xQueueReceive+0xe>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
    7708:	9b00      	ldr	r3, [sp, #0]
    770a:	2b00      	cmp	r3, #0
    770c:	d166      	bne.n	77dc <xQueueReceive+0xe4>
    770e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    7710:	2b00      	cmp	r3, #0
    7712:	d063      	beq.n	77dc <xQueueReceive+0xe4>
    7714:	b672      	cpsid	i
    7716:	e7fe      	b.n	7716 <xQueueReceive+0x1e>
				if( xTicksToWait == ( TickType_t ) 0 )
    7718:	9d01      	ldr	r5, [sp, #4]
    771a:	2d00      	cmp	r5, #0
    771c:	d102      	bne.n	7724 <xQueueReceive+0x2c>
					taskEXIT_CRITICAL();
    771e:	47b8      	blx	r7
				return errQUEUE_EMPTY;
    7720:	2000      	movs	r0, #0
    7722:	e04d      	b.n	77c0 <xQueueReceive+0xc8>
				else if( xEntryTimeSet == pdFALSE )
    7724:	2e00      	cmp	r6, #0
    7726:	d102      	bne.n	772e <xQueueReceive+0x36>
					vTaskInternalSetTimeOutState( &xTimeOut );
    7728:	a802      	add	r0, sp, #8
    772a:	4b31      	ldr	r3, [pc, #196]	; (77f0 <xQueueReceive+0xf8>)
    772c:	4798      	blx	r3
		taskEXIT_CRITICAL();
    772e:	47b8      	blx	r7
		vTaskSuspendAll();
    7730:	4b30      	ldr	r3, [pc, #192]	; (77f4 <xQueueReceive+0xfc>)
    7732:	4798      	blx	r3
		prvLockQueue( pxQueue );
    7734:	4b30      	ldr	r3, [pc, #192]	; (77f8 <xQueueReceive+0x100>)
    7736:	4798      	blx	r3
    7738:	0022      	movs	r2, r4
    773a:	3244      	adds	r2, #68	; 0x44
    773c:	7813      	ldrb	r3, [r2, #0]
    773e:	b25b      	sxtb	r3, r3
    7740:	3301      	adds	r3, #1
    7742:	d101      	bne.n	7748 <xQueueReceive+0x50>
    7744:	2300      	movs	r3, #0
    7746:	7013      	strb	r3, [r2, #0]
    7748:	0022      	movs	r2, r4
    774a:	3245      	adds	r2, #69	; 0x45
    774c:	7813      	ldrb	r3, [r2, #0]
    774e:	b25b      	sxtb	r3, r3
    7750:	3301      	adds	r3, #1
    7752:	d101      	bne.n	7758 <xQueueReceive+0x60>
    7754:	2300      	movs	r3, #0
    7756:	7013      	strb	r3, [r2, #0]
    7758:	47b8      	blx	r7
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    775a:	a901      	add	r1, sp, #4
    775c:	a802      	add	r0, sp, #8
    775e:	4b27      	ldr	r3, [pc, #156]	; (77fc <xQueueReceive+0x104>)
    7760:	4798      	blx	r3
    7762:	4f27      	ldr	r7, [pc, #156]	; (7800 <xQueueReceive+0x108>)
    7764:	4d27      	ldr	r5, [pc, #156]	; (7804 <xQueueReceive+0x10c>)
    7766:	4e28      	ldr	r6, [pc, #160]	; (7808 <xQueueReceive+0x110>)
    7768:	2800      	cmp	r0, #0
    776a:	d12f      	bne.n	77cc <xQueueReceive+0xd4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    776c:	0020      	movs	r0, r4
    776e:	47b8      	blx	r7
    7770:	2800      	cmp	r0, #0
    7772:	d027      	beq.n	77c4 <xQueueReceive+0xcc>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    7774:	0020      	movs	r0, r4
    7776:	9901      	ldr	r1, [sp, #4]
    7778:	3024      	adds	r0, #36	; 0x24
    777a:	4b24      	ldr	r3, [pc, #144]	; (780c <xQueueReceive+0x114>)
    777c:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    777e:	0020      	movs	r0, r4
    7780:	47a8      	blx	r5
				if( xTaskResumeAll() == pdFALSE )
    7782:	47b0      	blx	r6
    7784:	2800      	cmp	r0, #0
    7786:	d101      	bne.n	778c <xQueueReceive+0x94>
					portYIELD_WITHIN_API();
    7788:	4b21      	ldr	r3, [pc, #132]	; (7810 <xQueueReceive+0x118>)
    778a:	4798      	blx	r3
    778c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
    778e:	4b1a      	ldr	r3, [pc, #104]	; (77f8 <xQueueReceive+0x100>)
    7790:	4798      	blx	r3
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    7792:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    7794:	4f1f      	ldr	r7, [pc, #124]	; (7814 <xQueueReceive+0x11c>)
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    7796:	2d00      	cmp	r5, #0
    7798:	d0be      	beq.n	7718 <xQueueReceive+0x20>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    779a:	4b1f      	ldr	r3, [pc, #124]	; (7818 <xQueueReceive+0x120>)
    779c:	9900      	ldr	r1, [sp, #0]
    779e:	0020      	movs	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    77a0:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
    77a2:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
    77a4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    77a6:	6923      	ldr	r3, [r4, #16]
    77a8:	2b00      	cmp	r3, #0
    77aa:	d007      	beq.n	77bc <xQueueReceive+0xc4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    77ac:	0020      	movs	r0, r4
    77ae:	4b1b      	ldr	r3, [pc, #108]	; (781c <xQueueReceive+0x124>)
    77b0:	3010      	adds	r0, #16
    77b2:	4798      	blx	r3
    77b4:	2800      	cmp	r0, #0
    77b6:	d001      	beq.n	77bc <xQueueReceive+0xc4>
						queueYIELD_IF_USING_PREEMPTION();
    77b8:	4b15      	ldr	r3, [pc, #84]	; (7810 <xQueueReceive+0x118>)
    77ba:	4798      	blx	r3
				taskEXIT_CRITICAL();
    77bc:	47b8      	blx	r7
				return pdPASS;
    77be:	2001      	movs	r0, #1
}
    77c0:	b005      	add	sp, #20
    77c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
    77c4:	0020      	movs	r0, r4
    77c6:	47a8      	blx	r5
				( void ) xTaskResumeAll();
    77c8:	47b0      	blx	r6
    77ca:	e7df      	b.n	778c <xQueueReceive+0x94>
			prvUnlockQueue( pxQueue );
    77cc:	0020      	movs	r0, r4
    77ce:	47a8      	blx	r5
			( void ) xTaskResumeAll();
    77d0:	47b0      	blx	r6
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    77d2:	0020      	movs	r0, r4
    77d4:	47b8      	blx	r7
    77d6:	2800      	cmp	r0, #0
    77d8:	d0d8      	beq.n	778c <xQueueReceive+0x94>
    77da:	e7a1      	b.n	7720 <xQueueReceive+0x28>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    77dc:	4b10      	ldr	r3, [pc, #64]	; (7820 <xQueueReceive+0x128>)
    77de:	4798      	blx	r3
    77e0:	2600      	movs	r6, #0
    77e2:	2800      	cmp	r0, #0
    77e4:	d1d3      	bne.n	778e <xQueueReceive+0x96>
    77e6:	9e01      	ldr	r6, [sp, #4]
    77e8:	2e00      	cmp	r6, #0
    77ea:	d0d0      	beq.n	778e <xQueueReceive+0x96>
    77ec:	b672      	cpsid	i
    77ee:	e7fe      	b.n	77ee <xQueueReceive+0xf6>
    77f0:	00008131 	.word	0x00008131
    77f4:	00007d19 	.word	0x00007d19
    77f8:	000070e1 	.word	0x000070e1
    77fc:	00008149 	.word	0x00008149
    7800:	00007275 	.word	0x00007275
    7804:	00007395 	.word	0x00007395
    7808:	00007e3d 	.word	0x00007e3d
    780c:	00008051 	.word	0x00008051
    7810:	000070c9 	.word	0x000070c9
    7814:	000070f9 	.word	0x000070f9
    7818:	0000736d 	.word	0x0000736d
    781c:	000080b5 	.word	0x000080b5
    7820:	000081c5 	.word	0x000081c5

00007824 <xQueueSemaphoreTake>:
{
    7824:	b5f0      	push	{r4, r5, r6, r7, lr}
    7826:	b085      	sub	sp, #20
    7828:	1e04      	subs	r4, r0, #0
    782a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
    782c:	d101      	bne.n	7832 <xQueueSemaphoreTake+0xe>
    782e:	b672      	cpsid	i
    7830:	e7fe      	b.n	7830 <xQueueSemaphoreTake+0xc>
	configASSERT( pxQueue->uxItemSize == 0 );
    7832:	6c05      	ldr	r5, [r0, #64]	; 0x40
    7834:	2d00      	cmp	r5, #0
    7836:	d001      	beq.n	783c <xQueueSemaphoreTake+0x18>
    7838:	b672      	cpsid	i
    783a:	e7fe      	b.n	783a <xQueueSemaphoreTake+0x16>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    783c:	4b49      	ldr	r3, [pc, #292]	; (7964 <xQueueSemaphoreTake+0x140>)
    783e:	4798      	blx	r3
    7840:	2800      	cmp	r0, #0
    7842:	d103      	bne.n	784c <xQueueSemaphoreTake+0x28>
    7844:	9d01      	ldr	r5, [sp, #4]
    7846:	2d00      	cmp	r5, #0
    7848:	d000      	beq.n	784c <xQueueSemaphoreTake+0x28>
    784a:	e088      	b.n	795e <xQueueSemaphoreTake+0x13a>
    784c:	002f      	movs	r7, r5
		taskENTER_CRITICAL();
    784e:	4e46      	ldr	r6, [pc, #280]	; (7968 <xQueueSemaphoreTake+0x144>)
    7850:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    7852:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    7854:	2b00      	cmp	r3, #0
    7856:	d018      	beq.n	788a <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    7858:	3b01      	subs	r3, #1
    785a:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    785c:	6823      	ldr	r3, [r4, #0]
    785e:	2b00      	cmp	r3, #0
    7860:	d102      	bne.n	7868 <xQueueSemaphoreTake+0x44>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    7862:	4b42      	ldr	r3, [pc, #264]	; (796c <xQueueSemaphoreTake+0x148>)
    7864:	4798      	blx	r3
    7866:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    7868:	6923      	ldr	r3, [r4, #16]
    786a:	2b00      	cmp	r3, #0
    786c:	d007      	beq.n	787e <xQueueSemaphoreTake+0x5a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    786e:	0020      	movs	r0, r4
    7870:	4b3f      	ldr	r3, [pc, #252]	; (7970 <xQueueSemaphoreTake+0x14c>)
    7872:	3010      	adds	r0, #16
    7874:	4798      	blx	r3
    7876:	2800      	cmp	r0, #0
    7878:	d001      	beq.n	787e <xQueueSemaphoreTake+0x5a>
						queueYIELD_IF_USING_PREEMPTION();
    787a:	4b3e      	ldr	r3, [pc, #248]	; (7974 <xQueueSemaphoreTake+0x150>)
    787c:	4798      	blx	r3
				taskEXIT_CRITICAL();
    787e:	4b3e      	ldr	r3, [pc, #248]	; (7978 <xQueueSemaphoreTake+0x154>)
    7880:	4798      	blx	r3
				return pdPASS;
    7882:	2501      	movs	r5, #1
}
    7884:	0028      	movs	r0, r5
    7886:	b005      	add	sp, #20
    7888:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
    788a:	9b01      	ldr	r3, [sp, #4]
    788c:	2b00      	cmp	r3, #0
    788e:	d106      	bne.n	789e <xQueueSemaphoreTake+0x7a>
						configASSERT( xInheritanceOccurred == pdFALSE );
    7890:	2d00      	cmp	r5, #0
    7892:	d001      	beq.n	7898 <xQueueSemaphoreTake+0x74>
    7894:	b672      	cpsid	i
    7896:	e7fe      	b.n	7896 <xQueueSemaphoreTake+0x72>
					taskEXIT_CRITICAL();
    7898:	4b37      	ldr	r3, [pc, #220]	; (7978 <xQueueSemaphoreTake+0x154>)
    789a:	4798      	blx	r3
					return errQUEUE_EMPTY;
    789c:	e7f2      	b.n	7884 <xQueueSemaphoreTake+0x60>
				else if( xEntryTimeSet == pdFALSE )
    789e:	2f00      	cmp	r7, #0
    78a0:	d102      	bne.n	78a8 <xQueueSemaphoreTake+0x84>
					vTaskInternalSetTimeOutState( &xTimeOut );
    78a2:	a802      	add	r0, sp, #8
    78a4:	4b35      	ldr	r3, [pc, #212]	; (797c <xQueueSemaphoreTake+0x158>)
    78a6:	4798      	blx	r3
		taskEXIT_CRITICAL();
    78a8:	4f33      	ldr	r7, [pc, #204]	; (7978 <xQueueSemaphoreTake+0x154>)
    78aa:	47b8      	blx	r7
		vTaskSuspendAll();
    78ac:	4b34      	ldr	r3, [pc, #208]	; (7980 <xQueueSemaphoreTake+0x15c>)
    78ae:	4798      	blx	r3
		prvLockQueue( pxQueue );
    78b0:	47b0      	blx	r6
    78b2:	0022      	movs	r2, r4
    78b4:	3244      	adds	r2, #68	; 0x44
    78b6:	7813      	ldrb	r3, [r2, #0]
    78b8:	b25b      	sxtb	r3, r3
    78ba:	3301      	adds	r3, #1
    78bc:	d101      	bne.n	78c2 <xQueueSemaphoreTake+0x9e>
    78be:	2300      	movs	r3, #0
    78c0:	7013      	strb	r3, [r2, #0]
    78c2:	0022      	movs	r2, r4
    78c4:	3245      	adds	r2, #69	; 0x45
    78c6:	7813      	ldrb	r3, [r2, #0]
    78c8:	b25b      	sxtb	r3, r3
    78ca:	3301      	adds	r3, #1
    78cc:	d101      	bne.n	78d2 <xQueueSemaphoreTake+0xae>
    78ce:	2300      	movs	r3, #0
    78d0:	7013      	strb	r3, [r2, #0]
    78d2:	47b8      	blx	r7
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    78d4:	a901      	add	r1, sp, #4
    78d6:	a802      	add	r0, sp, #8
    78d8:	4b2a      	ldr	r3, [pc, #168]	; (7984 <xQueueSemaphoreTake+0x160>)
    78da:	4798      	blx	r3
    78dc:	2800      	cmp	r0, #0
    78de:	d123      	bne.n	7928 <xQueueSemaphoreTake+0x104>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    78e0:	0020      	movs	r0, r4
    78e2:	4b29      	ldr	r3, [pc, #164]	; (7988 <xQueueSemaphoreTake+0x164>)
    78e4:	4798      	blx	r3
    78e6:	2800      	cmp	r0, #0
    78e8:	d018      	beq.n	791c <xQueueSemaphoreTake+0xf8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    78ea:	6823      	ldr	r3, [r4, #0]
    78ec:	2b00      	cmp	r3, #0
    78ee:	d105      	bne.n	78fc <xQueueSemaphoreTake+0xd8>
						taskENTER_CRITICAL();
    78f0:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    78f2:	6860      	ldr	r0, [r4, #4]
    78f4:	4b25      	ldr	r3, [pc, #148]	; (798c <xQueueSemaphoreTake+0x168>)
    78f6:	4798      	blx	r3
    78f8:	0005      	movs	r5, r0
						taskEXIT_CRITICAL();
    78fa:	47b8      	blx	r7
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    78fc:	0020      	movs	r0, r4
    78fe:	9901      	ldr	r1, [sp, #4]
    7900:	3024      	adds	r0, #36	; 0x24
    7902:	4b23      	ldr	r3, [pc, #140]	; (7990 <xQueueSemaphoreTake+0x16c>)
    7904:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    7906:	4b23      	ldr	r3, [pc, #140]	; (7994 <xQueueSemaphoreTake+0x170>)
    7908:	0020      	movs	r0, r4
    790a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    790c:	4b22      	ldr	r3, [pc, #136]	; (7998 <xQueueSemaphoreTake+0x174>)
    790e:	4798      	blx	r3
    7910:	2800      	cmp	r0, #0
    7912:	d101      	bne.n	7918 <xQueueSemaphoreTake+0xf4>
					portYIELD_WITHIN_API();
    7914:	4b17      	ldr	r3, [pc, #92]	; (7974 <xQueueSemaphoreTake+0x150>)
    7916:	4798      	blx	r3
    7918:	2701      	movs	r7, #1
    791a:	e798      	b.n	784e <xQueueSemaphoreTake+0x2a>
				prvUnlockQueue( pxQueue );
    791c:	0020      	movs	r0, r4
    791e:	4b1d      	ldr	r3, [pc, #116]	; (7994 <xQueueSemaphoreTake+0x170>)
    7920:	4798      	blx	r3
				( void ) xTaskResumeAll();
    7922:	4b1d      	ldr	r3, [pc, #116]	; (7998 <xQueueSemaphoreTake+0x174>)
    7924:	4798      	blx	r3
    7926:	e7f7      	b.n	7918 <xQueueSemaphoreTake+0xf4>
			prvUnlockQueue( pxQueue );
    7928:	0020      	movs	r0, r4
    792a:	4b1a      	ldr	r3, [pc, #104]	; (7994 <xQueueSemaphoreTake+0x170>)
    792c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    792e:	4b1a      	ldr	r3, [pc, #104]	; (7998 <xQueueSemaphoreTake+0x174>)
    7930:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    7932:	0020      	movs	r0, r4
    7934:	4b14      	ldr	r3, [pc, #80]	; (7988 <xQueueSemaphoreTake+0x164>)
    7936:	4798      	blx	r3
    7938:	2800      	cmp	r0, #0
    793a:	d0ed      	beq.n	7918 <xQueueSemaphoreTake+0xf4>
					if( xInheritanceOccurred != pdFALSE )
    793c:	2d00      	cmp	r5, #0
    793e:	d0a1      	beq.n	7884 <xQueueSemaphoreTake+0x60>
						taskENTER_CRITICAL();
    7940:	47b0      	blx	r6
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    7942:	2100      	movs	r1, #0
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
    7944:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7946:	428b      	cmp	r3, r1
    7948:	d003      	beq.n	7952 <xQueueSemaphoreTake+0x12e>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
    794a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    794c:	3105      	adds	r1, #5
    794e:	681b      	ldr	r3, [r3, #0]
    7950:	1ac9      	subs	r1, r1, r3
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
    7952:	6860      	ldr	r0, [r4, #4]
    7954:	4b11      	ldr	r3, [pc, #68]	; (799c <xQueueSemaphoreTake+0x178>)
    7956:	4798      	blx	r3
				return errQUEUE_EMPTY;
    7958:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
    795a:	47b8      	blx	r7
    795c:	e792      	b.n	7884 <xQueueSemaphoreTake+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    795e:	b672      	cpsid	i
    7960:	e7fe      	b.n	7960 <xQueueSemaphoreTake+0x13c>
    7962:	46c0      	nop			; (mov r8, r8)
    7964:	000081c5 	.word	0x000081c5
    7968:	000070e1 	.word	0x000070e1
    796c:	0000835d 	.word	0x0000835d
    7970:	000080b5 	.word	0x000080b5
    7974:	000070c9 	.word	0x000070c9
    7978:	000070f9 	.word	0x000070f9
    797c:	00008131 	.word	0x00008131
    7980:	00007d19 	.word	0x00007d19
    7984:	00008149 	.word	0x00008149
    7988:	00007275 	.word	0x00007275
    798c:	000081e5 	.word	0x000081e5
    7990:	00008051 	.word	0x00008051
    7994:	00007395 	.word	0x00007395
    7998:	00007e3d 	.word	0x00007e3d
    799c:	000082dd 	.word	0x000082dd

000079a0 <vQueueWaitForMessageRestricted>:
	{
    79a0:	b570      	push	{r4, r5, r6, lr}
    79a2:	0004      	movs	r4, r0
		prvLockQueue( pxQueue );
    79a4:	4b11      	ldr	r3, [pc, #68]	; (79ec <vQueueWaitForMessageRestricted+0x4c>)
	{
    79a6:	0016      	movs	r6, r2
    79a8:	000d      	movs	r5, r1
		prvLockQueue( pxQueue );
    79aa:	4798      	blx	r3
    79ac:	0022      	movs	r2, r4
    79ae:	3244      	adds	r2, #68	; 0x44
    79b0:	7813      	ldrb	r3, [r2, #0]
    79b2:	b25b      	sxtb	r3, r3
    79b4:	3301      	adds	r3, #1
    79b6:	d101      	bne.n	79bc <vQueueWaitForMessageRestricted+0x1c>
    79b8:	2300      	movs	r3, #0
    79ba:	7013      	strb	r3, [r2, #0]
    79bc:	0022      	movs	r2, r4
    79be:	3245      	adds	r2, #69	; 0x45
    79c0:	7813      	ldrb	r3, [r2, #0]
    79c2:	b25b      	sxtb	r3, r3
    79c4:	3301      	adds	r3, #1
    79c6:	d101      	bne.n	79cc <vQueueWaitForMessageRestricted+0x2c>
    79c8:	2300      	movs	r3, #0
    79ca:	7013      	strb	r3, [r2, #0]
    79cc:	4b08      	ldr	r3, [pc, #32]	; (79f0 <vQueueWaitForMessageRestricted+0x50>)
    79ce:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    79d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    79d2:	2b00      	cmp	r3, #0
    79d4:	d105      	bne.n	79e2 <vQueueWaitForMessageRestricted+0x42>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    79d6:	0020      	movs	r0, r4
    79d8:	0032      	movs	r2, r6
    79da:	0029      	movs	r1, r5
    79dc:	3024      	adds	r0, #36	; 0x24
    79de:	4b05      	ldr	r3, [pc, #20]	; (79f4 <vQueueWaitForMessageRestricted+0x54>)
    79e0:	4798      	blx	r3
		prvUnlockQueue( pxQueue );
    79e2:	0020      	movs	r0, r4
    79e4:	4b04      	ldr	r3, [pc, #16]	; (79f8 <vQueueWaitForMessageRestricted+0x58>)
    79e6:	4798      	blx	r3
	}
    79e8:	bd70      	pop	{r4, r5, r6, pc}
    79ea:	46c0      	nop			; (mov r8, r8)
    79ec:	000070e1 	.word	0x000070e1
    79f0:	000070f9 	.word	0x000070f9
    79f4:	0000807d 	.word	0x0000807d
    79f8:	00007395 	.word	0x00007395

000079fc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    79fc:	4a07      	ldr	r2, [pc, #28]	; (7a1c <prvResetNextTaskUnblockTime+0x20>)
    79fe:	6813      	ldr	r3, [r2, #0]
    7a00:	6819      	ldr	r1, [r3, #0]
    7a02:	4b07      	ldr	r3, [pc, #28]	; (7a20 <prvResetNextTaskUnblockTime+0x24>)
    7a04:	2900      	cmp	r1, #0
    7a06:	d103      	bne.n	7a10 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    7a08:	2201      	movs	r2, #1
    7a0a:	4252      	negs	r2, r2
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    7a0c:	601a      	str	r2, [r3, #0]
	}
}
    7a0e:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    7a10:	6812      	ldr	r2, [r2, #0]
    7a12:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    7a14:	68d2      	ldr	r2, [r2, #12]
    7a16:	6852      	ldr	r2, [r2, #4]
    7a18:	e7f8      	b.n	7a0c <prvResetNextTaskUnblockTime+0x10>
    7a1a:	46c0      	nop			; (mov r8, r8)
    7a1c:	200002a8 	.word	0x200002a8
    7a20:	20000358 	.word	0x20000358

00007a24 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    7a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a26:	0004      	movs	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    7a28:	4b13      	ldr	r3, [pc, #76]	; (7a78 <prvAddCurrentTaskToDelayedList+0x54>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    7a2a:	4d14      	ldr	r5, [pc, #80]	; (7a7c <prvAddCurrentTaskToDelayedList+0x58>)
const TickType_t xConstTickCount = xTickCount;
    7a2c:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    7a2e:	6828      	ldr	r0, [r5, #0]
    7a30:	4b13      	ldr	r3, [pc, #76]	; (7a80 <prvAddCurrentTaskToDelayedList+0x5c>)
    7a32:	3004      	adds	r0, #4
{
    7a34:	000f      	movs	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    7a36:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    7a38:	1c63      	adds	r3, r4, #1
    7a3a:	d107      	bne.n	7a4c <prvAddCurrentTaskToDelayedList+0x28>
    7a3c:	2f00      	cmp	r7, #0
    7a3e:	d005      	beq.n	7a4c <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    7a40:	6829      	ldr	r1, [r5, #0]
    7a42:	4810      	ldr	r0, [pc, #64]	; (7a84 <prvAddCurrentTaskToDelayedList+0x60>)
    7a44:	4b10      	ldr	r3, [pc, #64]	; (7a88 <prvAddCurrentTaskToDelayedList+0x64>)
    7a46:	3104      	adds	r1, #4

			if( xTimeToWake < xConstTickCount )
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    7a48:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    7a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    7a4c:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
    7a4e:	1934      	adds	r4, r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    7a50:	605c      	str	r4, [r3, #4]
    7a52:	4b0e      	ldr	r3, [pc, #56]	; (7a8c <prvAddCurrentTaskToDelayedList+0x68>)
			if( xTimeToWake < xConstTickCount )
    7a54:	42a6      	cmp	r6, r4
    7a56:	d904      	bls.n	7a62 <prvAddCurrentTaskToDelayedList+0x3e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    7a58:	4a0d      	ldr	r2, [pc, #52]	; (7a90 <prvAddCurrentTaskToDelayedList+0x6c>)
    7a5a:	6810      	ldr	r0, [r2, #0]
    7a5c:	6829      	ldr	r1, [r5, #0]
    7a5e:	3104      	adds	r1, #4
    7a60:	e7f2      	b.n	7a48 <prvAddCurrentTaskToDelayedList+0x24>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    7a62:	4a0c      	ldr	r2, [pc, #48]	; (7a94 <prvAddCurrentTaskToDelayedList+0x70>)
    7a64:	6810      	ldr	r0, [r2, #0]
    7a66:	6829      	ldr	r1, [r5, #0]
    7a68:	3104      	adds	r1, #4
    7a6a:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
    7a6c:	4b0a      	ldr	r3, [pc, #40]	; (7a98 <prvAddCurrentTaskToDelayedList+0x74>)
    7a6e:	681a      	ldr	r2, [r3, #0]
    7a70:	4294      	cmp	r4, r2
    7a72:	d2ea      	bcs.n	7a4a <prvAddCurrentTaskToDelayedList+0x26>
					xNextTaskUnblockTime = xTimeToWake;
    7a74:	601c      	str	r4, [r3, #0]
}
    7a76:	e7e8      	b.n	7a4a <prvAddCurrentTaskToDelayedList+0x26>
    7a78:	200003a0 	.word	0x200003a0
    7a7c:	200002a4 	.word	0x200002a4
    7a80:	0000724f 	.word	0x0000724f
    7a84:	20000378 	.word	0x20000378
    7a88:	00007209 	.word	0x00007209
    7a8c:	00007221 	.word	0x00007221
    7a90:	200002ac 	.word	0x200002ac
    7a94:	200002a8 	.word	0x200002a8
    7a98:	20000358 	.word	0x20000358

00007a9c <prvIdleTask>:
{
    7a9c:	b570      	push	{r4, r5, r6, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    7a9e:	4c11      	ldr	r4, [pc, #68]	; (7ae4 <prvIdleTask+0x48>)
    7aa0:	6823      	ldr	r3, [r4, #0]
    7aa2:	2b00      	cmp	r3, #0
    7aa4:	d106      	bne.n	7ab4 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    7aa6:	4b10      	ldr	r3, [pc, #64]	; (7ae8 <prvIdleTask+0x4c>)
    7aa8:	681b      	ldr	r3, [r3, #0]
    7aaa:	2b01      	cmp	r3, #1
    7aac:	d9f7      	bls.n	7a9e <prvIdleTask+0x2>
				taskYIELD();
    7aae:	4b0f      	ldr	r3, [pc, #60]	; (7aec <prvIdleTask+0x50>)
    7ab0:	4798      	blx	r3
    7ab2:	e7f4      	b.n	7a9e <prvIdleTask+0x2>
			taskENTER_CRITICAL();
    7ab4:	4b0e      	ldr	r3, [pc, #56]	; (7af0 <prvIdleTask+0x54>)
    7ab6:	4798      	blx	r3
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    7ab8:	4b0e      	ldr	r3, [pc, #56]	; (7af4 <prvIdleTask+0x58>)
    7aba:	68db      	ldr	r3, [r3, #12]
    7abc:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    7abe:	4b0e      	ldr	r3, [pc, #56]	; (7af8 <prvIdleTask+0x5c>)
    7ac0:	1d28      	adds	r0, r5, #4
    7ac2:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
    7ac4:	4a0d      	ldr	r2, [pc, #52]	; (7afc <prvIdleTask+0x60>)
    7ac6:	6813      	ldr	r3, [r2, #0]
    7ac8:	3b01      	subs	r3, #1
    7aca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
    7acc:	6823      	ldr	r3, [r4, #0]
    7ace:	3b01      	subs	r3, #1
    7ad0:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
    7ad2:	4b0b      	ldr	r3, [pc, #44]	; (7b00 <prvIdleTask+0x64>)
    7ad4:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
    7ad6:	6b28      	ldr	r0, [r5, #48]	; 0x30
    7ad8:	4c0a      	ldr	r4, [pc, #40]	; (7b04 <prvIdleTask+0x68>)
    7ada:	47a0      	blx	r4
			vPortFree( pxTCB );
    7adc:	0028      	movs	r0, r5
    7ade:	47a0      	blx	r4
    7ae0:	e7dd      	b.n	7a9e <prvIdleTask+0x2>
    7ae2:	46c0      	nop			; (mov r8, r8)
    7ae4:	20000318 	.word	0x20000318
    7ae8:	200002b0 	.word	0x200002b0
    7aec:	000070c9 	.word	0x000070c9
    7af0:	000070e1 	.word	0x000070e1
    7af4:	2000038c 	.word	0x2000038c
    7af8:	0000724f 	.word	0x0000724f
    7afc:	20000314 	.word	0x20000314
    7b00:	000070f9 	.word	0x000070f9
    7b04:	000071c9 	.word	0x000071c9

00007b08 <xTaskCreate>:
	{
    7b08:	b5f0      	push	{r4, r5, r6, r7, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7b0a:	0095      	lsls	r5, r2, #2
	{
    7b0c:	b085      	sub	sp, #20
    7b0e:	9001      	str	r0, [sp, #4]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7b10:	4c51      	ldr	r4, [pc, #324]	; (7c58 <xTaskCreate+0x150>)
    7b12:	0028      	movs	r0, r5
	{
    7b14:	000f      	movs	r7, r1
    7b16:	9302      	str	r3, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7b18:	47a0      	blx	r4
    7b1a:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
    7b1c:	d100      	bne.n	7b20 <xTaskCreate+0x18>
    7b1e:	e08d      	b.n	7c3c <xTaskCreate+0x134>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    7b20:	2050      	movs	r0, #80	; 0x50
    7b22:	47a0      	blx	r4
    7b24:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
    7b26:	d100      	bne.n	7b2a <xTaskCreate+0x22>
    7b28:	e085      	b.n	7c36 <xTaskCreate+0x12e>
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    7b2a:	2307      	movs	r3, #7
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    7b2c:	3d04      	subs	r5, #4
					pxNewTCB->pxStack = pxStack;
    7b2e:	6306      	str	r6, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    7b30:	1976      	adds	r6, r6, r5
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    7b32:	439e      	bics	r6, r3
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    7b34:	2300      	movs	r3, #0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    7b36:	9600      	str	r6, [sp, #0]
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    7b38:	001a      	movs	r2, r3
    7b3a:	5cf9      	ldrb	r1, [r7, r3]
    7b3c:	3234      	adds	r2, #52	; 0x34
    7b3e:	54a1      	strb	r1, [r4, r2]
		if( pcName[ x ] == 0x00 )
    7b40:	5cfa      	ldrb	r2, [r7, r3]
    7b42:	2a00      	cmp	r2, #0
    7b44:	d002      	beq.n	7b4c <xTaskCreate+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    7b46:	3301      	adds	r3, #1
    7b48:	2b0a      	cmp	r3, #10
    7b4a:	d1f5      	bne.n	7b38 <xTaskCreate+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    7b4c:	0023      	movs	r3, r4
    7b4e:	2700      	movs	r7, #0
    7b50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    7b52:	333d      	adds	r3, #61	; 0x3d
    7b54:	701f      	strb	r7, [r3, #0]
    7b56:	2d04      	cmp	r5, #4
    7b58:	d900      	bls.n	7b5c <xTaskCreate+0x54>
    7b5a:	2504      	movs	r5, #4
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    7b5c:	1d23      	adds	r3, r4, #4
    7b5e:	0018      	movs	r0, r3
	pxNewTCB->uxPriority = uxPriority;
    7b60:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    7b62:	6425      	str	r5, [r4, #64]	; 0x40
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    7b64:	4e3d      	ldr	r6, [pc, #244]	; (7c5c <xTaskCreate+0x154>)
		pxNewTCB->uxMutexesHeld = 0;
    7b66:	6467      	str	r7, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    7b68:	9303      	str	r3, [sp, #12]
    7b6a:	47b0      	blx	r6
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    7b6c:	0020      	movs	r0, r4
    7b6e:	3018      	adds	r0, #24
    7b70:	47b0      	blx	r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7b72:	2305      	movs	r3, #5
    7b74:	1b5d      	subs	r5, r3, r5
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    7b76:	0023      	movs	r3, r4
    7b78:	334c      	adds	r3, #76	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    7b7a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7b7c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    7b7e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    7b80:	64a7      	str	r7, [r4, #72]	; 0x48
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    7b82:	9a02      	ldr	r2, [sp, #8]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    7b84:	701f      	strb	r7, [r3, #0]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    7b86:	9901      	ldr	r1, [sp, #4]
    7b88:	4b35      	ldr	r3, [pc, #212]	; (7c60 <xTaskCreate+0x158>)
    7b8a:	9800      	ldr	r0, [sp, #0]
    7b8c:	4798      	blx	r3
	if( ( void * ) pxCreatedTask != NULL )
    7b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    7b90:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
    7b92:	2b00      	cmp	r3, #0
    7b94:	d000      	beq.n	7b98 <xTaskCreate+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    7b96:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
    7b98:	4b32      	ldr	r3, [pc, #200]	; (7c64 <xTaskCreate+0x15c>)
    7b9a:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    7b9c:	4b32      	ldr	r3, [pc, #200]	; (7c68 <xTaskCreate+0x160>)
		if( pxCurrentTCB == NULL )
    7b9e:	4f33      	ldr	r7, [pc, #204]	; (7c6c <xTaskCreate+0x164>)
		uxCurrentNumberOfTasks++;
    7ba0:	681a      	ldr	r2, [r3, #0]
    7ba2:	4e33      	ldr	r6, [pc, #204]	; (7c70 <xTaskCreate+0x168>)
    7ba4:	3201      	adds	r2, #1
    7ba6:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    7ba8:	683a      	ldr	r2, [r7, #0]
    7baa:	2a00      	cmp	r2, #0
    7bac:	d149      	bne.n	7c42 <xTaskCreate+0x13a>
			pxCurrentTCB = pxNewTCB;
    7bae:	603c      	str	r4, [r7, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    7bb0:	681b      	ldr	r3, [r3, #0]
    7bb2:	2b01      	cmp	r3, #1
    7bb4:	d11e      	bne.n	7bf4 <xTaskCreate+0xec>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    7bb6:	4d2f      	ldr	r5, [pc, #188]	; (7c74 <xTaskCreate+0x16c>)
    7bb8:	0030      	movs	r0, r6
    7bba:	47a8      	blx	r5
    7bbc:	0030      	movs	r0, r6
    7bbe:	3014      	adds	r0, #20
    7bc0:	47a8      	blx	r5
    7bc2:	0030      	movs	r0, r6
    7bc4:	3028      	adds	r0, #40	; 0x28
    7bc6:	47a8      	blx	r5
    7bc8:	0030      	movs	r0, r6
    7bca:	303c      	adds	r0, #60	; 0x3c
    7bcc:	47a8      	blx	r5
    7bce:	0030      	movs	r0, r6
    7bd0:	3050      	adds	r0, #80	; 0x50
    7bd2:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
    7bd4:	4828      	ldr	r0, [pc, #160]	; (7c78 <xTaskCreate+0x170>)
    7bd6:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
    7bd8:	4828      	ldr	r0, [pc, #160]	; (7c7c <xTaskCreate+0x174>)
    7bda:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
    7bdc:	4828      	ldr	r0, [pc, #160]	; (7c80 <xTaskCreate+0x178>)
    7bde:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
    7be0:	4828      	ldr	r0, [pc, #160]	; (7c84 <xTaskCreate+0x17c>)
    7be2:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
    7be4:	4828      	ldr	r0, [pc, #160]	; (7c88 <xTaskCreate+0x180>)
    7be6:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
    7be8:	4b28      	ldr	r3, [pc, #160]	; (7c8c <xTaskCreate+0x184>)
    7bea:	4a23      	ldr	r2, [pc, #140]	; (7c78 <xTaskCreate+0x170>)
    7bec:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    7bee:	4b28      	ldr	r3, [pc, #160]	; (7c90 <xTaskCreate+0x188>)
    7bf0:	4a22      	ldr	r2, [pc, #136]	; (7c7c <xTaskCreate+0x174>)
    7bf2:	601a      	str	r2, [r3, #0]
		uxTaskNumber++;
    7bf4:	4a27      	ldr	r2, [pc, #156]	; (7c94 <xTaskCreate+0x18c>)
    7bf6:	6813      	ldr	r3, [r2, #0]
    7bf8:	3301      	adds	r3, #1
    7bfa:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
    7bfc:	4a26      	ldr	r2, [pc, #152]	; (7c98 <xTaskCreate+0x190>)
    7bfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7c00:	6811      	ldr	r1, [r2, #0]
    7c02:	428b      	cmp	r3, r1
    7c04:	d900      	bls.n	7c08 <xTaskCreate+0x100>
    7c06:	6013      	str	r3, [r2, #0]
    7c08:	2014      	movs	r0, #20
    7c0a:	4358      	muls	r0, r3
    7c0c:	1d21      	adds	r1, r4, #4
    7c0e:	1830      	adds	r0, r6, r0
    7c10:	4b22      	ldr	r3, [pc, #136]	; (7c9c <xTaskCreate+0x194>)
    7c12:	4798      	blx	r3
	taskEXIT_CRITICAL();
    7c14:	4b22      	ldr	r3, [pc, #136]	; (7ca0 <xTaskCreate+0x198>)
    7c16:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
    7c18:	4b22      	ldr	r3, [pc, #136]	; (7ca4 <xTaskCreate+0x19c>)
			xReturn = pdPASS;
    7c1a:	2501      	movs	r5, #1
	if( xSchedulerRunning != pdFALSE )
    7c1c:	681b      	ldr	r3, [r3, #0]
    7c1e:	2b00      	cmp	r3, #0
    7c20:	d006      	beq.n	7c30 <xTaskCreate+0x128>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    7c22:	683b      	ldr	r3, [r7, #0]
    7c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7c26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7c28:	429a      	cmp	r2, r3
    7c2a:	d201      	bcs.n	7c30 <xTaskCreate+0x128>
			taskYIELD_IF_USING_PREEMPTION();
    7c2c:	4b1e      	ldr	r3, [pc, #120]	; (7ca8 <xTaskCreate+0x1a0>)
    7c2e:	4798      	blx	r3
	}
    7c30:	0028      	movs	r0, r5
    7c32:	b005      	add	sp, #20
    7c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
    7c36:	0030      	movs	r0, r6
    7c38:	4b1c      	ldr	r3, [pc, #112]	; (7cac <xTaskCreate+0x1a4>)
    7c3a:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    7c3c:	2501      	movs	r5, #1
    7c3e:	426d      	negs	r5, r5
    7c40:	e7f6      	b.n	7c30 <xTaskCreate+0x128>
			if( xSchedulerRunning == pdFALSE )
    7c42:	4b18      	ldr	r3, [pc, #96]	; (7ca4 <xTaskCreate+0x19c>)
    7c44:	681b      	ldr	r3, [r3, #0]
    7c46:	2b00      	cmp	r3, #0
    7c48:	d1d4      	bne.n	7bf4 <xTaskCreate+0xec>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    7c4a:	683b      	ldr	r3, [r7, #0]
    7c4c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7c50:	4293      	cmp	r3, r2
    7c52:	d8cf      	bhi.n	7bf4 <xTaskCreate+0xec>
					pxCurrentTCB = pxNewTCB;
    7c54:	603c      	str	r4, [r7, #0]
    7c56:	e7cd      	b.n	7bf4 <xTaskCreate+0xec>
    7c58:	000071a5 	.word	0x000071a5
    7c5c:	00007203 	.word	0x00007203
    7c60:	00007025 	.word	0x00007025
    7c64:	000070e1 	.word	0x000070e1
    7c68:	20000314 	.word	0x20000314
    7c6c:	200002a4 	.word	0x200002a4
    7c70:	200002b0 	.word	0x200002b0
    7c74:	000071ed 	.word	0x000071ed
    7c78:	2000032c 	.word	0x2000032c
    7c7c:	20000340 	.word	0x20000340
    7c80:	20000360 	.word	0x20000360
    7c84:	2000038c 	.word	0x2000038c
    7c88:	20000378 	.word	0x20000378
    7c8c:	200002a8 	.word	0x200002a8
    7c90:	200002ac 	.word	0x200002ac
    7c94:	20000324 	.word	0x20000324
    7c98:	20000328 	.word	0x20000328
    7c9c:	00007209 	.word	0x00007209
    7ca0:	000070f9 	.word	0x000070f9
    7ca4:	20000374 	.word	0x20000374
    7ca8:	000070c9 	.word	0x000070c9
    7cac:	000071c9 	.word	0x000071c9

00007cb0 <vTaskStartScheduler>:
{
    7cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
    7cb2:	2400      	movs	r4, #0
    7cb4:	4b0f      	ldr	r3, [pc, #60]	; (7cf4 <vTaskStartScheduler+0x44>)
    7cb6:	9400      	str	r4, [sp, #0]
    7cb8:	9301      	str	r3, [sp, #4]
    7cba:	2282      	movs	r2, #130	; 0x82
    7cbc:	0023      	movs	r3, r4
    7cbe:	490e      	ldr	r1, [pc, #56]	; (7cf8 <vTaskStartScheduler+0x48>)
    7cc0:	480e      	ldr	r0, [pc, #56]	; (7cfc <vTaskStartScheduler+0x4c>)
    7cc2:	4d0f      	ldr	r5, [pc, #60]	; (7d00 <vTaskStartScheduler+0x50>)
    7cc4:	47a8      	blx	r5
		if( xReturn == pdPASS )
    7cc6:	2801      	cmp	r0, #1
    7cc8:	d10f      	bne.n	7cea <vTaskStartScheduler+0x3a>
			xReturn = xTimerCreateTimerTask();
    7cca:	4b0e      	ldr	r3, [pc, #56]	; (7d04 <vTaskStartScheduler+0x54>)
    7ccc:	4798      	blx	r3
	if( xReturn == pdPASS )
    7cce:	2801      	cmp	r0, #1
    7cd0:	d10b      	bne.n	7cea <vTaskStartScheduler+0x3a>
		portDISABLE_INTERRUPTS();
    7cd2:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
    7cd4:	2201      	movs	r2, #1
    7cd6:	4b0c      	ldr	r3, [pc, #48]	; (7d08 <vTaskStartScheduler+0x58>)
    7cd8:	4252      	negs	r2, r2
    7cda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    7cdc:	4b0b      	ldr	r3, [pc, #44]	; (7d0c <vTaskStartScheduler+0x5c>)
    7cde:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    7ce0:	4b0b      	ldr	r3, [pc, #44]	; (7d10 <vTaskStartScheduler+0x60>)
    7ce2:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
    7ce4:	4b0b      	ldr	r3, [pc, #44]	; (7d14 <vTaskStartScheduler+0x64>)
    7ce6:	4798      	blx	r3
}
    7ce8:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    7cea:	1c43      	adds	r3, r0, #1
    7cec:	d1fc      	bne.n	7ce8 <vTaskStartScheduler+0x38>
    7cee:	b672      	cpsid	i
    7cf0:	e7fe      	b.n	7cf0 <vTaskStartScheduler+0x40>
    7cf2:	46c0      	nop			; (mov r8, r8)
    7cf4:	20000354 	.word	0x20000354
    7cf8:	0000d820 	.word	0x0000d820
    7cfc:	00007a9d 	.word	0x00007a9d
    7d00:	00007b09 	.word	0x00007b09
    7d04:	00008411 	.word	0x00008411
    7d08:	20000358 	.word	0x20000358
    7d0c:	20000374 	.word	0x20000374
    7d10:	200003a0 	.word	0x200003a0
    7d14:	00007049 	.word	0x00007049

00007d18 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    7d18:	4a02      	ldr	r2, [pc, #8]	; (7d24 <vTaskSuspendAll+0xc>)
    7d1a:	6813      	ldr	r3, [r2, #0]
    7d1c:	3301      	adds	r3, #1
    7d1e:	6013      	str	r3, [r2, #0]
}
    7d20:	4770      	bx	lr
    7d22:	46c0      	nop			; (mov r8, r8)
    7d24:	20000320 	.word	0x20000320

00007d28 <xTaskGetTickCount>:
    7d28:	4b01      	ldr	r3, [pc, #4]	; (7d30 <xTaskGetTickCount+0x8>)
    7d2a:	6818      	ldr	r0, [r3, #0]
    7d2c:	4770      	bx	lr
    7d2e:	46c0      	nop			; (mov r8, r8)
    7d30:	200003a0 	.word	0x200003a0

00007d34 <xTaskIncrementTick>:
{
    7d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    7d36:	4b33      	ldr	r3, [pc, #204]	; (7e04 <xTaskIncrementTick+0xd0>)
    7d38:	681b      	ldr	r3, [r3, #0]
    7d3a:	2b00      	cmp	r3, #0
    7d3c:	d135      	bne.n	7daa <xTaskIncrementTick+0x76>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
    7d3e:	4b32      	ldr	r3, [pc, #200]	; (7e08 <xTaskIncrementTick+0xd4>)
    7d40:	681f      	ldr	r7, [r3, #0]
    7d42:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
    7d44:	601f      	str	r7, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
    7d46:	2f00      	cmp	r7, #0
    7d48:	d111      	bne.n	7d6e <xTaskIncrementTick+0x3a>
			taskSWITCH_DELAYED_LISTS();
    7d4a:	4b30      	ldr	r3, [pc, #192]	; (7e0c <xTaskIncrementTick+0xd8>)
    7d4c:	681a      	ldr	r2, [r3, #0]
    7d4e:	6812      	ldr	r2, [r2, #0]
    7d50:	2a00      	cmp	r2, #0
    7d52:	d001      	beq.n	7d58 <xTaskIncrementTick+0x24>
    7d54:	b672      	cpsid	i
    7d56:	e7fe      	b.n	7d56 <xTaskIncrementTick+0x22>
    7d58:	4a2d      	ldr	r2, [pc, #180]	; (7e10 <xTaskIncrementTick+0xdc>)
    7d5a:	6819      	ldr	r1, [r3, #0]
    7d5c:	6810      	ldr	r0, [r2, #0]
    7d5e:	6018      	str	r0, [r3, #0]
    7d60:	6011      	str	r1, [r2, #0]
    7d62:	4a2c      	ldr	r2, [pc, #176]	; (7e14 <xTaskIncrementTick+0xe0>)
    7d64:	6813      	ldr	r3, [r2, #0]
    7d66:	3301      	adds	r3, #1
    7d68:	6013      	str	r3, [r2, #0]
    7d6a:	4b2b      	ldr	r3, [pc, #172]	; (7e18 <xTaskIncrementTick+0xe4>)
    7d6c:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
    7d6e:	4e2b      	ldr	r6, [pc, #172]	; (7e1c <xTaskIncrementTick+0xe8>)
BaseType_t xSwitchRequired = pdFALSE;
    7d70:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
    7d72:	6833      	ldr	r3, [r6, #0]
    7d74:	429f      	cmp	r7, r3
    7d76:	d307      	bcc.n	7d88 <xTaskIncrementTick+0x54>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    7d78:	4b24      	ldr	r3, [pc, #144]	; (7e0c <xTaskIncrementTick+0xd8>)
    7d7a:	681a      	ldr	r2, [r3, #0]
    7d7c:	6812      	ldr	r2, [r2, #0]
    7d7e:	2a00      	cmp	r2, #0
    7d80:	d119      	bne.n	7db6 <xTaskIncrementTick+0x82>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7d82:	2301      	movs	r3, #1
    7d84:	425b      	negs	r3, r3
    7d86:	6033      	str	r3, [r6, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    7d88:	4b25      	ldr	r3, [pc, #148]	; (7e20 <xTaskIncrementTick+0xec>)
    7d8a:	681b      	ldr	r3, [r3, #0]
    7d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7d8e:	2314      	movs	r3, #20
    7d90:	4353      	muls	r3, r2
    7d92:	4a24      	ldr	r2, [pc, #144]	; (7e24 <xTaskIncrementTick+0xf0>)
    7d94:	58d3      	ldr	r3, [r2, r3]
    7d96:	2b01      	cmp	r3, #1
    7d98:	d900      	bls.n	7d9c <xTaskIncrementTick+0x68>
				xSwitchRequired = pdTRUE;
    7d9a:	2501      	movs	r5, #1
		if( xYieldPending != pdFALSE )
    7d9c:	4b22      	ldr	r3, [pc, #136]	; (7e28 <xTaskIncrementTick+0xf4>)
    7d9e:	681b      	ldr	r3, [r3, #0]
    7da0:	2b00      	cmp	r3, #0
    7da2:	d000      	beq.n	7da6 <xTaskIncrementTick+0x72>
			xSwitchRequired = pdTRUE;
    7da4:	2501      	movs	r5, #1
}
    7da6:	0028      	movs	r0, r5
    7da8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		++uxPendedTicks;
    7daa:	4a20      	ldr	r2, [pc, #128]	; (7e2c <xTaskIncrementTick+0xf8>)
BaseType_t xSwitchRequired = pdFALSE;
    7dac:	2500      	movs	r5, #0
		++uxPendedTicks;
    7dae:	6813      	ldr	r3, [r2, #0]
    7db0:	3301      	adds	r3, #1
    7db2:	6013      	str	r3, [r2, #0]
    7db4:	e7f2      	b.n	7d9c <xTaskIncrementTick+0x68>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    7db6:	681b      	ldr	r3, [r3, #0]
    7db8:	68db      	ldr	r3, [r3, #12]
    7dba:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    7dbc:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
    7dbe:	429f      	cmp	r7, r3
    7dc0:	d3e1      	bcc.n	7d86 <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    7dc2:	1d23      	adds	r3, r4, #4
    7dc4:	9301      	str	r3, [sp, #4]
    7dc6:	0018      	movs	r0, r3
    7dc8:	4b19      	ldr	r3, [pc, #100]	; (7e30 <xTaskIncrementTick+0xfc>)
    7dca:	4798      	blx	r3
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    7dcc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7dce:	2b00      	cmp	r3, #0
    7dd0:	d003      	beq.n	7dda <xTaskIncrementTick+0xa6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    7dd2:	0020      	movs	r0, r4
    7dd4:	4b16      	ldr	r3, [pc, #88]	; (7e30 <xTaskIncrementTick+0xfc>)
    7dd6:	3018      	adds	r0, #24
    7dd8:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    7dda:	4b16      	ldr	r3, [pc, #88]	; (7e34 <xTaskIncrementTick+0x100>)
    7ddc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7dde:	681a      	ldr	r2, [r3, #0]
    7de0:	4290      	cmp	r0, r2
    7de2:	d900      	bls.n	7de6 <xTaskIncrementTick+0xb2>
    7de4:	6018      	str	r0, [r3, #0]
    7de6:	2314      	movs	r3, #20
    7de8:	4358      	muls	r0, r3
    7dea:	4b0e      	ldr	r3, [pc, #56]	; (7e24 <xTaskIncrementTick+0xf0>)
    7dec:	1d21      	adds	r1, r4, #4
    7dee:	1818      	adds	r0, r3, r0
    7df0:	4b11      	ldr	r3, [pc, #68]	; (7e38 <xTaskIncrementTick+0x104>)
    7df2:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    7df4:	4b0a      	ldr	r3, [pc, #40]	; (7e20 <xTaskIncrementTick+0xec>)
    7df6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7df8:	681b      	ldr	r3, [r3, #0]
    7dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7dfc:	429a      	cmp	r2, r3
    7dfe:	d3bb      	bcc.n	7d78 <xTaskIncrementTick+0x44>
							xSwitchRequired = pdTRUE;
    7e00:	2501      	movs	r5, #1
    7e02:	e7b9      	b.n	7d78 <xTaskIncrementTick+0x44>
    7e04:	20000320 	.word	0x20000320
    7e08:	200003a0 	.word	0x200003a0
    7e0c:	200002a8 	.word	0x200002a8
    7e10:	200002ac 	.word	0x200002ac
    7e14:	2000035c 	.word	0x2000035c
    7e18:	000079fd 	.word	0x000079fd
    7e1c:	20000358 	.word	0x20000358
    7e20:	200002a4 	.word	0x200002a4
    7e24:	200002b0 	.word	0x200002b0
    7e28:	200003a4 	.word	0x200003a4
    7e2c:	2000031c 	.word	0x2000031c
    7e30:	0000724f 	.word	0x0000724f
    7e34:	20000328 	.word	0x20000328
    7e38:	00007209 	.word	0x00007209

00007e3c <xTaskResumeAll>:
{
    7e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
    7e3e:	4c2b      	ldr	r4, [pc, #172]	; (7eec <xTaskResumeAll+0xb0>)
    7e40:	6823      	ldr	r3, [r4, #0]
    7e42:	2b00      	cmp	r3, #0
    7e44:	d101      	bne.n	7e4a <xTaskResumeAll+0xe>
    7e46:	b672      	cpsid	i
    7e48:	e7fe      	b.n	7e48 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
    7e4a:	4b29      	ldr	r3, [pc, #164]	; (7ef0 <xTaskResumeAll+0xb4>)
    7e4c:	4798      	blx	r3
		--uxSchedulerSuspended;
    7e4e:	6823      	ldr	r3, [r4, #0]
    7e50:	3b01      	subs	r3, #1
    7e52:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    7e54:	6824      	ldr	r4, [r4, #0]
    7e56:	2c00      	cmp	r4, #0
    7e58:	d004      	beq.n	7e64 <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
    7e5a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    7e5c:	4b25      	ldr	r3, [pc, #148]	; (7ef4 <xTaskResumeAll+0xb8>)
    7e5e:	4798      	blx	r3
}
    7e60:	0020      	movs	r0, r4
    7e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    7e64:	4b24      	ldr	r3, [pc, #144]	; (7ef8 <xTaskResumeAll+0xbc>)
						xYieldPending = pdTRUE;
    7e66:	2701      	movs	r7, #1
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    7e68:	681b      	ldr	r3, [r3, #0]
    7e6a:	2b00      	cmp	r3, #0
    7e6c:	d0f5      	beq.n	7e5a <xTaskResumeAll+0x1e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    7e6e:	4b23      	ldr	r3, [pc, #140]	; (7efc <xTaskResumeAll+0xc0>)
    7e70:	681a      	ldr	r2, [r3, #0]
    7e72:	2a00      	cmp	r2, #0
    7e74:	d11a      	bne.n	7eac <xTaskResumeAll+0x70>
				if( pxTCB != NULL )
    7e76:	2c00      	cmp	r4, #0
    7e78:	d001      	beq.n	7e7e <xTaskResumeAll+0x42>
					prvResetNextTaskUnblockTime();
    7e7a:	4b21      	ldr	r3, [pc, #132]	; (7f00 <xTaskResumeAll+0xc4>)
    7e7c:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    7e7e:	4d21      	ldr	r5, [pc, #132]	; (7f04 <xTaskResumeAll+0xc8>)
    7e80:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
    7e82:	2c00      	cmp	r4, #0
    7e84:	d00a      	beq.n	7e9c <xTaskResumeAll+0x60>
								xYieldPending = pdTRUE;
    7e86:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
    7e88:	4b1f      	ldr	r3, [pc, #124]	; (7f08 <xTaskResumeAll+0xcc>)
    7e8a:	4798      	blx	r3
    7e8c:	2800      	cmp	r0, #0
    7e8e:	d001      	beq.n	7e94 <xTaskResumeAll+0x58>
								xYieldPending = pdTRUE;
    7e90:	4b1e      	ldr	r3, [pc, #120]	; (7f0c <xTaskResumeAll+0xd0>)
    7e92:	601e      	str	r6, [r3, #0]
							--uxPendedCounts;
    7e94:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    7e96:	2c00      	cmp	r4, #0
    7e98:	d1f6      	bne.n	7e88 <xTaskResumeAll+0x4c>
						uxPendedTicks = 0;
    7e9a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
    7e9c:	4b1b      	ldr	r3, [pc, #108]	; (7f0c <xTaskResumeAll+0xd0>)
    7e9e:	681b      	ldr	r3, [r3, #0]
    7ea0:	2b00      	cmp	r3, #0
    7ea2:	d0da      	beq.n	7e5a <xTaskResumeAll+0x1e>
					taskYIELD_IF_USING_PREEMPTION();
    7ea4:	4b1a      	ldr	r3, [pc, #104]	; (7f10 <xTaskResumeAll+0xd4>)
    7ea6:	4798      	blx	r3
						xAlreadyYielded = pdTRUE;
    7ea8:	2401      	movs	r4, #1
    7eaa:	e7d7      	b.n	7e5c <xTaskResumeAll+0x20>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    7eac:	68db      	ldr	r3, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    7eae:	4e19      	ldr	r6, [pc, #100]	; (7f14 <xTaskResumeAll+0xd8>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    7eb0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    7eb2:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    7eb4:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    7eb6:	3018      	adds	r0, #24
    7eb8:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    7eba:	0028      	movs	r0, r5
    7ebc:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
    7ebe:	4b16      	ldr	r3, [pc, #88]	; (7f18 <xTaskResumeAll+0xdc>)
    7ec0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7ec2:	681a      	ldr	r2, [r3, #0]
    7ec4:	4290      	cmp	r0, r2
    7ec6:	d900      	bls.n	7eca <xTaskResumeAll+0x8e>
    7ec8:	6018      	str	r0, [r3, #0]
    7eca:	2314      	movs	r3, #20
    7ecc:	4358      	muls	r0, r3
    7ece:	4b13      	ldr	r3, [pc, #76]	; (7f1c <xTaskResumeAll+0xe0>)
    7ed0:	0029      	movs	r1, r5
    7ed2:	1818      	adds	r0, r3, r0
    7ed4:	4b12      	ldr	r3, [pc, #72]	; (7f20 <xTaskResumeAll+0xe4>)
    7ed6:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    7ed8:	4b12      	ldr	r3, [pc, #72]	; (7f24 <xTaskResumeAll+0xe8>)
    7eda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7edc:	681b      	ldr	r3, [r3, #0]
    7ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7ee0:	429a      	cmp	r2, r3
    7ee2:	d3c4      	bcc.n	7e6e <xTaskResumeAll+0x32>
						xYieldPending = pdTRUE;
    7ee4:	4b09      	ldr	r3, [pc, #36]	; (7f0c <xTaskResumeAll+0xd0>)
    7ee6:	601f      	str	r7, [r3, #0]
    7ee8:	e7c1      	b.n	7e6e <xTaskResumeAll+0x32>
    7eea:	46c0      	nop			; (mov r8, r8)
    7eec:	20000320 	.word	0x20000320
    7ef0:	000070e1 	.word	0x000070e1
    7ef4:	000070f9 	.word	0x000070f9
    7ef8:	20000314 	.word	0x20000314
    7efc:	20000360 	.word	0x20000360
    7f00:	000079fd 	.word	0x000079fd
    7f04:	2000031c 	.word	0x2000031c
    7f08:	00007d35 	.word	0x00007d35
    7f0c:	200003a4 	.word	0x200003a4
    7f10:	000070c9 	.word	0x000070c9
    7f14:	0000724f 	.word	0x0000724f
    7f18:	20000328 	.word	0x20000328
    7f1c:	200002b0 	.word	0x200002b0
    7f20:	00007209 	.word	0x00007209
    7f24:	200002a4 	.word	0x200002a4

00007f28 <vTaskDelayUntil>:
	{
    7f28:	b570      	push	{r4, r5, r6, lr}
    7f2a:	0005      	movs	r5, r0
    7f2c:	000c      	movs	r4, r1
		configASSERT( pxPreviousWakeTime );
    7f2e:	2800      	cmp	r0, #0
    7f30:	d101      	bne.n	7f36 <vTaskDelayUntil+0xe>
    7f32:	b672      	cpsid	i
    7f34:	e7fe      	b.n	7f34 <vTaskDelayUntil+0xc>
		configASSERT( ( xTimeIncrement > 0U ) );
    7f36:	2900      	cmp	r1, #0
    7f38:	d101      	bne.n	7f3e <vTaskDelayUntil+0x16>
    7f3a:	b672      	cpsid	i
    7f3c:	e7fe      	b.n	7f3c <vTaskDelayUntil+0x14>
		configASSERT( uxSchedulerSuspended == 0 );
    7f3e:	4b12      	ldr	r3, [pc, #72]	; (7f88 <vTaskDelayUntil+0x60>)
    7f40:	681e      	ldr	r6, [r3, #0]
    7f42:	2e00      	cmp	r6, #0
    7f44:	d001      	beq.n	7f4a <vTaskDelayUntil+0x22>
    7f46:	b672      	cpsid	i
    7f48:	e7fe      	b.n	7f48 <vTaskDelayUntil+0x20>
		vTaskSuspendAll();
    7f4a:	4b10      	ldr	r3, [pc, #64]	; (7f8c <vTaskDelayUntil+0x64>)
    7f4c:	4798      	blx	r3
			const TickType_t xConstTickCount = xTickCount;
    7f4e:	4b10      	ldr	r3, [pc, #64]	; (7f90 <vTaskDelayUntil+0x68>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    7f50:	682a      	ldr	r2, [r5, #0]
			const TickType_t xConstTickCount = xTickCount;
    7f52:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    7f54:	18a4      	adds	r4, r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
    7f56:	4290      	cmp	r0, r2
    7f58:	d205      	bcs.n	7f66 <vTaskDelayUntil+0x3e>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    7f5a:	42a2      	cmp	r2, r4
    7f5c:	d906      	bls.n	7f6c <vTaskDelayUntil+0x44>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    7f5e:	42a0      	cmp	r0, r4
    7f60:	41b6      	sbcs	r6, r6
    7f62:	4276      	negs	r6, r6
    7f64:	e002      	b.n	7f6c <vTaskDelayUntil+0x44>
					xShouldDelay = pdTRUE;
    7f66:	2601      	movs	r6, #1
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    7f68:	42a2      	cmp	r2, r4
    7f6a:	d9f8      	bls.n	7f5e <vTaskDelayUntil+0x36>
			*pxPreviousWakeTime = xTimeToWake;
    7f6c:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
    7f6e:	2e00      	cmp	r6, #0
    7f70:	d003      	beq.n	7f7a <vTaskDelayUntil+0x52>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    7f72:	1a20      	subs	r0, r4, r0
    7f74:	2100      	movs	r1, #0
    7f76:	4b07      	ldr	r3, [pc, #28]	; (7f94 <vTaskDelayUntil+0x6c>)
    7f78:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    7f7a:	4b07      	ldr	r3, [pc, #28]	; (7f98 <vTaskDelayUntil+0x70>)
    7f7c:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    7f7e:	2800      	cmp	r0, #0
    7f80:	d101      	bne.n	7f86 <vTaskDelayUntil+0x5e>
			portYIELD_WITHIN_API();
    7f82:	4b06      	ldr	r3, [pc, #24]	; (7f9c <vTaskDelayUntil+0x74>)
    7f84:	4798      	blx	r3
	}
    7f86:	bd70      	pop	{r4, r5, r6, pc}
    7f88:	20000320 	.word	0x20000320
    7f8c:	00007d19 	.word	0x00007d19
    7f90:	200003a0 	.word	0x200003a0
    7f94:	00007a25 	.word	0x00007a25
    7f98:	00007e3d 	.word	0x00007e3d
    7f9c:	000070c9 	.word	0x000070c9

00007fa0 <vTaskDelay>:
	{
    7fa0:	b570      	push	{r4, r5, r6, lr}
    7fa2:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
    7fa4:	d102      	bne.n	7fac <vTaskDelay+0xc>
			portYIELD_WITHIN_API();
    7fa6:	4b0a      	ldr	r3, [pc, #40]	; (7fd0 <vTaskDelay+0x30>)
    7fa8:	4798      	blx	r3
	}
    7faa:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( uxSchedulerSuspended == 0 );
    7fac:	4b09      	ldr	r3, [pc, #36]	; (7fd4 <vTaskDelay+0x34>)
    7fae:	681d      	ldr	r5, [r3, #0]
    7fb0:	2d00      	cmp	r5, #0
    7fb2:	d001      	beq.n	7fb8 <vTaskDelay+0x18>
    7fb4:	b672      	cpsid	i
    7fb6:	e7fe      	b.n	7fb6 <vTaskDelay+0x16>
			vTaskSuspendAll();
    7fb8:	4b07      	ldr	r3, [pc, #28]	; (7fd8 <vTaskDelay+0x38>)
    7fba:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    7fbc:	4b07      	ldr	r3, [pc, #28]	; (7fdc <vTaskDelay+0x3c>)
    7fbe:	0029      	movs	r1, r5
    7fc0:	0020      	movs	r0, r4
    7fc2:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
    7fc4:	4b06      	ldr	r3, [pc, #24]	; (7fe0 <vTaskDelay+0x40>)
    7fc6:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
    7fc8:	2800      	cmp	r0, #0
    7fca:	d1ee      	bne.n	7faa <vTaskDelay+0xa>
    7fcc:	e7eb      	b.n	7fa6 <vTaskDelay+0x6>
    7fce:	46c0      	nop			; (mov r8, r8)
    7fd0:	000070c9 	.word	0x000070c9
    7fd4:	20000320 	.word	0x20000320
    7fd8:	00007d19 	.word	0x00007d19
    7fdc:	00007a25 	.word	0x00007a25
    7fe0:	00007e3d 	.word	0x00007e3d

00007fe4 <vTaskSwitchContext>:
{
    7fe4:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    7fe6:	4b15      	ldr	r3, [pc, #84]	; (803c <vTaskSwitchContext+0x58>)
    7fe8:	681a      	ldr	r2, [r3, #0]
    7fea:	4b15      	ldr	r3, [pc, #84]	; (8040 <vTaskSwitchContext+0x5c>)
    7fec:	2a00      	cmp	r2, #0
    7fee:	d002      	beq.n	7ff6 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
    7ff0:	2201      	movs	r2, #1
    7ff2:	601a      	str	r2, [r3, #0]
}
    7ff4:	bd30      	pop	{r4, r5, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    7ff6:	2514      	movs	r5, #20
    7ff8:	4812      	ldr	r0, [pc, #72]	; (8044 <vTaskSwitchContext+0x60>)
		xYieldPending = pdFALSE;
    7ffa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    7ffc:	6802      	ldr	r2, [r0, #0]
    7ffe:	4912      	ldr	r1, [pc, #72]	; (8048 <vTaskSwitchContext+0x64>)
    8000:	002b      	movs	r3, r5
    8002:	4353      	muls	r3, r2
    8004:	585c      	ldr	r4, [r3, r1]
    8006:	2c00      	cmp	r4, #0
    8008:	d012      	beq.n	8030 <vTaskSwitchContext+0x4c>
    800a:	18cc      	adds	r4, r1, r3
    800c:	6865      	ldr	r5, [r4, #4]
    800e:	3308      	adds	r3, #8
    8010:	686d      	ldr	r5, [r5, #4]
    8012:	18cb      	adds	r3, r1, r3
    8014:	6065      	str	r5, [r4, #4]
    8016:	429d      	cmp	r5, r3
    8018:	d101      	bne.n	801e <vTaskSwitchContext+0x3a>
    801a:	686b      	ldr	r3, [r5, #4]
    801c:	6063      	str	r3, [r4, #4]
    801e:	2314      	movs	r3, #20
    8020:	4353      	muls	r3, r2
    8022:	18c9      	adds	r1, r1, r3
    8024:	684b      	ldr	r3, [r1, #4]
    8026:	68d9      	ldr	r1, [r3, #12]
    8028:	4b08      	ldr	r3, [pc, #32]	; (804c <vTaskSwitchContext+0x68>)
    802a:	6019      	str	r1, [r3, #0]
    802c:	6002      	str	r2, [r0, #0]
}
    802e:	e7e1      	b.n	7ff4 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
    8030:	2a00      	cmp	r2, #0
    8032:	d101      	bne.n	8038 <vTaskSwitchContext+0x54>
    8034:	b672      	cpsid	i
    8036:	e7fe      	b.n	8036 <vTaskSwitchContext+0x52>
    8038:	3a01      	subs	r2, #1
    803a:	e7e1      	b.n	8000 <vTaskSwitchContext+0x1c>
    803c:	20000320 	.word	0x20000320
    8040:	200003a4 	.word	0x200003a4
    8044:	20000328 	.word	0x20000328
    8048:	200002b0 	.word	0x200002b0
    804c:	200002a4 	.word	0x200002a4

00008050 <vTaskPlaceOnEventList>:
{
    8050:	b510      	push	{r4, lr}
    8052:	000c      	movs	r4, r1
	configASSERT( pxEventList );
    8054:	2800      	cmp	r0, #0
    8056:	d101      	bne.n	805c <vTaskPlaceOnEventList+0xc>
    8058:	b672      	cpsid	i
    805a:	e7fe      	b.n	805a <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    805c:	4b04      	ldr	r3, [pc, #16]	; (8070 <vTaskPlaceOnEventList+0x20>)
    805e:	6819      	ldr	r1, [r3, #0]
    8060:	4b04      	ldr	r3, [pc, #16]	; (8074 <vTaskPlaceOnEventList+0x24>)
    8062:	3118      	adds	r1, #24
    8064:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    8066:	2101      	movs	r1, #1
    8068:	0020      	movs	r0, r4
    806a:	4b03      	ldr	r3, [pc, #12]	; (8078 <vTaskPlaceOnEventList+0x28>)
    806c:	4798      	blx	r3
}
    806e:	bd10      	pop	{r4, pc}
    8070:	200002a4 	.word	0x200002a4
    8074:	00007221 	.word	0x00007221
    8078:	00007a25 	.word	0x00007a25

0000807c <vTaskPlaceOnEventListRestricted>:
	{
    807c:	b570      	push	{r4, r5, r6, lr}
    807e:	000c      	movs	r4, r1
    8080:	0015      	movs	r5, r2
		configASSERT( pxEventList );
    8082:	2800      	cmp	r0, #0
    8084:	d101      	bne.n	808a <vTaskPlaceOnEventListRestricted+0xe>
    8086:	b672      	cpsid	i
    8088:	e7fe      	b.n	8088 <vTaskPlaceOnEventListRestricted+0xc>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    808a:	4b07      	ldr	r3, [pc, #28]	; (80a8 <vTaskPlaceOnEventListRestricted+0x2c>)
    808c:	6819      	ldr	r1, [r3, #0]
    808e:	4b07      	ldr	r3, [pc, #28]	; (80ac <vTaskPlaceOnEventListRestricted+0x30>)
    8090:	3118      	adds	r1, #24
    8092:	4798      	blx	r3
		if( xWaitIndefinitely != pdFALSE )
    8094:	2d00      	cmp	r5, #0
    8096:	d001      	beq.n	809c <vTaskPlaceOnEventListRestricted+0x20>
			xTicksToWait = portMAX_DELAY;
    8098:	2401      	movs	r4, #1
    809a:	4264      	negs	r4, r4
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    809c:	0029      	movs	r1, r5
    809e:	0020      	movs	r0, r4
    80a0:	4b03      	ldr	r3, [pc, #12]	; (80b0 <vTaskPlaceOnEventListRestricted+0x34>)
    80a2:	4798      	blx	r3
	}
    80a4:	bd70      	pop	{r4, r5, r6, pc}
    80a6:	46c0      	nop			; (mov r8, r8)
    80a8:	200002a4 	.word	0x200002a4
    80ac:	00007209 	.word	0x00007209
    80b0:	00007a25 	.word	0x00007a25

000080b4 <xTaskRemoveFromEventList>:
{
    80b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    80b6:	68c3      	ldr	r3, [r0, #12]
    80b8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
    80ba:	2c00      	cmp	r4, #0
    80bc:	d101      	bne.n	80c2 <xTaskRemoveFromEventList+0xe>
    80be:	b672      	cpsid	i
    80c0:	e7fe      	b.n	80c0 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    80c2:	0026      	movs	r6, r4
    80c4:	3618      	adds	r6, #24
    80c6:	0030      	movs	r0, r6
    80c8:	4f11      	ldr	r7, [pc, #68]	; (8110 <xTaskRemoveFromEventList+0x5c>)
    80ca:	47b8      	blx	r7
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    80cc:	4b11      	ldr	r3, [pc, #68]	; (8114 <xTaskRemoveFromEventList+0x60>)
    80ce:	4d12      	ldr	r5, [pc, #72]	; (8118 <xTaskRemoveFromEventList+0x64>)
    80d0:	681b      	ldr	r3, [r3, #0]
    80d2:	2b00      	cmp	r3, #0
    80d4:	d119      	bne.n	810a <xTaskRemoveFromEventList+0x56>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    80d6:	1d26      	adds	r6, r4, #4
    80d8:	0030      	movs	r0, r6
    80da:	47b8      	blx	r7
		prvAddTaskToReadyList( pxUnblockedTCB );
    80dc:	4a0f      	ldr	r2, [pc, #60]	; (811c <xTaskRemoveFromEventList+0x68>)
    80de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    80e0:	6811      	ldr	r1, [r2, #0]
    80e2:	428b      	cmp	r3, r1
    80e4:	d900      	bls.n	80e8 <xTaskRemoveFromEventList+0x34>
    80e6:	6013      	str	r3, [r2, #0]
    80e8:	2014      	movs	r0, #20
    80ea:	0031      	movs	r1, r6
    80ec:	4343      	muls	r3, r0
    80ee:	480c      	ldr	r0, [pc, #48]	; (8120 <xTaskRemoveFromEventList+0x6c>)
    80f0:	18c0      	adds	r0, r0, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    80f2:	47a8      	blx	r5
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    80f4:	4b0b      	ldr	r3, [pc, #44]	; (8124 <xTaskRemoveFromEventList+0x70>)
    80f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    80f8:	681b      	ldr	r3, [r3, #0]
		xReturn = pdFALSE;
    80fa:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    80fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    80fe:	429a      	cmp	r2, r3
    8100:	d902      	bls.n	8108 <xTaskRemoveFromEventList+0x54>
		xYieldPending = pdTRUE;
    8102:	4b09      	ldr	r3, [pc, #36]	; (8128 <xTaskRemoveFromEventList+0x74>)
    8104:	3001      	adds	r0, #1
    8106:	6018      	str	r0, [r3, #0]
}
    8108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    810a:	0031      	movs	r1, r6
    810c:	4807      	ldr	r0, [pc, #28]	; (812c <xTaskRemoveFromEventList+0x78>)
    810e:	e7f0      	b.n	80f2 <xTaskRemoveFromEventList+0x3e>
    8110:	0000724f 	.word	0x0000724f
    8114:	20000320 	.word	0x20000320
    8118:	00007209 	.word	0x00007209
    811c:	20000328 	.word	0x20000328
    8120:	200002b0 	.word	0x200002b0
    8124:	200002a4 	.word	0x200002a4
    8128:	200003a4 	.word	0x200003a4
    812c:	20000360 	.word	0x20000360

00008130 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    8130:	4b03      	ldr	r3, [pc, #12]	; (8140 <vTaskInternalSetTimeOutState+0x10>)
    8132:	681b      	ldr	r3, [r3, #0]
    8134:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    8136:	4b03      	ldr	r3, [pc, #12]	; (8144 <vTaskInternalSetTimeOutState+0x14>)
    8138:	681b      	ldr	r3, [r3, #0]
    813a:	6043      	str	r3, [r0, #4]
}
    813c:	4770      	bx	lr
    813e:	46c0      	nop			; (mov r8, r8)
    8140:	2000035c 	.word	0x2000035c
    8144:	200003a0 	.word	0x200003a0

00008148 <xTaskCheckForTimeOut>:
{
    8148:	b570      	push	{r4, r5, r6, lr}
    814a:	0005      	movs	r5, r0
    814c:	000c      	movs	r4, r1
	configASSERT( pxTimeOut );
    814e:	2800      	cmp	r0, #0
    8150:	d101      	bne.n	8156 <xTaskCheckForTimeOut+0xe>
    8152:	b672      	cpsid	i
    8154:	e7fe      	b.n	8154 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
    8156:	2900      	cmp	r1, #0
    8158:	d101      	bne.n	815e <xTaskCheckForTimeOut+0x16>
    815a:	b672      	cpsid	i
    815c:	e7fe      	b.n	815c <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
    815e:	4b11      	ldr	r3, [pc, #68]	; (81a4 <xTaskCheckForTimeOut+0x5c>)
    8160:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    8162:	4b11      	ldr	r3, [pc, #68]	; (81a8 <xTaskCheckForTimeOut+0x60>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    8164:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
    8166:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
    8168:	6823      	ldr	r3, [r4, #0]
				xReturn = pdFALSE;
    816a:	2600      	movs	r6, #0
			if( *pxTicksToWait == portMAX_DELAY )
    816c:	1c58      	adds	r0, r3, #1
    816e:	d010      	beq.n	8192 <xTaskCheckForTimeOut+0x4a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    8170:	480e      	ldr	r0, [pc, #56]	; (81ac <xTaskCheckForTimeOut+0x64>)
    8172:	682e      	ldr	r6, [r5, #0]
    8174:	6800      	ldr	r0, [r0, #0]
    8176:	4286      	cmp	r6, r0
    8178:	d002      	beq.n	8180 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
    817a:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    817c:	428a      	cmp	r2, r1
    817e:	d208      	bcs.n	8192 <xTaskCheckForTimeOut+0x4a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    8180:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    8182:	429a      	cmp	r2, r3
    8184:	d209      	bcs.n	819a <xTaskCheckForTimeOut+0x52>
			*pxTicksToWait -= xElapsedTime;
    8186:	1a9b      	subs	r3, r3, r2
    8188:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
    818a:	0028      	movs	r0, r5
    818c:	4b08      	ldr	r3, [pc, #32]	; (81b0 <xTaskCheckForTimeOut+0x68>)
    818e:	4798      	blx	r3
			xReturn = pdFALSE;
    8190:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
    8192:	4b08      	ldr	r3, [pc, #32]	; (81b4 <xTaskCheckForTimeOut+0x6c>)
    8194:	4798      	blx	r3
}
    8196:	0030      	movs	r0, r6
    8198:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
    819a:	2300      	movs	r3, #0
			xReturn = pdTRUE;
    819c:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
    819e:	6023      	str	r3, [r4, #0]
    81a0:	e7f7      	b.n	8192 <xTaskCheckForTimeOut+0x4a>
    81a2:	46c0      	nop			; (mov r8, r8)
    81a4:	000070e1 	.word	0x000070e1
    81a8:	200003a0 	.word	0x200003a0
    81ac:	2000035c 	.word	0x2000035c
    81b0:	00008131 	.word	0x00008131
    81b4:	000070f9 	.word	0x000070f9

000081b8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    81b8:	2201      	movs	r2, #1
    81ba:	4b01      	ldr	r3, [pc, #4]	; (81c0 <vTaskMissedYield+0x8>)
    81bc:	601a      	str	r2, [r3, #0]
}
    81be:	4770      	bx	lr
    81c0:	200003a4 	.word	0x200003a4

000081c4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
    81c4:	4b05      	ldr	r3, [pc, #20]	; (81dc <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
    81c6:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
    81c8:	681b      	ldr	r3, [r3, #0]
    81ca:	2b00      	cmp	r3, #0
    81cc:	d004      	beq.n	81d8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    81ce:	4b04      	ldr	r3, [pc, #16]	; (81e0 <xTaskGetSchedulerState+0x1c>)
    81d0:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
    81d2:	4243      	negs	r3, r0
    81d4:	4158      	adcs	r0, r3
    81d6:	0040      	lsls	r0, r0, #1
	}
    81d8:	4770      	bx	lr
    81da:	46c0      	nop			; (mov r8, r8)
    81dc:	20000374 	.word	0x20000374
    81e0:	20000320 	.word	0x20000320

000081e4 <xTaskPriorityInherit>:
	{
    81e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81e6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    81e8:	d02e      	beq.n	8248 <xTaskPriorityInherit+0x64>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
    81ea:	4d1a      	ldr	r5, [pc, #104]	; (8254 <xTaskPriorityInherit+0x70>)
    81ec:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    81ee:	682b      	ldr	r3, [r5, #0]
    81f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    81f2:	4299      	cmp	r1, r3
    81f4:	d222      	bcs.n	823c <xTaskPriorityInherit+0x58>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    81f6:	6983      	ldr	r3, [r0, #24]
    81f8:	2b00      	cmp	r3, #0
    81fa:	db04      	blt.n	8206 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    81fc:	2205      	movs	r2, #5
    81fe:	682b      	ldr	r3, [r5, #0]
    8200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8202:	1ad2      	subs	r2, r2, r3
    8204:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
    8206:	2314      	movs	r3, #20
    8208:	434b      	muls	r3, r1
    820a:	4f13      	ldr	r7, [pc, #76]	; (8258 <xTaskPriorityInherit+0x74>)
    820c:	6962      	ldr	r2, [r4, #20]
    820e:	18fb      	adds	r3, r7, r3
    8210:	429a      	cmp	r2, r3
    8212:	d11a      	bne.n	824a <xTaskPriorityInherit+0x66>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    8214:	1d26      	adds	r6, r4, #4
    8216:	4b11      	ldr	r3, [pc, #68]	; (825c <xTaskPriorityInherit+0x78>)
    8218:	0030      	movs	r0, r6
    821a:	4798      	blx	r3
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    821c:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
    821e:	4a10      	ldr	r2, [pc, #64]	; (8260 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    8220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    8222:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    8224:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
    8226:	428b      	cmp	r3, r1
    8228:	d900      	bls.n	822c <xTaskPriorityInherit+0x48>
    822a:	6013      	str	r3, [r2, #0]
    822c:	2014      	movs	r0, #20
    822e:	4358      	muls	r0, r3
    8230:	0031      	movs	r1, r6
    8232:	1838      	adds	r0, r7, r0
    8234:	4b0b      	ldr	r3, [pc, #44]	; (8264 <xTaskPriorityInherit+0x80>)
    8236:	4798      	blx	r3
				xReturn = pdTRUE;
    8238:	2001      	movs	r0, #1
    823a:	e005      	b.n	8248 <xTaskPriorityInherit+0x64>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
    823c:	682b      	ldr	r3, [r5, #0]
    823e:	6c00      	ldr	r0, [r0, #64]	; 0x40
    8240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8242:	4298      	cmp	r0, r3
    8244:	4180      	sbcs	r0, r0
    8246:	4240      	negs	r0, r0
	}
    8248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    824a:	682b      	ldr	r3, [r5, #0]
    824c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    824e:	62e3      	str	r3, [r4, #44]	; 0x2c
    8250:	e7f2      	b.n	8238 <xTaskPriorityInherit+0x54>
    8252:	46c0      	nop			; (mov r8, r8)
    8254:	200002a4 	.word	0x200002a4
    8258:	200002b0 	.word	0x200002b0
    825c:	0000724f 	.word	0x0000724f
    8260:	20000328 	.word	0x20000328
    8264:	00007209 	.word	0x00007209

00008268 <xTaskPriorityDisinherit>:
	{
    8268:	b570      	push	{r4, r5, r6, lr}
    826a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    826c:	d101      	bne.n	8272 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
    826e:	2000      	movs	r0, #0
	}
    8270:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
    8272:	4b15      	ldr	r3, [pc, #84]	; (82c8 <xTaskPriorityDisinherit+0x60>)
    8274:	681b      	ldr	r3, [r3, #0]
    8276:	4298      	cmp	r0, r3
    8278:	d001      	beq.n	827e <xTaskPriorityDisinherit+0x16>
    827a:	b672      	cpsid	i
    827c:	e7fe      	b.n	827c <xTaskPriorityDisinherit+0x14>
			configASSERT( pxTCB->uxMutexesHeld );
    827e:	6c43      	ldr	r3, [r0, #68]	; 0x44
    8280:	2b00      	cmp	r3, #0
    8282:	d101      	bne.n	8288 <xTaskPriorityDisinherit+0x20>
    8284:	b672      	cpsid	i
    8286:	e7fe      	b.n	8286 <xTaskPriorityDisinherit+0x1e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    8288:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    828a:	6c01      	ldr	r1, [r0, #64]	; 0x40
			( pxTCB->uxMutexesHeld )--;
    828c:	3b01      	subs	r3, #1
    828e:	6443      	str	r3, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    8290:	428a      	cmp	r2, r1
    8292:	d0ec      	beq.n	826e <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    8294:	2b00      	cmp	r3, #0
    8296:	d1ea      	bne.n	826e <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    8298:	1d05      	adds	r5, r0, #4
    829a:	4b0c      	ldr	r3, [pc, #48]	; (82cc <xTaskPriorityDisinherit+0x64>)
    829c:	0028      	movs	r0, r5
    829e:	4798      	blx	r3
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    82a0:	2305      	movs	r3, #5
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    82a2:	6c20      	ldr	r0, [r4, #64]	; 0x40
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    82a4:	1a1b      	subs	r3, r3, r0
    82a6:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
    82a8:	4b09      	ldr	r3, [pc, #36]	; (82d0 <xTaskPriorityDisinherit+0x68>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    82aa:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    82ac:	681a      	ldr	r2, [r3, #0]
    82ae:	4290      	cmp	r0, r2
    82b0:	d900      	bls.n	82b4 <xTaskPriorityDisinherit+0x4c>
    82b2:	6018      	str	r0, [r3, #0]
    82b4:	2314      	movs	r3, #20
    82b6:	4343      	muls	r3, r0
    82b8:	4806      	ldr	r0, [pc, #24]	; (82d4 <xTaskPriorityDisinherit+0x6c>)
    82ba:	0029      	movs	r1, r5
    82bc:	18c0      	adds	r0, r0, r3
    82be:	4b06      	ldr	r3, [pc, #24]	; (82d8 <xTaskPriorityDisinherit+0x70>)
    82c0:	4798      	blx	r3
					xReturn = pdTRUE;
    82c2:	2001      	movs	r0, #1
		return xReturn;
    82c4:	e7d4      	b.n	8270 <xTaskPriorityDisinherit+0x8>
    82c6:	46c0      	nop			; (mov r8, r8)
    82c8:	200002a4 	.word	0x200002a4
    82cc:	0000724f 	.word	0x0000724f
    82d0:	20000328 	.word	0x20000328
    82d4:	200002b0 	.word	0x200002b0
    82d8:	00007209 	.word	0x00007209

000082dc <vTaskPriorityDisinheritAfterTimeout>:
	{
    82dc:	b570      	push	{r4, r5, r6, lr}
    82de:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
    82e0:	d031      	beq.n	8346 <vTaskPriorityDisinheritAfterTimeout+0x6a>
			configASSERT( pxTCB->uxMutexesHeld );
    82e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    82e4:	2b00      	cmp	r3, #0
    82e6:	d101      	bne.n	82ec <vTaskPriorityDisinheritAfterTimeout+0x10>
    82e8:	b672      	cpsid	i
    82ea:	e7fe      	b.n	82ea <vTaskPriorityDisinheritAfterTimeout+0xe>
    82ec:	6c02      	ldr	r2, [r0, #64]	; 0x40
    82ee:	428a      	cmp	r2, r1
    82f0:	d200      	bcs.n	82f4 <vTaskPriorityDisinheritAfterTimeout+0x18>
    82f2:	000a      	movs	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
    82f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    82f6:	4290      	cmp	r0, r2
    82f8:	d025      	beq.n	8346 <vTaskPriorityDisinheritAfterTimeout+0x6a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
    82fa:	2b01      	cmp	r3, #1
    82fc:	d123      	bne.n	8346 <vTaskPriorityDisinheritAfterTimeout+0x6a>
					configASSERT( pxTCB != pxCurrentTCB );
    82fe:	4b12      	ldr	r3, [pc, #72]	; (8348 <vTaskPriorityDisinheritAfterTimeout+0x6c>)
    8300:	681b      	ldr	r3, [r3, #0]
    8302:	429c      	cmp	r4, r3
    8304:	d101      	bne.n	830a <vTaskPriorityDisinheritAfterTimeout+0x2e>
    8306:	b672      	cpsid	i
    8308:	e7fe      	b.n	8308 <vTaskPriorityDisinheritAfterTimeout+0x2c>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    830a:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
    830c:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    830e:	2b00      	cmp	r3, #0
    8310:	db02      	blt.n	8318 <vTaskPriorityDisinheritAfterTimeout+0x3c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8312:	2105      	movs	r1, #5
    8314:	1a8a      	subs	r2, r1, r2
    8316:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    8318:	2314      	movs	r3, #20
    831a:	4343      	muls	r3, r0
    831c:	4e0b      	ldr	r6, [pc, #44]	; (834c <vTaskPriorityDisinheritAfterTimeout+0x70>)
    831e:	6962      	ldr	r2, [r4, #20]
    8320:	18f3      	adds	r3, r6, r3
    8322:	429a      	cmp	r2, r3
    8324:	d10f      	bne.n	8346 <vTaskPriorityDisinheritAfterTimeout+0x6a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    8326:	1d25      	adds	r5, r4, #4
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <vTaskPriorityDisinheritAfterTimeout+0x74>)
    832a:	0028      	movs	r0, r5
    832c:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
    832e:	4a09      	ldr	r2, [pc, #36]	; (8354 <vTaskPriorityDisinheritAfterTimeout+0x78>)
    8330:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    8332:	6811      	ldr	r1, [r2, #0]
    8334:	428b      	cmp	r3, r1
    8336:	d900      	bls.n	833a <vTaskPriorityDisinheritAfterTimeout+0x5e>
    8338:	6013      	str	r3, [r2, #0]
    833a:	2014      	movs	r0, #20
    833c:	4358      	muls	r0, r3
    833e:	0029      	movs	r1, r5
    8340:	1830      	adds	r0, r6, r0
    8342:	4b05      	ldr	r3, [pc, #20]	; (8358 <vTaskPriorityDisinheritAfterTimeout+0x7c>)
    8344:	4798      	blx	r3
	}
    8346:	bd70      	pop	{r4, r5, r6, pc}
    8348:	200002a4 	.word	0x200002a4
    834c:	200002b0 	.word	0x200002b0
    8350:	0000724f 	.word	0x0000724f
    8354:	20000328 	.word	0x20000328
    8358:	00007209 	.word	0x00007209

0000835c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
    835c:	4b04      	ldr	r3, [pc, #16]	; (8370 <pvTaskIncrementMutexHeldCount+0x14>)
    835e:	681a      	ldr	r2, [r3, #0]
    8360:	2a00      	cmp	r2, #0
    8362:	d003      	beq.n	836c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
    8364:	6819      	ldr	r1, [r3, #0]
    8366:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    8368:	3201      	adds	r2, #1
    836a:	644a      	str	r2, [r1, #68]	; 0x44
		return pxCurrentTCB;
    836c:	6818      	ldr	r0, [r3, #0]
	}
    836e:	4770      	bx	lr
    8370:	200002a4 	.word	0x200002a4

00008374 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    8374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    8376:	4b0d      	ldr	r3, [pc, #52]	; (83ac <prvCheckForValidListAndQueue+0x38>)
    8378:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    837a:	4c0d      	ldr	r4, [pc, #52]	; (83b0 <prvCheckForValidListAndQueue+0x3c>)
    837c:	6823      	ldr	r3, [r4, #0]
    837e:	9301      	str	r3, [sp, #4]
    8380:	2b00      	cmp	r3, #0
    8382:	d110      	bne.n	83a6 <prvCheckForValidListAndQueue+0x32>
		{
			vListInitialise( &xActiveTimerList1 );
    8384:	4e0b      	ldr	r6, [pc, #44]	; (83b4 <prvCheckForValidListAndQueue+0x40>)
    8386:	4f0c      	ldr	r7, [pc, #48]	; (83b8 <prvCheckForValidListAndQueue+0x44>)
    8388:	0030      	movs	r0, r6
    838a:	47b8      	blx	r7
			vListInitialise( &xActiveTimerList2 );
    838c:	4d0b      	ldr	r5, [pc, #44]	; (83bc <prvCheckForValidListAndQueue+0x48>)
    838e:	0028      	movs	r0, r5
    8390:	47b8      	blx	r7
			pxCurrentTimerList = &xActiveTimerList1;
    8392:	4b0b      	ldr	r3, [pc, #44]	; (83c0 <prvCheckForValidListAndQueue+0x4c>)

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    8394:	9a01      	ldr	r2, [sp, #4]
			pxCurrentTimerList = &xActiveTimerList1;
    8396:	601e      	str	r6, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    8398:	4b0a      	ldr	r3, [pc, #40]	; (83c4 <prvCheckForValidListAndQueue+0x50>)
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    839a:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
    839c:	601d      	str	r5, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    839e:	2005      	movs	r0, #5
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <prvCheckForValidListAndQueue+0x54>)
    83a2:	4798      	blx	r3
    83a4:	6020      	str	r0, [r4, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    83a6:	4b09      	ldr	r3, [pc, #36]	; (83cc <prvCheckForValidListAndQueue+0x58>)
    83a8:	4798      	blx	r3
}
    83aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    83ac:	000070e1 	.word	0x000070e1
    83b0:	200003dc 	.word	0x200003dc
    83b4:	200003b0 	.word	0x200003b0
    83b8:	000071ed 	.word	0x000071ed
    83bc:	200003c4 	.word	0x200003c4
    83c0:	200003a8 	.word	0x200003a8
    83c4:	200003ac 	.word	0x200003ac
    83c8:	0000749d 	.word	0x0000749d
    83cc:	000070f9 	.word	0x000070f9

000083d0 <prvInsertTimerInActiveList>:
{
    83d0:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    83d2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    83d4:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
    83d6:	4291      	cmp	r1, r2
    83d8:	d80c      	bhi.n	83f4 <prvInsertTimerInActiveList+0x24>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    83da:	1ad2      	subs	r2, r2, r3
    83dc:	6983      	ldr	r3, [r0, #24]
			xProcessTimerNow = pdTRUE;
    83de:	2401      	movs	r4, #1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    83e0:	429a      	cmp	r2, r3
    83e2:	d205      	bcs.n	83f0 <prvInsertTimerInActiveList+0x20>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    83e4:	4b07      	ldr	r3, [pc, #28]	; (8404 <prvInsertTimerInActiveList+0x34>)
    83e6:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    83e8:	6818      	ldr	r0, [r3, #0]
    83ea:	4b07      	ldr	r3, [pc, #28]	; (8408 <prvInsertTimerInActiveList+0x38>)
    83ec:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
    83ee:	2400      	movs	r4, #0
}
    83f0:	0020      	movs	r0, r4
    83f2:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    83f4:	429a      	cmp	r2, r3
    83f6:	d202      	bcs.n	83fe <prvInsertTimerInActiveList+0x2e>
			xProcessTimerNow = pdTRUE;
    83f8:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    83fa:	4299      	cmp	r1, r3
    83fc:	d2f8      	bcs.n	83f0 <prvInsertTimerInActiveList+0x20>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    83fe:	1d01      	adds	r1, r0, #4
    8400:	4b02      	ldr	r3, [pc, #8]	; (840c <prvInsertTimerInActiveList+0x3c>)
    8402:	e7f1      	b.n	83e8 <prvInsertTimerInActiveList+0x18>
    8404:	200003ac 	.word	0x200003ac
    8408:	00007221 	.word	0x00007221
    840c:	200003a8 	.word	0x200003a8

00008410 <xTimerCreateTimerTask>:
	prvCheckForValidListAndQueue();
    8410:	4b0b      	ldr	r3, [pc, #44]	; (8440 <xTimerCreateTimerTask+0x30>)
{
    8412:	b513      	push	{r0, r1, r4, lr}
	prvCheckForValidListAndQueue();
    8414:	4798      	blx	r3
	if( xTimerQueue != NULL )
    8416:	4b0b      	ldr	r3, [pc, #44]	; (8444 <xTimerCreateTimerTask+0x34>)
    8418:	681b      	ldr	r3, [r3, #0]
    841a:	2b00      	cmp	r3, #0
    841c:	d101      	bne.n	8422 <xTimerCreateTimerTask+0x12>
	configASSERT( xReturn );
    841e:	b672      	cpsid	i
    8420:	e7fe      	b.n	8420 <xTimerCreateTimerTask+0x10>
			xReturn = xTaskCreate(	prvTimerTask,
    8422:	4b09      	ldr	r3, [pc, #36]	; (8448 <xTimerCreateTimerTask+0x38>)
    8424:	2282      	movs	r2, #130	; 0x82
    8426:	9301      	str	r3, [sp, #4]
    8428:	2304      	movs	r3, #4
    842a:	0052      	lsls	r2, r2, #1
    842c:	9300      	str	r3, [sp, #0]
    842e:	4907      	ldr	r1, [pc, #28]	; (844c <xTimerCreateTimerTask+0x3c>)
    8430:	2300      	movs	r3, #0
    8432:	4807      	ldr	r0, [pc, #28]	; (8450 <xTimerCreateTimerTask+0x40>)
    8434:	4c07      	ldr	r4, [pc, #28]	; (8454 <xTimerCreateTimerTask+0x44>)
    8436:	47a0      	blx	r4
	configASSERT( xReturn );
    8438:	2800      	cmp	r0, #0
    843a:	d0f0      	beq.n	841e <xTimerCreateTimerTask+0xe>
}
    843c:	bd16      	pop	{r1, r2, r4, pc}
    843e:	46c0      	nop			; (mov r8, r8)
    8440:	00008375 	.word	0x00008375
    8444:	200003dc 	.word	0x200003dc
    8448:	200003e0 	.word	0x200003e0
    844c:	0000d825 	.word	0x0000d825
    8450:	00008565 	.word	0x00008565
    8454:	00007b09 	.word	0x00007b09

00008458 <xTimerCreate>:
	{
    8458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    845a:	0007      	movs	r7, r0
    845c:	9301      	str	r3, [sp, #4]
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    845e:	2028      	movs	r0, #40	; 0x28
    8460:	4b0b      	ldr	r3, [pc, #44]	; (8490 <xTimerCreate+0x38>)
	{
    8462:	000d      	movs	r5, r1
    8464:	0016      	movs	r6, r2
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
    8466:	4798      	blx	r3
    8468:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
    846a:	d00f      	beq.n	848c <xTimerCreate+0x34>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
    846c:	2d00      	cmp	r5, #0
    846e:	d101      	bne.n	8474 <xTimerCreate+0x1c>
    8470:	b672      	cpsid	i
    8472:	e7fe      	b.n	8472 <xTimerCreate+0x1a>
		prvCheckForValidListAndQueue();
    8474:	4b07      	ldr	r3, [pc, #28]	; (8494 <xTimerCreate+0x3c>)
    8476:	4798      	blx	r3
		pxNewTimer->pvTimerID = pvTimerID;
    8478:	9b01      	ldr	r3, [sp, #4]
		pxNewTimer->pcTimerName = pcTimerName;
    847a:	6027      	str	r7, [r4, #0]
		pxNewTimer->pvTimerID = pvTimerID;
    847c:	6223      	str	r3, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    847e:	9b08      	ldr	r3, [sp, #32]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    8480:	61a5      	str	r5, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    8482:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->uxAutoReload = uxAutoReload;
    8484:	61e6      	str	r6, [r4, #28]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    8486:	1d20      	adds	r0, r4, #4
    8488:	4b03      	ldr	r3, [pc, #12]	; (8498 <xTimerCreate+0x40>)
    848a:	4798      	blx	r3
	}
    848c:	0020      	movs	r0, r4
    848e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8490:	000071a5 	.word	0x000071a5
    8494:	00008375 	.word	0x00008375
    8498:	00007203 	.word	0x00007203

0000849c <xTimerGenericCommand>:
{
    849c:	b5f0      	push	{r4, r5, r6, r7, lr}
    849e:	0017      	movs	r7, r2
    84a0:	b085      	sub	sp, #20
    84a2:	0006      	movs	r6, r0
    84a4:	001a      	movs	r2, r3
	configASSERT( xTimer );
    84a6:	2800      	cmp	r0, #0
    84a8:	d101      	bne.n	84ae <xTimerGenericCommand+0x12>
    84aa:	b672      	cpsid	i
    84ac:	e7fe      	b.n	84ac <xTimerGenericCommand+0x10>
	if( xTimerQueue != NULL )
    84ae:	4d0d      	ldr	r5, [pc, #52]	; (84e4 <xTimerGenericCommand+0x48>)
    84b0:	682c      	ldr	r4, [r5, #0]
BaseType_t xReturn = pdFAIL;
    84b2:	1e20      	subs	r0, r4, #0
	if( xTimerQueue != NULL )
    84b4:	d00f      	beq.n	84d6 <xTimerGenericCommand+0x3a>
		xMessage.xMessageID = xCommandID;
    84b6:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    84b8:	9701      	str	r7, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    84ba:	9602      	str	r6, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    84bc:	2905      	cmp	r1, #5
    84be:	dc0c      	bgt.n	84da <xTimerGenericCommand+0x3e>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    84c0:	4b09      	ldr	r3, [pc, #36]	; (84e8 <xTimerGenericCommand+0x4c>)
    84c2:	4798      	blx	r3
    84c4:	4c09      	ldr	r4, [pc, #36]	; (84ec <xTimerGenericCommand+0x50>)
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    84c6:	2300      	movs	r3, #0
    84c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    84ca:	2802      	cmp	r0, #2
    84cc:	d000      	beq.n	84d0 <xTimerGenericCommand+0x34>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    84ce:	001a      	movs	r2, r3
    84d0:	4669      	mov	r1, sp
    84d2:	6828      	ldr	r0, [r5, #0]
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    84d4:	47a0      	blx	r4
}
    84d6:	b005      	add	sp, #20
    84d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    84da:	0020      	movs	r0, r4
    84dc:	2300      	movs	r3, #0
    84de:	4669      	mov	r1, sp
    84e0:	4c03      	ldr	r4, [pc, #12]	; (84f0 <xTimerGenericCommand+0x54>)
    84e2:	e7f7      	b.n	84d4 <xTimerGenericCommand+0x38>
    84e4:	200003dc 	.word	0x200003dc
    84e8:	000081c5 	.word	0x000081c5
    84ec:	000074e5 	.word	0x000074e5
    84f0:	00007641 	.word	0x00007641

000084f4 <prvSwitchTimerLists>:
{
    84f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    84f6:	4d16      	ldr	r5, [pc, #88]	; (8550 <prvSwitchTimerLists+0x5c>)
    84f8:	682b      	ldr	r3, [r5, #0]
    84fa:	681a      	ldr	r2, [r3, #0]
    84fc:	2a00      	cmp	r2, #0
    84fe:	d104      	bne.n	850a <prvSwitchTimerLists+0x16>
	pxCurrentTimerList = pxOverflowTimerList;
    8500:	4a14      	ldr	r2, [pc, #80]	; (8554 <prvSwitchTimerLists+0x60>)
    8502:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
    8504:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
    8506:	6029      	str	r1, [r5, #0]
}
    8508:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    850a:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    850c:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    850e:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    8510:	1d27      	adds	r7, r4, #4
    8512:	4b11      	ldr	r3, [pc, #68]	; (8558 <prvSwitchTimerLists+0x64>)
    8514:	0038      	movs	r0, r7
    8516:	4798      	blx	r3
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    8518:	6a63      	ldr	r3, [r4, #36]	; 0x24
    851a:	0020      	movs	r0, r4
    851c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    851e:	69e3      	ldr	r3, [r4, #28]
    8520:	2b01      	cmp	r3, #1
    8522:	d1e8      	bne.n	84f6 <prvSwitchTimerLists+0x2>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    8524:	69a3      	ldr	r3, [r4, #24]
    8526:	18f3      	adds	r3, r6, r3
			if( xReloadTime > xNextExpireTime )
    8528:	429e      	cmp	r6, r3
    852a:	d206      	bcs.n	853a <prvSwitchTimerLists+0x46>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    852c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    852e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    8530:	0039      	movs	r1, r7
    8532:	6828      	ldr	r0, [r5, #0]
    8534:	4b09      	ldr	r3, [pc, #36]	; (855c <prvSwitchTimerLists+0x68>)
    8536:	4798      	blx	r3
    8538:	e7dd      	b.n	84f6 <prvSwitchTimerLists+0x2>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    853a:	2100      	movs	r1, #0
    853c:	0020      	movs	r0, r4
    853e:	9100      	str	r1, [sp, #0]
    8540:	000b      	movs	r3, r1
    8542:	0032      	movs	r2, r6
    8544:	4c06      	ldr	r4, [pc, #24]	; (8560 <prvSwitchTimerLists+0x6c>)
    8546:	47a0      	blx	r4
				configASSERT( xResult );
    8548:	2800      	cmp	r0, #0
    854a:	d1d4      	bne.n	84f6 <prvSwitchTimerLists+0x2>
    854c:	b672      	cpsid	i
    854e:	e7fe      	b.n	854e <prvSwitchTimerLists+0x5a>
    8550:	200003a8 	.word	0x200003a8
    8554:	200003ac 	.word	0x200003ac
    8558:	0000724f 	.word	0x0000724f
    855c:	00007221 	.word	0x00007221
    8560:	0000849d 	.word	0x0000849d

00008564 <prvTimerTask>:
{
    8564:	b5f0      	push	{r4, r5, r6, r7, lr}
    8566:	b089      	sub	sp, #36	; 0x24
		xNextExpireTime = ( TickType_t ) 0U;
    8568:	2700      	movs	r7, #0
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    856a:	4b5b      	ldr	r3, [pc, #364]	; (86d8 <prvTimerTask+0x174>)
    856c:	681b      	ldr	r3, [r3, #0]
    856e:	681a      	ldr	r2, [r3, #0]
    8570:	9203      	str	r2, [sp, #12]
	if( *pxListWasEmpty == pdFALSE )
    8572:	42ba      	cmp	r2, r7
    8574:	d001      	beq.n	857a <prvTimerTask+0x16>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    8576:	68db      	ldr	r3, [r3, #12]
    8578:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
    857a:	4b58      	ldr	r3, [pc, #352]	; (86dc <prvTimerTask+0x178>)
    857c:	4798      	blx	r3
	xTimeNow = xTaskGetTickCount();
    857e:	4b58      	ldr	r3, [pc, #352]	; (86e0 <prvTimerTask+0x17c>)
    8580:	4798      	blx	r3
	if( xTimeNow < xLastTime )
    8582:	4d58      	ldr	r5, [pc, #352]	; (86e4 <prvTimerTask+0x180>)
	xTimeNow = xTaskGetTickCount();
    8584:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
    8586:	682b      	ldr	r3, [r5, #0]
		*pxTimerListsWereSwitched = pdFALSE;
    8588:	2600      	movs	r6, #0
	if( xTimeNow < xLastTime )
    858a:	4298      	cmp	r0, r3
    858c:	d202      	bcs.n	8594 <prvTimerTask+0x30>
		prvSwitchTimerLists();
    858e:	4b56      	ldr	r3, [pc, #344]	; (86e8 <prvTimerTask+0x184>)
    8590:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    8592:	3601      	adds	r6, #1
	xLastTime = xTimeNow;
    8594:	602c      	str	r4, [r5, #0]
    8596:	4d55      	ldr	r5, [pc, #340]	; (86ec <prvTimerTask+0x188>)
		if( xTimerListsWereSwitched == pdFALSE )
    8598:	2e00      	cmp	r6, #0
    859a:	d171      	bne.n	8680 <prvTimerTask+0x11c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    859c:	9b03      	ldr	r3, [sp, #12]
    859e:	2b00      	cmp	r3, #0
    85a0:	d05d      	beq.n	865e <prvTimerTask+0xfa>
    85a2:	0030      	movs	r0, r6
    85a4:	42a7      	cmp	r7, r4
    85a6:	d85f      	bhi.n	8668 <prvTimerTask+0x104>
				( void ) xTaskResumeAll();
    85a8:	47a8      	blx	r5
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    85aa:	4b4b      	ldr	r3, [pc, #300]	; (86d8 <prvTimerTask+0x174>)
    85ac:	681b      	ldr	r3, [r3, #0]
    85ae:	68db      	ldr	r3, [r3, #12]
    85b0:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    85b2:	4b4f      	ldr	r3, [pc, #316]	; (86f0 <prvTimerTask+0x18c>)
    85b4:	1d28      	adds	r0, r5, #4
    85b6:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    85b8:	69eb      	ldr	r3, [r5, #28]
    85ba:	2b01      	cmp	r3, #1
    85bc:	d113      	bne.n	85e6 <prvTimerTask+0x82>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    85be:	69ab      	ldr	r3, [r5, #24]
    85c0:	0022      	movs	r2, r4
    85c2:	18f9      	adds	r1, r7, r3
    85c4:	0028      	movs	r0, r5
    85c6:	003b      	movs	r3, r7
    85c8:	4c4a      	ldr	r4, [pc, #296]	; (86f4 <prvTimerTask+0x190>)
    85ca:	47a0      	blx	r4
    85cc:	2800      	cmp	r0, #0
    85ce:	d00a      	beq.n	85e6 <prvTimerTask+0x82>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    85d0:	9600      	str	r6, [sp, #0]
    85d2:	0033      	movs	r3, r6
    85d4:	003a      	movs	r2, r7
    85d6:	0031      	movs	r1, r6
    85d8:	0028      	movs	r0, r5
    85da:	4c47      	ldr	r4, [pc, #284]	; (86f8 <prvTimerTask+0x194>)
    85dc:	47a0      	blx	r4
			configASSERT( xResult );
    85de:	2800      	cmp	r0, #0
    85e0:	d101      	bne.n	85e6 <prvTimerTask+0x82>
    85e2:	b672      	cpsid	i
    85e4:	e7fe      	b.n	85e4 <prvTimerTask+0x80>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    85e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    85e8:	0028      	movs	r0, r5
    85ea:	4798      	blx	r3
    85ec:	2784      	movs	r7, #132	; 0x84
    85ee:	00bf      	lsls	r7, r7, #2
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    85f0:	4b42      	ldr	r3, [pc, #264]	; (86fc <prvTimerTask+0x198>)
    85f2:	2200      	movs	r2, #0
    85f4:	6818      	ldr	r0, [r3, #0]
    85f6:	a904      	add	r1, sp, #16
    85f8:	4b41      	ldr	r3, [pc, #260]	; (8700 <prvTimerTask+0x19c>)
    85fa:	4798      	blx	r3
    85fc:	2800      	cmp	r0, #0
    85fe:	d0b3      	beq.n	8568 <prvTimerTask+0x4>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
    8600:	9b04      	ldr	r3, [sp, #16]
    8602:	2b00      	cmp	r3, #0
    8604:	da04      	bge.n	8610 <prvTimerTask+0xac>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
    8606:	9b05      	ldr	r3, [sp, #20]
    8608:	9907      	ldr	r1, [sp, #28]
    860a:	9806      	ldr	r0, [sp, #24]
    860c:	9303      	str	r3, [sp, #12]
    860e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    8610:	9b04      	ldr	r3, [sp, #16]
    8612:	9303      	str	r3, [sp, #12]
    8614:	2b00      	cmp	r3, #0
    8616:	dbeb      	blt.n	85f0 <prvTimerTask+0x8c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    8618:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    861a:	6963      	ldr	r3, [r4, #20]
    861c:	2b00      	cmp	r3, #0
    861e:	d002      	beq.n	8626 <prvTimerTask+0xc2>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    8620:	1d20      	adds	r0, r4, #4
    8622:	4b33      	ldr	r3, [pc, #204]	; (86f0 <prvTimerTask+0x18c>)
    8624:	4798      	blx	r3
	xTimeNow = xTaskGetTickCount();
    8626:	4b2e      	ldr	r3, [pc, #184]	; (86e0 <prvTimerTask+0x17c>)
    8628:	4798      	blx	r3
	if( xTimeNow < xLastTime )
    862a:	4e2e      	ldr	r6, [pc, #184]	; (86e4 <prvTimerTask+0x180>)
	xTimeNow = xTaskGetTickCount();
    862c:	0005      	movs	r5, r0
	if( xTimeNow < xLastTime )
    862e:	6833      	ldr	r3, [r6, #0]
    8630:	4298      	cmp	r0, r3
    8632:	d201      	bcs.n	8638 <prvTimerTask+0xd4>
		prvSwitchTimerLists();
    8634:	4b2c      	ldr	r3, [pc, #176]	; (86e8 <prvTimerTask+0x184>)
    8636:	4798      	blx	r3
    8638:	9b04      	ldr	r3, [sp, #16]
	xLastTime = xTimeNow;
    863a:	6035      	str	r5, [r6, #0]
    863c:	2b09      	cmp	r3, #9
    863e:	d8d7      	bhi.n	85f0 <prvTimerTask+0x8c>
    8640:	2201      	movs	r2, #1
    8642:	409a      	lsls	r2, r3
    8644:	0016      	movs	r6, r2
    8646:	0013      	movs	r3, r2
    8648:	403e      	ands	r6, r7
    864a:	d138      	bne.n	86be <prvTimerTask+0x15a>
    864c:	22c7      	movs	r2, #199	; 0xc7
    864e:	4213      	tst	r3, r2
    8650:	d118      	bne.n	8684 <prvTimerTask+0x120>
    8652:	069b      	lsls	r3, r3, #26
    8654:	d5cc      	bpl.n	85f0 <prvTimerTask+0x8c>
						vPortFree( pxTimer );
    8656:	0020      	movs	r0, r4
    8658:	4b2a      	ldr	r3, [pc, #168]	; (8704 <prvTimerTask+0x1a0>)
    865a:	4798      	blx	r3
    865c:	e7c8      	b.n	85f0 <prvTimerTask+0x8c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    865e:	4b2a      	ldr	r3, [pc, #168]	; (8708 <prvTimerTask+0x1a4>)
    8660:	681b      	ldr	r3, [r3, #0]
    8662:	681a      	ldr	r2, [r3, #0]
    8664:	4250      	negs	r0, r2
    8666:	4150      	adcs	r0, r2
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    8668:	4b24      	ldr	r3, [pc, #144]	; (86fc <prvTimerTask+0x198>)
    866a:	0002      	movs	r2, r0
    866c:	1b39      	subs	r1, r7, r4
    866e:	6818      	ldr	r0, [r3, #0]
    8670:	4b26      	ldr	r3, [pc, #152]	; (870c <prvTimerTask+0x1a8>)
    8672:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    8674:	47a8      	blx	r5
    8676:	2800      	cmp	r0, #0
    8678:	d1b8      	bne.n	85ec <prvTimerTask+0x88>
					portYIELD_WITHIN_API();
    867a:	4b25      	ldr	r3, [pc, #148]	; (8710 <prvTimerTask+0x1ac>)
    867c:	4798      	blx	r3
    867e:	e7b5      	b.n	85ec <prvTimerTask+0x88>
			( void ) xTaskResumeAll();
    8680:	47a8      	blx	r5
    8682:	e7b3      	b.n	85ec <prvTimerTask+0x88>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    8684:	9b05      	ldr	r3, [sp, #20]
    8686:	69a2      	ldr	r2, [r4, #24]
    8688:	0020      	movs	r0, r4
    868a:	1899      	adds	r1, r3, r2
    868c:	002a      	movs	r2, r5
    868e:	4d19      	ldr	r5, [pc, #100]	; (86f4 <prvTimerTask+0x190>)
    8690:	9303      	str	r3, [sp, #12]
    8692:	47a8      	blx	r5
    8694:	2800      	cmp	r0, #0
    8696:	d0ab      	beq.n	85f0 <prvTimerTask+0x8c>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    8698:	6a63      	ldr	r3, [r4, #36]	; 0x24
    869a:	0020      	movs	r0, r4
    869c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    869e:	69e3      	ldr	r3, [r4, #28]
    86a0:	2b01      	cmp	r3, #1
    86a2:	d1a5      	bne.n	85f0 <prvTimerTask+0x8c>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    86a4:	69a3      	ldr	r3, [r4, #24]
    86a6:	9a05      	ldr	r2, [sp, #20]
    86a8:	0020      	movs	r0, r4
    86aa:	18d2      	adds	r2, r2, r3
    86ac:	9600      	str	r6, [sp, #0]
    86ae:	0033      	movs	r3, r6
    86b0:	0031      	movs	r1, r6
    86b2:	4c11      	ldr	r4, [pc, #68]	; (86f8 <prvTimerTask+0x194>)
    86b4:	47a0      	blx	r4
							configASSERT( xResult );
    86b6:	2800      	cmp	r0, #0
    86b8:	d19a      	bne.n	85f0 <prvTimerTask+0x8c>
    86ba:	b672      	cpsid	i
    86bc:	e7fe      	b.n	86bc <prvTimerTask+0x158>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    86be:	9905      	ldr	r1, [sp, #20]
    86c0:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    86c2:	2900      	cmp	r1, #0
    86c4:	d101      	bne.n	86ca <prvTimerTask+0x166>
    86c6:	b672      	cpsid	i
    86c8:	e7fe      	b.n	86c8 <prvTimerTask+0x164>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    86ca:	1949      	adds	r1, r1, r5
    86cc:	002b      	movs	r3, r5
    86ce:	002a      	movs	r2, r5
    86d0:	0020      	movs	r0, r4
    86d2:	4c08      	ldr	r4, [pc, #32]	; (86f4 <prvTimerTask+0x190>)
    86d4:	47a0      	blx	r4
    86d6:	e78b      	b.n	85f0 <prvTimerTask+0x8c>
    86d8:	200003a8 	.word	0x200003a8
    86dc:	00007d19 	.word	0x00007d19
    86e0:	00007d29 	.word	0x00007d29
    86e4:	200003d8 	.word	0x200003d8
    86e8:	000084f5 	.word	0x000084f5
    86ec:	00007e3d 	.word	0x00007e3d
    86f0:	0000724f 	.word	0x0000724f
    86f4:	000083d1 	.word	0x000083d1
    86f8:	0000849d 	.word	0x0000849d
    86fc:	200003dc 	.word	0x200003dc
    8700:	000076f9 	.word	0x000076f9
    8704:	000071c9 	.word	0x000071c9
    8708:	200003ac 	.word	0x200003ac
    870c:	000079a1 	.word	0x000079a1
    8710:	000070c9 	.word	0x000070c9

00008714 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
    8714:	b510      	push	{r4, lr}
    8716:	1e04      	subs	r4, r0, #0
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );
    8718:	d101      	bne.n	871e <xTimerIsTimerActive+0xa>
    871a:	b672      	cpsid	i
    871c:	e7fe      	b.n	871c <xTimerIsTimerActive+0x8>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
    871e:	4b04      	ldr	r3, [pc, #16]	; (8730 <xTimerIsTimerActive+0x1c>)
    8720:	4798      	blx	r3
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
    8722:	6964      	ldr	r4, [r4, #20]
    8724:	1e63      	subs	r3, r4, #1
    8726:	419c      	sbcs	r4, r3
	}
	taskEXIT_CRITICAL();
    8728:	4b02      	ldr	r3, [pc, #8]	; (8734 <xTimerIsTimerActive+0x20>)
    872a:	4798      	blx	r3

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
    872c:	0020      	movs	r0, r4
    872e:	bd10      	pop	{r4, pc}
    8730:	000070e1 	.word	0x000070e1
    8734:	000070f9 	.word	0x000070f9

00008738 <WDT_Handler>:
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
    8738:	2201      	movs	r2, #1
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
    873a:	b510      	push	{r4, lr}
    873c:	4b03      	ldr	r3, [pc, #12]	; (874c <WDT_Handler+0x14>)
    873e:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
    8740:	4b03      	ldr	r3, [pc, #12]	; (8750 <WDT_Handler+0x18>)
    8742:	681b      	ldr	r3, [r3, #0]
    8744:	2b00      	cmp	r3, #0
    8746:	d000      	beq.n	874a <WDT_Handler+0x12>
		wdt_early_warning_callback();
    8748:	4798      	blx	r3
	}
}
    874a:	bd10      	pop	{r4, pc}
    874c:	40001000 	.word	0x40001000
    8750:	20000804 	.word	0x20000804

00008754 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    8754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    8756:	2500      	movs	r5, #0
	struct tcc_module *module =
    8758:	4b0b      	ldr	r3, [pc, #44]	; (8788 <_tcc_interrupt_handler+0x34>)
    875a:	0080      	lsls	r0, r0, #2
    875c:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    875e:	6823      	ldr	r3, [r4, #0]
    8760:	6b62      	ldr	r2, [r4, #52]	; 0x34
    8762:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    8764:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    8766:	4013      	ands	r3, r2
    8768:	401e      	ands	r6, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    876a:	4b08      	ldr	r3, [pc, #32]	; (878c <_tcc_interrupt_handler+0x38>)
    876c:	58ef      	ldr	r7, [r5, r3]
    876e:	4237      	tst	r7, r6
    8770:	d005      	beq.n	877e <_tcc_interrupt_handler+0x2a>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    8772:	1963      	adds	r3, r4, r5
    8774:	685b      	ldr	r3, [r3, #4]
    8776:	0020      	movs	r0, r4
    8778:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    877a:	6823      	ldr	r3, [r4, #0]
    877c:	62df      	str	r7, [r3, #44]	; 0x2c
    877e:	3504      	adds	r5, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    8780:	2d30      	cmp	r5, #48	; 0x30
    8782:	d1f2      	bne.n	876a <_tcc_interrupt_handler+0x16>
		}
	}
}
    8784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8786:	46c0      	nop			; (mov r8, r8)
    8788:	20000808 	.word	0x20000808
    878c:	0000d830 	.word	0x0000d830

00008790 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    8790:	b510      	push	{r4, lr}
    8792:	2000      	movs	r0, #0
    8794:	4b01      	ldr	r3, [pc, #4]	; (879c <TCC0_Handler+0xc>)
    8796:	4798      	blx	r3
    8798:	bd10      	pop	{r4, pc}
    879a:	46c0      	nop			; (mov r8, r8)
    879c:	00008755 	.word	0x00008755

000087a0 <TCC1_Handler>:
    87a0:	b510      	push	{r4, lr}
    87a2:	2001      	movs	r0, #1
    87a4:	4b01      	ldr	r3, [pc, #4]	; (87ac <TCC1_Handler+0xc>)
    87a6:	4798      	blx	r3
    87a8:	bd10      	pop	{r4, pc}
    87aa:	46c0      	nop			; (mov r8, r8)
    87ac:	00008755 	.word	0x00008755

000087b0 <TCC2_Handler>:
    87b0:	b510      	push	{r4, lr}
    87b2:	2002      	movs	r0, #2
    87b4:	4b01      	ldr	r3, [pc, #4]	; (87bc <TCC2_Handler+0xc>)
    87b6:	4798      	blx	r3
    87b8:	bd10      	pop	{r4, pc}
    87ba:	46c0      	nop			; (mov r8, r8)
    87bc:	00008755 	.word	0x00008755

000087c0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    87c0:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    87c2:	2601      	movs	r6, #1
	struct tc_module *module
    87c4:	4b14      	ldr	r3, [pc, #80]	; (8818 <_tc_interrupt_handler+0x58>)
    87c6:	0080      	lsls	r0, r0, #2
    87c8:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    87ca:	6823      	ldr	r3, [r4, #0]
    87cc:	7e22      	ldrb	r2, [r4, #24]
    87ce:	7e65      	ldrb	r5, [r4, #25]
    87d0:	7b9b      	ldrb	r3, [r3, #14]
    87d2:	4015      	ands	r5, r2
    87d4:	401d      	ands	r5, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    87d6:	4235      	tst	r5, r6
    87d8:	d004      	beq.n	87e4 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    87da:	68a3      	ldr	r3, [r4, #8]
    87dc:	0020      	movs	r0, r4
    87de:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    87e0:	6823      	ldr	r3, [r4, #0]
    87e2:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    87e4:	2602      	movs	r6, #2
    87e6:	4235      	tst	r5, r6
    87e8:	d004      	beq.n	87f4 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    87ea:	68e3      	ldr	r3, [r4, #12]
    87ec:	0020      	movs	r0, r4
    87ee:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    87f0:	6823      	ldr	r3, [r4, #0]
    87f2:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    87f4:	2610      	movs	r6, #16
    87f6:	4235      	tst	r5, r6
    87f8:	d004      	beq.n	8804 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    87fa:	6923      	ldr	r3, [r4, #16]
    87fc:	0020      	movs	r0, r4
    87fe:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    8800:	6823      	ldr	r3, [r4, #0]
    8802:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    8804:	2620      	movs	r6, #32
    8806:	4235      	tst	r5, r6
    8808:	d004      	beq.n	8814 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    880a:	6963      	ldr	r3, [r4, #20]
    880c:	0020      	movs	r0, r4
    880e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    8810:	6823      	ldr	r3, [r4, #0]
    8812:	739e      	strb	r6, [r3, #14]
	}
}
    8814:	bd70      	pop	{r4, r5, r6, pc}
    8816:	46c0      	nop			; (mov r8, r8)
    8818:	20000814 	.word	0x20000814

0000881c <TC3_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    881c:	b510      	push	{r4, lr}
    881e:	2000      	movs	r0, #0
    8820:	4b01      	ldr	r3, [pc, #4]	; (8828 <TC3_Handler+0xc>)
    8822:	4798      	blx	r3
    8824:	bd10      	pop	{r4, pc}
    8826:	46c0      	nop			; (mov r8, r8)
    8828:	000087c1 	.word	0x000087c1

0000882c <TC4_Handler>:
    882c:	b510      	push	{r4, lr}
    882e:	2001      	movs	r0, #1
    8830:	4b01      	ldr	r3, [pc, #4]	; (8838 <TC4_Handler+0xc>)
    8832:	4798      	blx	r3
    8834:	bd10      	pop	{r4, pc}
    8836:	46c0      	nop			; (mov r8, r8)
    8838:	000087c1 	.word	0x000087c1

0000883c <TC5_Handler>:
    883c:	b510      	push	{r4, lr}
    883e:	2002      	movs	r0, #2
    8840:	4b01      	ldr	r3, [pc, #4]	; (8848 <TC5_Handler+0xc>)
    8842:	4798      	blx	r3
    8844:	bd10      	pop	{r4, pc}
    8846:	46c0      	nop			; (mov r8, r8)
    8848:	000087c1 	.word	0x000087c1

0000884c <TC6_Handler>:
    884c:	b510      	push	{r4, lr}
    884e:	2003      	movs	r0, #3
    8850:	4b01      	ldr	r3, [pc, #4]	; (8858 <TC6_Handler+0xc>)
    8852:	4798      	blx	r3
    8854:	bd10      	pop	{r4, pc}
    8856:	46c0      	nop			; (mov r8, r8)
    8858:	000087c1 	.word	0x000087c1

0000885c <TC7_Handler>:
    885c:	b510      	push	{r4, lr}
    885e:	2004      	movs	r0, #4
    8860:	4b01      	ldr	r3, [pc, #4]	; (8868 <TC7_Handler+0xc>)
    8862:	4798      	blx	r3
    8864:	bd10      	pop	{r4, pc}
    8866:	46c0      	nop			; (mov r8, r8)
    8868:	000087c1 	.word	0x000087c1

0000886c <_usart_wait_for_sync>:
	SercomUsart *const usart_hw = &(module->hw->USART);
    886c:	6802      	ldr	r2, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    886e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    8870:	2b00      	cmp	r3, #0
    8872:	d1fc      	bne.n	886e <_usart_wait_for_sync+0x2>
}
    8874:	4770      	bx	lr
	...

00008878 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    8878:	b5f0      	push	{r4, r5, r6, r7, lr}
    887a:	0007      	movs	r7, r0
    887c:	b093      	sub	sp, #76	; 0x4c
	module->hw = hw;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    887e:	4ba0      	ldr	r3, [pc, #640]	; (8b00 <usart_init+0x288>)
	module->hw = hw;
    8880:	6039      	str	r1, [r7, #0]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    8882:	0008      	movs	r0, r1
{
    8884:	0016      	movs	r6, r2
    8886:	9104      	str	r1, [sp, #16]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    8888:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    888a:	2201      	movs	r2, #1
    888c:	9b04      	ldr	r3, [sp, #16]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    888e:	0005      	movs	r5, r0
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    8890:	681b      	ldr	r3, [r3, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    8892:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    8894:	4213      	tst	r3, r2
    8896:	d000      	beq.n	889a <usart_init+0x22>
    8898:	e10f      	b.n	8aba <usart_init+0x242>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    889a:	9b04      	ldr	r3, [sp, #16]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    889c:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    889e:	681c      	ldr	r4, [r3, #0]
    88a0:	2302      	movs	r3, #2
    88a2:	401c      	ands	r4, r3
    88a4:	d000      	beq.n	88a8 <usart_init+0x30>
    88a6:	e108      	b.n	8aba <usart_init+0x242>
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    88a8:	18eb      	adds	r3, r5, r3
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    88aa:	381b      	subs	r0, #27
    88ac:	4098      	lsls	r0, r3
    88ae:	0003      	movs	r3, r0
			PM->APBCMASK.reg |= mask;
    88b0:	4a94      	ldr	r2, [pc, #592]	; (8b04 <usart_init+0x28c>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    88b2:	3514      	adds	r5, #20
    88b4:	6a11      	ldr	r1, [r2, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    88b6:	b2ed      	uxtb	r5, r5
    88b8:	430b      	orrs	r3, r1
    88ba:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    88bc:	0033      	movs	r3, r6
    88be:	332d      	adds	r3, #45	; 0x2d
    88c0:	9302      	str	r3, [sp, #8]
    88c2:	781b      	ldrb	r3, [r3, #0]
    88c4:	a90c      	add	r1, sp, #48	; 0x30
    88c6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    88c8:	0028      	movs	r0, r5
    88ca:	4b8f      	ldr	r3, [pc, #572]	; (8b08 <usart_init+0x290>)
    88cc:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    88ce:	0028      	movs	r0, r5
    88d0:	4b8e      	ldr	r3, [pc, #568]	; (8b0c <usart_init+0x294>)
    88d2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    88d4:	9b02      	ldr	r3, [sp, #8]
    88d6:	0021      	movs	r1, r4
    88d8:	7818      	ldrb	r0, [r3, #0]
    88da:	4b8d      	ldr	r3, [pc, #564]	; (8b10 <usart_init+0x298>)
    88dc:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    88de:	7af3      	ldrb	r3, [r6, #11]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    88e0:	2508      	movs	r5, #8
	module->character_size = config->character_size;
    88e2:	717b      	strb	r3, [r7, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    88e4:	1d73      	adds	r3, r6, #5
    88e6:	7fdb      	ldrb	r3, [r3, #31]
    88e8:	71bb      	strb	r3, [r7, #6]
	module->transmitter_enabled = config->transmitter_enable;
    88ea:	1db3      	adds	r3, r6, #6
    88ec:	7fdb      	ldrb	r3, [r3, #31]
    88ee:	71fb      	strb	r3, [r7, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    88f0:	7ef3      	ldrb	r3, [r6, #27]
    88f2:	723b      	strb	r3, [r7, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    88f4:	7f33      	ldrb	r3, [r6, #28]
    88f6:	727b      	strb	r3, [r7, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    88f8:	683b      	ldr	r3, [r7, #0]
    88fa:	9303      	str	r3, [sp, #12]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    88fc:	0018      	movs	r0, r3
    88fe:	4b80      	ldr	r3, [pc, #512]	; (8b00 <usart_init+0x288>)
    8900:	4798      	blx	r3
	uint16_t baud  = 0;
    8902:	ab0e      	add	r3, sp, #56	; 0x38
    8904:	801c      	strh	r4, [r3, #0]
	switch (config->sample_rate) {
    8906:	8a33      	ldrh	r3, [r6, #16]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    8908:	3014      	adds	r0, #20
	switch (config->sample_rate) {
    890a:	9302      	str	r3, [sp, #8]
    890c:	2380      	movs	r3, #128	; 0x80
    890e:	9a02      	ldr	r2, [sp, #8]
    8910:	01db      	lsls	r3, r3, #7
    8912:	429a      	cmp	r2, r3
    8914:	d014      	beq.n	8940 <usart_init+0xc8>
    8916:	d808      	bhi.n	892a <usart_init+0xb2>
    8918:	2380      	movs	r3, #128	; 0x80
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    891a:	2510      	movs	r5, #16
	switch (config->sample_rate) {
    891c:	019b      	lsls	r3, r3, #6
    891e:	429a      	cmp	r2, r3
    8920:	d100      	bne.n	8924 <usart_init+0xac>
    8922:	e0cd      	b.n	8ac0 <usart_init+0x248>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    8924:	2510      	movs	r5, #16
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    8926:	2400      	movs	r4, #0
    8928:	e00a      	b.n	8940 <usart_init+0xc8>
	switch (config->sample_rate) {
    892a:	23c0      	movs	r3, #192	; 0xc0
    892c:	9a02      	ldr	r2, [sp, #8]
    892e:	01db      	lsls	r3, r3, #7
    8930:	429a      	cmp	r2, r3
    8932:	d100      	bne.n	8936 <usart_init+0xbe>
    8934:	e0c3      	b.n	8abe <usart_init+0x246>
    8936:	2380      	movs	r3, #128	; 0x80
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    8938:	2503      	movs	r5, #3
	switch (config->sample_rate) {
    893a:	021b      	lsls	r3, r3, #8
    893c:	429a      	cmp	r2, r3
    893e:	d1f1      	bne.n	8924 <usart_init+0xac>
	ctrla = (uint32_t)config->data_order |
    8940:	6833      	ldr	r3, [r6, #0]
    8942:	9306      	str	r3, [sp, #24]
		(uint32_t)config->mux_setting |
    8944:	68f3      	ldr	r3, [r6, #12]
    8946:	9307      	str	r3, [sp, #28]
		config->sample_adjustment |
    8948:	6973      	ldr	r3, [r6, #20]
    894a:	9308      	str	r3, [sp, #32]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    894c:	7e33      	ldrb	r3, [r6, #24]
    894e:	9309      	str	r3, [sp, #36]	; 0x24
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    8950:	1df3      	adds	r3, r6, #7
    8952:	7fdb      	ldrb	r3, [r3, #31]
    8954:	930a      	str	r3, [sp, #40]	; 0x28
	transfer_mode = (uint32_t)config->transfer_mode;
    8956:	6873      	ldr	r3, [r6, #4]
    8958:	9305      	str	r3, [sp, #20]
    895a:	0033      	movs	r3, r6
	switch (transfer_mode)
    895c:	9a05      	ldr	r2, [sp, #20]
    895e:	3308      	adds	r3, #8
    8960:	2a00      	cmp	r2, #0
    8962:	d100      	bne.n	8966 <usart_init+0xee>
    8964:	e0ae      	b.n	8ac4 <usart_init+0x24c>
    8966:	2280      	movs	r2, #128	; 0x80
    8968:	9905      	ldr	r1, [sp, #20]
    896a:	0552      	lsls	r2, r2, #21
    896c:	4291      	cmp	r1, r2
    896e:	d10e      	bne.n	898e <usart_init+0x116>
			if (!config->use_external_clock) {
    8970:	7fdb      	ldrb	r3, [r3, #31]
    8972:	2b00      	cmp	r3, #0
    8974:	d10b      	bne.n	898e <usart_init+0x116>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    8976:	4b67      	ldr	r3, [pc, #412]	; (8b14 <usart_init+0x29c>)
    8978:	b2c0      	uxtb	r0, r0
    897a:	6a34      	ldr	r4, [r6, #32]
    897c:	4798      	blx	r3
    897e:	aa0e      	add	r2, sp, #56	; 0x38
    8980:	0001      	movs	r1, r0
    8982:	4b65      	ldr	r3, [pc, #404]	; (8b18 <usart_init+0x2a0>)
    8984:	0020      	movs	r0, r4
    8986:	4798      	blx	r3
	if (status_code != STATUS_OK) {
    8988:	2800      	cmp	r0, #0
    898a:	d000      	beq.n	898e <usart_init+0x116>
    898c:	e095      	b.n	8aba <usart_init+0x242>
	if(config->encoding_format_enable) {
    898e:	7e73      	ldrb	r3, [r6, #25]
    8990:	2b00      	cmp	r3, #0
    8992:	d002      	beq.n	899a <usart_init+0x122>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    8994:	7eb3      	ldrb	r3, [r6, #26]
    8996:	9a03      	ldr	r2, [sp, #12]
    8998:	7393      	strb	r3, [r2, #14]
	_usart_wait_for_sync(module);
    899a:	4b60      	ldr	r3, [pc, #384]	; (8b1c <usart_init+0x2a4>)
    899c:	0038      	movs	r0, r7
    899e:	4798      	blx	r3
	usart_hw->BAUD.reg = baud;
    89a0:	ab0a      	add	r3, sp, #40	; 0x28
    89a2:	8a1b      	ldrh	r3, [r3, #16]
    89a4:	9a03      	ldr	r2, [sp, #12]
	ctrla |= transfer_mode;
    89a6:	9c06      	ldr	r4, [sp, #24]
	usart_hw->BAUD.reg = baud;
    89a8:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    89aa:	9b07      	ldr	r3, [sp, #28]
    89ac:	431c      	orrs	r4, r3
    89ae:	9b08      	ldr	r3, [sp, #32]
    89b0:	431c      	orrs	r4, r3
    89b2:	9b05      	ldr	r3, [sp, #20]
    89b4:	431c      	orrs	r4, r3
    89b6:	9b02      	ldr	r3, [sp, #8]
    89b8:	431c      	orrs	r4, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    89ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    89bc:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    89be:	431c      	orrs	r4, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    89c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    89c2:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    89c4:	431c      	orrs	r4, r3
	if (config->use_external_clock == false) {
    89c6:	0033      	movs	r3, r6
    89c8:	3308      	adds	r3, #8
    89ca:	7fdb      	ldrb	r3, [r3, #31]
    89cc:	2b00      	cmp	r3, #0
    89ce:	d101      	bne.n	89d4 <usart_init+0x15c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    89d0:	3304      	adds	r3, #4
    89d2:	431c      	orrs	r4, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    89d4:	7e75      	ldrb	r5, [r6, #25]
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    89d6:	7f33      	ldrb	r3, [r6, #28]
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    89d8:	02ad      	lsls	r5, r5, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    89da:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    89dc:	431d      	orrs	r5, r3
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    89de:	7f73      	ldrb	r3, [r6, #29]
	ctrlb |= (uint32_t)config->character_size;
    89e0:	7af2      	ldrb	r2, [r6, #11]
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    89e2:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    89e4:	431d      	orrs	r5, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    89e6:	1d73      	adds	r3, r6, #5
    89e8:	7fdb      	ldrb	r3, [r3, #31]
    89ea:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    89ec:	431d      	orrs	r5, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    89ee:	1db3      	adds	r3, r6, #6
    89f0:	7fdb      	ldrb	r3, [r3, #31]
    89f2:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    89f4:	432b      	orrs	r3, r5
	ctrlb |= (uint32_t)config->character_size;
    89f6:	7ab5      	ldrb	r5, [r6, #10]
    89f8:	4315      	orrs	r5, r2
    89fa:	431d      	orrs	r5, r3
	if (config->parity != USART_PARITY_NONE) {
    89fc:	8933      	ldrh	r3, [r6, #8]
    89fe:	2bff      	cmp	r3, #255	; 0xff
    8a00:	d100      	bne.n	8a04 <usart_init+0x18c>
    8a02:	e075      	b.n	8af0 <usart_init+0x278>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    8a04:	2280      	movs	r2, #128	; 0x80
    8a06:	0452      	lsls	r2, r2, #17
    8a08:	4314      	orrs	r4, r2
		ctrlb |= config->parity;
    8a0a:	431d      	orrs	r5, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    8a0c:	0033      	movs	r3, r6
    8a0e:	332c      	adds	r3, #44	; 0x2c
    8a10:	781b      	ldrb	r3, [r3, #0]
    8a12:	2b00      	cmp	r3, #0
    8a14:	d103      	bne.n	8a1e <usart_init+0x1a6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    8a16:	4b42      	ldr	r3, [pc, #264]	; (8b20 <usart_init+0x2a8>)
    8a18:	789b      	ldrb	r3, [r3, #2]
    8a1a:	079b      	lsls	r3, r3, #30
    8a1c:	d501      	bpl.n	8a22 <usart_init+0x1aa>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    8a1e:	2380      	movs	r3, #128	; 0x80
    8a20:	431c      	orrs	r4, r3
	_usart_wait_for_sync(module);
    8a22:	0038      	movs	r0, r7
    8a24:	4b3d      	ldr	r3, [pc, #244]	; (8b1c <usart_init+0x2a4>)
    8a26:	4798      	blx	r3
	usart_hw->CTRLB.reg = ctrlb;
    8a28:	9b03      	ldr	r3, [sp, #12]
	_usart_wait_for_sync(module);
    8a2a:	0038      	movs	r0, r7
	usart_hw->CTRLB.reg = ctrlb;
    8a2c:	605d      	str	r5, [r3, #4]
	_usart_wait_for_sync(module);
    8a2e:	4b3b      	ldr	r3, [pc, #236]	; (8b1c <usart_init+0x2a4>)
    8a30:	4798      	blx	r3
	usart_hw->CTRLA.reg = ctrla;
    8a32:	9b03      	ldr	r3, [sp, #12]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8a34:	2500      	movs	r5, #0
    8a36:	601c      	str	r4, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8a38:	2380      	movs	r3, #128	; 0x80
    8a3a:	ac0d      	add	r4, sp, #52	; 0x34
    8a3c:	7023      	strb	r3, [r4, #0]
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    8a3e:	6b33      	ldr	r3, [r6, #48]	; 0x30
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8a40:	7065      	strb	r5, [r4, #1]
    8a42:	930e      	str	r3, [sp, #56]	; 0x38
    8a44:	6b73      	ldr	r3, [r6, #52]	; 0x34
	config->powersave    = false;
    8a46:	70e5      	strb	r5, [r4, #3]
    8a48:	930f      	str	r3, [sp, #60]	; 0x3c
    8a4a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    8a4c:	70a5      	strb	r5, [r4, #2]
	uint32_t pad_pinmuxes[] = {
    8a4e:	9310      	str	r3, [sp, #64]	; 0x40
    8a50:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    8a52:	9302      	str	r3, [sp, #8]
    8a54:	9311      	str	r3, [sp, #68]	; 0x44
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    8a56:	2010      	movs	r0, #16
    8a58:	aa0a      	add	r2, sp, #40	; 0x28
    8a5a:	00ab      	lsls	r3, r5, #2
    8a5c:	1812      	adds	r2, r2, r0
    8a5e:	58d0      	ldr	r0, [r2, r3]
    8a60:	b2e9      	uxtb	r1, r5

		if (current_pinmux == PINMUX_DEFAULT) {
    8a62:	2800      	cmp	r0, #0
    8a64:	d102      	bne.n	8a6c <usart_init+0x1f4>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    8a66:	9804      	ldr	r0, [sp, #16]
    8a68:	4b2e      	ldr	r3, [pc, #184]	; (8b24 <usart_init+0x2ac>)
    8a6a:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    8a6c:	1c43      	adds	r3, r0, #1
    8a6e:	d005      	beq.n	8a7c <usart_init+0x204>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    8a70:	7020      	strb	r0, [r4, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    8a72:	0c00      	lsrs	r0, r0, #16
    8a74:	b2c0      	uxtb	r0, r0
    8a76:	0021      	movs	r1, r4
    8a78:	4b2b      	ldr	r3, [pc, #172]	; (8b28 <usart_init+0x2b0>)
    8a7a:	4798      	blx	r3
    8a7c:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    8a7e:	2d04      	cmp	r5, #4
    8a80:	d1e9      	bne.n	8a56 <usart_init+0x1de>

	module->tx_buffer_ptr              = NULL;
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
	module->remaining_rx_buffer_length = 0x0000;
	module->callback_reg_mask          = 0x00;
    8a82:	003b      	movs	r3, r7
		module->callback[i]            = NULL;
    8a84:	2400      	movs	r4, #0
	module->callback_reg_mask          = 0x00;
    8a86:	3330      	adds	r3, #48	; 0x30
	module->remaining_tx_buffer_length = 0x0000;
    8a88:	85fc      	strh	r4, [r7, #46]	; 0x2e
		module->callback[i]            = NULL;
    8a8a:	60fc      	str	r4, [r7, #12]
    8a8c:	613c      	str	r4, [r7, #16]
    8a8e:	617c      	str	r4, [r7, #20]
    8a90:	61bc      	str	r4, [r7, #24]
    8a92:	61fc      	str	r4, [r7, #28]
    8a94:	623c      	str	r4, [r7, #32]
	module->tx_buffer_ptr              = NULL;
    8a96:	62bc      	str	r4, [r7, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    8a98:	627c      	str	r4, [r7, #36]	; 0x24
	module->remaining_rx_buffer_length = 0x0000;
    8a9a:	85bc      	strh	r4, [r7, #44]	; 0x2c
	module->callback_enable_mask       = 0x00;
	module->rx_status                  = STATUS_OK;
    8a9c:	709c      	strb	r4, [r3, #2]
	module->callback_reg_mask          = 0x00;
    8a9e:	701c      	strb	r4, [r3, #0]
	module->callback_enable_mask       = 0x00;
    8aa0:	705c      	strb	r4, [r3, #1]
	module->tx_status                  = STATUS_OK;
    8aa2:	70dc      	strb	r4, [r3, #3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    8aa4:	6838      	ldr	r0, [r7, #0]
    8aa6:	4b16      	ldr	r3, [pc, #88]	; (8b00 <usart_init+0x288>)
    8aa8:	4798      	blx	r3
    8aaa:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    8aac:	4b1f      	ldr	r3, [pc, #124]	; (8b2c <usart_init+0x2b4>)
    8aae:	4920      	ldr	r1, [pc, #128]	; (8b30 <usart_init+0x2b8>)
    8ab0:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
    8ab2:	0020      	movs	r0, r4
	_sercom_instances[instance_index] = module;
    8ab4:	4b1f      	ldr	r3, [pc, #124]	; (8b34 <usart_init+0x2bc>)
    8ab6:	00ad      	lsls	r5, r5, #2
    8ab8:	50ef      	str	r7, [r5, r3]
}
    8aba:	b013      	add	sp, #76	; 0x4c
    8abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    8abe:	2508      	movs	r5, #8
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    8ac0:	2401      	movs	r4, #1
    8ac2:	e73d      	b.n	8940 <usart_init+0xc8>
			if (config->use_external_clock) {
    8ac4:	7fdb      	ldrb	r3, [r3, #31]
    8ac6:	2b00      	cmp	r3, #0
    8ac8:	d007      	beq.n	8ada <usart_init+0x262>
				status_code =
    8aca:	0023      	movs	r3, r4
    8acc:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    8ace:	6a30      	ldr	r0, [r6, #32]
    8ad0:	9500      	str	r5, [sp, #0]
    8ad2:	aa0e      	add	r2, sp, #56	; 0x38
				status_code =
    8ad4:	4c18      	ldr	r4, [pc, #96]	; (8b38 <usart_init+0x2c0>)
    8ad6:	47a0      	blx	r4
    8ad8:	e756      	b.n	8988 <usart_init+0x110>
						_sercom_get_async_baud_val(config->baudrate,
    8ada:	6a33      	ldr	r3, [r6, #32]
    8adc:	b2c0      	uxtb	r0, r0
    8ade:	930b      	str	r3, [sp, #44]	; 0x2c
    8ae0:	4b0c      	ldr	r3, [pc, #48]	; (8b14 <usart_init+0x29c>)
    8ae2:	4798      	blx	r3
				status_code =
    8ae4:	9500      	str	r5, [sp, #0]
						_sercom_get_async_baud_val(config->baudrate,
    8ae6:	0001      	movs	r1, r0
				status_code =
    8ae8:	0023      	movs	r3, r4
    8aea:	aa0e      	add	r2, sp, #56	; 0x38
    8aec:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8aee:	e7f1      	b.n	8ad4 <usart_init+0x25c>
		if(config->lin_slave_enable) {
    8af0:	7ef3      	ldrb	r3, [r6, #27]
    8af2:	2b00      	cmp	r3, #0
    8af4:	d100      	bne.n	8af8 <usart_init+0x280>
    8af6:	e789      	b.n	8a0c <usart_init+0x194>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    8af8:	2380      	movs	r3, #128	; 0x80
    8afa:	04db      	lsls	r3, r3, #19
    8afc:	431c      	orrs	r4, r3
    8afe:	e785      	b.n	8a0c <usart_init+0x194>
    8b00:	00006f9d 	.word	0x00006f9d
    8b04:	40000400 	.word	0x40000400
    8b08:	00009f21 	.word	0x00009f21
    8b0c:	00009e99 	.word	0x00009e99
    8b10:	00006dfd 	.word	0x00006dfd
    8b14:	00009f3d 	.word	0x00009f3d
    8b18:	00006d3d 	.word	0x00006d3d
    8b1c:	0000886d 	.word	0x0000886d
    8b20:	41002000 	.word	0x41002000
    8b24:	00006e41 	.word	0x00006e41
    8b28:	00009ff5 	.word	0x00009ff5
    8b2c:	00008d61 	.word	0x00008d61
    8b30:	00008bf5 	.word	0x00008bf5
    8b34:	20000828 	.word	0x20000828
    8b38:	00006d65 	.word	0x00006d65

00008b3c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    8b3c:	b570      	push	{r4, r5, r6, lr}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    8b3e:	79c2      	ldrb	r2, [r0, #7]
{
    8b40:	000d      	movs	r5, r1
		return STATUS_ERR_DENIED;
    8b42:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    8b44:	2a00      	cmp	r2, #0
    8b46:	d00c      	beq.n	8b62 <usart_write_wait+0x26>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    8b48:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
		return STATUS_BUSY;
    8b4a:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    8b4c:	2a00      	cmp	r2, #0
    8b4e:	d108      	bne.n	8b62 <usart_write_wait+0x26>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    8b50:	4b05      	ldr	r3, [pc, #20]	; (8b68 <usart_write_wait+0x2c>)
	SercomUsart *const usart_hw = &(module->hw->USART);
    8b52:	6804      	ldr	r4, [r0, #0]
	_usart_wait_for_sync(module);
    8b54:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    8b56:	2302      	movs	r3, #2
	usart_hw->DATA.reg = tx_data;
    8b58:	8525      	strh	r5, [r4, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    8b5a:	7e22      	ldrb	r2, [r4, #24]
    8b5c:	421a      	tst	r2, r3
    8b5e:	d0fc      	beq.n	8b5a <usart_write_wait+0x1e>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    8b60:	2300      	movs	r3, #0
}
    8b62:	0018      	movs	r0, r3
    8b64:	bd70      	pop	{r4, r5, r6, pc}
    8b66:	46c0      	nop			; (mov r8, r8)
    8b68:	0000886d 	.word	0x0000886d

00008b6c <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    8b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8b6e:	0006      	movs	r6, r0
    8b70:	000f      	movs	r7, r1
    8b72:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    8b74:	2017      	movs	r0, #23
	if (length == 0) {
    8b76:	2a00      	cmp	r2, #0
    8b78:	d027      	beq.n	8bca <usart_write_buffer_wait+0x5e>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    8b7a:	79f3      	ldrb	r3, [r6, #7]
		return STATUS_ERR_DENIED;
    8b7c:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    8b7e:	2b00      	cmp	r3, #0
    8b80:	d023      	beq.n	8bca <usart_write_buffer_wait+0x5e>
	}

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    8b82:	6833      	ldr	r3, [r6, #0]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    8b84:	0030      	movs	r0, r6
	SercomUsart *const usart_hw = &(module->hw->USART);
    8b86:	9301      	str	r3, [sp, #4]
	_usart_wait_for_sync(module);
    8b88:	4b18      	ldr	r3, [pc, #96]	; (8bec <usart_write_buffer_wait+0x80>)
    8b8a:	4798      	blx	r3

	uint16_t tx_pos = 0;
    8b8c:	2400      	movs	r4, #0
    8b8e:	2380      	movs	r3, #128	; 0x80
    8b90:	025b      	lsls	r3, r3, #9
	/* Blocks while buffer is being transferred */
	while (length--) {
		/* Wait for the USART to be ready for new data and abort
		* operation if it doesn't get ready within the timeout*/
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    8b92:	2101      	movs	r1, #1
    8b94:	9a01      	ldr	r2, [sp, #4]
    8b96:	7e12      	ldrb	r2, [r2, #24]
    8b98:	420a      	tst	r2, r1
    8b9a:	d017      	beq.n	8bcc <usart_write_buffer_wait+0x60>

		/* Data to send is at least 8 bits long */
		uint16_t data_to_send = tx_data[tx_pos++];

		/* Check if the character size exceeds 8 bit */
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    8b9c:	7972      	ldrb	r2, [r6, #5]
		uint16_t data_to_send = tx_data[tx_pos++];
    8b9e:	1863      	adds	r3, r4, r1
    8ba0:	b29b      	uxth	r3, r3
    8ba2:	5d39      	ldrb	r1, [r7, r4]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    8ba4:	2a01      	cmp	r2, #1
    8ba6:	d016      	beq.n	8bd6 <usart_write_buffer_wait+0x6a>
		uint16_t data_to_send = tx_data[tx_pos++];
    8ba8:	001c      	movs	r4, r3
    8baa:	b289      	uxth	r1, r1
    8bac:	3d01      	subs	r5, #1
			data_to_send |= (tx_data[tx_pos++] << 8);
		}

		/* Send the data through the USART module */
		usart_write_wait(module, data_to_send);
    8bae:	0030      	movs	r0, r6
    8bb0:	4b0f      	ldr	r3, [pc, #60]	; (8bf0 <usart_write_buffer_wait+0x84>)
    8bb2:	b2ad      	uxth	r5, r5
    8bb4:	4798      	blx	r3
	while (length--) {
    8bb6:	2d00      	cmp	r5, #0
    8bb8:	d1e9      	bne.n	8b8e <usart_write_buffer_wait+0x22>
    8bba:	2380      	movs	r3, #128	; 0x80
	}

	/* Wait until Transmit is complete or timeout */
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    8bbc:	2202      	movs	r2, #2
    8bbe:	025b      	lsls	r3, r3, #9
    8bc0:	9901      	ldr	r1, [sp, #4]
    8bc2:	7e09      	ldrb	r1, [r1, #24]
    8bc4:	4211      	tst	r1, r2
    8bc6:	d00c      	beq.n	8be2 <usart_write_buffer_wait+0x76>
		} else if (i == USART_TIMEOUT) {
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
    8bc8:	2000      	movs	r0, #0
}
    8bca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8bcc:	3b01      	subs	r3, #1
			} else if (i == USART_TIMEOUT) {
    8bce:	2b00      	cmp	r3, #0
    8bd0:	d1df      	bne.n	8b92 <usart_write_buffer_wait+0x26>
				return STATUS_ERR_TIMEOUT;
    8bd2:	2012      	movs	r0, #18
    8bd4:	e7f9      	b.n	8bca <usart_write_buffer_wait+0x5e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    8bd6:	5cfb      	ldrb	r3, [r7, r3]
    8bd8:	3402      	adds	r4, #2
    8bda:	021b      	lsls	r3, r3, #8
    8bdc:	b2a4      	uxth	r4, r4
    8bde:	4319      	orrs	r1, r3
    8be0:	e7e4      	b.n	8bac <usart_write_buffer_wait+0x40>
    8be2:	3b01      	subs	r3, #1
		} else if (i == USART_TIMEOUT) {
    8be4:	2b00      	cmp	r3, #0
    8be6:	d1eb      	bne.n	8bc0 <usart_write_buffer_wait+0x54>
    8be8:	e7f3      	b.n	8bd2 <usart_write_buffer_wait+0x66>
    8bea:	46c0      	nop			; (mov r8, r8)
    8bec:	0000886d 	.word	0x0000886d
    8bf0:	00008b3d 	.word	0x00008b3d

00008bf4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    8bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    8bf6:	4b58      	ldr	r3, [pc, #352]	; (8d58 <_usart_interrupt_handler+0x164>)
    8bf8:	0080      	lsls	r0, r0, #2
    8bfa:	58c4      	ldr	r4, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    8bfc:	6825      	ldr	r5, [r4, #0]
	return (usart_hw->SYNCBUSY.reg);
    8bfe:	69eb      	ldr	r3, [r5, #28]
	while (usart_is_syncing(module)) {
    8c00:	2b00      	cmp	r3, #0
    8c02:	d1fc      	bne.n	8bfe <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    8c04:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    8c06:	7daf      	ldrb	r7, [r5, #22]
    8c08:	401f      	ands	r7, r3
	callback_status = module->callback_reg_mask &
    8c0a:	0023      	movs	r3, r4
    8c0c:	3330      	adds	r3, #48	; 0x30
    8c0e:	781a      	ldrb	r2, [r3, #0]
    8c10:	785e      	ldrb	r6, [r3, #1]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    8c12:	2301      	movs	r3, #1
	callback_status = module->callback_reg_mask &
    8c14:	4016      	ands	r6, r2
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    8c16:	421f      	tst	r7, r3
    8c18:	d019      	beq.n	8c4e <_usart_interrupt_handler+0x5a>
		if (module->remaining_tx_buffer_length) {
    8c1a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    8c1c:	2a00      	cmp	r2, #0
    8c1e:	d100      	bne.n	8c22 <_usart_interrupt_handler+0x2e>
    8c20:	e072      	b.n	8d08 <_usart_interrupt_handler+0x114>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    8c22:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    8c24:	1c51      	adds	r1, r2, #1
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    8c26:	7813      	ldrb	r3, [r2, #0]
			(module->tx_buffer_ptr)++;
    8c28:	62a1      	str	r1, [r4, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    8c2a:	7961      	ldrb	r1, [r4, #5]
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    8c2c:	b2db      	uxtb	r3, r3
			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    8c2e:	2901      	cmp	r1, #1
    8c30:	d064      	beq.n	8cfc <_usart_interrupt_handler+0x108>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    8c32:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    8c34:	05db      	lsls	r3, r3, #23
    8c36:	0ddb      	lsrs	r3, r3, #23
    8c38:	852b      	strh	r3, [r5, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    8c3a:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    8c3c:	3b01      	subs	r3, #1
    8c3e:	b29b      	uxth	r3, r3
    8c40:	85e3      	strh	r3, [r4, #46]	; 0x2e
    8c42:	2b00      	cmp	r3, #0
    8c44:	d103      	bne.n	8c4e <_usart_interrupt_handler+0x5a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    8c46:	3301      	adds	r3, #1
    8c48:	752b      	strb	r3, [r5, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    8c4a:	3301      	adds	r3, #1
    8c4c:	75ab      	strb	r3, [r5, #22]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    8c4e:	2302      	movs	r3, #2
    8c50:	421f      	tst	r7, r3
    8c52:	d009      	beq.n	8c68 <_usart_interrupt_handler+0x74>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    8c54:	752b      	strb	r3, [r5, #20]
		module->tx_status = STATUS_OK;
    8c56:	0023      	movs	r3, r4
    8c58:	2200      	movs	r2, #0
    8c5a:	3333      	adds	r3, #51	; 0x33
    8c5c:	701a      	strb	r2, [r3, #0]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    8c5e:	07f3      	lsls	r3, r6, #31
    8c60:	d502      	bpl.n	8c68 <_usart_interrupt_handler+0x74>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    8c62:	0020      	movs	r0, r4
    8c64:	68e3      	ldr	r3, [r4, #12]
    8c66:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    8c68:	2304      	movs	r3, #4
    8c6a:	421f      	tst	r7, r3
    8c6c:	d027      	beq.n	8cbe <_usart_interrupt_handler+0xca>

		if (module->remaining_rx_buffer_length) {
    8c6e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    8c70:	2a00      	cmp	r2, #0
    8c72:	d100      	bne.n	8c76 <_usart_interrupt_handler+0x82>
    8c74:	e06d      	b.n	8d52 <_usart_interrupt_handler+0x15e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    8c76:	8b6b      	ldrh	r3, [r5, #26]
    8c78:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    8c7a:	071a      	lsls	r2, r3, #28
    8c7c:	d446      	bmi.n	8d0c <_usart_interrupt_handler+0x118>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    8c7e:	223f      	movs	r2, #63	; 0x3f
				error_code &= ~SERCOM_USART_STATUS_CTS;
    8c80:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    8c82:	d045      	beq.n	8d10 <_usart_interrupt_handler+0x11c>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    8c84:	2202      	movs	r2, #2
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    8c86:	211a      	movs	r1, #26
				if (error_code & SERCOM_USART_STATUS_FERR) {
    8c88:	4213      	tst	r3, r2
    8c8a:	d10f      	bne.n	8cac <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    8c8c:	2204      	movs	r2, #4
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    8c8e:	211e      	movs	r1, #30
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    8c90:	4213      	tst	r3, r2
    8c92:	d10b      	bne.n	8cac <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    8c94:	2201      	movs	r2, #1
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    8c96:	2113      	movs	r1, #19
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    8c98:	4213      	tst	r3, r2
    8c9a:	d107      	bne.n	8cac <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    8c9c:	2210      	movs	r2, #16
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    8c9e:	2142      	movs	r1, #66	; 0x42
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    8ca0:	4213      	tst	r3, r2
    8ca2:	d103      	bne.n	8cac <_usart_interrupt_handler+0xb8>
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    8ca4:	2220      	movs	r2, #32
    8ca6:	4213      	tst	r3, r2
    8ca8:	d004      	beq.n	8cb4 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    8caa:	2141      	movs	r1, #65	; 0x41
    8cac:	0023      	movs	r3, r4
    8cae:	3332      	adds	r3, #50	; 0x32
    8cb0:	7019      	strb	r1, [r3, #0]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    8cb2:	836a      	strh	r2, [r5, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    8cb4:	0773      	lsls	r3, r6, #29
    8cb6:	d502      	bpl.n	8cbe <_usart_interrupt_handler+0xca>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    8cb8:	0020      	movs	r0, r4
    8cba:	6963      	ldr	r3, [r4, #20]
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    8cbc:	4798      	blx	r3
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    8cbe:	2310      	movs	r3, #16
    8cc0:	421f      	tst	r7, r3
    8cc2:	d006      	beq.n	8cd2 <_usart_interrupt_handler+0xde>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    8cc4:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    8cc6:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    8cc8:	421e      	tst	r6, r3
    8cca:	d002      	beq.n	8cd2 <_usart_interrupt_handler+0xde>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    8ccc:	0020      	movs	r0, r4
    8cce:	69e3      	ldr	r3, [r4, #28]
    8cd0:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    8cd2:	2320      	movs	r3, #32
    8cd4:	421f      	tst	r7, r3
    8cd6:	d006      	beq.n	8ce6 <_usart_interrupt_handler+0xf2>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    8cd8:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    8cda:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    8cdc:	0733      	lsls	r3, r6, #28
    8cde:	d502      	bpl.n	8ce6 <_usart_interrupt_handler+0xf2>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    8ce0:	0020      	movs	r0, r4
    8ce2:	69a3      	ldr	r3, [r4, #24]
    8ce4:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    8ce6:	2308      	movs	r3, #8
    8ce8:	421f      	tst	r7, r3
    8cea:	d006      	beq.n	8cfa <_usart_interrupt_handler+0x106>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    8cec:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    8cee:	762b      	strb	r3, [r5, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    8cf0:	06b3      	lsls	r3, r6, #26
    8cf2:	d502      	bpl.n	8cfa <_usart_interrupt_handler+0x106>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    8cf4:	6a23      	ldr	r3, [r4, #32]
    8cf6:	0020      	movs	r0, r4
    8cf8:	4798      	blx	r3
		}
	}
#endif
}
    8cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    8cfc:	7851      	ldrb	r1, [r2, #1]
				(module->tx_buffer_ptr)++;
    8cfe:	3202      	adds	r2, #2
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    8d00:	0209      	lsls	r1, r1, #8
    8d02:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    8d04:	62a2      	str	r2, [r4, #40]	; 0x28
    8d06:	e795      	b.n	8c34 <_usart_interrupt_handler+0x40>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    8d08:	752b      	strb	r3, [r5, #20]
    8d0a:	e7a0      	b.n	8c4e <_usart_interrupt_handler+0x5a>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    8d0c:	2237      	movs	r2, #55	; 0x37
    8d0e:	e7b7      	b.n	8c80 <_usart_interrupt_handler+0x8c>
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    8d10:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
				*(module->rx_buffer_ptr) = received_data;
    8d12:	6a61      	ldr	r1, [r4, #36]	; 0x24
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    8d14:	05db      	lsls	r3, r3, #23
    8d16:	0ddb      	lsrs	r3, r3, #23
				*(module->rx_buffer_ptr) = received_data;
    8d18:	b2da      	uxtb	r2, r3
    8d1a:	700a      	strb	r2, [r1, #0]
				module->rx_buffer_ptr += 1;
    8d1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    8d1e:	1c51      	adds	r1, r2, #1
    8d20:	6261      	str	r1, [r4, #36]	; 0x24
				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    8d22:	7961      	ldrb	r1, [r4, #5]
    8d24:	2901      	cmp	r1, #1
    8d26:	d104      	bne.n	8d32 <_usart_interrupt_handler+0x13e>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    8d28:	0a1b      	lsrs	r3, r3, #8
    8d2a:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    8d2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8d2e:	3301      	adds	r3, #1
    8d30:	6263      	str	r3, [r4, #36]	; 0x24
				if(--(module->remaining_rx_buffer_length) == 0) {
    8d32:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    8d34:	3b01      	subs	r3, #1
    8d36:	b29b      	uxth	r3, r3
    8d38:	85a3      	strh	r3, [r4, #44]	; 0x2c
    8d3a:	2b00      	cmp	r3, #0
    8d3c:	d1bf      	bne.n	8cbe <_usart_interrupt_handler+0xca>
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    8d3e:	2204      	movs	r2, #4
    8d40:	752a      	strb	r2, [r5, #20]
					module->rx_status = STATUS_OK;
    8d42:	0022      	movs	r2, r4
    8d44:	3232      	adds	r2, #50	; 0x32
    8d46:	7013      	strb	r3, [r2, #0]
					if (callback_status
    8d48:	07b3      	lsls	r3, r6, #30
    8d4a:	d5b8      	bpl.n	8cbe <_usart_interrupt_handler+0xca>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    8d4c:	0020      	movs	r0, r4
    8d4e:	6923      	ldr	r3, [r4, #16]
    8d50:	e7b4      	b.n	8cbc <_usart_interrupt_handler+0xc8>
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    8d52:	752b      	strb	r3, [r5, #20]
    8d54:	e7b3      	b.n	8cbe <_usart_interrupt_handler+0xca>
    8d56:	46c0      	nop			; (mov r8, r8)
    8d58:	20000828 	.word	0x20000828

00008d5c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    8d5c:	4770      	bx	lr
	...

00008d60 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    8d60:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    8d62:	4c09      	ldr	r4, [pc, #36]	; (8d88 <_sercom_set_handler+0x28>)
    8d64:	4a09      	ldr	r2, [pc, #36]	; (8d8c <_sercom_set_handler+0x2c>)
    8d66:	7823      	ldrb	r3, [r4, #0]
    8d68:	2b00      	cmp	r3, #0
    8d6a:	d109      	bne.n	8d80 <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
    8d6c:	001e      	movs	r6, r3
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    8d6e:	4f08      	ldr	r7, [pc, #32]	; (8d90 <_sercom_set_handler+0x30>)
			_sercom_instances[i] = NULL;
    8d70:	4d08      	ldr	r5, [pc, #32]	; (8d94 <_sercom_set_handler+0x34>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    8d72:	50d7      	str	r7, [r2, r3]
			_sercom_instances[i] = NULL;
    8d74:	50ee      	str	r6, [r5, r3]
    8d76:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8d78:	2b18      	cmp	r3, #24
    8d7a:	d1fa      	bne.n	8d72 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    8d7c:	3b17      	subs	r3, #23
    8d7e:	7023      	strb	r3, [r4, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    8d80:	0080      	lsls	r0, r0, #2
    8d82:	5011      	str	r1, [r2, r0]
}
    8d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d86:	46c0      	nop			; (mov r8, r8)
    8d88:	200003e4 	.word	0x200003e4
    8d8c:	200003e8 	.word	0x200003e8
    8d90:	00008d5d 	.word	0x00008d5d
    8d94:	20000828 	.word	0x20000828

00008d98 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    8d98:	b507      	push	{r0, r1, r2, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    8d9a:	2309      	movs	r3, #9
    8d9c:	466a      	mov	r2, sp
    8d9e:	7013      	strb	r3, [r2, #0]
    8da0:	3301      	adds	r3, #1
    8da2:	7053      	strb	r3, [r2, #1]
    8da4:	3301      	adds	r3, #1
    8da6:	7093      	strb	r3, [r2, #2]
    8da8:	3301      	adds	r3, #1
    8daa:	70d3      	strb	r3, [r2, #3]
    8dac:	3301      	adds	r3, #1
    8dae:	7113      	strb	r3, [r2, #4]
    8db0:	3301      	adds	r3, #1
    8db2:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    8db4:	4b02      	ldr	r3, [pc, #8]	; (8dc0 <_sercom_get_interrupt_vector+0x28>)
    8db6:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    8db8:	466b      	mov	r3, sp
    8dba:	5618      	ldrsb	r0, [r3, r0]
}
    8dbc:	bd0e      	pop	{r1, r2, r3, pc}
    8dbe:	46c0      	nop			; (mov r8, r8)
    8dc0:	00006f9d 	.word	0x00006f9d

00008dc4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    8dc4:	b510      	push	{r4, lr}
    8dc6:	4b02      	ldr	r3, [pc, #8]	; (8dd0 <SERCOM0_Handler+0xc>)
    8dc8:	2000      	movs	r0, #0
    8dca:	681b      	ldr	r3, [r3, #0]
    8dcc:	4798      	blx	r3
    8dce:	bd10      	pop	{r4, pc}
    8dd0:	200003e8 	.word	0x200003e8

00008dd4 <SERCOM1_Handler>:
    8dd4:	b510      	push	{r4, lr}
    8dd6:	4b02      	ldr	r3, [pc, #8]	; (8de0 <SERCOM1_Handler+0xc>)
    8dd8:	2001      	movs	r0, #1
    8dda:	685b      	ldr	r3, [r3, #4]
    8ddc:	4798      	blx	r3
    8dde:	bd10      	pop	{r4, pc}
    8de0:	200003e8 	.word	0x200003e8

00008de4 <SERCOM2_Handler>:
    8de4:	b510      	push	{r4, lr}
    8de6:	4b02      	ldr	r3, [pc, #8]	; (8df0 <SERCOM2_Handler+0xc>)
    8de8:	2002      	movs	r0, #2
    8dea:	689b      	ldr	r3, [r3, #8]
    8dec:	4798      	blx	r3
    8dee:	bd10      	pop	{r4, pc}
    8df0:	200003e8 	.word	0x200003e8

00008df4 <SERCOM3_Handler>:
    8df4:	b510      	push	{r4, lr}
    8df6:	4b02      	ldr	r3, [pc, #8]	; (8e00 <SERCOM3_Handler+0xc>)
    8df8:	2003      	movs	r0, #3
    8dfa:	68db      	ldr	r3, [r3, #12]
    8dfc:	4798      	blx	r3
    8dfe:	bd10      	pop	{r4, pc}
    8e00:	200003e8 	.word	0x200003e8

00008e04 <SERCOM4_Handler>:
    8e04:	b510      	push	{r4, lr}
    8e06:	4b02      	ldr	r3, [pc, #8]	; (8e10 <SERCOM4_Handler+0xc>)
    8e08:	2004      	movs	r0, #4
    8e0a:	691b      	ldr	r3, [r3, #16]
    8e0c:	4798      	blx	r3
    8e0e:	bd10      	pop	{r4, pc}
    8e10:	200003e8 	.word	0x200003e8

00008e14 <SERCOM5_Handler>:
    8e14:	b510      	push	{r4, lr}
    8e16:	4b02      	ldr	r3, [pc, #8]	; (8e20 <SERCOM5_Handler+0xc>)
    8e18:	2005      	movs	r0, #5
    8e1a:	695b      	ldr	r3, [r3, #20]
    8e1c:	4798      	blx	r3
    8e1e:	bd10      	pop	{r4, pc}
    8e20:	200003e8 	.word	0x200003e8

00008e24 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    8e24:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    8e26:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    8e28:	2a00      	cmp	r2, #0
    8e2a:	d106      	bne.n	8e3a <extint_register_callback+0x16>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    8e2c:	4b06      	ldr	r3, [pc, #24]	; (8e48 <extint_register_callback+0x24>)
    8e2e:	0089      	lsls	r1, r1, #2
    8e30:	58cc      	ldr	r4, [r1, r3]
    8e32:	2c00      	cmp	r4, #0
    8e34:	d103      	bne.n	8e3e <extint_register_callback+0x1a>
		_extint_dev.callbacks[channel] = callback;
    8e36:	50c8      	str	r0, [r1, r3]
		return STATUS_OK;
    8e38:	0023      	movs	r3, r4
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    8e3a:	0018      	movs	r0, r3
    8e3c:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    8e3e:	0013      	movs	r3, r2
	} else if (_extint_dev.callbacks[channel] == callback) {
    8e40:	4284      	cmp	r4, r0
    8e42:	d0fa      	beq.n	8e3a <extint_register_callback+0x16>
	return STATUS_ERR_ALREADY_INITIALIZED;
    8e44:	231d      	movs	r3, #29
    8e46:	e7f8      	b.n	8e3a <extint_register_callback+0x16>
    8e48:	200007c0 	.word	0x200007c0

00008e4c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    8e4c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    8e4e:	2900      	cmp	r1, #0
    8e50:	d106      	bne.n	8e60 <extint_chan_enable_callback+0x14>
	if (eic_index < EIC_INST_NUM) {
    8e52:	281f      	cmp	r0, #31
    8e54:	d806      	bhi.n	8e64 <extint_chan_enable_callback+0x18>
		eic->INTENSET.reg = (1UL << channel);
    8e56:	3b16      	subs	r3, #22
    8e58:	4083      	lsls	r3, r0
    8e5a:	4a03      	ldr	r2, [pc, #12]	; (8e68 <extint_chan_enable_callback+0x1c>)
    8e5c:	60d3      	str	r3, [r2, #12]
	}

	return STATUS_OK;
    8e5e:	000b      	movs	r3, r1
}
    8e60:	0018      	movs	r0, r3
    8e62:	4770      	bx	lr
		eic->INTENSET.reg = (1UL << channel);
    8e64:	60c9      	str	r1, [r1, #12]
    8e66:	deff      	udf	#255	; 0xff
    8e68:	40001800 	.word	0x40001800

00008e6c <EIC_Handler>:

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    8e6c:	2300      	movs	r3, #0
{
    8e6e:	b570      	push	{r4, r5, r6, lr}
	uint32_t eic_mask   = (1UL << (channel % 32));
    8e70:	2501      	movs	r5, #1
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    8e72:	4c0b      	ldr	r4, [pc, #44]	; (8ea0 <EIC_Handler+0x34>)
    8e74:	7023      	strb	r3, [r4, #0]
    8e76:	7823      	ldrb	r3, [r4, #0]
    8e78:	2b0f      	cmp	r3, #15
    8e7a:	d900      	bls.n	8e7e <EIC_Handler+0x12>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    8e7c:	bd70      	pop	{r4, r5, r6, pc}
    8e7e:	0029      	movs	r1, r5
    8e80:	4099      	lsls	r1, r3
	return (eic_module->INTFLAG.reg & eic_mask);
    8e82:	4a08      	ldr	r2, [pc, #32]	; (8ea4 <EIC_Handler+0x38>)
    8e84:	6910      	ldr	r0, [r2, #16]
		if (extint_chan_is_detected(_current_channel)) {
    8e86:	4208      	tst	r0, r1
    8e88:	d006      	beq.n	8e98 <EIC_Handler+0x2c>
	eic_module->INTFLAG.reg = eic_mask;
    8e8a:	6111      	str	r1, [r2, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    8e8c:	4a06      	ldr	r2, [pc, #24]	; (8ea8 <EIC_Handler+0x3c>)
    8e8e:	009b      	lsls	r3, r3, #2
    8e90:	589b      	ldr	r3, [r3, r2]
    8e92:	2b00      	cmp	r3, #0
    8e94:	d000      	beq.n	8e98 <EIC_Handler+0x2c>
				_extint_dev.callbacks[_current_channel]();
    8e96:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    8e98:	7823      	ldrb	r3, [r4, #0]
    8e9a:	3301      	adds	r3, #1
    8e9c:	7023      	strb	r3, [r4, #0]
    8e9e:	e7ea      	b.n	8e76 <EIC_Handler+0xa>
    8ea0:	20000840 	.word	0x20000840
    8ea4:	40001800 	.word	0x40001800
    8ea8:	200007c0 	.word	0x200007c0

00008eac <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
    8eac:	b570      	push	{r4, r5, r6, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
    8eae:	4a0a      	ldr	r2, [pc, #40]	; (8ed8 <EVSYS_Handler+0x2c>)
	struct events_hook *current_hook = _events_inst.hook_list;
    8eb0:	4c0a      	ldr	r4, [pc, #40]	; (8edc <EVSYS_Handler+0x30>)
	flag = EVSYS->INTFLAG.reg;
    8eb2:	6993      	ldr	r3, [r2, #24]
	_events_inst.interrupt_flag_buffer |= flag;
    8eb4:	68a1      	ldr	r1, [r4, #8]
	struct events_hook *current_hook = _events_inst.hook_list;
    8eb6:	6925      	ldr	r5, [r4, #16]
	_events_inst.interrupt_flag_buffer |= flag;
    8eb8:	430b      	orrs	r3, r1
    8eba:	60a3      	str	r3, [r4, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
    8ebc:	4b08      	ldr	r3, [pc, #32]	; (8ee0 <EVSYS_Handler+0x34>)
    8ebe:	6193      	str	r3, [r2, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
    8ec0:	2d00      	cmp	r5, #0
    8ec2:	d104      	bne.n	8ece <EVSYS_Handler+0x22>
		current_hook->hook_func(current_hook->resource);
		current_hook = current_hook->next;
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
    8ec4:	68e2      	ldr	r2, [r4, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
    8ec6:	68a3      	ldr	r3, [r4, #8]
    8ec8:	4393      	bics	r3, r2
    8eca:	60a3      	str	r3, [r4, #8]
}
    8ecc:	bd70      	pop	{r4, r5, r6, pc}
		current_hook->hook_func(current_hook->resource);
    8ece:	6828      	ldr	r0, [r5, #0]
    8ed0:	686b      	ldr	r3, [r5, #4]
    8ed2:	4798      	blx	r3
		current_hook = current_hook->next;
    8ed4:	68ad      	ldr	r5, [r5, #8]
    8ed6:	e7f3      	b.n	8ec0 <EVSYS_Handler+0x14>
    8ed8:	42000400 	.word	0x42000400
    8edc:	20000014 	.word	0x20000014
    8ee0:	0f0fffff 	.word	0x0f0fffff

00008ee4 <_system_events_init>:
    8ee4:	2302      	movs	r3, #2
    8ee6:	4a05      	ldr	r2, [pc, #20]	; (8efc <_system_events_init+0x18>)
    8ee8:	6a11      	ldr	r1, [r2, #32]
    8eea:	430b      	orrs	r3, r1
    8eec:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
    8eee:	2301      	movs	r3, #1
    8ef0:	4a03      	ldr	r2, [pc, #12]	; (8f00 <_system_events_init+0x1c>)
    8ef2:	7013      	strb	r3, [r2, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
    8ef4:	7811      	ldrb	r1, [r2, #0]
    8ef6:	4219      	tst	r1, r3
    8ef8:	d1fc      	bne.n	8ef4 <_system_events_init+0x10>
	}
}
    8efa:	4770      	bx	lr
    8efc:	40000400 	.word	0x40000400
    8f00:	42000400 	.word	0x42000400

00008f04 <events_get_config_defaults>:
void events_get_config_defaults(struct events_config *config)
{
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
    8f04:	2301      	movs	r3, #1
    8f06:	7003      	strb	r3, [r0, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
    8f08:	2300      	movs	r3, #0
    8f0a:	7043      	strb	r3, [r0, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
    8f0c:	7083      	strb	r3, [r0, #2]
	config->clock_source = GCLK_GENERATOR_0;
    8f0e:	70c3      	strb	r3, [r0, #3]
}
    8f10:	4770      	bx	lr
	...

00008f14 <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
    8f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cpu_irq_enter_critical();
    8f16:	4b21      	ldr	r3, [pc, #132]	; (8f9c <events_allocate+0x88>)
    8f18:	0004      	movs	r4, r0
    8f1a:	000e      	movs	r6, r1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
    8f1c:	2500      	movs	r5, #0
    8f1e:	4798      	blx	r3
		if(!(tmp & 0x00000001)) {
    8f20:	2201      	movs	r2, #1
	tmp = _events_inst.allocated_channels;
    8f22:	491f      	ldr	r1, [pc, #124]	; (8fa0 <events_allocate+0x8c>)
    8f24:	6808      	ldr	r0, [r1, #0]
		if(!(tmp & 0x00000001)) {
    8f26:	4210      	tst	r0, r2
    8f28:	d130      	bne.n	8f8c <events_allocate+0x78>
			_events_inst.allocated_channels |= 1 << count;
    8f2a:	40aa      	lsls	r2, r5
			allocated = true;
    8f2c:	2701      	movs	r7, #1
			_events_inst.allocated_channels |= 1 << count;
    8f2e:	680b      	ldr	r3, [r1, #0]
    8f30:	431a      	orrs	r2, r3
			_events_inst.free_channels--;
    8f32:	790b      	ldrb	r3, [r1, #4]
			_events_inst.allocated_channels |= 1 << count;
    8f34:	600a      	str	r2, [r1, #0]
			_events_inst.free_channels--;
    8f36:	3b01      	subs	r3, #1
    8f38:	710b      	strb	r3, [r1, #4]
	cpu_irq_leave_critical();
    8f3a:	4b1a      	ldr	r3, [pc, #104]	; (8fa4 <events_allocate+0x90>)
    8f3c:	4798      	blx	r3
	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
    8f3e:	2014      	movs	r0, #20
	if(!allocated) {
    8f40:	2f00      	cmp	r7, #0
    8f42:	d022      	beq.n	8f8a <events_allocate+0x76>
	}

	resource->channel = new_channel;
    8f44:	7025      	strb	r5, [r4, #0]

	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
    8f46:	7873      	ldrb	r3, [r6, #1]
    8f48:	2b02      	cmp	r3, #2
    8f4a:	d00a      	beq.n	8f62 <events_allocate+0x4e>
		/* Set up a GLCK channel to use with the specific channel */
		struct system_gclk_chan_config gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator =
    8f4c:	78f3      	ldrb	r3, [r6, #3]
				(enum gclk_generator)config->clock_source;
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
    8f4e:	1def      	adds	r7, r5, #7
		gclk_chan_conf.source_generator =
    8f50:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
    8f52:	b2ff      	uxtb	r7, r7
		gclk_chan_conf.source_generator =
    8f54:	700b      	strb	r3, [r1, #0]
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
    8f56:	0038      	movs	r0, r7
    8f58:	4b13      	ldr	r3, [pc, #76]	; (8fa8 <events_allocate+0x94>)
    8f5a:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
    8f5c:	0038      	movs	r0, r7
    8f5e:	4b13      	ldr	r3, [pc, #76]	; (8fac <events_allocate+0x98>)
    8f60:	4798      	blx	r3
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
    8f62:	22fe      	movs	r2, #254	; 0xfe
			     EVSYS_CHANNEL_PATH(config->path)         |
    8f64:	21c0      	movs	r1, #192	; 0xc0
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
    8f66:	78b3      	ldrb	r3, [r6, #2]
    8f68:	03d2      	lsls	r2, r2, #15
    8f6a:	041b      	lsls	r3, r3, #16
    8f6c:	4013      	ands	r3, r2
			     EVSYS_CHANNEL_PATH(config->path)         |
    8f6e:	7872      	ldrb	r2, [r6, #1]
    8f70:	0489      	lsls	r1, r1, #18
    8f72:	0612      	lsls	r2, r2, #24
    8f74:	400a      	ands	r2, r1
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
    8f76:	21c0      	movs	r1, #192	; 0xc0


	return STATUS_OK;
    8f78:	2000      	movs	r0, #0
			     EVSYS_CHANNEL_PATH(config->path)         |
    8f7a:	4313      	orrs	r3, r2
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
    8f7c:	7832      	ldrb	r2, [r6, #0]
    8f7e:	0509      	lsls	r1, r1, #20
    8f80:	0692      	lsls	r2, r2, #26
    8f82:	400a      	ands	r2, r1
			     EVSYS_CHANNEL_PATH(config->path)         |
    8f84:	4313      	orrs	r3, r2
    8f86:	432b      	orrs	r3, r5
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
    8f88:	6063      	str	r3, [r4, #4]
}
    8f8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
    8f8c:	3501      	adds	r5, #1
    8f8e:	b2ed      	uxtb	r5, r5
		tmp = tmp >> 1;
    8f90:	0840      	lsrs	r0, r0, #1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
    8f92:	2d0c      	cmp	r5, #12
    8f94:	d1c7      	bne.n	8f26 <events_allocate+0x12>
	bool allocated = false;
    8f96:	2700      	movs	r7, #0
    8f98:	e7cf      	b.n	8f3a <events_allocate+0x26>
    8f9a:	46c0      	nop			; (mov r8, r8)
    8f9c:	00009851 	.word	0x00009851
    8fa0:	20000014 	.word	0x20000014
    8fa4:	00009885 	.word	0x00009885
    8fa8:	00009f21 	.word	0x00009f21
    8fac:	00009e99 	.word	0x00009e99

00008fb0 <events_attach_user>:
enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
    8fb0:	22f8      	movs	r2, #248	; 0xf8
    8fb2:	7803      	ldrb	r3, [r0, #0]
    8fb4:	0152      	lsls	r2, r2, #5
    8fb6:	3301      	adds	r3, #1
    8fb8:	021b      	lsls	r3, r3, #8
    8fba:	4013      	ands	r3, r2
			  EVSYS_USER_USER(user_id);
    8fbc:	221f      	movs	r2, #31
    8fbe:	4011      	ands	r1, r2
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
    8fc0:	4a03      	ldr	r2, [pc, #12]	; (8fd0 <events_attach_user+0x20>)
    8fc2:	430b      	orrs	r3, r1
    8fc4:	8113      	strh	r3, [r2, #8]

	/* Then configure the channel */
	EVSYS->CHANNEL.reg = resource->channel_reg;
    8fc6:	6843      	ldr	r3, [r0, #4]

	return STATUS_OK;
}
    8fc8:	2000      	movs	r0, #0
	EVSYS->CHANNEL.reg = resource->channel_reg;
    8fca:	6053      	str	r3, [r2, #4]
}
    8fcc:	4770      	bx	lr
    8fce:	46c0      	nop			; (mov r8, r8)
    8fd0:	42000400 	.word	0x42000400

00008fd4 <ac_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    8fd4:	0093      	lsls	r3, r2, #2
    8fd6:	18c3      	adds	r3, r0, r3
    8fd8:	6059      	str	r1, [r3, #4]

	/* Set software flag for callback */
	module->register_callback_mask |= (1 << callback_type);
    8fda:	2301      	movs	r3, #1
    8fdc:	4093      	lsls	r3, r2
    8fde:	001a      	movs	r2, r3
    8fe0:	7e03      	ldrb	r3, [r0, #24]
    8fe2:	4313      	orrs	r3, r2
    8fe4:	7603      	strb	r3, [r0, #24]

	return STATUS_OK;
}
    8fe6:	2000      	movs	r0, #0
    8fe8:	4770      	bx	lr
	...

00008fec <_ac_interrupt_handler>:
 * that are registered and enabled.
 *
 * \param [in] instance_index  Default value 0
 */
void _ac_interrupt_handler(const uint32_t instance_index)
{
    8fec:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask =
			_ac_instance[instance_index]->hw->INTFLAG.reg &
			(module->register_callback_mask & module->enable_callback_mask);

	/* Check if comparator channel 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
    8fee:	2601      	movs	r6, #1
	struct ac_module *module = _ac_instance[instance_index];
    8ff0:	4b10      	ldr	r3, [pc, #64]	; (9034 <_ac_interrupt_handler+0x48>)
    8ff2:	0080      	lsls	r0, r0, #2
    8ff4:	58c4      	ldr	r4, [r0, r3]
			_ac_instance[instance_index]->hw->INTFLAG.reg &
    8ff6:	6823      	ldr	r3, [r4, #0]
	interrupt_and_callback_status_mask =
    8ff8:	7e22      	ldrb	r2, [r4, #24]
    8ffa:	7e65      	ldrb	r5, [r4, #25]
			_ac_instance[instance_index]->hw->INTFLAG.reg &
    8ffc:	799b      	ldrb	r3, [r3, #6]
	interrupt_and_callback_status_mask =
    8ffe:	4015      	ands	r5, r2
    9000:	401d      	ands	r5, r3
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP0) {
    9002:	4235      	tst	r5, r6
    9004:	d004      	beq.n	9010 <_ac_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_0])(module);
    9006:	6863      	ldr	r3, [r4, #4]
    9008:	0020      	movs	r0, r4
    900a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP0;
    900c:	6823      	ldr	r3, [r4, #0]
    900e:	719e      	strb	r6, [r3, #6]
	}

	/* Check if comparator channel 1 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_COMP1) {
    9010:	2602      	movs	r6, #2
    9012:	4235      	tst	r5, r6
    9014:	d004      	beq.n	9020 <_ac_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_COMPARATOR_1])(module);
    9016:	68a3      	ldr	r3, [r4, #8]
    9018:	0020      	movs	r0, r4
    901a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_COMP1;
    901c:	6823      	ldr	r3, [r4, #0]
    901e:	719e      	strb	r6, [r3, #6]
	}

	/* Check if window 0 needs to be serviced */
	if (interrupt_and_callback_status_mask & AC_INTFLAG_WIN0) {
    9020:	2610      	movs	r6, #16
    9022:	4235      	tst	r5, r6
    9024:	d004      	beq.n	9030 <_ac_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[AC_CALLBACK_WINDOW_0])(module);
    9026:	6963      	ldr	r3, [r4, #20]
    9028:	0020      	movs	r0, r4
    902a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN0;
    902c:	6823      	ldr	r3, [r4, #0]
    902e:	719e      	strb	r6, [r3, #6]
		/* Clear interrupt flag */
		module->hw->INTFLAG.reg = AC_INTFLAG_WIN1;
	}
#  endif
#endif /* (AC_NUM_CMP > 2) */
}
    9030:	bd70      	pop	{r4, r5, r6, pc}
    9032:	46c0      	nop			; (mov r8, r8)
    9034:	20000844 	.word	0x20000844

00009038 <AC_Handler>:
{
    9038:	b510      	push	{r4, lr}
	_ac_interrupt_handler(0);
    903a:	2000      	movs	r0, #0
    903c:	4b01      	ldr	r3, [pc, #4]	; (9044 <AC_Handler+0xc>)
    903e:	4798      	blx	r3
}
    9040:	bd10      	pop	{r4, pc}
    9042:	46c0      	nop			; (mov r8, r8)
    9044:	00008fed 	.word	0x00008fed

00009048 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    9048:	4770      	bx	lr
	...

0000904c <nvm_is_ready>:
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    904c:	4b02      	ldr	r3, [pc, #8]	; (9058 <nvm_is_ready+0xc>)
    904e:	7d18      	ldrb	r0, [r3, #20]
    9050:	2301      	movs	r3, #1
    9052:	4018      	ands	r0, r3
}
    9054:	4770      	bx	lr
    9056:	46c0      	nop			; (mov r8, r8)
    9058:	41004000 	.word	0x41004000

0000905c <nvm_set_config>:
			PM->APBBMASK.reg |= mask;
    905c:	2304      	movs	r3, #4
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    905e:	b570      	push	{r4, r5, r6, lr}
    9060:	4a1c      	ldr	r2, [pc, #112]	; (90d4 <nvm_set_config+0x78>)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    9062:	4d1d      	ldr	r5, [pc, #116]	; (90d8 <nvm_set_config+0x7c>)
    9064:	69d1      	ldr	r1, [r2, #28]
{
    9066:	0004      	movs	r4, r0
    9068:	430b      	orrs	r3, r1
    906a:	61d3      	str	r3, [r2, #28]
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    906c:	2320      	movs	r3, #32
    906e:	33ff      	adds	r3, #255	; 0xff
    9070:	832b      	strh	r3, [r5, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    9072:	4b1a      	ldr	r3, [pc, #104]	; (90dc <nvm_set_config+0x80>)
    9074:	4798      	blx	r3
    9076:	0003      	movs	r3, r0
		return STATUS_BUSY;
    9078:	2005      	movs	r0, #5
	if (!nvm_is_ready()) {
    907a:	2b00      	cmp	r3, #0
    907c:	d028      	beq.n	90d0 <nvm_set_config+0x74>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    907e:	22c0      	movs	r2, #192	; 0xc0
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    9080:	211e      	movs	r1, #30
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    9082:	7823      	ldrb	r3, [r4, #0]
    9084:	0092      	lsls	r2, r2, #2
    9086:	021b      	lsls	r3, r3, #8
    9088:	4013      	ands	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    908a:	78a2      	ldrb	r2, [r4, #2]
    908c:	0052      	lsls	r2, r2, #1
    908e:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    9090:	2180      	movs	r1, #128	; 0x80
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    9092:	4313      	orrs	r3, r2
    9094:	7862      	ldrb	r2, [r4, #1]
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    9096:	02c9      	lsls	r1, r1, #11
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    9098:	01d2      	lsls	r2, r2, #7
    909a:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    909c:	78e2      	ldrb	r2, [r4, #3]
    909e:	0492      	lsls	r2, r2, #18
    90a0:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    90a2:	21c0      	movs	r1, #192	; 0xc0
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    90a4:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    90a6:	7922      	ldrb	r2, [r4, #4]
    90a8:	0289      	lsls	r1, r1, #10
    90aa:	0412      	lsls	r2, r2, #16
    90ac:	400a      	ands	r2, r1
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    90ae:	2108      	movs	r1, #8
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    90b0:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    90b2:	606b      	str	r3, [r5, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    90b4:	68ab      	ldr	r3, [r5, #8]
    90b6:	4a0a      	ldr	r2, [pc, #40]	; (90e0 <nvm_set_config+0x84>)
    90b8:	035b      	lsls	r3, r3, #13
    90ba:	0f5b      	lsrs	r3, r3, #29
    90bc:	4099      	lsls	r1, r3
    90be:	8011      	strh	r1, [r2, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    90c0:	68ab      	ldr	r3, [r5, #8]
    90c2:	8053      	strh	r3, [r2, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    90c4:	7863      	ldrb	r3, [r4, #1]
    90c6:	7113      	strb	r3, [r2, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    90c8:	8b28      	ldrh	r0, [r5, #24]
    90ca:	05c0      	lsls	r0, r0, #23
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
    90cc:	0fc0      	lsrs	r0, r0, #31
    90ce:	0100      	lsls	r0, r0, #4
}
    90d0:	bd70      	pop	{r4, r5, r6, pc}
    90d2:	46c0      	nop			; (mov r8, r8)
    90d4:	40000400 	.word	0x40000400
    90d8:	41004000 	.word	0x41004000
    90dc:	0000904d 	.word	0x0000904d
    90e0:	20000400 	.word	0x20000400

000090e4 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    90e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    90e6:	4a24      	ldr	r2, [pc, #144]	; (9178 <nvm_execute_command+0x94>)
{
    90e8:	9101      	str	r1, [sp, #4]
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    90ea:	8853      	ldrh	r3, [r2, #2]
    90ec:	8811      	ldrh	r1, [r2, #0]
    90ee:	9a01      	ldr	r2, [sp, #4]
    90f0:	434b      	muls	r3, r1
{
    90f2:	0004      	movs	r4, r0
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    90f4:	4293      	cmp	r3, r2
    90f6:	d207      	bcs.n	9108 <nvm_execute_command+0x24>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    90f8:	2280      	movs	r2, #128	; 0x80
    90fa:	9b01      	ldr	r3, [sp, #4]
    90fc:	491f      	ldr	r1, [pc, #124]	; (917c <nvm_execute_command+0x98>)
    90fe:	0192      	lsls	r2, r2, #6
    9100:	185b      	adds	r3, r3, r1
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    9102:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    9104:	4293      	cmp	r3, r2
    9106:	d80f      	bhi.n	9128 <nvm_execute_command+0x44>
	ctrlb_bak = nvm_module->CTRLB.reg;
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    9108:	2380      	movs	r3, #128	; 0x80
	ctrlb_bak = nvm_module->CTRLB.reg;
    910a:	4d1d      	ldr	r5, [pc, #116]	; (9180 <nvm_execute_command+0x9c>)
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    910c:	02db      	lsls	r3, r3, #11
	ctrlb_bak = nvm_module->CTRLB.reg;
    910e:	686f      	ldr	r7, [r5, #4]
    9110:	002e      	movs	r6, r5
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    9112:	433b      	orrs	r3, r7
    9114:	606b      	str	r3, [r5, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    9116:	2320      	movs	r3, #32
    9118:	33ff      	adds	r3, #255	; 0xff
    911a:	832b      	strh	r3, [r5, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    911c:	4b19      	ldr	r3, [pc, #100]	; (9184 <nvm_execute_command+0xa0>)
    911e:	4798      	blx	r3
    9120:	2800      	cmp	r0, #0
    9122:	d102      	bne.n	912a <nvm_execute_command+0x46>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    9124:	606f      	str	r7, [r5, #4]
		return STATUS_BUSY;
    9126:	3005      	adds	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    9128:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	switch (command) {
    912a:	2c06      	cmp	r4, #6
    912c:	d814      	bhi.n	9158 <nvm_execute_command+0x74>
    912e:	2c05      	cmp	r4, #5
    9130:	d21b      	bcs.n	916a <nvm_execute_command+0x86>
    9132:	2c02      	cmp	r4, #2
    9134:	d001      	beq.n	913a <nvm_execute_command+0x56>
    9136:	2c04      	cmp	r4, #4
    9138:	d114      	bne.n	9164 <nvm_execute_command+0x80>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    913a:	9b01      	ldr	r3, [sp, #4]
    913c:	089b      	lsrs	r3, r3, #2
    913e:	005b      	lsls	r3, r3, #1
    9140:	61f3      	str	r3, [r6, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    9142:	23a5      	movs	r3, #165	; 0xa5
    9144:	021b      	lsls	r3, r3, #8
    9146:	431c      	orrs	r4, r3
    9148:	8034      	strh	r4, [r6, #0]
	while (!nvm_is_ready()) {
    914a:	4b0e      	ldr	r3, [pc, #56]	; (9184 <nvm_execute_command+0xa0>)
    914c:	4798      	blx	r3
    914e:	2800      	cmp	r0, #0
    9150:	d0fb      	beq.n	914a <nvm_execute_command+0x66>
	nvm_module->CTRLB.reg = ctrlb_bak;
    9152:	6077      	str	r7, [r6, #4]
	return STATUS_OK;
    9154:	2000      	movs	r0, #0
    9156:	e7e7      	b.n	9128 <nvm_execute_command+0x44>
	switch (command) {
    9158:	2c40      	cmp	r4, #64	; 0x40
    915a:	d303      	bcc.n	9164 <nvm_execute_command+0x80>
    915c:	2c41      	cmp	r4, #65	; 0x41
    915e:	d9ec      	bls.n	913a <nvm_execute_command+0x56>
    9160:	2c45      	cmp	r4, #69	; 0x45
    9162:	d9ee      	bls.n	9142 <nvm_execute_command+0x5e>
			nvm_module->CTRLB.reg = ctrlb_bak;
    9164:	6077      	str	r7, [r6, #4]
			return STATUS_ERR_INVALID_ARG;
    9166:	2017      	movs	r0, #23
    9168:	e7de      	b.n	9128 <nvm_execute_command+0x44>
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    916a:	8b2b      	ldrh	r3, [r5, #24]
    916c:	05db      	lsls	r3, r3, #23
    916e:	d5e4      	bpl.n	913a <nvm_execute_command+0x56>
				nvm_module->CTRLB.reg = ctrlb_bak;
    9170:	606f      	str	r7, [r5, #4]
				return STATUS_ERR_IO;
    9172:	2010      	movs	r0, #16
    9174:	e7d8      	b.n	9128 <nvm_execute_command+0x44>
    9176:	46c0      	nop			; (mov r8, r8)
    9178:	20000400 	.word	0x20000400
    917c:	ff7fc000 	.word	0xff7fc000
    9180:	41004000 	.word	0x41004000
    9184:	0000904d 	.word	0x0000904d

00009188 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    9188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    918a:	4e21      	ldr	r6, [pc, #132]	; (9210 <nvm_write_buffer+0x88>)
{
    918c:	9100      	str	r1, [sp, #0]
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    918e:	8833      	ldrh	r3, [r6, #0]
    9190:	8871      	ldrh	r1, [r6, #2]
{
    9192:	0015      	movs	r5, r2
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    9194:	4359      	muls	r1, r3
{
    9196:	0004      	movs	r4, r0
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    9198:	2218      	movs	r2, #24
	if (destination_address >
    919a:	4281      	cmp	r1, r0
    919c:	d326      	bcc.n	91ec <nvm_write_buffer+0x64>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    919e:	1e59      	subs	r1, r3, #1
    91a0:	4208      	tst	r0, r1
    91a2:	d123      	bne.n	91ec <nvm_write_buffer+0x64>
		return STATUS_ERR_BAD_ADDRESS;
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
		return STATUS_ERR_INVALID_ARG;
    91a4:	3a01      	subs	r2, #1
	if (length > _nvm_dev.page_size) {
    91a6:	42ab      	cmp	r3, r5
    91a8:	d320      	bcc.n	91ec <nvm_write_buffer+0x64>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    91aa:	4f1a      	ldr	r7, [pc, #104]	; (9214 <nvm_write_buffer+0x8c>)
    91ac:	47b8      	blx	r7
		return STATUS_BUSY;
    91ae:	2205      	movs	r2, #5
	if (!nvm_is_ready()) {
    91b0:	2800      	cmp	r0, #0
    91b2:	d01b      	beq.n	91ec <nvm_write_buffer+0x64>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    91b4:	4b18      	ldr	r3, [pc, #96]	; (9218 <nvm_write_buffer+0x90>)
    91b6:	4a19      	ldr	r2, [pc, #100]	; (921c <nvm_write_buffer+0x94>)
    91b8:	801a      	strh	r2, [r3, #0]
    91ba:	9301      	str	r3, [sp, #4]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    91bc:	47b8      	blx	r7
    91be:	2800      	cmp	r0, #0
    91c0:	d0fc      	beq.n	91bc <nvm_write_buffer+0x34>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    91c2:	2320      	movs	r3, #32
    91c4:	9a01      	ldr	r2, [sp, #4]
    91c6:	33ff      	adds	r3, #255	; 0xff
    91c8:	8313      	strh	r3, [r2, #24]

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    91ca:	2300      	movs	r3, #0
	uint32_t nvm_address = destination_address / 2;
    91cc:	0862      	lsrs	r2, r4, #1
    91ce:	0052      	lsls	r2, r2, #1
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    91d0:	1e68      	subs	r0, r5, #1
	for (uint16_t i = 0; i < length; i += 2) {
    91d2:	429d      	cmp	r5, r3
    91d4:	d80c      	bhi.n	91f0 <nvm_write_buffer+0x68>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    91d6:	2200      	movs	r2, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    91d8:	7933      	ldrb	r3, [r6, #4]
    91da:	4293      	cmp	r3, r2
    91dc:	d106      	bne.n	91ec <nvm_write_buffer+0x64>
    91de:	2d3f      	cmp	r5, #63	; 0x3f
    91e0:	d804      	bhi.n	91ec <nvm_write_buffer+0x64>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    91e2:	0021      	movs	r1, r4
    91e4:	2004      	movs	r0, #4
    91e6:	4b0e      	ldr	r3, [pc, #56]	; (9220 <nvm_write_buffer+0x98>)
    91e8:	4798      	blx	r3
    91ea:	0002      	movs	r2, r0
}
    91ec:	0010      	movs	r0, r2
    91ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		data = buffer[i];
    91f0:	9900      	ldr	r1, [sp, #0]
    91f2:	5cc9      	ldrb	r1, [r1, r3]
		if (i < (length - 1)) {
    91f4:	4283      	cmp	r3, r0
    91f6:	db05      	blt.n	9204 <nvm_write_buffer+0x7c>
		data = buffer[i];
    91f8:	b289      	uxth	r1, r1
	for (uint16_t i = 0; i < length; i += 2) {
    91fa:	3302      	adds	r3, #2
		NVM_MEMORY[nvm_address++] = data;
    91fc:	8011      	strh	r1, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    91fe:	b29b      	uxth	r3, r3
    9200:	3202      	adds	r2, #2
    9202:	e7e6      	b.n	91d2 <nvm_write_buffer+0x4a>
			data |= (buffer[i + 1] << 8);
    9204:	9f00      	ldr	r7, [sp, #0]
    9206:	18ff      	adds	r7, r7, r3
    9208:	787f      	ldrb	r7, [r7, #1]
    920a:	023f      	lsls	r7, r7, #8
    920c:	4339      	orrs	r1, r7
    920e:	e7f4      	b.n	91fa <nvm_write_buffer+0x72>
    9210:	20000400 	.word	0x20000400
    9214:	0000904d 	.word	0x0000904d
    9218:	41004000 	.word	0x41004000
    921c:	ffffa544 	.word	0xffffa544
    9220:	000090e5 	.word	0x000090e5

00009224 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    9224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    9226:	4b16      	ldr	r3, [pc, #88]	; (9280 <nvm_read_buffer+0x5c>)
{
    9228:	000f      	movs	r7, r1
    922a:	0016      	movs	r6, r2
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    922c:	8859      	ldrh	r1, [r3, #2]
    922e:	881a      	ldrh	r2, [r3, #0]
{
    9230:	0005      	movs	r5, r0
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    9232:	4351      	muls	r1, r2
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    9234:	2318      	movs	r3, #24
	if (source_address >
    9236:	4281      	cmp	r1, r0
    9238:	d314      	bcc.n	9264 <nvm_read_buffer+0x40>
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    923a:	1e54      	subs	r4, r2, #1
    923c:	4004      	ands	r4, r0
    923e:	d111      	bne.n	9264 <nvm_read_buffer+0x40>
		return STATUS_ERR_BAD_ADDRESS;
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
		return STATUS_ERR_INVALID_ARG;
    9240:	3b01      	subs	r3, #1
	if (length > _nvm_dev.page_size) {
    9242:	42b2      	cmp	r2, r6
    9244:	d30e      	bcc.n	9264 <nvm_read_buffer+0x40>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    9246:	4b0f      	ldr	r3, [pc, #60]	; (9284 <nvm_read_buffer+0x60>)
    9248:	4798      	blx	r3
		return STATUS_BUSY;
    924a:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    924c:	2800      	cmp	r0, #0
    924e:	d009      	beq.n	9264 <nvm_read_buffer+0x40>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    9250:	2220      	movs	r2, #32
    9252:	4b0d      	ldr	r3, [pc, #52]	; (9288 <nvm_read_buffer+0x64>)
    9254:	32ff      	adds	r2, #255	; 0xff

	uint32_t page_address = source_address / 2;
    9256:	086d      	lsrs	r5, r5, #1
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    9258:	831a      	strh	r2, [r3, #24]
    925a:	006d      	lsls	r5, r5, #1
		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    925c:	1e71      	subs	r1, r6, #1
	for (uint16_t i = 0; i < length; i += 2) {
    925e:	42a6      	cmp	r6, r4
    9260:	d802      	bhi.n	9268 <nvm_read_buffer+0x44>
    9262:	2300      	movs	r3, #0
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    9264:	0018      	movs	r0, r3
    9266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint16_t data = NVM_MEMORY[page_address++];
    9268:	882b      	ldrh	r3, [r5, #0]
    926a:	b29b      	uxth	r3, r3
		buffer[i] = (data & 0xFF);
    926c:	553b      	strb	r3, [r7, r4]
		if (i < (length - 1)) {
    926e:	428c      	cmp	r4, r1
    9270:	da02      	bge.n	9278 <nvm_read_buffer+0x54>
			buffer[i + 1] = (data >> 8);
    9272:	193a      	adds	r2, r7, r4
    9274:	0a1b      	lsrs	r3, r3, #8
    9276:	7053      	strb	r3, [r2, #1]
	for (uint16_t i = 0; i < length; i += 2) {
    9278:	3402      	adds	r4, #2
    927a:	b2a4      	uxth	r4, r4
    927c:	3502      	adds	r5, #2
    927e:	e7ee      	b.n	925e <nvm_read_buffer+0x3a>
    9280:	20000400 	.word	0x20000400
    9284:	0000904d 	.word	0x0000904d
    9288:	41004000 	.word	0x41004000

0000928c <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    928c:	b570      	push	{r4, r5, r6, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    928e:	4a13      	ldr	r2, [pc, #76]	; (92dc <nvm_erase_row+0x50>)
{
    9290:	0004      	movs	r4, r0
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    9292:	8813      	ldrh	r3, [r2, #0]
    9294:	8852      	ldrh	r2, [r2, #2]
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    9296:	2018      	movs	r0, #24
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    9298:	435a      	muls	r2, r3
	if (row_address >
    929a:	42a2      	cmp	r2, r4
    929c:	d31c      	bcc.n	92d8 <nvm_erase_row+0x4c>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    929e:	009b      	lsls	r3, r3, #2
    92a0:	3b01      	subs	r3, #1
    92a2:	421c      	tst	r4, r3
    92a4:	d118      	bne.n	92d8 <nvm_erase_row+0x4c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    92a6:	4d0e      	ldr	r5, [pc, #56]	; (92e0 <nvm_erase_row+0x54>)
    92a8:	47a8      	blx	r5
    92aa:	0003      	movs	r3, r0
		return STATUS_BUSY;
    92ac:	2005      	movs	r0, #5
	if (!nvm_is_ready()) {
    92ae:	2b00      	cmp	r3, #0
    92b0:	d012      	beq.n	92d8 <nvm_erase_row+0x4c>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    92b2:	2220      	movs	r2, #32
    92b4:	4b0b      	ldr	r3, [pc, #44]	; (92e4 <nvm_erase_row+0x58>)

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    92b6:	08a4      	lsrs	r4, r4, #2
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    92b8:	32ff      	adds	r2, #255	; 0xff
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    92ba:	0064      	lsls	r4, r4, #1
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    92bc:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    92be:	61dc      	str	r4, [r3, #28]
    92c0:	001c      	movs	r4, r3
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    92c2:	4a09      	ldr	r2, [pc, #36]	; (92e8 <nvm_erase_row+0x5c>)
    92c4:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
    92c6:	47a8      	blx	r5
    92c8:	2800      	cmp	r0, #0
    92ca:	d0fc      	beq.n	92c6 <nvm_erase_row+0x3a>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    92cc:	231c      	movs	r3, #28
    92ce:	8b20      	ldrh	r0, [r4, #24]
    92d0:	4018      	ands	r0, r3
		return STATUS_ABORTED;
	}

	return STATUS_OK;
    92d2:	1e43      	subs	r3, r0, #1
    92d4:	4198      	sbcs	r0, r3
    92d6:	0080      	lsls	r0, r0, #2
}
    92d8:	bd70      	pop	{r4, r5, r6, pc}
    92da:	46c0      	nop			; (mov r8, r8)
    92dc:	20000400 	.word	0x20000400
    92e0:	0000904d 	.word	0x0000904d
    92e4:	41004000 	.word	0x41004000
    92e8:	ffffa502 	.word	0xffffa502

000092ec <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    92ec:	2220      	movs	r2, #32
{
    92ee:	b510      	push	{r4, lr}
	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    92f0:	2407      	movs	r4, #7
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    92f2:	4b12      	ldr	r3, [pc, #72]	; (933c <nvm_get_parameters+0x50>)
    92f4:	32ff      	adds	r2, #255	; 0xff
    92f6:	831a      	strh	r2, [r3, #24]
	uint32_t param_reg = nvm_module->PARAM.reg;
    92f8:	689b      	ldr	r3, [r3, #8]
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    92fa:	3a18      	subs	r2, #24
    92fc:	0c19      	lsrs	r1, r3, #16
    92fe:	4021      	ands	r1, r4
    9300:	3aff      	subs	r2, #255	; 0xff
    9302:	408a      	lsls	r2, r1
	parameters->page_size =
    9304:	7002      	strb	r2, [r0, #0]
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    9306:	4a0e      	ldr	r2, [pc, #56]	; (9340 <nvm_get_parameters+0x54>)
	parameters->nvm_number_of_pages =
    9308:	8043      	strh	r3, [r0, #2]
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    930a:	8813      	ldrh	r3, [r2, #0]
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;
    930c:	091b      	lsrs	r3, r3, #4
	uint16_t eeprom_fuse_value =
    930e:	4023      	ands	r3, r4

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    9310:	42a3      	cmp	r3, r4
    9312:	d109      	bne.n	9328 <nvm_get_parameters+0x3c>
		parameters->eeprom_number_of_pages = 0;
    9314:	2300      	movs	r3, #0
	}
	else {
		parameters->eeprom_number_of_pages =
    9316:	6043      	str	r3, [r0, #4]
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
    9318:	2307      	movs	r3, #7
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    931a:	8812      	ldrh	r2, [r2, #0]
	uint16_t boot_fuse_value =
    931c:	401a      	ands	r2, r3
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    931e:	429a      	cmp	r2, r3
    9320:	d107      	bne.n	9332 <nvm_get_parameters+0x46>
		parameters->bootloader_number_of_pages = 0;
    9322:	2300      	movs	r3, #0
    9324:	6083      	str	r3, [r0, #8]
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
	}
}
    9326:	bd10      	pop	{r4, pc}
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    9328:	2106      	movs	r1, #6
    932a:	1ac9      	subs	r1, r1, r3
    932c:	2304      	movs	r3, #4
    932e:	408b      	lsls	r3, r1
    9330:	e7f1      	b.n	9316 <nvm_get_parameters+0x2a>
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    9332:	1a9b      	subs	r3, r3, r2
    9334:	2204      	movs	r2, #4
    9336:	409a      	lsls	r2, r3
		parameters->bootloader_number_of_pages =
    9338:	6082      	str	r2, [r0, #8]
}
    933a:	e7f4      	b.n	9326 <nvm_get_parameters+0x3a>
    933c:	41004000 	.word	0x41004000
    9340:	00804000 	.word	0x00804000

00009344 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    9344:	b507      	push	{r0, r1, r2, lr}
	config->mux_position = SYSTEM_PINMUX_GPIO;
    9346:	2280      	movs	r2, #128	; 0x80
    9348:	ab01      	add	r3, sp, #4
    934a:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    934c:	780a      	ldrb	r2, [r1, #0]
    934e:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    9350:	784a      	ldrb	r2, [r1, #1]
    9352:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    9354:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    9356:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
    9358:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    935a:	4b01      	ldr	r3, [pc, #4]	; (9360 <port_pin_set_config+0x1c>)
    935c:	4798      	blx	r3
}
    935e:	bd07      	pop	{r0, r1, r2, pc}
    9360:	00009ff5 	.word	0x00009ff5

00009364 <_eeprom_emulator_nvm_erase_row>:
 *
 *  \param[in] row  Physical row in EEPROM space to erase
 */
static void _eeprom_emulator_nvm_erase_row(
		const uint8_t row)
{
    9364:	b510      	push	{r4, lr}
	enum status_code error_code = STATUS_OK;

	do {
		error_code = nvm_erase_row(
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
    9366:	0204      	lsls	r4, r0, #8
    9368:	4b03      	ldr	r3, [pc, #12]	; (9378 <_eeprom_emulator_nvm_erase_row+0x14>)
    936a:	6858      	ldr	r0, [r3, #4]
		error_code = nvm_erase_row(
    936c:	4b03      	ldr	r3, [pc, #12]	; (937c <_eeprom_emulator_nvm_erase_row+0x18>)
				(uint32_t)&_eeprom_instance.flash[row * NVMCTRL_ROW_PAGES]);
    936e:	1900      	adds	r0, r0, r4
		error_code = nvm_erase_row(
    9370:	4798      	blx	r3
	} while (error_code == STATUS_BUSY);
    9372:	2805      	cmp	r0, #5
    9374:	d0f8      	beq.n	9368 <_eeprom_emulator_nvm_erase_row+0x4>
}
    9376:	bd10      	pop	{r4, pc}
    9378:	20000408 	.word	0x20000408
    937c:	0000928d 	.word	0x0000928d

00009380 <_eeprom_emulator_update_page_mapping>:

/**
 * \brief Creates a map in SRAM to translate logical EEPROM pages to physical FLASH pages.
 */
static void _eeprom_emulator_update_page_mapping(void)
{
    9380:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
    9382:	2500      	movs	r5, #0
{
    9384:	b085      	sub	sp, #20
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
    9386:	4a38      	ldr	r2, [pc, #224]	; (9468 <_eeprom_emulator_update_page_mapping+0xe8>)
    9388:	8911      	ldrh	r1, [r2, #8]
    938a:	428d      	cmp	r5, r1
    938c:	d32b      	bcc.n	93e6 <_eeprom_emulator_update_page_mapping+0x66>
		/* Read in the logical page stored in the current physical page */
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;

		/* If the logical page number is valid, add it to the mapping */
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
				(logical_page < _eeprom_instance.logical_pages)) {
    938e:	2300      	movs	r3, #0
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
    9390:	6856      	ldr	r6, [r2, #4]
				(logical_page < _eeprom_instance.logical_pages)) {
    9392:	7a95      	ldrb	r5, [r2, #10]
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
    9394:	1e4f      	subs	r7, r1, #1
	for (uint16_t c = 0; c < _eeprom_instance.physical_pages; c++) {
    9396:	b298      	uxth	r0, r3
    9398:	4281      	cmp	r1, r0
    939a:	d855      	bhi.n	9448 <_eeprom_emulator_update_page_mapping+0xc8>
		}
	}

	/* Use an invalid page number as the spare row until a valid one has been
	 * found */
	_eeprom_instance.spare_row = EEPROM_INVALID_ROW_NUMBER;
    939c:	0013      	movs	r3, r2
    939e:	203f      	movs	r0, #63	; 0x3f
    93a0:	3387      	adds	r3, #135	; 0x87
    93a2:	7018      	strb	r0, [r3, #0]

	/* Scan through all physical rows, to find an erased row to use as the
	 * spare */
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    93a4:	2000      	movs	r0, #0

		/* Look through pages within the row to see if they are all erased */
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
			uint16_t physical_page = (c * NVMCTRL_ROW_PAGES) + c2;

			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    93a6:	1e4b      	subs	r3, r1, #1
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    93a8:	088f      	lsrs	r7, r1, #2
			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    93aa:	9302      	str	r3, [sp, #8]
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    93ac:	42b8      	cmp	r0, r7
    93ae:	d018      	beq.n	93e2 <_eeprom_emulator_update_page_mapping+0x62>
    93b0:	0083      	lsls	r3, r0, #2
    93b2:	b29b      	uxth	r3, r3
    93b4:	1d1d      	adds	r5, r3, #4
    93b6:	b2a9      	uxth	r1, r5
    93b8:	2501      	movs	r5, #1
    93ba:	1c44      	adds	r4, r0, #1
    93bc:	b2a4      	uxth	r4, r4
    93be:	9101      	str	r1, [sp, #4]
			if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    93c0:	9902      	ldr	r1, [sp, #8]
    93c2:	428b      	cmp	r3, r1
    93c4:	d004      	beq.n	93d0 <_eeprom_emulator_update_page_mapping+0x50>
				continue;
			}

			if (_eeprom_instance.flash[physical_page].header.logical_page !=
    93c6:	0199      	lsls	r1, r3, #6
    93c8:	5d89      	ldrb	r1, [r1, r6]
    93ca:	29ff      	cmp	r1, #255	; 0xff
    93cc:	d000      	beq.n	93d0 <_eeprom_emulator_update_page_mapping+0x50>
					EEPROM_INVALID_PAGE_NUMBER) {
				spare_row_found = false;
    93ce:	2500      	movs	r5, #0
    93d0:	3301      	adds	r3, #1
		for (uint8_t c2 = 0; c2 < NVMCTRL_ROW_PAGES; c2++) {
    93d2:	9901      	ldr	r1, [sp, #4]
    93d4:	b29b      	uxth	r3, r3
    93d6:	428b      	cmp	r3, r1
    93d8:	d1f2      	bne.n	93c0 <_eeprom_emulator_update_page_mapping+0x40>
			}
		}

		/* If we've now found the spare row, store it and abort the search */
		if (spare_row_found == true) {
    93da:	2d00      	cmp	r5, #0
    93dc:	d041      	beq.n	9462 <_eeprom_emulator_update_page_mapping+0xe2>
			_eeprom_instance.spare_row = c;
    93de:	3287      	adds	r2, #135	; 0x87
    93e0:	7010      	strb	r0, [r2, #0]
			break;
		}
	}
}
    93e2:	b005      	add	sp, #20
    93e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint16_t pre_logical_page = _eeprom_instance.flash[i].header.logical_page;
    93e6:	6853      	ldr	r3, [r2, #4]
    93e8:	01ae      	lsls	r6, r5, #6
    93ea:	5d9f      	ldrb	r7, [r3, r6]
		if( pre_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
    93ec:	2fff      	cmp	r7, #255	; 0xff
    93ee:	d102      	bne.n	93f6 <_eeprom_emulator_update_page_mapping+0x76>
	for (i = 0; i < _eeprom_instance.physical_pages; i=i+4) {
    93f0:	3504      	adds	r5, #4
    93f2:	b2ad      	uxth	r5, r5
    93f4:	e7c7      	b.n	9386 <_eeprom_emulator_update_page_mapping+0x6>
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
    93f6:	0033      	movs	r3, r6
    93f8:	3380      	adds	r3, #128	; 0x80
    93fa:	9302      	str	r3, [sp, #8]
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
    93fc:	3b40      	subs	r3, #64	; 0x40
    93fe:	9303      	str	r3, [sp, #12]
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
    9400:	08ab      	lsrs	r3, r5, #2
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
    9402:	1d2c      	adds	r4, r5, #4
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
    9404:	b2db      	uxtb	r3, r3
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
    9406:	b2a4      	uxth	r4, r4
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
    9408:	9301      	str	r3, [sp, #4]
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
    940a:	4a17      	ldr	r2, [pc, #92]	; (9468 <_eeprom_emulator_update_page_mapping+0xe8>)
    940c:	8913      	ldrh	r3, [r2, #8]
    940e:	429c      	cmp	r4, r3
    9410:	d2ee      	bcs.n	93f0 <_eeprom_emulator_update_page_mapping+0x70>
			if (j == EEPROM_MASTER_PAGE_NUMBER) {
    9412:	3b01      	subs	r3, #1
    9414:	429c      	cmp	r4, r3
    9416:	d014      	beq.n	9442 <_eeprom_emulator_update_page_mapping+0xc2>
			uint16_t next_logical_page = _eeprom_instance.flash[j].header.logical_page;
    9418:	6853      	ldr	r3, [r2, #4]
    941a:	01a2      	lsls	r2, r4, #6
    941c:	5c9a      	ldrb	r2, [r3, r2]
			if( next_logical_page == EEPROM_INVALID_PAGE_NUMBER) {
    941e:	2aff      	cmp	r2, #255	; 0xff
    9420:	d00f      	beq.n	9442 <_eeprom_emulator_update_page_mapping+0xc2>
			if(pre_logical_page == next_logical_page) {
    9422:	4297      	cmp	r7, r2
    9424:	d10d      	bne.n	9442 <_eeprom_emulator_update_page_mapping+0xc2>
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
    9426:	9a02      	ldr	r2, [sp, #8]
	if((_eeprom_instance.flash[phy_page].header.logical_page
    9428:	5d99      	ldrb	r1, [r3, r6]
		== _eeprom_instance.flash[phy_page+2].header.logical_page)
    942a:	5c9a      	ldrb	r2, [r3, r2]
	if((_eeprom_instance.flash[phy_page].header.logical_page
    942c:	4291      	cmp	r1, r2
    942e:	d005      	beq.n	943c <_eeprom_emulator_update_page_mapping+0xbc>
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
    9430:	9903      	ldr	r1, [sp, #12]
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
    9432:	08a0      	lsrs	r0, r4, #2
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
    9434:	5c5b      	ldrb	r3, [r3, r1]
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
    9436:	b2c0      	uxtb	r0, r0
		|| (_eeprom_instance.flash[phy_page+1].header.logical_page
    9438:	4293      	cmp	r3, r2
    943a:	d100      	bne.n	943e <_eeprom_emulator_update_page_mapping+0xbe>
		 _eeprom_emulator_nvm_erase_row(pre_phy_page/4);
    943c:	9801      	ldr	r0, [sp, #4]
		_eeprom_emulator_nvm_erase_row(next_phy_page/4);
    943e:	4b0b      	ldr	r3, [pc, #44]	; (946c <_eeprom_emulator_update_page_mapping+0xec>)
    9440:	4798      	blx	r3
		for (j = NVMCTRL_ROW_PAGES+i; j < _eeprom_instance.physical_pages; j=j+4) {
    9442:	3404      	adds	r4, #4
    9444:	b2a4      	uxth	r4, r4
    9446:	e7e0      	b.n	940a <_eeprom_emulator_update_page_mapping+0x8a>
		if (c == EEPROM_MASTER_PAGE_NUMBER) {
    9448:	429f      	cmp	r7, r3
    944a:	d008      	beq.n	945e <_eeprom_emulator_update_page_mapping+0xde>
		uint16_t logical_page = _eeprom_instance.flash[c].header.logical_page;
    944c:	0198      	lsls	r0, r3, #6
    944e:	5c30      	ldrb	r0, [r6, r0]
    9450:	b284      	uxth	r4, r0
		if ((logical_page != EEPROM_INVALID_PAGE_NUMBER) &&
    9452:	2cff      	cmp	r4, #255	; 0xff
    9454:	d003      	beq.n	945e <_eeprom_emulator_update_page_mapping+0xde>
    9456:	42ac      	cmp	r4, r5
    9458:	d201      	bcs.n	945e <_eeprom_emulator_update_page_mapping+0xde>
			_eeprom_instance.page_map[logical_page] = c;
    945a:	1810      	adds	r0, r2, r0
    945c:	72c3      	strb	r3, [r0, #11]
    945e:	3301      	adds	r3, #1
    9460:	e799      	b.n	9396 <_eeprom_emulator_update_page_mapping+0x16>
	for (uint16_t c = 0; c < (_eeprom_instance.physical_pages / NVMCTRL_ROW_PAGES); c++) {
    9462:	0020      	movs	r0, r4
    9464:	e7a2      	b.n	93ac <_eeprom_emulator_update_page_mapping+0x2c>
    9466:	46c0      	nop			; (mov r8, r8)
    9468:	20000408 	.word	0x20000408
    946c:	00009365 	.word	0x00009365

00009470 <_eeprom_emulator_nvm_read_page>:
{
    9470:	b570      	push	{r4, r5, r6, lr}
    9472:	000d      	movs	r5, r1
				(uint32_t)&_eeprom_instance.flash[physical_page],
    9474:	0184      	lsls	r4, r0, #6
    9476:	4b05      	ldr	r3, [pc, #20]	; (948c <_eeprom_emulator_nvm_read_page+0x1c>)
		error_code = nvm_read_buffer(
    9478:	2240      	movs	r2, #64	; 0x40
				(uint32_t)&_eeprom_instance.flash[physical_page],
    947a:	6858      	ldr	r0, [r3, #4]
		error_code = nvm_read_buffer(
    947c:	0029      	movs	r1, r5
				(uint32_t)&_eeprom_instance.flash[physical_page],
    947e:	1900      	adds	r0, r0, r4
		error_code = nvm_read_buffer(
    9480:	4b03      	ldr	r3, [pc, #12]	; (9490 <_eeprom_emulator_nvm_read_page+0x20>)
    9482:	4798      	blx	r3
	} while (error_code == STATUS_BUSY);
    9484:	2805      	cmp	r0, #5
    9486:	d0f6      	beq.n	9476 <_eeprom_emulator_nvm_read_page+0x6>
}
    9488:	bd70      	pop	{r4, r5, r6, pc}
    948a:	46c0      	nop			; (mov r8, r8)
    948c:	20000408 	.word	0x20000408
    9490:	00009225 	.word	0x00009225

00009494 <_eeprom_emulator_nvm_fill_cache>:
{
    9494:	b570      	push	{r4, r5, r6, lr}
    9496:	000d      	movs	r5, r1
				(uint32_t)&_eeprom_instance.flash[physical_page],
    9498:	0184      	lsls	r4, r0, #6
    949a:	4b05      	ldr	r3, [pc, #20]	; (94b0 <_eeprom_emulator_nvm_fill_cache+0x1c>)
		error_code = nvm_write_buffer(
    949c:	2240      	movs	r2, #64	; 0x40
				(uint32_t)&_eeprom_instance.flash[physical_page],
    949e:	6858      	ldr	r0, [r3, #4]
		error_code = nvm_write_buffer(
    94a0:	0029      	movs	r1, r5
				(uint32_t)&_eeprom_instance.flash[physical_page],
    94a2:	1900      	adds	r0, r0, r4
		error_code = nvm_write_buffer(
    94a4:	4b03      	ldr	r3, [pc, #12]	; (94b4 <_eeprom_emulator_nvm_fill_cache+0x20>)
    94a6:	4798      	blx	r3
	} while (error_code == STATUS_BUSY);
    94a8:	2805      	cmp	r0, #5
    94aa:	d0f6      	beq.n	949a <_eeprom_emulator_nvm_fill_cache+0x6>
}
    94ac:	bd70      	pop	{r4, r5, r6, pc}
    94ae:	46c0      	nop			; (mov r8, r8)
    94b0:	20000408 	.word	0x20000408
    94b4:	00009189 	.word	0x00009189

000094b8 <_eeprom_emulator_nvm_commit_cache>:
{
    94b8:	b510      	push	{r4, lr}
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    94ba:	0184      	lsls	r4, r0, #6
    94bc:	4b04      	ldr	r3, [pc, #16]	; (94d0 <_eeprom_emulator_nvm_commit_cache+0x18>)
		error_code = nvm_execute_command(
    94be:	2200      	movs	r2, #0
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    94c0:	6859      	ldr	r1, [r3, #4]
		error_code = nvm_execute_command(
    94c2:	2004      	movs	r0, #4
				(uint32_t)&_eeprom_instance.flash[physical_page], 0);
    94c4:	1909      	adds	r1, r1, r4
		error_code = nvm_execute_command(
    94c6:	4b03      	ldr	r3, [pc, #12]	; (94d4 <_eeprom_emulator_nvm_commit_cache+0x1c>)
    94c8:	4798      	blx	r3
	} while (error_code == STATUS_BUSY);
    94ca:	2805      	cmp	r0, #5
    94cc:	d0f6      	beq.n	94bc <_eeprom_emulator_nvm_commit_cache+0x4>
}
    94ce:	bd10      	pop	{r4, pc}
    94d0:	20000408 	.word	0x20000408
    94d4:	000090e5 	.word	0x000090e5

000094d8 <eeprom_emulator_init>:
 *                                formatted
 * \retval STATUS_ERR_IO          EEPROM data is incompatible with this version
 *                                or scheme of the EEPROM emulator
 */
enum status_code eeprom_emulator_init(void)
{
    94d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    94da:	b099      	sub	sp, #100	; 0x64
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    94dc:	2200      	movs	r2, #0
    94de:	466b      	mov	r3, sp
	config->manual_page_write = true;
    94e0:	4669      	mov	r1, sp
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    94e2:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    94e4:	2301      	movs	r3, #1
    94e6:	704b      	strb	r3, [r1, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    94e8:	4b27      	ldr	r3, [pc, #156]	; (9588 <eeprom_emulator_init+0xb0>)
    94ea:	685b      	ldr	r3, [r3, #4]
	config->disable_cache     = false;
    94ec:	70ca      	strb	r2, [r1, #3]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    94ee:	06db      	lsls	r3, r3, #27
    94f0:	0f1b      	lsrs	r3, r3, #28
    94f2:	708b      	strb	r3, [r1, #2]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    94f4:	710a      	strb	r2, [r1, #4]
	nvm_get_config_defaults(&config);
	config.manual_page_write = true;

	/* Apply new NVM configuration */
	do {
		error_code = nvm_set_config(&config);
    94f6:	4668      	mov	r0, sp
    94f8:	4b24      	ldr	r3, [pc, #144]	; (958c <eeprom_emulator_init+0xb4>)
    94fa:	4798      	blx	r3
	} while (error_code == STATUS_BUSY);
    94fc:	2805      	cmp	r0, #5
    94fe:	d0fa      	beq.n	94f6 <eeprom_emulator_init+0x1e>

	/* Get the NVM controller configuration parameters */
	nvm_get_parameters(&parameters);
    9500:	a802      	add	r0, sp, #8
    9502:	4b23      	ldr	r3, [pc, #140]	; (9590 <eeprom_emulator_init+0xb8>)
    9504:	4798      	blx	r3

	/* Ensure the device fuses are configured for at least one master page row,
	 * one user EEPROM data row and one spare row */
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
    9506:	9b03      	ldr	r3, [sp, #12]
		return STATUS_ERR_NO_MEMORY;
    9508:	2016      	movs	r0, #22
	if (parameters.eeprom_number_of_pages < (3 * NVMCTRL_ROW_PAGES)) {
    950a:	2b0b      	cmp	r3, #11
    950c:	d937      	bls.n	957e <eeprom_emulator_init+0xa6>
	 *  - Two logical pages can be stored in one physical row
	 */
	_eeprom_instance.physical_pages =
			parameters.eeprom_number_of_pages;
	_eeprom_instance.logical_pages  =
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
    950e:	001a      	movs	r2, r3
	_eeprom_instance.physical_pages =
    9510:	4c20      	ldr	r4, [pc, #128]	; (9594 <eeprom_emulator_init+0xbc>)
			(parameters.eeprom_number_of_pages - (2 * NVMCTRL_ROW_PAGES)) / 2;
    9512:	3a08      	subs	r2, #8
    9514:	0852      	lsrs	r2, r2, #1
	_eeprom_instance.logical_pages  =
    9516:	72a2      	strb	r2, [r4, #10]

	/* Configure the EEPROM instance starting physical address in FLASH and
	 * pre-compute the index of the first page in FLASH used for EEPROM */
	_eeprom_instance.flash =
			(void*)(FLASH_SIZE -
    9518:	2280      	movs	r2, #128	; 0x80
	_eeprom_instance.physical_pages =
    951a:	8123      	strh	r3, [r4, #8]
			(void*)(FLASH_SIZE -
    951c:	b29b      	uxth	r3, r3
    951e:	019b      	lsls	r3, r3, #6
    9520:	02d2      	lsls	r2, r2, #11
    9522:	425b      	negs	r3, r3
    9524:	189b      	adds	r3, r3, r2
	_eeprom_instance.flash =
    9526:	6063      	str	r3, [r4, #4]
			((uint32_t)_eeprom_instance.physical_pages * NVMCTRL_PAGE_SIZE));

	/* Clear EEPROM page write cache on initialization */
	_eeprom_instance.cache_active = false;
    9528:	0023      	movs	r3, r4
    952a:	2700      	movs	r7, #0
    952c:	33c8      	adds	r3, #200	; 0xc8
    952e:	701f      	strb	r7, [r3, #0]

	/* Scan physical memory and re-create logical to physical page mapping
	 * table to locate logical pages of EEPROM data in physical FLASH */
	_eeprom_emulator_update_page_mapping();
    9530:	4b19      	ldr	r3, [pc, #100]	; (9598 <eeprom_emulator_init+0xc0>)
    9532:	4798      	blx	r3

	/* Could not find spare row - abort as the memory appears to be corrupt */
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
    9534:	0023      	movs	r3, r4
    9536:	3387      	adds	r3, #135	; 0x87
    9538:	781b      	ldrb	r3, [r3, #0]
		return STATUS_ERR_BAD_FORMAT;
    953a:	201a      	movs	r0, #26
	if (_eeprom_instance.spare_row == EEPROM_INVALID_ROW_NUMBER) {
    953c:	2b3f      	cmp	r3, #63	; 0x3f
    953e:	d01e      	beq.n	957e <eeprom_emulator_init+0xa6>
	const uint32_t magic_key[] = EEPROM_MAGIC_KEY;
    9540:	ae05      	add	r6, sp, #20
    9542:	0032      	movs	r2, r6
    9544:	4b15      	ldr	r3, [pc, #84]	; (959c <eeprom_emulator_init+0xc4>)
    9546:	cb23      	ldmia	r3!, {r0, r1, r5}
    9548:	c223      	stmia	r2!, {r0, r1, r5}
	_eeprom_emulator_nvm_read_page(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    954a:	8920      	ldrh	r0, [r4, #8]
    954c:	ad08      	add	r5, sp, #32
    954e:	3801      	subs	r0, #1
    9550:	b280      	uxth	r0, r0
    9552:	0029      	movs	r1, r5
    9554:	4b12      	ldr	r3, [pc, #72]	; (95a0 <eeprom_emulator_init+0xc8>)
    9556:	4798      	blx	r3
		if (master_page.magic_key[c] != magic_key[c]) {
    9558:	59eb      	ldr	r3, [r5, r7]
    955a:	59f2      	ldr	r2, [r6, r7]
    955c:	4293      	cmp	r3, r2
    955e:	d110      	bne.n	9582 <eeprom_emulator_init+0xaa>
    9560:	3704      	adds	r7, #4
	for (uint8_t c = 0; c < EEPROM_MAGIC_KEY_COUNT; c++) {
    9562:	2f0c      	cmp	r7, #12
    9564:	d1f8      	bne.n	9558 <eeprom_emulator_init+0x80>
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
    9566:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_IO;
    9568:	2010      	movs	r0, #16
	if (master_page.emulator_id   != EEPROM_EMULATOR_ID) {
    956a:	2b01      	cmp	r3, #1
    956c:	d107      	bne.n	957e <eeprom_emulator_init+0xa6>
	if (master_page.major_version != EEPROM_MAJOR_VERSION) {
    956e:	7b2a      	ldrb	r2, [r5, #12]
    9570:	2a01      	cmp	r2, #1
    9572:	d104      	bne.n	957e <eeprom_emulator_init+0xa6>
	if (master_page.minor_version != EEPROM_MINOR_VERSION) {
    9574:	7b6b      	ldrb	r3, [r5, #13]
    9576:	2b00      	cmp	r3, #0
    9578:	d101      	bne.n	957e <eeprom_emulator_init+0xa6>
	}

	/* Mark initialization as complete */
	_eeprom_instance.initialized = true;

	return error_code;
    957a:	0018      	movs	r0, r3
	_eeprom_instance.initialized = true;
    957c:	7022      	strb	r2, [r4, #0]
}
    957e:	b019      	add	sp, #100	; 0x64
    9580:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return STATUS_ERR_BAD_FORMAT;
    9582:	201a      	movs	r0, #26
    9584:	e7fb      	b.n	957e <eeprom_emulator_init+0xa6>
    9586:	46c0      	nop			; (mov r8, r8)
    9588:	41004000 	.word	0x41004000
    958c:	0000905d 	.word	0x0000905d
    9590:	000092ed 	.word	0x000092ed
    9594:	20000408 	.word	0x20000408
    9598:	00009381 	.word	0x00009381
    959c:	0000d860 	.word	0x0000d860
    95a0:	00009471 	.word	0x00009471

000095a4 <eeprom_emulator_erase_memory>:
 *
 * Erases and re-initializes the emulated EEPROM memory space, destroying any
 * existing data.
 */
void eeprom_emulator_erase_memory(void)
{
    95a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	_eeprom_instance.spare_row = 0;
    95a6:	4e2b      	ldr	r6, [pc, #172]	; (9654 <eeprom_emulator_erase_memory+0xb0>)
    95a8:	2500      	movs	r5, #0
    95aa:	0033      	movs	r3, r6
    95ac:	3387      	adds	r3, #135	; 0x87
    95ae:	701d      	strb	r5, [r3, #0]
{
    95b0:	b091      	sub	sp, #68	; 0x44
	_eeprom_emulator_nvm_erase_row(_eeprom_instance.spare_row);
    95b2:	0028      	movs	r0, r5
    95b4:	4b28      	ldr	r3, [pc, #160]	; (9658 <eeprom_emulator_erase_memory+0xb4>)
    95b6:	4798      	blx	r3
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    95b8:	2404      	movs	r4, #4
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
    95ba:	8933      	ldrh	r3, [r6, #8]
    95bc:	1e5f      	subs	r7, r3, #1
	for (uint16_t physical_page = NVMCTRL_ROW_PAGES;
    95be:	429c      	cmp	r4, r3
    95c0:	d328      	bcc.n	9614 <eeprom_emulator_erase_memory+0x70>
	memset(&master_page, 0xFF, sizeof(master_page));
    95c2:	21ff      	movs	r1, #255	; 0xff
    95c4:	2240      	movs	r2, #64	; 0x40
    95c6:	4668      	mov	r0, sp
    95c8:	4b24      	ldr	r3, [pc, #144]	; (965c <eeprom_emulator_erase_memory+0xb8>)
    95ca:	4798      	blx	r3
		master_page.magic_key[c] = magic_key[c];
    95cc:	4b24      	ldr	r3, [pc, #144]	; (9660 <eeprom_emulator_erase_memory+0xbc>)
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
    95ce:	466a      	mov	r2, sp
		master_page.magic_key[c] = magic_key[c];
    95d0:	9300      	str	r3, [sp, #0]
    95d2:	4b24      	ldr	r3, [pc, #144]	; (9664 <eeprom_emulator_erase_memory+0xc0>)
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
    95d4:	17f8      	asrs	r0, r7, #31
		master_page.magic_key[c] = magic_key[c];
    95d6:	9301      	str	r3, [sp, #4]
    95d8:	4b23      	ldr	r3, [pc, #140]	; (9668 <eeprom_emulator_erase_memory+0xc4>)
    95da:	9302      	str	r3, [sp, #8]
	master_page.emulator_id   = EEPROM_EMULATOR_ID;
    95dc:	2301      	movs	r3, #1
    95de:	73d3      	strb	r3, [r2, #15]
	master_page.major_version = EEPROM_MAJOR_VERSION;
    95e0:	7313      	strb	r3, [r2, #12]
	master_page.minor_version = EEPROM_MINOR_VERSION;
    95e2:	2300      	movs	r3, #0
    95e4:	7353      	strb	r3, [r2, #13]
	master_page.revision      = EEPROM_REVISION;
    95e6:	7393      	strb	r3, [r2, #14]
			EEPROM_MASTER_PAGE_NUMBER / NVMCTRL_ROW_PAGES);
    95e8:	3303      	adds	r3, #3
    95ea:	4018      	ands	r0, r3
    95ec:	19c7      	adds	r7, r0, r7
    95ee:	10bf      	asrs	r7, r7, #2
	_eeprom_emulator_nvm_erase_row(
    95f0:	b2f8      	uxtb	r0, r7
    95f2:	4b19      	ldr	r3, [pc, #100]	; (9658 <eeprom_emulator_erase_memory+0xb4>)
    95f4:	4798      	blx	r3
	_eeprom_emulator_nvm_fill_cache(EEPROM_MASTER_PAGE_NUMBER, &master_page);
    95f6:	8930      	ldrh	r0, [r6, #8]
    95f8:	4669      	mov	r1, sp
    95fa:	3801      	subs	r0, #1
    95fc:	b280      	uxth	r0, r0
    95fe:	4b1b      	ldr	r3, [pc, #108]	; (966c <eeprom_emulator_erase_memory+0xc8>)
    9600:	4798      	blx	r3
	_eeprom_emulator_nvm_commit_cache(EEPROM_MASTER_PAGE_NUMBER);
    9602:	8930      	ldrh	r0, [r6, #8]
    9604:	4b1a      	ldr	r3, [pc, #104]	; (9670 <eeprom_emulator_erase_memory+0xcc>)
    9606:	3801      	subs	r0, #1
    9608:	b280      	uxth	r0, r0
    960a:	4798      	blx	r3

	/* Write EEPROM emulation master block */
	_eeprom_emulator_create_master_page();

	/* Map the newly created EEPROM memory block */
	_eeprom_emulator_update_page_mapping();
    960c:	4b19      	ldr	r3, [pc, #100]	; (9674 <eeprom_emulator_erase_memory+0xd0>)
    960e:	4798      	blx	r3
}
    9610:	b011      	add	sp, #68	; 0x44
    9612:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (physical_page == EEPROM_MASTER_PAGE_NUMBER) {
    9614:	42bc      	cmp	r4, r7
    9616:	d019      	beq.n	964c <eeprom_emulator_erase_memory+0xa8>
		if ((physical_page % NVMCTRL_ROW_PAGES) == 0) {
    9618:	2303      	movs	r3, #3
    961a:	4023      	ands	r3, r4
    961c:	d114      	bne.n	9648 <eeprom_emulator_erase_memory+0xa4>
			_eeprom_emulator_nvm_erase_row(physical_page / NVMCTRL_ROW_PAGES);
    961e:	08a0      	lsrs	r0, r4, #2
    9620:	b2c0      	uxtb	r0, r0
    9622:	4b0d      	ldr	r3, [pc, #52]	; (9658 <eeprom_emulator_erase_memory+0xb4>)
    9624:	4798      	blx	r3
			memset(&data, 0xFF, sizeof(data));
    9626:	2240      	movs	r2, #64	; 0x40
    9628:	21ff      	movs	r1, #255	; 0xff
    962a:	4b0c      	ldr	r3, [pc, #48]	; (965c <eeprom_emulator_erase_memory+0xb8>)
    962c:	4668      	mov	r0, sp
    962e:	4798      	blx	r3
			data.header.logical_page = logical_page;
    9630:	466b      	mov	r3, sp
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
    9632:	4669      	mov	r1, sp
			data.header.logical_page = logical_page;
    9634:	701d      	strb	r5, [r3, #0]
			_eeprom_emulator_nvm_fill_cache(physical_page, &data);
    9636:	0020      	movs	r0, r4
    9638:	4b0c      	ldr	r3, [pc, #48]	; (966c <eeprom_emulator_erase_memory+0xc8>)
    963a:	4798      	blx	r3
			logical_page++;
    963c:	3501      	adds	r5, #1
			_eeprom_emulator_nvm_commit_cache(physical_page);
    963e:	0020      	movs	r0, r4
    9640:	4b0b      	ldr	r3, [pc, #44]	; (9670 <eeprom_emulator_erase_memory+0xcc>)
    9642:	4798      	blx	r3
			logical_page++;
    9644:	b2ad      	uxth	r5, r5
    9646:	e001      	b.n	964c <eeprom_emulator_erase_memory+0xa8>
		if ((physical_page % NVMCTRL_ROW_PAGES) < 2) {
    9648:	2b01      	cmp	r3, #1
    964a:	d0ec      	beq.n	9626 <eeprom_emulator_erase_memory+0x82>
			physical_page < _eeprom_instance.physical_pages; physical_page++) {
    964c:	3401      	adds	r4, #1
    964e:	b2a4      	uxth	r4, r4
    9650:	e7b3      	b.n	95ba <eeprom_emulator_erase_memory+0x16>
    9652:	46c0      	nop			; (mov r8, r8)
    9654:	20000408 	.word	0x20000408
    9658:	00009365 	.word	0x00009365
    965c:	0000c3f7 	.word	0x0000c3f7
    9660:	41744545 	.word	0x41744545
    9664:	50524f4d 	.word	0x50524f4d
    9668:	456d752e 	.word	0x456d752e
    966c:	00009495 	.word	0x00009495
    9670:	000094b9 	.word	0x000094b9
    9674:	00009381 	.word	0x00009381

00009678 <eeprom_emulator_read_page>:
 *                                      EEPROM memory space was supplied
 */
enum status_code eeprom_emulator_read_page(
		const uint8_t logical_page,
		uint8_t *const data)
{
    9678:	b530      	push	{r4, r5, lr}
    967a:	000c      	movs	r4, r1
	/* Ensure the emulated EEPROM has been initialized first */
	if (_eeprom_instance.initialized == false) {
    967c:	4912      	ldr	r1, [pc, #72]	; (96c8 <eeprom_emulator_read_page+0x50>)
{
    967e:	b091      	sub	sp, #68	; 0x44
	if (_eeprom_instance.initialized == false) {
    9680:	780a      	ldrb	r2, [r1, #0]
		return STATUS_ERR_NOT_INITIALIZED;
    9682:	231f      	movs	r3, #31
	if (_eeprom_instance.initialized == false) {
    9684:	2a00      	cmp	r2, #0
    9686:	d013      	beq.n	96b0 <eeprom_emulator_read_page+0x38>
	}

	/* Make sure the read address is within the allowable address space */
	if (logical_page >= _eeprom_instance.logical_pages) {
    9688:	7a8a      	ldrb	r2, [r1, #10]
		return STATUS_ERR_BAD_ADDRESS;
    968a:	3b07      	subs	r3, #7
	if (logical_page >= _eeprom_instance.logical_pages) {
    968c:	4282      	cmp	r2, r0
    968e:	d90f      	bls.n	96b0 <eeprom_emulator_read_page+0x38>
	}

	/* Check if the page to read is currently cached (and potentially out of
	 * sync/newer than the physical memory) */
	if ((_eeprom_instance.cache_active == true) &&
    9690:	000b      	movs	r3, r1
    9692:	33c8      	adds	r3, #200	; 0xc8
    9694:	781b      	ldrb	r3, [r3, #0]
    9696:	4d0d      	ldr	r5, [pc, #52]	; (96cc <eeprom_emulator_read_page+0x54>)
    9698:	2b00      	cmp	r3, #0
    969a:	d00c      	beq.n	96b6 <eeprom_emulator_read_page+0x3e>
		 (_eeprom_instance.cache.header.logical_page == logical_page)) {
    969c:	000b      	movs	r3, r1
    969e:	3388      	adds	r3, #136	; 0x88
	if ((_eeprom_instance.cache_active == true) &&
    96a0:	781b      	ldrb	r3, [r3, #0]
    96a2:	4283      	cmp	r3, r0
    96a4:	d107      	bne.n	96b6 <eeprom_emulator_read_page+0x3e>
		/* Copy the potentially newer cached data into the user buffer */
		memcpy(data, _eeprom_instance.cache.data, EEPROM_PAGE_SIZE);
    96a6:	223c      	movs	r2, #60	; 0x3c
    96a8:	318c      	adds	r1, #140	; 0x8c
		/* Copy the data from non-volatile memory into the temporary buffer */
		_eeprom_emulator_nvm_read_page(
				_eeprom_instance.page_map[logical_page], &temp);

		/* Copy the data portion of the read page to the user's buffer */
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
    96aa:	0020      	movs	r0, r4
    96ac:	47a8      	blx	r5
	}

	return STATUS_OK;
    96ae:	2300      	movs	r3, #0
}
    96b0:	0018      	movs	r0, r3
    96b2:	b011      	add	sp, #68	; 0x44
    96b4:	bd30      	pop	{r4, r5, pc}
				_eeprom_instance.page_map[logical_page], &temp);
    96b6:	1809      	adds	r1, r1, r0
		_eeprom_emulator_nvm_read_page(
    96b8:	7ac8      	ldrb	r0, [r1, #11]
    96ba:	4b05      	ldr	r3, [pc, #20]	; (96d0 <eeprom_emulator_read_page+0x58>)
    96bc:	4669      	mov	r1, sp
    96be:	4798      	blx	r3
		memcpy(data, temp.data, EEPROM_PAGE_SIZE);
    96c0:	223c      	movs	r2, #60	; 0x3c
    96c2:	a901      	add	r1, sp, #4
    96c4:	e7f1      	b.n	96aa <eeprom_emulator_read_page+0x32>
    96c6:	46c0      	nop			; (mov r8, r8)
    96c8:	20000408 	.word	0x20000408
    96cc:	0000c3c1 	.word	0x0000c3c1
    96d0:	00009471 	.word	0x00009471

000096d4 <eeprom_emulator_commit_page_buffer>:
enum status_code eeprom_emulator_commit_page_buffer(void)
{
	enum status_code error_code = STATUS_OK;

	/* If cache is inactive, no need to commit anything to physical memory */
	if (_eeprom_instance.cache_active == false) {
    96d4:	4b08      	ldr	r3, [pc, #32]	; (96f8 <eeprom_emulator_commit_page_buffer+0x24>)
{
    96d6:	b510      	push	{r4, lr}
	if (_eeprom_instance.cache_active == false) {
    96d8:	001c      	movs	r4, r3
    96da:	34c8      	adds	r4, #200	; 0xc8
    96dc:	7822      	ldrb	r2, [r4, #0]
    96de:	2a00      	cmp	r2, #0
    96e0:	d008      	beq.n	96f4 <eeprom_emulator_commit_page_buffer+0x20>
		return STATUS_OK;
	}

	uint8_t cached_logical_page = _eeprom_instance.cache.header.logical_page;
    96e2:	001a      	movs	r2, r3
    96e4:	3288      	adds	r2, #136	; 0x88

	/* Perform the page write to commit the NVM page buffer to FLASH */
	_eeprom_emulator_nvm_commit_cache(
			_eeprom_instance.page_map[cached_logical_page]);
    96e6:	7812      	ldrb	r2, [r2, #0]
    96e8:	189b      	adds	r3, r3, r2
	_eeprom_emulator_nvm_commit_cache(
    96ea:	7ad8      	ldrb	r0, [r3, #11]
    96ec:	4b03      	ldr	r3, [pc, #12]	; (96fc <eeprom_emulator_commit_page_buffer+0x28>)
    96ee:	4798      	blx	r3

	barrier(); // Enforce ordering to prevent incorrect cache state
	_eeprom_instance.cache_active = false;
    96f0:	2300      	movs	r3, #0
    96f2:	7023      	strb	r3, [r4, #0]

	return error_code;
}
    96f4:	2000      	movs	r0, #0
    96f6:	bd10      	pop	{r4, pc}
    96f8:	20000408 	.word	0x20000408
    96fc:	000094b9 	.word	0x000094b9

00009700 <eeprom_emulator_write_page>:
{
    9700:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (_eeprom_instance.initialized == false) {
    9702:	4c4c      	ldr	r4, [pc, #304]	; (9834 <eeprom_emulator_write_page+0x134>)
{
    9704:	b087      	sub	sp, #28
	if (_eeprom_instance.initialized == false) {
    9706:	7823      	ldrb	r3, [r4, #0]
{
    9708:	0005      	movs	r5, r0
    970a:	9103      	str	r1, [sp, #12]
		return STATUS_ERR_NOT_INITIALIZED;
    970c:	201f      	movs	r0, #31
	if (_eeprom_instance.initialized == false) {
    970e:	2b00      	cmp	r3, #0
    9710:	d077      	beq.n	9802 <eeprom_emulator_write_page+0x102>
	if (logical_page >= _eeprom_instance.logical_pages) {
    9712:	7aa3      	ldrb	r3, [r4, #10]
		return STATUS_ERR_BAD_ADDRESS;
    9714:	3807      	subs	r0, #7
	if (logical_page >= _eeprom_instance.logical_pages) {
    9716:	42ab      	cmp	r3, r5
    9718:	d973      	bls.n	9802 <eeprom_emulator_write_page+0x102>
	if ((_eeprom_instance.cache_active == true) &&
    971a:	0023      	movs	r3, r4
    971c:	33c8      	adds	r3, #200	; 0xc8
    971e:	781b      	ldrb	r3, [r3, #0]
    9720:	2b00      	cmp	r3, #0
    9722:	d006      	beq.n	9732 <eeprom_emulator_write_page+0x32>
			(_eeprom_instance.cache.header.logical_page != logical_page)) {
    9724:	0023      	movs	r3, r4
    9726:	3388      	adds	r3, #136	; 0x88
	if ((_eeprom_instance.cache_active == true) &&
    9728:	781b      	ldrb	r3, [r3, #0]
    972a:	42ab      	cmp	r3, r5
    972c:	d001      	beq.n	9732 <eeprom_emulator_write_page+0x32>
		eeprom_emulator_commit_page_buffer();
    972e:	4b42      	ldr	r3, [pc, #264]	; (9838 <eeprom_emulator_write_page+0x138>)
    9730:	4798      	blx	r3
	bool page_spare  = _eeprom_emulator_is_page_free_on_row(
    9732:	1963      	adds	r3, r4, r5
    9734:	7ad9      	ldrb	r1, [r3, #11]
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
    9736:	2303      	movs	r3, #3
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    9738:	000e      	movs	r6, r1
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
    973a:	000a      	movs	r2, r1
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    973c:	439e      	bics	r6, r3
	uint8_t page_in_row = (start_physical_page % NVMCTRL_ROW_PAGES);
    973e:	401a      	ands	r2, r3
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    9740:	0033      	movs	r3, r6
		if (_eeprom_instance.flash[page].header.logical_page ==
    9742:	6860      	ldr	r0, [r4, #4]
		uint8_t page = (row * NVMCTRL_ROW_PAGES) + c;
    9744:	189e      	adds	r6, r3, r2
    9746:	b2f6      	uxtb	r6, r6
		if (_eeprom_instance.flash[page].header.logical_page ==
    9748:	01b7      	lsls	r7, r6, #6
    974a:	5c3f      	ldrb	r7, [r7, r0]
    974c:	2fff      	cmp	r7, #255	; 0xff
    974e:	d05f      	beq.n	9810 <eeprom_emulator_write_page+0x110>
	for (uint8_t c = page_in_row; c < NVMCTRL_ROW_PAGES; c++) {
    9750:	3201      	adds	r2, #1
    9752:	b2d2      	uxtb	r2, r2
    9754:	2a04      	cmp	r2, #4
    9756:	d1f5      	bne.n	9744 <eeprom_emulator_write_page+0x44>
		_eeprom_emulator_move_data_to_spare(
    9758:	088a      	lsrs	r2, r1, #2
			(struct _eeprom_page *)&_eeprom_instance.flash[row_number * NVMCTRL_ROW_PAGES];
    975a:	0214      	lsls	r4, r2, #8
	const struct _eeprom_page *row_data =
    975c:	1904      	adds	r4, r0, r4
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
    975e:	1c5e      	adds	r6, r3, #1
		_eeprom_emulator_move_data_to_spare(
    9760:	9201      	str	r2, [sp, #4]
	page_trans[0].logical_page  = row_data[0].header.logical_page;
    9762:	aa05      	add	r2, sp, #20
	page_trans[1].logical_page  = row_data[1].header.logical_page;
    9764:	0021      	movs	r1, r4
	page_trans[1].physical_page = (row_number * NVMCTRL_ROW_PAGES) + 1;
    9766:	70d6      	strb	r6, [r2, #3]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    9768:	0026      	movs	r6, r4
	page_trans[1].logical_page  = row_data[1].header.logical_page;
    976a:	3140      	adds	r1, #64	; 0x40
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    976c:	3680      	adds	r6, #128	; 0x80
	page_trans[0].logical_page  = row_data[0].header.logical_page;
    976e:	7820      	ldrb	r0, [r4, #0]
	page_trans[1].logical_page  = row_data[1].header.logical_page;
    9770:	7809      	ldrb	r1, [r1, #0]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    9772:	7836      	ldrb	r6, [r6, #0]
    9774:	34c0      	adds	r4, #192	; 0xc0
	page_trans[0].logical_page  = row_data[0].header.logical_page;
    9776:	7010      	strb	r0, [r2, #0]
	page_trans[0].physical_page = (row_number * NVMCTRL_ROW_PAGES);
    9778:	7053      	strb	r3, [r2, #1]
	page_trans[1].logical_page  = row_data[1].header.logical_page;
    977a:	7091      	strb	r1, [r2, #2]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    977c:	7824      	ldrb	r4, [r4, #0]
    977e:	4286      	cmp	r6, r0
    9780:	d101      	bne.n	9786 <eeprom_emulator_write_page+0x86>
						(row_number * NVMCTRL_ROW_PAGES) + c2;
    9782:	1c9f      	adds	r7, r3, #2
				page_trans[c].physical_page =
    9784:	7057      	strb	r7, [r2, #1]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    9786:	42a0      	cmp	r0, r4
    9788:	d101      	bne.n	978e <eeprom_emulator_write_page+0x8e>
						(row_number * NVMCTRL_ROW_PAGES) + c2;
    978a:	1cd8      	adds	r0, r3, #3
				page_trans[c].physical_page =
    978c:	7050      	strb	r0, [r2, #1]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    978e:	428e      	cmp	r6, r1
    9790:	d101      	bne.n	9796 <eeprom_emulator_write_page+0x96>
						(row_number * NVMCTRL_ROW_PAGES) + c2;
    9792:	1c98      	adds	r0, r3, #2
				page_trans[c].physical_page =
    9794:	70d0      	strb	r0, [r2, #3]
			if (page_trans[c].logical_page == row_data[c2].header.logical_page) {
    9796:	42a1      	cmp	r1, r4
    9798:	d101      	bne.n	979e <eeprom_emulator_write_page+0x9e>
						(row_number * NVMCTRL_ROW_PAGES) + c2;
    979a:	3303      	adds	r3, #3
				page_trans[c].physical_page =
    979c:	70d3      	strb	r3, [r2, #3]
{
    979e:	2600      	movs	r6, #0
				((_eeprom_instance.spare_row * NVMCTRL_ROW_PAGES) + c);
    97a0:	4c24      	ldr	r4, [pc, #144]	; (9834 <eeprom_emulator_write_page+0x134>)
    97a2:	0023      	movs	r3, r4
    97a4:	3387      	adds	r3, #135	; 0x87
    97a6:	781b      	ldrb	r3, [r3, #0]
    97a8:	009b      	lsls	r3, r3, #2
    97aa:	199b      	adds	r3, r3, r6
    97ac:	9302      	str	r3, [sp, #8]
		eeprom_emulator_commit_page_buffer();
    97ae:	4b22      	ldr	r3, [pc, #136]	; (9838 <eeprom_emulator_write_page+0x138>)
    97b0:	4798      	blx	r3
    97b2:	0021      	movs	r1, r4
    97b4:	0072      	lsls	r2, r6, #1
		if (logical_page == page_trans[c].logical_page) {
    97b6:	ab05      	add	r3, sp, #20
    97b8:	5cd7      	ldrb	r7, [r2, r3]
    97ba:	3188      	adds	r1, #136	; 0x88
    97bc:	42bd      	cmp	r5, r7
    97be:	d122      	bne.n	9806 <eeprom_emulator_write_page+0x106>
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
    97c0:	0020      	movs	r0, r4
			_eeprom_instance.cache.header.logical_page = logical_page;
    97c2:	700d      	strb	r5, [r1, #0]
			memcpy(_eeprom_instance.cache.data, data, EEPROM_PAGE_SIZE);
    97c4:	308c      	adds	r0, #140	; 0x8c
    97c6:	223c      	movs	r2, #60	; 0x3c
    97c8:	9903      	ldr	r1, [sp, #12]
    97ca:	4b1c      	ldr	r3, [pc, #112]	; (983c <eeprom_emulator_write_page+0x13c>)
    97cc:	4798      	blx	r3
		_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    97ce:	4c19      	ldr	r4, [pc, #100]	; (9834 <eeprom_emulator_write_page+0x134>)
    97d0:	466b      	mov	r3, sp
    97d2:	0021      	movs	r1, r4
    97d4:	8918      	ldrh	r0, [r3, #8]
    97d6:	3188      	adds	r1, #136	; 0x88
    97d8:	4b19      	ldr	r3, [pc, #100]	; (9840 <eeprom_emulator_write_page+0x140>)
    97da:	4798      	blx	r3
		_eeprom_instance.page_map[page_trans[c].logical_page] = new_page;
    97dc:	466b      	mov	r3, sp
    97de:	7a1b      	ldrb	r3, [r3, #8]
    97e0:	19e7      	adds	r7, r4, r7
    97e2:	72fb      	strb	r3, [r7, #11]
		_eeprom_instance.cache_active = true;
    97e4:	0023      	movs	r3, r4
    97e6:	2201      	movs	r2, #1
    97e8:	33c8      	adds	r3, #200	; 0xc8
    97ea:	3601      	adds	r6, #1
    97ec:	701a      	strb	r2, [r3, #0]
	for (uint8_t c = 0; c < 2; c++) {
    97ee:	2e02      	cmp	r6, #2
    97f0:	d1d6      	bne.n	97a0 <eeprom_emulator_write_page+0xa0>
	_eeprom_emulator_nvm_erase_row(row_number);
    97f2:	4b14      	ldr	r3, [pc, #80]	; (9844 <eeprom_emulator_write_page+0x144>)
    97f4:	9801      	ldr	r0, [sp, #4]
    97f6:	4798      	blx	r3
	_eeprom_instance.spare_row = row_number;
    97f8:	466b      	mov	r3, sp
    97fa:	791b      	ldrb	r3, [r3, #4]
    97fc:	3487      	adds	r4, #135	; 0x87
	_eeprom_instance.cache_active           = true;
    97fe:	2000      	movs	r0, #0
    9800:	7023      	strb	r3, [r4, #0]
}
    9802:	b007      	add	sp, #28
    9804:	bdf0      	pop	{r4, r5, r6, r7, pc}
					page_trans[c].physical_page, &_eeprom_instance.cache);
    9806:	189b      	adds	r3, r3, r2
			_eeprom_emulator_nvm_read_page(
    9808:	7858      	ldrb	r0, [r3, #1]
    980a:	4b0f      	ldr	r3, [pc, #60]	; (9848 <eeprom_emulator_write_page+0x148>)
    980c:	4798      	blx	r3
    980e:	e7de      	b.n	97ce <eeprom_emulator_write_page+0xce>
	_eeprom_instance.cache.header.logical_page = logical_page;
    9810:	0027      	movs	r7, r4
	memcpy(&_eeprom_instance.cache.data,
    9812:	0020      	movs	r0, r4
	_eeprom_instance.cache.header.logical_page = logical_page;
    9814:	3788      	adds	r7, #136	; 0x88
	memcpy(&_eeprom_instance.cache.data,
    9816:	223c      	movs	r2, #60	; 0x3c
    9818:	9903      	ldr	r1, [sp, #12]
    981a:	4b08      	ldr	r3, [pc, #32]	; (983c <eeprom_emulator_write_page+0x13c>)
    981c:	308c      	adds	r0, #140	; 0x8c
	_eeprom_instance.cache.header.logical_page = logical_page;
    981e:	703d      	strb	r5, [r7, #0]
	memcpy(&_eeprom_instance.cache.data,
    9820:	4798      	blx	r3
	_eeprom_instance.page_map[logical_page] = new_page;
    9822:	1965      	adds	r5, r4, r5
	_eeprom_emulator_nvm_fill_cache(new_page, &_eeprom_instance.cache);
    9824:	b2b0      	uxth	r0, r6
    9826:	0039      	movs	r1, r7
    9828:	4b05      	ldr	r3, [pc, #20]	; (9840 <eeprom_emulator_write_page+0x140>)
    982a:	4798      	blx	r3
	_eeprom_instance.page_map[logical_page] = new_page;
    982c:	72ee      	strb	r6, [r5, #11]
	_eeprom_instance.cache_active           = true;
    982e:	2301      	movs	r3, #1
    9830:	34c8      	adds	r4, #200	; 0xc8
    9832:	e7e4      	b.n	97fe <eeprom_emulator_write_page+0xfe>
    9834:	20000408 	.word	0x20000408
    9838:	000096d5 	.word	0x000096d5
    983c:	0000c3c1 	.word	0x0000c3c1
    9840:	00009495 	.word	0x00009495
    9844:	00009365 	.word	0x00009365
    9848:	00009471 	.word	0x00009471

0000984c <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    984c:	4770      	bx	lr
	...

00009850 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    9850:	4b09      	ldr	r3, [pc, #36]	; (9878 <cpu_irq_enter_critical+0x28>)
    9852:	6819      	ldr	r1, [r3, #0]
    9854:	2900      	cmp	r1, #0
    9856:	d10b      	bne.n	9870 <cpu_irq_enter_critical+0x20>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    9858:	f3ef 8010 	mrs	r0, PRIMASK
    985c:	4a07      	ldr	r2, [pc, #28]	; (987c <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
    985e:	2800      	cmp	r0, #0
    9860:	d105      	bne.n	986e <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
    9862:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    9864:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    9868:	4905      	ldr	r1, [pc, #20]	; (9880 <cpu_irq_enter_critical+0x30>)
    986a:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
    986c:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    986e:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    9870:	681a      	ldr	r2, [r3, #0]
    9872:	3201      	adds	r2, #1
    9874:	601a      	str	r2, [r3, #0]
}
    9876:	4770      	bx	lr
    9878:	200004d4 	.word	0x200004d4
    987c:	200004d8 	.word	0x200004d8
    9880:	20000028 	.word	0x20000028

00009884 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    9884:	4b08      	ldr	r3, [pc, #32]	; (98a8 <cpu_irq_leave_critical+0x24>)
    9886:	681a      	ldr	r2, [r3, #0]
    9888:	3a01      	subs	r2, #1
    988a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    988c:	681b      	ldr	r3, [r3, #0]
    988e:	2b00      	cmp	r3, #0
    9890:	d109      	bne.n	98a6 <cpu_irq_leave_critical+0x22>
    9892:	4b06      	ldr	r3, [pc, #24]	; (98ac <cpu_irq_leave_critical+0x28>)
    9894:	781b      	ldrb	r3, [r3, #0]
    9896:	2b00      	cmp	r3, #0
    9898:	d005      	beq.n	98a6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    989a:	2201      	movs	r2, #1
    989c:	4b04      	ldr	r3, [pc, #16]	; (98b0 <cpu_irq_leave_critical+0x2c>)
    989e:	701a      	strb	r2, [r3, #0]
    98a0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    98a4:	b662      	cpsie	i
	}
}
    98a6:	4770      	bx	lr
    98a8:	200004d4 	.word	0x200004d4
    98ac:	200004d8 	.word	0x200004d8
    98b0:	20000028 	.word	0x20000028

000098b4 <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    98b4:	2310      	movs	r3, #16
    98b6:	4902      	ldr	r1, [pc, #8]	; (98c0 <_system_dfll_wait_for_sync+0xc>)
    98b8:	68ca      	ldr	r2, [r1, #12]
    98ba:	421a      	tst	r2, r3
    98bc:	d0fc      	beq.n	98b8 <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
    98be:	4770      	bx	lr
    98c0:	40000800 	.word	0x40000800

000098c4 <system_clock_source_enable.part.0>:
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    98c4:	2202      	movs	r2, #2
enum status_code system_clock_source_enable(
    98c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYSCTRL->DFLLCTRL.reg = 0;
    98c8:	2600      	movs	r6, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    98ca:	4d09      	ldr	r5, [pc, #36]	; (98f0 <system_clock_source_enable.part.0+0x2c>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    98cc:	4c09      	ldr	r4, [pc, #36]	; (98f4 <system_clock_source_enable.part.0+0x30>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    98ce:	682b      	ldr	r3, [r5, #0]
	_system_dfll_wait_for_sync();
    98d0:	4f09      	ldr	r7, [pc, #36]	; (98f8 <system_clock_source_enable.part.0+0x34>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    98d2:	4313      	orrs	r3, r2
    98d4:	602b      	str	r3, [r5, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    98d6:	84a2      	strh	r2, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
    98d8:	47b8      	blx	r7
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    98da:	68ab      	ldr	r3, [r5, #8]
    98dc:	62e3      	str	r3, [r4, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    98de:	686b      	ldr	r3, [r5, #4]
    98e0:	62a3      	str	r3, [r4, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    98e2:	84a6      	strh	r6, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
    98e4:	47b8      	blx	r7
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    98e6:	682b      	ldr	r3, [r5, #0]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    98e8:	0030      	movs	r0, r6
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    98ea:	b29b      	uxth	r3, r3
    98ec:	84a3      	strh	r3, [r4, #36]	; 0x24
}
    98ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    98f0:	200004dc 	.word	0x200004dc
    98f4:	40000800 	.word	0x40000800
    98f8:	000098b5 	.word	0x000098b5

000098fc <system_clock_source_get_hz>:
{
    98fc:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
    98fe:	2808      	cmp	r0, #8
    9900:	d806      	bhi.n	9910 <system_clock_source_get_hz+0x14>
    9902:	f000 fcd7 	bl	a2b4 <__gnu_thumb1_case_uqi>
    9906:	0508      	.short	0x0508
    9908:	12303005 	.word	0x12303005
    990c:	150b      	.short	0x150b
    990e:	28          	.byte	0x28
    990f:	00          	.byte	0x00
		return 0;
    9910:	2400      	movs	r4, #0
}
    9912:	0020      	movs	r0, r4
    9914:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
    9916:	4b16      	ldr	r3, [pc, #88]	; (9970 <system_clock_source_get_hz+0x74>)
    9918:	691c      	ldr	r4, [r3, #16]
    991a:	e7fa      	b.n	9912 <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    991c:	4b15      	ldr	r3, [pc, #84]	; (9974 <system_clock_source_get_hz+0x78>)
    991e:	4c16      	ldr	r4, [pc, #88]	; (9978 <system_clock_source_get_hz+0x7c>)
    9920:	6a1b      	ldr	r3, [r3, #32]
    9922:	059b      	lsls	r3, r3, #22
    9924:	0f9b      	lsrs	r3, r3, #30
    9926:	40dc      	lsrs	r4, r3
    9928:	e7f3      	b.n	9912 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
    992a:	4b11      	ldr	r3, [pc, #68]	; (9970 <system_clock_source_get_hz+0x74>)
    992c:	695c      	ldr	r4, [r3, #20]
    992e:	e7f0      	b.n	9912 <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    9930:	4d0f      	ldr	r5, [pc, #60]	; (9970 <system_clock_source_get_hz+0x74>)
			return 0;
    9932:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    9934:	682b      	ldr	r3, [r5, #0]
    9936:	079b      	lsls	r3, r3, #30
    9938:	d5eb      	bpl.n	9912 <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
    993a:	4b10      	ldr	r3, [pc, #64]	; (997c <system_clock_source_get_hz+0x80>)
    993c:	4798      	blx	r3
		switch(_system_clock_inst.dfll.control &
    993e:	2224      	movs	r2, #36	; 0x24
    9940:	682b      	ldr	r3, [r5, #0]
    9942:	4013      	ands	r3, r2
    9944:	2b04      	cmp	r3, #4
    9946:	d111      	bne.n	996c <system_clock_source_get_hz+0x70>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    9948:	0020      	movs	r0, r4
    994a:	4b0d      	ldr	r3, [pc, #52]	; (9980 <system_clock_source_get_hz+0x84>)
    994c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    994e:	68ac      	ldr	r4, [r5, #8]
    9950:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    9952:	4344      	muls	r4, r0
    9954:	e7dd      	b.n	9912 <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    9956:	4b0b      	ldr	r3, [pc, #44]	; (9984 <system_clock_source_get_hz+0x88>)
			return 0;
    9958:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    995a:	781b      	ldrb	r3, [r3, #0]
    995c:	075b      	lsls	r3, r3, #29
    995e:	d5d8      	bpl.n	9912 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
    9960:	4b03      	ldr	r3, [pc, #12]	; (9970 <system_clock_source_get_hz+0x74>)
    9962:	68dc      	ldr	r4, [r3, #12]
    9964:	e7d5      	b.n	9912 <system_clock_source_get_hz+0x16>
		return 32768UL;
    9966:	2480      	movs	r4, #128	; 0x80
    9968:	0224      	lsls	r4, r4, #8
    996a:	e7d2      	b.n	9912 <system_clock_source_get_hz+0x16>
			return 48000000UL;
    996c:	4c06      	ldr	r4, [pc, #24]	; (9988 <system_clock_source_get_hz+0x8c>)
    996e:	e7d0      	b.n	9912 <system_clock_source_get_hz+0x16>
    9970:	200004dc 	.word	0x200004dc
    9974:	40000800 	.word	0x40000800
    9978:	007a1200 	.word	0x007a1200
    997c:	000098b5 	.word	0x000098b5
    9980:	00009f3d 	.word	0x00009f3d
    9984:	40000850 	.word	0x40000850
    9988:	02dc6c00 	.word	0x02dc6c00

0000998c <system_clock_source_osc8m_set_config>:
{
    998c:	b570      	push	{r4, r5, r6, lr}
	temp.bit.ONDEMAND = config->on_demand;
    998e:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
    9990:	7802      	ldrb	r2, [r0, #0]
	SYSCTRL->OSC8M = temp;
    9992:	7845      	ldrb	r5, [r0, #1]
    9994:	2001      	movs	r0, #1
    9996:	2640      	movs	r6, #64	; 0x40
    9998:	4005      	ands	r5, r0
    999a:	4020      	ands	r0, r4
    999c:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    999e:	4908      	ldr	r1, [pc, #32]	; (99c0 <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
    99a0:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    99a2:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
    99a4:	01c0      	lsls	r0, r0, #7
    99a6:	43b3      	bics	r3, r6
    99a8:	432b      	orrs	r3, r5
    99aa:	43a3      	bics	r3, r4
    99ac:	4303      	orrs	r3, r0
    99ae:	2003      	movs	r0, #3
    99b0:	4002      	ands	r2, r0
    99b2:	4804      	ldr	r0, [pc, #16]	; (99c4 <system_clock_source_osc8m_set_config+0x38>)
    99b4:	0212      	lsls	r2, r2, #8
    99b6:	4003      	ands	r3, r0
    99b8:	4313      	orrs	r3, r2
    99ba:	620b      	str	r3, [r1, #32]
}
    99bc:	bd70      	pop	{r4, r5, r6, pc}
    99be:	46c0      	nop			; (mov r8, r8)
    99c0:	40000800 	.word	0x40000800
    99c4:	fffffcff 	.word	0xfffffcff

000099c8 <system_clock_source_xosc32k_set_config>:
{
    99c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    99ca:	4b22      	ldr	r3, [pc, #136]	; (9a54 <system_clock_source_xosc32k_set_config+0x8c>)
	temp.bit.STARTUP = config->startup_time;
    99cc:	7842      	ldrb	r2, [r0, #1]
	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    99ce:	7807      	ldrb	r7, [r0, #0]
{
    99d0:	b085      	sub	sp, #20
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    99d2:	469c      	mov	ip, r3
    99d4:	8a9b      	ldrh	r3, [r3, #20]
	temp.bit.STARTUP = config->startup_time;
    99d6:	9203      	str	r2, [sp, #12]
	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    99d8:	427a      	negs	r2, r7
    99da:	4157      	adcs	r7, r2
	temp.bit.ONDEMAND = config->on_demand;
    99dc:	7b42      	ldrb	r2, [r0, #13]
	temp.bit.AAMPEN = config->auto_gain_control;
    99de:	7884      	ldrb	r4, [r0, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    99e0:	78c5      	ldrb	r5, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    99e2:	7906      	ldrb	r6, [r0, #4]
	temp.bit.ONDEMAND = config->on_demand;
    99e4:	9201      	str	r2, [sp, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    99e6:	7b02      	ldrb	r2, [r0, #12]
    99e8:	9202      	str	r2, [sp, #8]
	temp.bit.WRTLOCK  = config->write_once;
    99ea:	7b81      	ldrb	r1, [r0, #14]
	_system_clock_inst.xosc32k.frequency = config->frequency;
    99ec:	4a1a      	ldr	r2, [pc, #104]	; (9a58 <system_clock_source_xosc32k_set_config+0x90>)
    99ee:	6880      	ldr	r0, [r0, #8]
    99f0:	6150      	str	r0, [r2, #20]
	SYSCTRL->XOSC32K = temp;
    99f2:	00b8      	lsls	r0, r7, #2
    99f4:	2704      	movs	r7, #4
    99f6:	2201      	movs	r2, #1
    99f8:	43bb      	bics	r3, r7
    99fa:	4318      	orrs	r0, r3
    99fc:	2308      	movs	r3, #8
    99fe:	4015      	ands	r5, r2
    9a00:	40bd      	lsls	r5, r7
    9a02:	4016      	ands	r6, r2
    9a04:	4398      	bics	r0, r3
    9a06:	00f6      	lsls	r6, r6, #3
    9a08:	4306      	orrs	r6, r0
    9a0a:	18db      	adds	r3, r3, r3
    9a0c:	439e      	bics	r6, r3
    9a0e:	4335      	orrs	r5, r6
    9a10:	3310      	adds	r3, #16
    9a12:	439d      	bics	r5, r3
    9a14:	002b      	movs	r3, r5
    9a16:	2040      	movs	r0, #64	; 0x40
    9a18:	4014      	ands	r4, r2
    9a1a:	0164      	lsls	r4, r4, #5
    9a1c:	4323      	orrs	r3, r4
    9a1e:	9c02      	ldr	r4, [sp, #8]
    9a20:	4383      	bics	r3, r0
    9a22:	4014      	ands	r4, r2
    9a24:	01a4      	lsls	r4, r4, #6
    9a26:	4323      	orrs	r3, r4
    9a28:	2480      	movs	r4, #128	; 0x80
    9a2a:	9801      	ldr	r0, [sp, #4]
    9a2c:	43a3      	bics	r3, r4
    9a2e:	4010      	ands	r0, r2
    9a30:	01c0      	lsls	r0, r0, #7
    9a32:	4303      	orrs	r3, r0
    9a34:	2007      	movs	r0, #7
    9a36:	9c03      	ldr	r4, [sp, #12]
    9a38:	4011      	ands	r1, r2
    9a3a:	4020      	ands	r0, r4
    9a3c:	4c07      	ldr	r4, [pc, #28]	; (9a5c <system_clock_source_xosc32k_set_config+0x94>)
    9a3e:	0200      	lsls	r0, r0, #8
    9a40:	4023      	ands	r3, r4
    9a42:	4a07      	ldr	r2, [pc, #28]	; (9a60 <system_clock_source_xosc32k_set_config+0x98>)
    9a44:	4303      	orrs	r3, r0
    9a46:	401a      	ands	r2, r3
    9a48:	4663      	mov	r3, ip
    9a4a:	0309      	lsls	r1, r1, #12
    9a4c:	430a      	orrs	r2, r1
    9a4e:	829a      	strh	r2, [r3, #20]
}
    9a50:	b005      	add	sp, #20
    9a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9a54:	40000800 	.word	0x40000800
    9a58:	200004dc 	.word	0x200004dc
    9a5c:	fffff8ff 	.word	0xfffff8ff
    9a60:	ffffefff 	.word	0xffffefff

00009a64 <system_clock_source_dfll_set_config>:
{
    9a64:	b510      	push	{r4, lr}
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    9a66:	7a02      	ldrb	r2, [r0, #8]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    9a68:	8943      	ldrh	r3, [r0, #10]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    9a6a:	0692      	lsls	r2, r2, #26
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    9a6c:	059b      	lsls	r3, r3, #22
    9a6e:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    9a70:	0c12      	lsrs	r2, r2, #16
    9a72:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    9a74:	4b17      	ldr	r3, [pc, #92]	; (9ad4 <system_clock_source_dfll_set_config+0x70>)
    9a76:	605a      	str	r2, [r3, #4]
			(uint32_t)config->wakeup_lock     |
    9a78:	79c1      	ldrb	r1, [r0, #7]
    9a7a:	7982      	ldrb	r2, [r0, #6]
			(uint32_t)config->quick_lock      |
    9a7c:	8884      	ldrh	r4, [r0, #4]
			(uint32_t)config->wakeup_lock     |
    9a7e:	430a      	orrs	r2, r1
			(uint32_t)config->quick_lock      |
    9a80:	8841      	ldrh	r1, [r0, #2]
    9a82:	4321      	orrs	r1, r4
    9a84:	430a      	orrs	r2, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    9a86:	7841      	ldrb	r1, [r0, #1]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    9a88:	7804      	ldrb	r4, [r0, #0]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    9a8a:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
    9a8c:	430a      	orrs	r2, r1
	_system_clock_inst.dfll.control =
    9a8e:	601a      	str	r2, [r3, #0]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    9a90:	2c04      	cmp	r4, #4
    9a92:	d10d      	bne.n	9ab0 <system_clock_source_dfll_set_config+0x4c>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    9a94:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    9a96:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    9a98:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    9a9a:	430a      	orrs	r2, r1
    9a9c:	89c1      	ldrh	r1, [r0, #14]
    9a9e:	480e      	ldr	r0, [pc, #56]	; (9ad8 <system_clock_source_dfll_set_config+0x74>)
    9aa0:	0409      	lsls	r1, r1, #16
    9aa2:	4001      	ands	r1, r0
    9aa4:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
    9aa6:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    9aa8:	681a      	ldr	r2, [r3, #0]
    9aaa:	4314      	orrs	r4, r2
    9aac:	601c      	str	r4, [r3, #0]
}
    9aae:	bd10      	pop	{r4, pc}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    9ab0:	2c20      	cmp	r4, #32
    9ab2:	d1fc      	bne.n	9aae <system_clock_source_dfll_set_config+0x4a>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    9ab4:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    9ab6:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    9ab8:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    9aba:	430a      	orrs	r2, r1
    9abc:	89c1      	ldrh	r1, [r0, #14]
    9abe:	4806      	ldr	r0, [pc, #24]	; (9ad8 <system_clock_source_dfll_set_config+0x74>)
    9ac0:	0409      	lsls	r1, r1, #16
    9ac2:	4001      	ands	r1, r0
    9ac4:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
    9ac6:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode |
    9ac8:	6819      	ldr	r1, [r3, #0]
    9aca:	4a04      	ldr	r2, [pc, #16]	; (9adc <system_clock_source_dfll_set_config+0x78>)
    9acc:	430a      	orrs	r2, r1
    9ace:	601a      	str	r2, [r3, #0]
}
    9ad0:	e7ed      	b.n	9aae <system_clock_source_dfll_set_config+0x4a>
    9ad2:	46c0      	nop			; (mov r8, r8)
    9ad4:	200004dc 	.word	0x200004dc
    9ad8:	03ff0000 	.word	0x03ff0000
    9adc:	00000424 	.word	0x00000424

00009ae0 <system_clock_source_enable>:
{
    9ae0:	b510      	push	{r4, lr}
	switch (clock_source) {
    9ae2:	2808      	cmp	r0, #8
    9ae4:	d806      	bhi.n	9af4 <system_clock_source_enable+0x14>
    9ae6:	f000 fbe5 	bl	a2b4 <__gnu_thumb1_case_uqi>
    9aea:	0514      	.short	0x0514
    9aec:	1a0e0c05 	.word	0x1a0e0c05
    9af0:	2007      	.short	0x2007
    9af2:	23          	.byte	0x23
    9af3:	00          	.byte	0x00
		return STATUS_ERR_INVALID_ARG;
    9af4:	2017      	movs	r0, #23
}
    9af6:	bd10      	pop	{r4, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    9af8:	2302      	movs	r3, #2
    9afa:	4a10      	ldr	r2, [pc, #64]	; (9b3c <system_clock_source_enable+0x5c>)
    9afc:	6a11      	ldr	r1, [r2, #32]
    9afe:	430b      	orrs	r3, r1
    9b00:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    9b02:	2000      	movs	r0, #0
    9b04:	e7f7      	b.n	9af6 <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    9b06:	2302      	movs	r3, #2
    9b08:	4a0c      	ldr	r2, [pc, #48]	; (9b3c <system_clock_source_enable+0x5c>)
    9b0a:	6991      	ldr	r1, [r2, #24]
    9b0c:	430b      	orrs	r3, r1
    9b0e:	6193      	str	r3, [r2, #24]
    9b10:	e7f7      	b.n	9b02 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    9b12:	2302      	movs	r3, #2
    9b14:	4a09      	ldr	r2, [pc, #36]	; (9b3c <system_clock_source_enable+0x5c>)
    9b16:	8a11      	ldrh	r1, [r2, #16]
    9b18:	430b      	orrs	r3, r1
    9b1a:	8213      	strh	r3, [r2, #16]
    9b1c:	e7f1      	b.n	9b02 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    9b1e:	2302      	movs	r3, #2
    9b20:	4a06      	ldr	r2, [pc, #24]	; (9b3c <system_clock_source_enable+0x5c>)
    9b22:	8a91      	ldrh	r1, [r2, #20]
    9b24:	430b      	orrs	r3, r1
    9b26:	8293      	strh	r3, [r2, #20]
    9b28:	e7eb      	b.n	9b02 <system_clock_source_enable+0x22>
    9b2a:	4b05      	ldr	r3, [pc, #20]	; (9b40 <system_clock_source_enable+0x60>)
    9b2c:	4798      	blx	r3
    9b2e:	e7e2      	b.n	9af6 <system_clock_source_enable+0x16>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    9b30:	2302      	movs	r3, #2
    9b32:	4a04      	ldr	r2, [pc, #16]	; (9b44 <system_clock_source_enable+0x64>)
    9b34:	7811      	ldrb	r1, [r2, #0]
    9b36:	430b      	orrs	r3, r1
    9b38:	7013      	strb	r3, [r2, #0]
    9b3a:	e7e2      	b.n	9b02 <system_clock_source_enable+0x22>
    9b3c:	40000800 	.word	0x40000800
    9b40:	000098c5 	.word	0x000098c5
    9b44:	40000844 	.word	0x40000844

00009b48 <system_clock_init>:
 */
void system_clock_init(void)
{
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    9b48:	23c2      	movs	r3, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    9b4a:	221e      	movs	r2, #30
{
    9b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    9b4e:	495e      	ldr	r1, [pc, #376]	; (9cc8 <system_clock_init+0x180>)
    9b50:	00db      	lsls	r3, r3, #3
    9b52:	485e      	ldr	r0, [pc, #376]	; (9ccc <system_clock_init+0x184>)
    9b54:	608b      	str	r3, [r1, #8]
    9b56:	6843      	ldr	r3, [r0, #4]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    9b58:	2500      	movs	r5, #0
    9b5a:	4393      	bics	r3, r2
    9b5c:	001a      	movs	r2, r3
    9b5e:	2304      	movs	r3, #4
    9b60:	4313      	orrs	r3, r2
    9b62:	6043      	str	r3, [r0, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    9b64:	2302      	movs	r3, #2
{
    9b66:	b091      	sub	sp, #68	; 0x44
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    9b68:	ac0b      	add	r4, sp, #44	; 0x2c
    9b6a:	7023      	strb	r3, [r4, #0]
    9b6c:	9101      	str	r1, [sp, #4]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    9b6e:	b2e8      	uxtb	r0, r5
    9b70:	0021      	movs	r1, r4
    9b72:	4b57      	ldr	r3, [pc, #348]	; (9cd0 <system_clock_init+0x188>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    9b74:	3501      	adds	r5, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    9b76:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    9b78:	2d25      	cmp	r5, #37	; 0x25
    9b7a:	d1f8      	bne.n	9b6e <system_clock_init+0x26>
	config->frequency           = 32768UL;
    9b7c:	2280      	movs	r2, #128	; 0x80
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    9b7e:	a807      	add	r0, sp, #28
    9b80:	2300      	movs	r3, #0
	config->frequency           = 32768UL;
    9b82:	0212      	lsls	r2, r2, #8
    9b84:	6082      	str	r2, [r0, #8]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    9b86:	2106      	movs	r1, #6
	config->enable_32khz_output = true;
    9b88:	2201      	movs	r2, #1
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    9b8a:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    9b8c:	7083      	strb	r3, [r0, #2]
	config->enable_1khz_output  = false;
    9b8e:	70c3      	strb	r3, [r0, #3]
	config->write_once          = false;
    9b90:	7383      	strb	r3, [r0, #14]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    9b92:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    9b94:	4b4f      	ldr	r3, [pc, #316]	; (9cd4 <system_clock_init+0x18c>)
	config->enable_32khz_output = true;
    9b96:	7102      	strb	r2, [r0, #4]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    9b98:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    9b9a:	7302      	strb	r2, [r0, #12]
	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    9b9c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    9b9e:	4b4e      	ldr	r3, [pc, #312]	; (9cd8 <system_clock_init+0x190>)
    9ba0:	2005      	movs	r0, #5
    9ba2:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    9ba4:	2302      	movs	r3, #2
    9ba6:	9a01      	ldr	r2, [sp, #4]
    9ba8:	68d2      	ldr	r2, [r2, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    9baa:	421a      	tst	r2, r3
    9bac:	d0fb      	beq.n	9ba6 <system_clock_init+0x5e>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    9bae:	2300      	movs	r3, #0
	config->fine_value      = 0xff / 4; /* Midpoint */
    9bb0:	223f      	movs	r2, #63	; 0x3f
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    9bb2:	8063      	strh	r3, [r4, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    9bb4:	80a3      	strh	r3, [r4, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    9bb6:	71a3      	strb	r3, [r4, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    9bb8:	71e3      	strb	r3, [r4, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    9bba:	8162      	strh	r2, [r4, #10]
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
	dfll_conf.on_demand      = false;
    9bbc:	7063      	strb	r3, [r4, #1]
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    9bbe:	3a3b      	subs	r2, #59	; 0x3b
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    9bc0:	4b46      	ldr	r3, [pc, #280]	; (9cdc <system_clock_init+0x194>)
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    9bc2:	7022      	strb	r2, [r4, #0]
	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    9bc4:	681b      	ldr	r3, [r3, #0]
    9bc6:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    9bc8:	2b3f      	cmp	r3, #63	; 0x3f
    9bca:	d100      	bne.n	9bce <system_clock_init+0x86>
		coarse = 0x1f;
    9bcc:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    9bce:	7223      	strb	r3, [r4, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    9bd0:	23b7      	movs	r3, #183	; 0xb7
    9bd2:	00db      	lsls	r3, r3, #3
    9bd4:	8223      	strh	r3, [r4, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    9bd6:	2303      	movs	r3, #3
    9bd8:	7323      	strb	r3, [r4, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    9bda:	231f      	movs	r3, #31

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    9bdc:	2500      	movs	r5, #0
	config->on_demand       = true;
    9bde:	2601      	movs	r6, #1
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    9be0:	81e3      	strh	r3, [r4, #14]
	system_clock_source_dfll_set_config(&dfll_conf);
    9be2:	0020      	movs	r0, r4
    9be4:	4b3e      	ldr	r3, [pc, #248]	; (9ce0 <system_clock_init+0x198>)
    9be6:	4798      	blx	r3
    9be8:	a803      	add	r0, sp, #12
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    9bea:	4b3e      	ldr	r3, [pc, #248]	; (9ce4 <system_clock_init+0x19c>)
    9bec:	7086      	strb	r6, [r0, #2]
	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    9bee:	7005      	strb	r5, [r0, #0]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    9bf0:	7046      	strb	r6, [r0, #1]
	system_clock_source_osc8m_set_config(&osc8m_conf);
    9bf2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    9bf4:	4b38      	ldr	r3, [pc, #224]	; (9cd8 <system_clock_init+0x190>)
    9bf6:	2006      	movs	r0, #6
    9bf8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    9bfa:	4b3b      	ldr	r3, [pc, #236]	; (9ce8 <system_clock_init+0x1a0>)
    9bfc:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    9bfe:	2305      	movs	r3, #5
	config->division_factor    = 1;
    9c00:	ac04      	add	r4, sp, #16
    9c02:	0021      	movs	r1, r4
    9c04:	7023      	strb	r3, [r4, #0]
    9c06:	0030      	movs	r0, r6
    9c08:	4b38      	ldr	r3, [pc, #224]	; (9cec <system_clock_init+0x1a4>)
    9c0a:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    9c0c:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    9c0e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    9c10:	7265      	strb	r5, [r4, #9]
    9c12:	4798      	blx	r3
    9c14:	4f36      	ldr	r7, [pc, #216]	; (9cf0 <system_clock_init+0x1a8>)
    9c16:	0030      	movs	r0, r6
    9c18:	47b8      	blx	r7
	config->source_clock       = GCLK_SOURCE_OSC8M;
    9c1a:	2306      	movs	r3, #6
    9c1c:	0021      	movs	r1, r4
    9c1e:	7023      	strb	r3, [r4, #0]
    9c20:	2003      	movs	r0, #3
    9c22:	4b32      	ldr	r3, [pc, #200]	; (9cec <system_clock_init+0x1a4>)
	config->division_factor    = 1;
    9c24:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    9c26:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    9c28:	7265      	strb	r5, [r4, #9]
    9c2a:	7226      	strb	r6, [r4, #8]
    9c2c:	4798      	blx	r3
    9c2e:	2003      	movs	r0, #3
    9c30:	47b8      	blx	r7
    9c32:	2303      	movs	r3, #3
    9c34:	7023      	strb	r3, [r4, #0]
    9c36:	2320      	movs	r3, #32
    9c38:	0021      	movs	r1, r4
    9c3a:	6063      	str	r3, [r4, #4]
    9c3c:	2004      	movs	r0, #4
    9c3e:	4b2b      	ldr	r3, [pc, #172]	; (9cec <system_clock_init+0x1a4>)
	config->high_when_disabled = false;
    9c40:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    9c42:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    9c44:	7265      	strb	r5, [r4, #9]
    9c46:	4798      	blx	r3
    9c48:	2004      	movs	r0, #4
    9c4a:	47b8      	blx	r7
    9c4c:	2307      	movs	r3, #7
    9c4e:	0021      	movs	r1, r4
    9c50:	7023      	strb	r3, [r4, #0]
    9c52:	2005      	movs	r0, #5
    9c54:	4b25      	ldr	r3, [pc, #148]	; (9cec <system_clock_init+0x1a4>)
	config->division_factor    = 1;
    9c56:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    9c58:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    9c5a:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    9c5c:	7265      	strb	r5, [r4, #9]
    9c5e:	4798      	blx	r3
    9c60:	2005      	movs	r0, #5
    9c62:	47b8      	blx	r7
	config->source_clock       = GCLK_SOURCE_OSC8M;
    9c64:	2306      	movs	r3, #6
    9c66:	0021      	movs	r1, r4
    9c68:	7023      	strb	r3, [r4, #0]
    9c6a:	2006      	movs	r0, #6
    9c6c:	4b1f      	ldr	r3, [pc, #124]	; (9cec <system_clock_init+0x1a4>)
	config->division_factor    = 1;
    9c6e:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    9c70:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    9c72:	7265      	strb	r5, [r4, #9]
    9c74:	7226      	strb	r6, [r4, #8]
    9c76:	4798      	blx	r3
    9c78:	2006      	movs	r0, #6
    9c7a:	47b8      	blx	r7
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    9c7c:	0021      	movs	r1, r4
    9c7e:	0028      	movs	r0, r5
    9c80:	4b13      	ldr	r3, [pc, #76]	; (9cd0 <system_clock_init+0x188>)
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    9c82:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    9c84:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    9c86:	0028      	movs	r0, r5
    9c88:	4b1a      	ldr	r3, [pc, #104]	; (9cf4 <system_clock_init+0x1ac>)
    9c8a:	4798      	blx	r3
    9c8c:	4b1a      	ldr	r3, [pc, #104]	; (9cf8 <system_clock_init+0x1b0>)
    9c8e:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    9c90:	22d0      	movs	r2, #208	; 0xd0
    9c92:	9b01      	ldr	r3, [sp, #4]
    9c94:	68db      	ldr	r3, [r3, #12]
    9c96:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    9c98:	2bd0      	cmp	r3, #208	; 0xd0
    9c9a:	d1fa      	bne.n	9c92 <system_clock_init+0x14a>
	PM->CPUSEL.reg = (uint32_t)divider;
    9c9c:	2500      	movs	r5, #0
    9c9e:	4b17      	ldr	r3, [pc, #92]	; (9cfc <system_clock_init+0x1b4>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    9ca0:	0021      	movs	r1, r4
    9ca2:	721d      	strb	r5, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    9ca4:	725d      	strb	r5, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    9ca6:	729d      	strb	r5, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    9ca8:	72dd      	strb	r5, [r3, #11]
	config->division_factor    = 1;
    9caa:	2301      	movs	r3, #1
    9cac:	6063      	str	r3, [r4, #4]
    9cae:	3306      	adds	r3, #6
    9cb0:	7023      	strb	r3, [r4, #0]
    9cb2:	0028      	movs	r0, r5
    9cb4:	4b0d      	ldr	r3, [pc, #52]	; (9cec <system_clock_init+0x1a4>)
	config->high_when_disabled = false;
    9cb6:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    9cb8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    9cba:	7265      	strb	r5, [r4, #9]
    9cbc:	4798      	blx	r3
    9cbe:	0028      	movs	r0, r5
    9cc0:	47b8      	blx	r7
#endif
}
    9cc2:	b011      	add	sp, #68	; 0x44
    9cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9cc6:	46c0      	nop			; (mov r8, r8)
    9cc8:	40000800 	.word	0x40000800
    9ccc:	41004000 	.word	0x41004000
    9cd0:	00009f21 	.word	0x00009f21
    9cd4:	000099c9 	.word	0x000099c9
    9cd8:	00009ae1 	.word	0x00009ae1
    9cdc:	00806024 	.word	0x00806024
    9ce0:	00009a65 	.word	0x00009a65
    9ce4:	0000998d 	.word	0x0000998d
    9ce8:	00009d0d 	.word	0x00009d0d
    9cec:	00009d2d 	.word	0x00009d2d
    9cf0:	00009dd1 	.word	0x00009dd1
    9cf4:	00009e99 	.word	0x00009e99
    9cf8:	000098c5 	.word	0x000098c5
    9cfc:	40000400 	.word	0x40000400

00009d00 <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    9d00:	4b01      	ldr	r3, [pc, #4]	; (9d08 <system_gclk_is_syncing+0x8>)
    9d02:	7858      	ldrb	r0, [r3, #1]
    9d04:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
    9d06:	4770      	bx	lr
    9d08:	40000c00 	.word	0x40000c00

00009d0c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    9d0c:	2308      	movs	r3, #8
    9d0e:	4a05      	ldr	r2, [pc, #20]	; (9d24 <system_gclk_init+0x18>)
    9d10:	6991      	ldr	r1, [r2, #24]
    9d12:	430b      	orrs	r3, r1
    9d14:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    9d16:	2301      	movs	r3, #1
    9d18:	4a03      	ldr	r2, [pc, #12]	; (9d28 <system_gclk_init+0x1c>)
    9d1a:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    9d1c:	7811      	ldrb	r1, [r2, #0]
    9d1e:	4219      	tst	r1, r3
    9d20:	d1fc      	bne.n	9d1c <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    9d22:	4770      	bx	lr
    9d24:	40000400 	.word	0x40000400
    9d28:	40000c00 	.word	0x40000c00

00009d2c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    9d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    9d2e:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    9d30:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    9d32:	0224      	lsls	r4, r4, #8
{
    9d34:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    9d36:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    9d38:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
    9d3a:	2b00      	cmp	r3, #0
    9d3c:	d002      	beq.n	9d44 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    9d3e:	2380      	movs	r3, #128	; 0x80
    9d40:	02db      	lsls	r3, r3, #11
    9d42:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    9d44:	7a4b      	ldrb	r3, [r1, #9]
    9d46:	2b00      	cmp	r3, #0
    9d48:	d002      	beq.n	9d50 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    9d4a:	2380      	movs	r3, #128	; 0x80
    9d4c:	031b      	lsls	r3, r3, #12
    9d4e:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    9d50:	684b      	ldr	r3, [r1, #4]
    9d52:	2b01      	cmp	r3, #1
    9d54:	d912      	bls.n	9d7c <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    9d56:	1e5d      	subs	r5, r3, #1
    9d58:	401d      	ands	r5, r3
    9d5a:	2202      	movs	r2, #2
    9d5c:	2d00      	cmp	r5, #0
    9d5e:	d006      	beq.n	9d6e <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    9d60:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    9d62:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
    9d64:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    9d66:	029b      	lsls	r3, r3, #10
    9d68:	e007      	b.n	9d7a <system_gclk_gen_set_config+0x4e>
				div2_count++;
    9d6a:	3501      	adds	r5, #1
						mask <<= 1) {
    9d6c:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    9d6e:	429a      	cmp	r2, r3
    9d70:	d3fb      	bcc.n	9d6a <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    9d72:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    9d74:	022d      	lsls	r5, r5, #8
    9d76:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    9d78:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    9d7a:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    9d7c:	7a0b      	ldrb	r3, [r1, #8]
    9d7e:	2b00      	cmp	r3, #0
    9d80:	d002      	beq.n	9d88 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    9d82:	2380      	movs	r3, #128	; 0x80
    9d84:	039b      	lsls	r3, r3, #14
    9d86:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
    9d88:	4f0c      	ldr	r7, [pc, #48]	; (9dbc <system_gclk_gen_set_config+0x90>)
    9d8a:	47b8      	blx	r7
    9d8c:	2800      	cmp	r0, #0
    9d8e:	d1fb      	bne.n	9d88 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    9d90:	4b0b      	ldr	r3, [pc, #44]	; (9dc0 <system_gclk_gen_set_config+0x94>)
    9d92:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    9d94:	4b0b      	ldr	r3, [pc, #44]	; (9dc4 <system_gclk_gen_set_config+0x98>)
    9d96:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    9d98:	47b8      	blx	r7
    9d9a:	2800      	cmp	r0, #0
    9d9c:	d1fc      	bne.n	9d98 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    9d9e:	4b0a      	ldr	r3, [pc, #40]	; (9dc8 <system_gclk_gen_set_config+0x9c>)
    9da0:	609d      	str	r5, [r3, #8]
    9da2:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
    9da4:	47b8      	blx	r7
    9da6:	2800      	cmp	r0, #0
    9da8:	d1fc      	bne.n	9da4 <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    9daa:	2280      	movs	r2, #128	; 0x80
    9dac:	686b      	ldr	r3, [r5, #4]
    9dae:	0252      	lsls	r2, r2, #9
    9db0:	4013      	ands	r3, r2
    9db2:	431c      	orrs	r4, r3
    9db4:	606c      	str	r4, [r5, #4]
	cpu_irq_leave_critical();
    9db6:	4b05      	ldr	r3, [pc, #20]	; (9dcc <system_gclk_gen_set_config+0xa0>)
    9db8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    9dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9dbc:	00009d01 	.word	0x00009d01
    9dc0:	00009851 	.word	0x00009851
    9dc4:	40000c08 	.word	0x40000c08
    9dc8:	40000c00 	.word	0x40000c00
    9dcc:	00009885 	.word	0x00009885

00009dd0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    9dd0:	b570      	push	{r4, r5, r6, lr}
    9dd2:	0005      	movs	r5, r0
	while (system_gclk_is_syncing()) {
    9dd4:	4c09      	ldr	r4, [pc, #36]	; (9dfc <system_gclk_gen_enable+0x2c>)
    9dd6:	47a0      	blx	r4
    9dd8:	2800      	cmp	r0, #0
    9dda:	d1fb      	bne.n	9dd4 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    9ddc:	4b08      	ldr	r3, [pc, #32]	; (9e00 <system_gclk_gen_enable+0x30>)
    9dde:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    9de0:	4b08      	ldr	r3, [pc, #32]	; (9e04 <system_gclk_gen_enable+0x34>)
    9de2:	701d      	strb	r5, [r3, #0]
	while (system_gclk_is_syncing()) {
    9de4:	47a0      	blx	r4
    9de6:	2800      	cmp	r0, #0
    9de8:	d1fc      	bne.n	9de4 <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    9dea:	2380      	movs	r3, #128	; 0x80
    9dec:	4a06      	ldr	r2, [pc, #24]	; (9e08 <system_gclk_gen_enable+0x38>)
    9dee:	025b      	lsls	r3, r3, #9
    9df0:	6851      	ldr	r1, [r2, #4]
    9df2:	430b      	orrs	r3, r1
    9df4:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    9df6:	4b05      	ldr	r3, [pc, #20]	; (9e0c <system_gclk_gen_enable+0x3c>)
    9df8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    9dfa:	bd70      	pop	{r4, r5, r6, pc}
    9dfc:	00009d01 	.word	0x00009d01
    9e00:	00009851 	.word	0x00009851
    9e04:	40000c04 	.word	0x40000c04
    9e08:	40000c00 	.word	0x40000c00
    9e0c:	00009885 	.word	0x00009885

00009e10 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    9e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9e12:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
    9e14:	4e18      	ldr	r6, [pc, #96]	; (9e78 <system_gclk_gen_get_hz+0x68>)
    9e16:	47b0      	blx	r6
    9e18:	2800      	cmp	r0, #0
    9e1a:	d1fb      	bne.n	9e14 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    9e1c:	4b17      	ldr	r3, [pc, #92]	; (9e7c <system_gclk_gen_get_hz+0x6c>)
    9e1e:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    9e20:	4b17      	ldr	r3, [pc, #92]	; (9e80 <system_gclk_gen_get_hz+0x70>)
    9e22:	701f      	strb	r7, [r3, #0]
    9e24:	9301      	str	r3, [sp, #4]
	while (system_gclk_is_syncing()) {
    9e26:	47b0      	blx	r6
    9e28:	2800      	cmp	r0, #0
    9e2a:	d1fc      	bne.n	9e26 <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    9e2c:	4d15      	ldr	r5, [pc, #84]	; (9e84 <system_gclk_gen_get_hz+0x74>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
    9e2e:	4b16      	ldr	r3, [pc, #88]	; (9e88 <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    9e30:	6868      	ldr	r0, [r5, #4]
    9e32:	04c0      	lsls	r0, r0, #19
    9e34:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    9e36:	4798      	blx	r3
    9e38:	0004      	movs	r4, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    9e3a:	9b01      	ldr	r3, [sp, #4]
    9e3c:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    9e3e:	686b      	ldr	r3, [r5, #4]
    9e40:	02db      	lsls	r3, r3, #11
    9e42:	0fdb      	lsrs	r3, r3, #31
    9e44:	9301      	str	r3, [sp, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    9e46:	4b11      	ldr	r3, [pc, #68]	; (9e8c <system_gclk_gen_get_hz+0x7c>)
    9e48:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
    9e4a:	47b0      	blx	r6
    9e4c:	2800      	cmp	r0, #0
    9e4e:	d1fc      	bne.n	9e4a <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    9e50:	68ad      	ldr	r5, [r5, #8]
	cpu_irq_leave_critical();
    9e52:	4b0f      	ldr	r3, [pc, #60]	; (9e90 <system_gclk_gen_get_hz+0x80>)
    9e54:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    9e56:	9b01      	ldr	r3, [sp, #4]
	uint32_t divider = GCLK->GENDIV.bit.DIV;
    9e58:	022d      	lsls	r5, r5, #8
    9e5a:	0c2d      	lsrs	r5, r5, #16
	if (!divsel && divider > 1) {
    9e5c:	2b00      	cmp	r3, #0
    9e5e:	d108      	bne.n	9e72 <system_gclk_gen_get_hz+0x62>
    9e60:	2d01      	cmp	r5, #1
    9e62:	d904      	bls.n	9e6e <system_gclk_gen_get_hz+0x5e>
		gen_input_hz /= divider;
    9e64:	0020      	movs	r0, r4
    9e66:	0029      	movs	r1, r5
    9e68:	4b0a      	ldr	r3, [pc, #40]	; (9e94 <system_gclk_gen_get_hz+0x84>)
    9e6a:	4798      	blx	r3
    9e6c:	0004      	movs	r4, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
    9e6e:	0020      	movs	r0, r4
    9e70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
    9e72:	3501      	adds	r5, #1
    9e74:	40ec      	lsrs	r4, r5
	return gen_input_hz;
    9e76:	e7fa      	b.n	9e6e <system_gclk_gen_get_hz+0x5e>
    9e78:	00009d01 	.word	0x00009d01
    9e7c:	00009851 	.word	0x00009851
    9e80:	40000c04 	.word	0x40000c04
    9e84:	40000c00 	.word	0x40000c00
    9e88:	000098fd 	.word	0x000098fd
    9e8c:	40000c08 	.word	0x40000c08
    9e90:	00009885 	.word	0x00009885
    9e94:	0000a2c9 	.word	0x0000a2c9

00009e98 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    9e98:	b510      	push	{r4, lr}
    9e9a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    9e9c:	4b06      	ldr	r3, [pc, #24]	; (9eb8 <system_gclk_chan_enable+0x20>)
    9e9e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    9ea0:	4b06      	ldr	r3, [pc, #24]	; (9ebc <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    9ea2:	4a07      	ldr	r2, [pc, #28]	; (9ec0 <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    9ea4:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    9ea6:	2380      	movs	r3, #128	; 0x80
    9ea8:	8851      	ldrh	r1, [r2, #2]
    9eaa:	01db      	lsls	r3, r3, #7
    9eac:	430b      	orrs	r3, r1
    9eae:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    9eb0:	4b04      	ldr	r3, [pc, #16]	; (9ec4 <system_gclk_chan_enable+0x2c>)
    9eb2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    9eb4:	bd10      	pop	{r4, pc}
    9eb6:	46c0      	nop			; (mov r8, r8)
    9eb8:	00009851 	.word	0x00009851
    9ebc:	40000c02 	.word	0x40000c02
    9ec0:	40000c00 	.word	0x40000c00
    9ec4:	00009885 	.word	0x00009885

00009ec8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    9ec8:	b510      	push	{r4, lr}
    9eca:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    9ecc:	4b0e      	ldr	r3, [pc, #56]	; (9f08 <system_gclk_chan_disable+0x40>)
    9ece:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    9ed0:	4b0e      	ldr	r3, [pc, #56]	; (9f0c <system_gclk_chan_disable+0x44>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
    9ed2:	4a0f      	ldr	r2, [pc, #60]	; (9f10 <system_gclk_chan_disable+0x48>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    9ed4:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    9ed6:	4b0f      	ldr	r3, [pc, #60]	; (9f14 <system_gclk_chan_disable+0x4c>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    9ed8:	4c0f      	ldr	r4, [pc, #60]	; (9f18 <system_gclk_chan_disable+0x50>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    9eda:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    9edc:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    9ede:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    9ee0:	4011      	ands	r1, r2
    9ee2:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    9ee4:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    9ee6:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    9ee8:	4021      	ands	r1, r4
    9eea:	8059      	strh	r1, [r3, #2]
    9eec:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    9eee:	2280      	movs	r2, #128	; 0x80
    9ef0:	01d2      	lsls	r2, r2, #7
    9ef2:	885c      	ldrh	r4, [r3, #2]
    9ef4:	4214      	tst	r4, r2
    9ef6:	d1fc      	bne.n	9ef2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    9ef8:	885a      	ldrh	r2, [r3, #2]
    9efa:	0200      	lsls	r0, r0, #8
    9efc:	400a      	ands	r2, r1
    9efe:	4302      	orrs	r2, r0
    9f00:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
    9f02:	4b06      	ldr	r3, [pc, #24]	; (9f1c <system_gclk_chan_disable+0x54>)
    9f04:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    9f06:	bd10      	pop	{r4, pc}
    9f08:	00009851 	.word	0x00009851
    9f0c:	40000c02 	.word	0x40000c02
    9f10:	fffff0ff 	.word	0xfffff0ff
    9f14:	40000c00 	.word	0x40000c00
    9f18:	ffffbfff 	.word	0xffffbfff
    9f1c:	00009885 	.word	0x00009885

00009f20 <system_gclk_chan_set_config>:
{
    9f20:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    9f22:	780c      	ldrb	r4, [r1, #0]
	system_gclk_chan_disable(channel);
    9f24:	4b03      	ldr	r3, [pc, #12]	; (9f34 <system_gclk_chan_set_config+0x14>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    9f26:	0224      	lsls	r4, r4, #8
    9f28:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    9f2a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    9f2c:	4b02      	ldr	r3, [pc, #8]	; (9f38 <system_gclk_chan_set_config+0x18>)
    9f2e:	b2a4      	uxth	r4, r4
    9f30:	805c      	strh	r4, [r3, #2]
}
    9f32:	bd10      	pop	{r4, pc}
    9f34:	00009ec9 	.word	0x00009ec9
    9f38:	40000c00 	.word	0x40000c00

00009f3c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    9f3c:	b510      	push	{r4, lr}
    9f3e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    9f40:	4b06      	ldr	r3, [pc, #24]	; (9f5c <system_gclk_chan_get_hz+0x20>)
    9f42:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    9f44:	4b06      	ldr	r3, [pc, #24]	; (9f60 <system_gclk_chan_get_hz+0x24>)
    9f46:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    9f48:	4b06      	ldr	r3, [pc, #24]	; (9f64 <system_gclk_chan_get_hz+0x28>)
    9f4a:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    9f4c:	4b06      	ldr	r3, [pc, #24]	; (9f68 <system_gclk_chan_get_hz+0x2c>)
    9f4e:	0524      	lsls	r4, r4, #20
    9f50:	0f24      	lsrs	r4, r4, #28
    9f52:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    9f54:	0020      	movs	r0, r4
    9f56:	4b05      	ldr	r3, [pc, #20]	; (9f6c <system_gclk_chan_get_hz+0x30>)
    9f58:	4798      	blx	r3
}
    9f5a:	bd10      	pop	{r4, pc}
    9f5c:	00009851 	.word	0x00009851
    9f60:	40000c02 	.word	0x40000c02
    9f64:	40000c00 	.word	0x40000c00
    9f68:	00009885 	.word	0x00009885
    9f6c:	00009e11 	.word	0x00009e11

00009f70 <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    9f70:	78d3      	ldrb	r3, [r2, #3]
{
    9f72:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
    9f74:	2b00      	cmp	r3, #0
    9f76:	d135      	bne.n	9fe4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    9f78:	7814      	ldrb	r4, [r2, #0]
    9f7a:	2c80      	cmp	r4, #128	; 0x80
    9f7c:	d003      	beq.n	9f86 <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    9f7e:	2380      	movs	r3, #128	; 0x80
    9f80:	0624      	lsls	r4, r4, #24
    9f82:	025b      	lsls	r3, r3, #9
    9f84:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    9f86:	2502      	movs	r5, #2
    9f88:	7854      	ldrb	r4, [r2, #1]
    9f8a:	43ac      	bics	r4, r5
    9f8c:	d106      	bne.n	9f9c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    9f8e:	7894      	ldrb	r4, [r2, #2]
    9f90:	2c00      	cmp	r4, #0
    9f92:	d124      	bne.n	9fde <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    9f94:	2480      	movs	r4, #128	; 0x80
    9f96:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    9f98:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    9f9a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9f9c:	7854      	ldrb	r4, [r2, #1]
    9f9e:	3c01      	subs	r4, #1
    9fa0:	2c01      	cmp	r4, #1
    9fa2:	d801      	bhi.n	9fa8 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    9fa4:	4c12      	ldr	r4, [pc, #72]	; (9ff0 <_system_pinmux_config+0x80>)
    9fa6:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    9fa8:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    9faa:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    9fac:	05e4      	lsls	r4, r4, #23
    9fae:	432c      	orrs	r4, r5
    9fb0:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    9fb2:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    9fb4:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    9fb6:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    9fb8:	0624      	lsls	r4, r4, #24
    9fba:	432c      	orrs	r4, r5
    9fbc:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    9fbe:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    9fc0:	78d4      	ldrb	r4, [r2, #3]
    9fc2:	2c00      	cmp	r4, #0
    9fc4:	d10a      	bne.n	9fdc <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    9fc6:	035b      	lsls	r3, r3, #13
    9fc8:	d503      	bpl.n	9fd2 <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    9fca:	7893      	ldrb	r3, [r2, #2]
    9fcc:	2b01      	cmp	r3, #1
    9fce:	d10c      	bne.n	9fea <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    9fd0:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9fd2:	7853      	ldrb	r3, [r2, #1]
    9fd4:	3b01      	subs	r3, #1
    9fd6:	2b01      	cmp	r3, #1
    9fd8:	d800      	bhi.n	9fdc <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    9fda:	6081      	str	r1, [r0, #8]
		}
	}
}
    9fdc:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    9fde:	24c0      	movs	r4, #192	; 0xc0
    9fe0:	02e4      	lsls	r4, r4, #11
    9fe2:	e7d9      	b.n	9f98 <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
    9fe4:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    9fe6:	2300      	movs	r3, #0
    9fe8:	e7de      	b.n	9fa8 <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
    9fea:	6141      	str	r1, [r0, #20]
    9fec:	e7f1      	b.n	9fd2 <_system_pinmux_config+0x62>
    9fee:	46c0      	nop			; (mov r8, r8)
    9ff0:	fffbffff 	.word	0xfffbffff

00009ff4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    9ff4:	b510      	push	{r4, lr}
    9ff6:	0003      	movs	r3, r0
    9ff8:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);
    9ffa:	0944      	lsrs	r4, r0, #5
	if (port_index < PORT_INST_NUM) {
    9ffc:	09c1      	lsrs	r1, r0, #7
		return NULL;
    9ffe:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    a000:	4281      	cmp	r1, r0
    a002:	d102      	bne.n	a00a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    a004:	4904      	ldr	r1, [pc, #16]	; (a018 <system_pinmux_pin_set_config+0x24>)
    a006:	01e0      	lsls	r0, r4, #7
    a008:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    a00a:	211f      	movs	r1, #31
    a00c:	400b      	ands	r3, r1
    a00e:	391e      	subs	r1, #30
    a010:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    a012:	4b02      	ldr	r3, [pc, #8]	; (a01c <system_pinmux_pin_set_config+0x28>)
    a014:	4798      	blx	r3
}
    a016:	bd10      	pop	{r4, pc}
    a018:	41004400 	.word	0x41004400
    a01c:	00009f71 	.word	0x00009f71

0000a020 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    a020:	4770      	bx	lr
	...

0000a024 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    a024:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    a026:	4b05      	ldr	r3, [pc, #20]	; (a03c <system_init+0x18>)
    a028:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    a02a:	4b05      	ldr	r3, [pc, #20]	; (a040 <system_init+0x1c>)
    a02c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    a02e:	4b05      	ldr	r3, [pc, #20]	; (a044 <system_init+0x20>)
    a030:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    a032:	4b05      	ldr	r3, [pc, #20]	; (a048 <system_init+0x24>)
    a034:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    a036:	4b05      	ldr	r3, [pc, #20]	; (a04c <system_init+0x28>)
    a038:	4798      	blx	r3
}
    a03a:	bd10      	pop	{r4, pc}
    a03c:	00009b49 	.word	0x00009b49
    a040:	0000984d 	.word	0x0000984d
    a044:	00008ee5 	.word	0x00008ee5
    a048:	000069b5 	.word	0x000069b5
    a04c:	0000a021 	.word	0x0000a021

0000a050 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    a050:	e7fe      	b.n	a050 <Dummy_Handler>
	...

0000a054 <Reset_Handler>:
        if (pSrc != pDest) {
    a054:	4821      	ldr	r0, [pc, #132]	; (a0dc <Reset_Handler+0x88>)
    a056:	4922      	ldr	r1, [pc, #136]	; (a0e0 <Reset_Handler+0x8c>)
{
    a058:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    a05a:	4288      	cmp	r0, r1
    a05c:	d004      	beq.n	a068 <Reset_Handler+0x14>
    a05e:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    a060:	4c20      	ldr	r4, [pc, #128]	; (a0e4 <Reset_Handler+0x90>)
    a062:	18ca      	adds	r2, r1, r3
    a064:	42a2      	cmp	r2, r4
    a066:	d332      	bcc.n	a0ce <Reset_Handler+0x7a>
                *pDest++ = 0;
    a068:	2100      	movs	r1, #0
    a06a:	4b1f      	ldr	r3, [pc, #124]	; (a0e8 <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
    a06c:	4a1f      	ldr	r2, [pc, #124]	; (a0ec <Reset_Handler+0x98>)
    a06e:	4293      	cmp	r3, r2
    a070:	d331      	bcc.n	a0d6 <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    a072:	21ff      	movs	r1, #255	; 0xff
    a074:	4b1e      	ldr	r3, [pc, #120]	; (a0f0 <Reset_Handler+0x9c>)
    a076:	4a1f      	ldr	r2, [pc, #124]	; (a0f4 <Reset_Handler+0xa0>)
    a078:	438b      	bics	r3, r1
    a07a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    a07c:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    a07e:	250c      	movs	r5, #12
    a080:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
    a082:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    a084:	4b1c      	ldr	r3, [pc, #112]	; (a0f8 <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    a086:	481d      	ldr	r0, [pc, #116]	; (a0fc <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    a088:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    a08a:	78c3      	ldrb	r3, [r0, #3]
    a08c:	39fc      	subs	r1, #252	; 0xfc
    a08e:	438b      	bics	r3, r1
    a090:	4313      	orrs	r3, r2
    a092:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    a094:	78c3      	ldrb	r3, [r0, #3]
    a096:	43ab      	bics	r3, r5
    a098:	4323      	orrs	r3, r4
    a09a:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    a09c:	4b18      	ldr	r3, [pc, #96]	; (a100 <Reset_Handler+0xac>)
    a09e:	7b98      	ldrb	r0, [r3, #14]
    a0a0:	43b0      	bics	r0, r6
    a0a2:	0006      	movs	r6, r0
    a0a4:	2020      	movs	r0, #32
    a0a6:	4330      	orrs	r0, r6
    a0a8:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    a0aa:	7b98      	ldrb	r0, [r3, #14]
    a0ac:	43a8      	bics	r0, r5
    a0ae:	4304      	orrs	r4, r0
    a0b0:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    a0b2:	7b98      	ldrb	r0, [r3, #14]
    a0b4:	4388      	bics	r0, r1
    a0b6:	4302      	orrs	r2, r0
    a0b8:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    a0ba:	2380      	movs	r3, #128	; 0x80
    a0bc:	4a11      	ldr	r2, [pc, #68]	; (a104 <Reset_Handler+0xb0>)
    a0be:	6851      	ldr	r1, [r2, #4]
    a0c0:	430b      	orrs	r3, r1
    a0c2:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    a0c4:	4b10      	ldr	r3, [pc, #64]	; (a108 <Reset_Handler+0xb4>)
    a0c6:	4798      	blx	r3
        main();
    a0c8:	4b10      	ldr	r3, [pc, #64]	; (a10c <Reset_Handler+0xb8>)
    a0ca:	4798      	blx	r3
    a0cc:	e7fe      	b.n	a0cc <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    a0ce:	58c5      	ldr	r5, [r0, r3]
    a0d0:	3304      	adds	r3, #4
    a0d2:	6015      	str	r5, [r2, #0]
    a0d4:	e7c5      	b.n	a062 <Reset_Handler+0xe>
                *pDest++ = 0;
    a0d6:	c302      	stmia	r3!, {r1}
    a0d8:	e7c9      	b.n	a06e <Reset_Handler+0x1a>
    a0da:	46c0      	nop			; (mov r8, r8)
    a0dc:	0000db38 	.word	0x0000db38
    a0e0:	20000000 	.word	0x20000000
    a0e4:	200001fc 	.word	0x200001fc
    a0e8:	20000200 	.word	0x20000200
    a0ec:	2000084c 	.word	0x2000084c
    a0f0:	00000000 	.word	0x00000000
    a0f4:	e000ed00 	.word	0xe000ed00
    a0f8:	410070fc 	.word	0x410070fc
    a0fc:	41005000 	.word	0x41005000
    a100:	41004800 	.word	0x41004800
    a104:	41004000 	.word	0x41004000
    a108:	0000c309 	.word	0x0000c309
    a10c:	0000a131 	.word	0x0000a131

0000a110 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    a110:	4b05      	ldr	r3, [pc, #20]	; (a128 <_sbrk+0x18>)
{
    a112:	0002      	movs	r2, r0
	if (heap == NULL) {
    a114:	6819      	ldr	r1, [r3, #0]
    a116:	2900      	cmp	r1, #0
    a118:	d101      	bne.n	a11e <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    a11a:	4904      	ldr	r1, [pc, #16]	; (a12c <_sbrk+0x1c>)
    a11c:	6019      	str	r1, [r3, #0]
	}
	prev_heap = heap;
    a11e:	6818      	ldr	r0, [r3, #0]

	heap += incr;
    a120:	1882      	adds	r2, r0, r2
    a122:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
}
    a124:	4770      	bx	lr
    a126:	46c0      	nop			; (mov r8, r8)
    a128:	200004f4 	.word	0x200004f4
    a12c:	20002850 	.word	0x20002850

0000a130 <main>:

bool initSleepSeqeunce=false;
uint32_t tempSleepWait=0;

int main (void)
{
    a130:	b513      	push	{r0, r1, r4, lr}
	system_init();
    a132:	4b1f      	ldr	r3, [pc, #124]	; (a1b0 <main+0x80>)
    a134:	4798      	blx	r3
			PM->APBAMASK.reg &= ~mask;
    a136:	2111      	movs	r1, #17
    a138:	4b1e      	ldr	r3, [pc, #120]	; (a1b4 <main+0x84>)
    a13a:	699a      	ldr	r2, [r3, #24]
    a13c:	438a      	bics	r2, r1
    a13e:	619a      	str	r2, [r3, #24]
			PM->APBBMASK.reg &= ~mask;
    a140:	69da      	ldr	r2, [r3, #28]
    a142:	390e      	subs	r1, #14
    a144:	438a      	bics	r2, r1
    a146:	61da      	str	r2, [r3, #28]
			PM->APBCMASK.reg &= ~mask;
    a148:	6a1a      	ldr	r2, [r3, #32]
    a14a:	491b      	ldr	r1, [pc, #108]	; (a1b8 <main+0x88>)
    a14c:	400a      	ands	r2, r1
	PM_APBBMASK_PAC1 | PM_APBBMASK_DSU);
	system_apb_clock_clear_mask(SYSTEM_CLOCK_APB_APBC,
	PM_APBCMASK_PAC2 | PM_APBCMASK_AC | PM_APBCMASK_DAC);
	
	/* Disable NVM low power mode during sleep due to lockups (device errata) */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    a14e:	21c0      	movs	r1, #192	; 0xc0
    a150:	621a      	str	r2, [r3, #32]
    a152:	4a1a      	ldr	r2, [pc, #104]	; (a1bc <main+0x8c>)
    a154:	0089      	lsls	r1, r1, #2
    a156:	6853      	ldr	r3, [r2, #4]
    a158:	430b      	orrs	r3, r1
    a15a:	6053      	str	r3, [r2, #4]
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    a15c:	4b18      	ldr	r3, [pc, #96]	; (a1c0 <main+0x90>)
    a15e:	699b      	ldr	r3, [r3, #24]

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
    a160:	051b      	lsls	r3, r3, #20
    a162:	0f1b      	lsrs	r3, r3, #28
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    a164:	2b02      	cmp	r3, #2
    a166:	d802      	bhi.n	a16e <main+0x3e>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    a168:	6853      	ldr	r3, [r2, #4]
    a16a:	4319      	orrs	r1, r3
    a16c:	6051      	str	r1, [r2, #4]
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
			PM->SLEEP.reg = sleep_mode;
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    a16e:	2304      	movs	r3, #4
	cpu_irq_enable();
    a170:	2401      	movs	r4, #1
    a172:	4a14      	ldr	r2, [pc, #80]	; (a1c4 <main+0x94>)
    a174:	6911      	ldr	r1, [r2, #16]
    a176:	430b      	orrs	r3, r1
    a178:	6113      	str	r3, [r2, #16]
    a17a:	4b13      	ldr	r3, [pc, #76]	; (a1c8 <main+0x98>)
    a17c:	701c      	strb	r4, [r3, #0]
    a17e:	f3bf 8f5f 	dmb	sy
    a182:	b662      	cpsie	i
	
	system_interrupt_enable_global();
	
	//irq_initialize_vectors();
	//cpu_irq_enable();
	delay_init();
    a184:	4b11      	ldr	r3, [pc, #68]	; (a1cc <main+0x9c>)
    a186:	4798      	blx	r3
	init_eeprom();
    a188:	4b11      	ldr	r3, [pc, #68]	; (a1d0 <main+0xa0>)
    a18a:	4798      	blx	r3
	
	
	
	start_lcd_service();
    a18c:	4b11      	ldr	r3, [pc, #68]	; (a1d4 <main+0xa4>)
    a18e:	4798      	blx	r3
	start_gsm_service();
    a190:	4b11      	ldr	r3, [pc, #68]	; (a1d8 <main+0xa8>)
    a192:	4798      	blx	r3
	start_motor_service();
    a194:	4b11      	ldr	r3, [pc, #68]	; (a1dc <main+0xac>)
    a196:	4798      	blx	r3
	
	xTaskCreate(vTask_sleep_manager,NULL,(uint16_t)100,NULL,1,NULL);
    a198:	2100      	movs	r1, #0
    a19a:	9400      	str	r4, [sp, #0]
    a19c:	000b      	movs	r3, r1
    a19e:	9101      	str	r1, [sp, #4]
    a1a0:	2264      	movs	r2, #100	; 0x64
    a1a2:	480f      	ldr	r0, [pc, #60]	; (a1e0 <main+0xb0>)
    a1a4:	4c0f      	ldr	r4, [pc, #60]	; (a1e4 <main+0xb4>)
    a1a6:	47a0      	blx	r4
	
	vTaskStartScheduler();
    a1a8:	4b0f      	ldr	r3, [pc, #60]	; (a1e8 <main+0xb8>)
    a1aa:	4798      	blx	r3
    a1ac:	e7fe      	b.n	a1ac <main+0x7c>
    a1ae:	46c0      	nop			; (mov r8, r8)
    a1b0:	0000a025 	.word	0x0000a025
    a1b4:	40000400 	.word	0x40000400
    a1b8:	fff9fffe 	.word	0xfff9fffe
    a1bc:	41004000 	.word	0x41004000
    a1c0:	41002000 	.word	0x41002000
    a1c4:	e000ed00 	.word	0xe000ed00
    a1c8:	20000028 	.word	0x20000028
    a1cc:	00009049 	.word	0x00009049
    a1d0:	000001b5 	.word	0x000001b5
    a1d4:	000043e5 	.word	0x000043e5
    a1d8:	00003fbd 	.word	0x00003fbd
    a1dc:	00005b71 	.word	0x00005b71
    a1e0:	0000a235 	.word	0x0000a235
    a1e4:	00007b09 	.word	0x00007b09
    a1e8:	00007cb1 	.word	0x00007cb1

0000a1ec <checkSleepElligible>:
	}
}


bool checkSleepElligible(void)
{
    a1ec:	b510      	push	{r4, lr}
	return (/*!turnOffTimerOn && */!getACPowerState() && motor_checkSleepElligible() && gsm_checkSleepElligible());
    a1ee:	4b07      	ldr	r3, [pc, #28]	; (a20c <checkSleepElligible+0x20>)
    a1f0:	4798      	blx	r3
    a1f2:	2800      	cmp	r0, #0
    a1f4:	d003      	beq.n	a1fe <checkSleepElligible+0x12>
    a1f6:	2000      	movs	r0, #0
    a1f8:	2301      	movs	r3, #1
    a1fa:	4018      	ands	r0, r3
}
    a1fc:	bd10      	pop	{r4, pc}
	return (/*!turnOffTimerOn && */!getACPowerState() && motor_checkSleepElligible() && gsm_checkSleepElligible());
    a1fe:	4b04      	ldr	r3, [pc, #16]	; (a210 <checkSleepElligible+0x24>)
    a200:	4798      	blx	r3
    a202:	2800      	cmp	r0, #0
    a204:	d0f7      	beq.n	a1f6 <checkSleepElligible+0xa>
    a206:	4b03      	ldr	r3, [pc, #12]	; (a214 <checkSleepElligible+0x28>)
    a208:	4798      	blx	r3
    a20a:	e7f5      	b.n	a1f8 <checkSleepElligible+0xc>
    a20c:	00004d0d 	.word	0x00004d0d
    a210:	00005d59 	.word	0x00005d59
    a214:	00004021 	.word	0x00004021

0000a218 <gotoSleep>:
		}
	}
}

void gotoSleep(void)
{
    a218:	b510      	push	{r4, lr}
	LCD_PWR_DIS();
    a21a:	4b04      	ldr	r3, [pc, #16]	; (a22c <gotoSleep+0x14>)
    a21c:	4798      	blx	r3
	lcd_in_sleep = true;
    a21e:	2201      	movs	r2, #1
    a220:	4b03      	ldr	r3, [pc, #12]	; (a230 <gotoSleep+0x18>)
    a222:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb");
    a224:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    a228:	bf30      	wfi
	system_sleep();
    a22a:	bd10      	pop	{r4, pc}
    a22c:	00001f21 	.word	0x00001f21
    a230:	20000728 	.word	0x20000728

0000a234 <vTask_sleep_manager>:
{
    a234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (checkSleepElligible())
    a236:	4b17      	ldr	r3, [pc, #92]	; (a294 <vTask_sleep_manager+0x60>)
    a238:	4798      	blx	r3
    a23a:	4c17      	ldr	r4, [pc, #92]	; (a298 <vTask_sleep_manager+0x64>)
    a23c:	2800      	cmp	r0, #0
    a23e:	d027      	beq.n	a290 <vTask_sleep_manager+0x5c>
			if(!initSleepSeqeunce)
    a240:	7823      	ldrb	r3, [r4, #0]
    a242:	4d16      	ldr	r5, [pc, #88]	; (a29c <vTask_sleep_manager+0x68>)
    a244:	4e16      	ldr	r6, [pc, #88]	; (a2a0 <vTask_sleep_manager+0x6c>)
    a246:	2b00      	cmp	r3, #0
    a248:	d104      	bne.n	a254 <vTask_sleep_manager+0x20>
				tempSleepWait=xTaskGetTickCount();
    a24a:	47a8      	blx	r5
				initSleepSeqeunce=true;
    a24c:	2301      	movs	r3, #1
				tempSleepWait=xTaskGetTickCount();
    a24e:	6030      	str	r0, [r6, #0]
				initSleepSeqeunce=true;
    a250:	7023      	strb	r3, [r4, #0]
    a252:	e7f0      	b.n	a236 <vTask_sleep_manager+0x2>
			else if(initSleepSeqeunce && xTaskGetTickCount()-tempSleepWait>sleepWaitTime)
    a254:	47a8      	blx	r5
    a256:	6833      	ldr	r3, [r6, #0]
    a258:	1ac0      	subs	r0, r0, r3
    a25a:	4b12      	ldr	r3, [pc, #72]	; (a2a4 <vTask_sleep_manager+0x70>)
    a25c:	4298      	cmp	r0, r3
    a25e:	d9ea      	bls.n	a236 <vTask_sleep_manager+0x2>
    a260:	240a      	movs	r4, #10
    a262:	2700      	movs	r7, #0
					led=!led;
    a264:	2301      	movs	r3, #1
    a266:	405f      	eors	r7, r3
					if(led)
    a268:	d010      	beq.n	a28c <vTask_sleep_manager+0x58>
		port_base->OUTCLR.reg = pin_mask;
    a26a:	4b0f      	ldr	r3, [pc, #60]	; (a2a8 <vTask_sleep_manager+0x74>)
		port_base->OUTSET.reg = pin_mask;
    a26c:	2280      	movs	r2, #128	; 0x80
    a26e:	601a      	str	r2, [r3, #0]
					tempSleepWait=xTaskGetTickCount();
    a270:	47a8      	blx	r5
    a272:	6030      	str	r0, [r6, #0]
					while(xTaskGetTickCount()-tempSleepWait<200)
    a274:	47a8      	blx	r5
    a276:	6833      	ldr	r3, [r6, #0]
    a278:	1ac0      	subs	r0, r0, r3
    a27a:	28c7      	cmp	r0, #199	; 0xc7
    a27c:	d9fa      	bls.n	a274 <vTask_sleep_manager+0x40>
    a27e:	3c01      	subs	r4, #1
    a280:	b2e4      	uxtb	r4, r4
				}while(--cnt);
    a282:	2c00      	cmp	r4, #0
    a284:	d1ee      	bne.n	a264 <vTask_sleep_manager+0x30>
				gotoSleep();
    a286:	4b09      	ldr	r3, [pc, #36]	; (a2ac <vTask_sleep_manager+0x78>)
    a288:	4798      	blx	r3
    a28a:	e7d4      	b.n	a236 <vTask_sleep_manager+0x2>
    a28c:	4b08      	ldr	r3, [pc, #32]	; (a2b0 <vTask_sleep_manager+0x7c>)
    a28e:	e7ed      	b.n	a26c <vTask_sleep_manager+0x38>
			initSleepSeqeunce=false;
    a290:	7020      	strb	r0, [r4, #0]
    a292:	e7d0      	b.n	a236 <vTask_sleep_manager+0x2>
    a294:	0000a1ed 	.word	0x0000a1ed
    a298:	200004f8 	.word	0x200004f8
    a29c:	00007d29 	.word	0x00007d29
    a2a0:	200004fc 	.word	0x200004fc
    a2a4:	00004650 	.word	0x00004650
    a2a8:	41004494 	.word	0x41004494
    a2ac:	0000a219 	.word	0x0000a219
    a2b0:	41004498 	.word	0x41004498

0000a2b4 <__gnu_thumb1_case_uqi>:
    a2b4:	b402      	push	{r1}
    a2b6:	4671      	mov	r1, lr
    a2b8:	0849      	lsrs	r1, r1, #1
    a2ba:	0049      	lsls	r1, r1, #1
    a2bc:	5c09      	ldrb	r1, [r1, r0]
    a2be:	0049      	lsls	r1, r1, #1
    a2c0:	448e      	add	lr, r1
    a2c2:	bc02      	pop	{r1}
    a2c4:	4770      	bx	lr
    a2c6:	46c0      	nop			; (mov r8, r8)

0000a2c8 <__udivsi3>:
    a2c8:	2200      	movs	r2, #0
    a2ca:	0843      	lsrs	r3, r0, #1
    a2cc:	428b      	cmp	r3, r1
    a2ce:	d374      	bcc.n	a3ba <__udivsi3+0xf2>
    a2d0:	0903      	lsrs	r3, r0, #4
    a2d2:	428b      	cmp	r3, r1
    a2d4:	d35f      	bcc.n	a396 <__udivsi3+0xce>
    a2d6:	0a03      	lsrs	r3, r0, #8
    a2d8:	428b      	cmp	r3, r1
    a2da:	d344      	bcc.n	a366 <__udivsi3+0x9e>
    a2dc:	0b03      	lsrs	r3, r0, #12
    a2de:	428b      	cmp	r3, r1
    a2e0:	d328      	bcc.n	a334 <__udivsi3+0x6c>
    a2e2:	0c03      	lsrs	r3, r0, #16
    a2e4:	428b      	cmp	r3, r1
    a2e6:	d30d      	bcc.n	a304 <__udivsi3+0x3c>
    a2e8:	22ff      	movs	r2, #255	; 0xff
    a2ea:	0209      	lsls	r1, r1, #8
    a2ec:	ba12      	rev	r2, r2
    a2ee:	0c03      	lsrs	r3, r0, #16
    a2f0:	428b      	cmp	r3, r1
    a2f2:	d302      	bcc.n	a2fa <__udivsi3+0x32>
    a2f4:	1212      	asrs	r2, r2, #8
    a2f6:	0209      	lsls	r1, r1, #8
    a2f8:	d065      	beq.n	a3c6 <__udivsi3+0xfe>
    a2fa:	0b03      	lsrs	r3, r0, #12
    a2fc:	428b      	cmp	r3, r1
    a2fe:	d319      	bcc.n	a334 <__udivsi3+0x6c>
    a300:	e000      	b.n	a304 <__udivsi3+0x3c>
    a302:	0a09      	lsrs	r1, r1, #8
    a304:	0bc3      	lsrs	r3, r0, #15
    a306:	428b      	cmp	r3, r1
    a308:	d301      	bcc.n	a30e <__udivsi3+0x46>
    a30a:	03cb      	lsls	r3, r1, #15
    a30c:	1ac0      	subs	r0, r0, r3
    a30e:	4152      	adcs	r2, r2
    a310:	0b83      	lsrs	r3, r0, #14
    a312:	428b      	cmp	r3, r1
    a314:	d301      	bcc.n	a31a <__udivsi3+0x52>
    a316:	038b      	lsls	r3, r1, #14
    a318:	1ac0      	subs	r0, r0, r3
    a31a:	4152      	adcs	r2, r2
    a31c:	0b43      	lsrs	r3, r0, #13
    a31e:	428b      	cmp	r3, r1
    a320:	d301      	bcc.n	a326 <__udivsi3+0x5e>
    a322:	034b      	lsls	r3, r1, #13
    a324:	1ac0      	subs	r0, r0, r3
    a326:	4152      	adcs	r2, r2
    a328:	0b03      	lsrs	r3, r0, #12
    a32a:	428b      	cmp	r3, r1
    a32c:	d301      	bcc.n	a332 <__udivsi3+0x6a>
    a32e:	030b      	lsls	r3, r1, #12
    a330:	1ac0      	subs	r0, r0, r3
    a332:	4152      	adcs	r2, r2
    a334:	0ac3      	lsrs	r3, r0, #11
    a336:	428b      	cmp	r3, r1
    a338:	d301      	bcc.n	a33e <__udivsi3+0x76>
    a33a:	02cb      	lsls	r3, r1, #11
    a33c:	1ac0      	subs	r0, r0, r3
    a33e:	4152      	adcs	r2, r2
    a340:	0a83      	lsrs	r3, r0, #10
    a342:	428b      	cmp	r3, r1
    a344:	d301      	bcc.n	a34a <__udivsi3+0x82>
    a346:	028b      	lsls	r3, r1, #10
    a348:	1ac0      	subs	r0, r0, r3
    a34a:	4152      	adcs	r2, r2
    a34c:	0a43      	lsrs	r3, r0, #9
    a34e:	428b      	cmp	r3, r1
    a350:	d301      	bcc.n	a356 <__udivsi3+0x8e>
    a352:	024b      	lsls	r3, r1, #9
    a354:	1ac0      	subs	r0, r0, r3
    a356:	4152      	adcs	r2, r2
    a358:	0a03      	lsrs	r3, r0, #8
    a35a:	428b      	cmp	r3, r1
    a35c:	d301      	bcc.n	a362 <__udivsi3+0x9a>
    a35e:	020b      	lsls	r3, r1, #8
    a360:	1ac0      	subs	r0, r0, r3
    a362:	4152      	adcs	r2, r2
    a364:	d2cd      	bcs.n	a302 <__udivsi3+0x3a>
    a366:	09c3      	lsrs	r3, r0, #7
    a368:	428b      	cmp	r3, r1
    a36a:	d301      	bcc.n	a370 <__udivsi3+0xa8>
    a36c:	01cb      	lsls	r3, r1, #7
    a36e:	1ac0      	subs	r0, r0, r3
    a370:	4152      	adcs	r2, r2
    a372:	0983      	lsrs	r3, r0, #6
    a374:	428b      	cmp	r3, r1
    a376:	d301      	bcc.n	a37c <__udivsi3+0xb4>
    a378:	018b      	lsls	r3, r1, #6
    a37a:	1ac0      	subs	r0, r0, r3
    a37c:	4152      	adcs	r2, r2
    a37e:	0943      	lsrs	r3, r0, #5
    a380:	428b      	cmp	r3, r1
    a382:	d301      	bcc.n	a388 <__udivsi3+0xc0>
    a384:	014b      	lsls	r3, r1, #5
    a386:	1ac0      	subs	r0, r0, r3
    a388:	4152      	adcs	r2, r2
    a38a:	0903      	lsrs	r3, r0, #4
    a38c:	428b      	cmp	r3, r1
    a38e:	d301      	bcc.n	a394 <__udivsi3+0xcc>
    a390:	010b      	lsls	r3, r1, #4
    a392:	1ac0      	subs	r0, r0, r3
    a394:	4152      	adcs	r2, r2
    a396:	08c3      	lsrs	r3, r0, #3
    a398:	428b      	cmp	r3, r1
    a39a:	d301      	bcc.n	a3a0 <__udivsi3+0xd8>
    a39c:	00cb      	lsls	r3, r1, #3
    a39e:	1ac0      	subs	r0, r0, r3
    a3a0:	4152      	adcs	r2, r2
    a3a2:	0883      	lsrs	r3, r0, #2
    a3a4:	428b      	cmp	r3, r1
    a3a6:	d301      	bcc.n	a3ac <__udivsi3+0xe4>
    a3a8:	008b      	lsls	r3, r1, #2
    a3aa:	1ac0      	subs	r0, r0, r3
    a3ac:	4152      	adcs	r2, r2
    a3ae:	0843      	lsrs	r3, r0, #1
    a3b0:	428b      	cmp	r3, r1
    a3b2:	d301      	bcc.n	a3b8 <__udivsi3+0xf0>
    a3b4:	004b      	lsls	r3, r1, #1
    a3b6:	1ac0      	subs	r0, r0, r3
    a3b8:	4152      	adcs	r2, r2
    a3ba:	1a41      	subs	r1, r0, r1
    a3bc:	d200      	bcs.n	a3c0 <__udivsi3+0xf8>
    a3be:	4601      	mov	r1, r0
    a3c0:	4152      	adcs	r2, r2
    a3c2:	4610      	mov	r0, r2
    a3c4:	4770      	bx	lr
    a3c6:	e7ff      	b.n	a3c8 <__udivsi3+0x100>
    a3c8:	b501      	push	{r0, lr}
    a3ca:	2000      	movs	r0, #0
    a3cc:	f000 f8f0 	bl	a5b0 <__aeabi_idiv0>
    a3d0:	bd02      	pop	{r1, pc}
    a3d2:	46c0      	nop			; (mov r8, r8)

0000a3d4 <__aeabi_uidivmod>:
    a3d4:	2900      	cmp	r1, #0
    a3d6:	d0f7      	beq.n	a3c8 <__udivsi3+0x100>
    a3d8:	e776      	b.n	a2c8 <__udivsi3>
    a3da:	4770      	bx	lr

0000a3dc <__divsi3>:
    a3dc:	4603      	mov	r3, r0
    a3de:	430b      	orrs	r3, r1
    a3e0:	d47f      	bmi.n	a4e2 <__divsi3+0x106>
    a3e2:	2200      	movs	r2, #0
    a3e4:	0843      	lsrs	r3, r0, #1
    a3e6:	428b      	cmp	r3, r1
    a3e8:	d374      	bcc.n	a4d4 <__divsi3+0xf8>
    a3ea:	0903      	lsrs	r3, r0, #4
    a3ec:	428b      	cmp	r3, r1
    a3ee:	d35f      	bcc.n	a4b0 <__divsi3+0xd4>
    a3f0:	0a03      	lsrs	r3, r0, #8
    a3f2:	428b      	cmp	r3, r1
    a3f4:	d344      	bcc.n	a480 <__divsi3+0xa4>
    a3f6:	0b03      	lsrs	r3, r0, #12
    a3f8:	428b      	cmp	r3, r1
    a3fa:	d328      	bcc.n	a44e <__divsi3+0x72>
    a3fc:	0c03      	lsrs	r3, r0, #16
    a3fe:	428b      	cmp	r3, r1
    a400:	d30d      	bcc.n	a41e <__divsi3+0x42>
    a402:	22ff      	movs	r2, #255	; 0xff
    a404:	0209      	lsls	r1, r1, #8
    a406:	ba12      	rev	r2, r2
    a408:	0c03      	lsrs	r3, r0, #16
    a40a:	428b      	cmp	r3, r1
    a40c:	d302      	bcc.n	a414 <__divsi3+0x38>
    a40e:	1212      	asrs	r2, r2, #8
    a410:	0209      	lsls	r1, r1, #8
    a412:	d065      	beq.n	a4e0 <__divsi3+0x104>
    a414:	0b03      	lsrs	r3, r0, #12
    a416:	428b      	cmp	r3, r1
    a418:	d319      	bcc.n	a44e <__divsi3+0x72>
    a41a:	e000      	b.n	a41e <__divsi3+0x42>
    a41c:	0a09      	lsrs	r1, r1, #8
    a41e:	0bc3      	lsrs	r3, r0, #15
    a420:	428b      	cmp	r3, r1
    a422:	d301      	bcc.n	a428 <__divsi3+0x4c>
    a424:	03cb      	lsls	r3, r1, #15
    a426:	1ac0      	subs	r0, r0, r3
    a428:	4152      	adcs	r2, r2
    a42a:	0b83      	lsrs	r3, r0, #14
    a42c:	428b      	cmp	r3, r1
    a42e:	d301      	bcc.n	a434 <__divsi3+0x58>
    a430:	038b      	lsls	r3, r1, #14
    a432:	1ac0      	subs	r0, r0, r3
    a434:	4152      	adcs	r2, r2
    a436:	0b43      	lsrs	r3, r0, #13
    a438:	428b      	cmp	r3, r1
    a43a:	d301      	bcc.n	a440 <__divsi3+0x64>
    a43c:	034b      	lsls	r3, r1, #13
    a43e:	1ac0      	subs	r0, r0, r3
    a440:	4152      	adcs	r2, r2
    a442:	0b03      	lsrs	r3, r0, #12
    a444:	428b      	cmp	r3, r1
    a446:	d301      	bcc.n	a44c <__divsi3+0x70>
    a448:	030b      	lsls	r3, r1, #12
    a44a:	1ac0      	subs	r0, r0, r3
    a44c:	4152      	adcs	r2, r2
    a44e:	0ac3      	lsrs	r3, r0, #11
    a450:	428b      	cmp	r3, r1
    a452:	d301      	bcc.n	a458 <__divsi3+0x7c>
    a454:	02cb      	lsls	r3, r1, #11
    a456:	1ac0      	subs	r0, r0, r3
    a458:	4152      	adcs	r2, r2
    a45a:	0a83      	lsrs	r3, r0, #10
    a45c:	428b      	cmp	r3, r1
    a45e:	d301      	bcc.n	a464 <__divsi3+0x88>
    a460:	028b      	lsls	r3, r1, #10
    a462:	1ac0      	subs	r0, r0, r3
    a464:	4152      	adcs	r2, r2
    a466:	0a43      	lsrs	r3, r0, #9
    a468:	428b      	cmp	r3, r1
    a46a:	d301      	bcc.n	a470 <__divsi3+0x94>
    a46c:	024b      	lsls	r3, r1, #9
    a46e:	1ac0      	subs	r0, r0, r3
    a470:	4152      	adcs	r2, r2
    a472:	0a03      	lsrs	r3, r0, #8
    a474:	428b      	cmp	r3, r1
    a476:	d301      	bcc.n	a47c <__divsi3+0xa0>
    a478:	020b      	lsls	r3, r1, #8
    a47a:	1ac0      	subs	r0, r0, r3
    a47c:	4152      	adcs	r2, r2
    a47e:	d2cd      	bcs.n	a41c <__divsi3+0x40>
    a480:	09c3      	lsrs	r3, r0, #7
    a482:	428b      	cmp	r3, r1
    a484:	d301      	bcc.n	a48a <__divsi3+0xae>
    a486:	01cb      	lsls	r3, r1, #7
    a488:	1ac0      	subs	r0, r0, r3
    a48a:	4152      	adcs	r2, r2
    a48c:	0983      	lsrs	r3, r0, #6
    a48e:	428b      	cmp	r3, r1
    a490:	d301      	bcc.n	a496 <__divsi3+0xba>
    a492:	018b      	lsls	r3, r1, #6
    a494:	1ac0      	subs	r0, r0, r3
    a496:	4152      	adcs	r2, r2
    a498:	0943      	lsrs	r3, r0, #5
    a49a:	428b      	cmp	r3, r1
    a49c:	d301      	bcc.n	a4a2 <__divsi3+0xc6>
    a49e:	014b      	lsls	r3, r1, #5
    a4a0:	1ac0      	subs	r0, r0, r3
    a4a2:	4152      	adcs	r2, r2
    a4a4:	0903      	lsrs	r3, r0, #4
    a4a6:	428b      	cmp	r3, r1
    a4a8:	d301      	bcc.n	a4ae <__divsi3+0xd2>
    a4aa:	010b      	lsls	r3, r1, #4
    a4ac:	1ac0      	subs	r0, r0, r3
    a4ae:	4152      	adcs	r2, r2
    a4b0:	08c3      	lsrs	r3, r0, #3
    a4b2:	428b      	cmp	r3, r1
    a4b4:	d301      	bcc.n	a4ba <__divsi3+0xde>
    a4b6:	00cb      	lsls	r3, r1, #3
    a4b8:	1ac0      	subs	r0, r0, r3
    a4ba:	4152      	adcs	r2, r2
    a4bc:	0883      	lsrs	r3, r0, #2
    a4be:	428b      	cmp	r3, r1
    a4c0:	d301      	bcc.n	a4c6 <__divsi3+0xea>
    a4c2:	008b      	lsls	r3, r1, #2
    a4c4:	1ac0      	subs	r0, r0, r3
    a4c6:	4152      	adcs	r2, r2
    a4c8:	0843      	lsrs	r3, r0, #1
    a4ca:	428b      	cmp	r3, r1
    a4cc:	d301      	bcc.n	a4d2 <__divsi3+0xf6>
    a4ce:	004b      	lsls	r3, r1, #1
    a4d0:	1ac0      	subs	r0, r0, r3
    a4d2:	4152      	adcs	r2, r2
    a4d4:	1a41      	subs	r1, r0, r1
    a4d6:	d200      	bcs.n	a4da <__divsi3+0xfe>
    a4d8:	4601      	mov	r1, r0
    a4da:	4152      	adcs	r2, r2
    a4dc:	4610      	mov	r0, r2
    a4de:	4770      	bx	lr
    a4e0:	e05d      	b.n	a59e <__divsi3+0x1c2>
    a4e2:	0fca      	lsrs	r2, r1, #31
    a4e4:	d000      	beq.n	a4e8 <__divsi3+0x10c>
    a4e6:	4249      	negs	r1, r1
    a4e8:	1003      	asrs	r3, r0, #32
    a4ea:	d300      	bcc.n	a4ee <__divsi3+0x112>
    a4ec:	4240      	negs	r0, r0
    a4ee:	4053      	eors	r3, r2
    a4f0:	2200      	movs	r2, #0
    a4f2:	469c      	mov	ip, r3
    a4f4:	0903      	lsrs	r3, r0, #4
    a4f6:	428b      	cmp	r3, r1
    a4f8:	d32d      	bcc.n	a556 <__divsi3+0x17a>
    a4fa:	0a03      	lsrs	r3, r0, #8
    a4fc:	428b      	cmp	r3, r1
    a4fe:	d312      	bcc.n	a526 <__divsi3+0x14a>
    a500:	22fc      	movs	r2, #252	; 0xfc
    a502:	0189      	lsls	r1, r1, #6
    a504:	ba12      	rev	r2, r2
    a506:	0a03      	lsrs	r3, r0, #8
    a508:	428b      	cmp	r3, r1
    a50a:	d30c      	bcc.n	a526 <__divsi3+0x14a>
    a50c:	0189      	lsls	r1, r1, #6
    a50e:	1192      	asrs	r2, r2, #6
    a510:	428b      	cmp	r3, r1
    a512:	d308      	bcc.n	a526 <__divsi3+0x14a>
    a514:	0189      	lsls	r1, r1, #6
    a516:	1192      	asrs	r2, r2, #6
    a518:	428b      	cmp	r3, r1
    a51a:	d304      	bcc.n	a526 <__divsi3+0x14a>
    a51c:	0189      	lsls	r1, r1, #6
    a51e:	d03a      	beq.n	a596 <__divsi3+0x1ba>
    a520:	1192      	asrs	r2, r2, #6
    a522:	e000      	b.n	a526 <__divsi3+0x14a>
    a524:	0989      	lsrs	r1, r1, #6
    a526:	09c3      	lsrs	r3, r0, #7
    a528:	428b      	cmp	r3, r1
    a52a:	d301      	bcc.n	a530 <__divsi3+0x154>
    a52c:	01cb      	lsls	r3, r1, #7
    a52e:	1ac0      	subs	r0, r0, r3
    a530:	4152      	adcs	r2, r2
    a532:	0983      	lsrs	r3, r0, #6
    a534:	428b      	cmp	r3, r1
    a536:	d301      	bcc.n	a53c <__divsi3+0x160>
    a538:	018b      	lsls	r3, r1, #6
    a53a:	1ac0      	subs	r0, r0, r3
    a53c:	4152      	adcs	r2, r2
    a53e:	0943      	lsrs	r3, r0, #5
    a540:	428b      	cmp	r3, r1
    a542:	d301      	bcc.n	a548 <__divsi3+0x16c>
    a544:	014b      	lsls	r3, r1, #5
    a546:	1ac0      	subs	r0, r0, r3
    a548:	4152      	adcs	r2, r2
    a54a:	0903      	lsrs	r3, r0, #4
    a54c:	428b      	cmp	r3, r1
    a54e:	d301      	bcc.n	a554 <__divsi3+0x178>
    a550:	010b      	lsls	r3, r1, #4
    a552:	1ac0      	subs	r0, r0, r3
    a554:	4152      	adcs	r2, r2
    a556:	08c3      	lsrs	r3, r0, #3
    a558:	428b      	cmp	r3, r1
    a55a:	d301      	bcc.n	a560 <__divsi3+0x184>
    a55c:	00cb      	lsls	r3, r1, #3
    a55e:	1ac0      	subs	r0, r0, r3
    a560:	4152      	adcs	r2, r2
    a562:	0883      	lsrs	r3, r0, #2
    a564:	428b      	cmp	r3, r1
    a566:	d301      	bcc.n	a56c <__divsi3+0x190>
    a568:	008b      	lsls	r3, r1, #2
    a56a:	1ac0      	subs	r0, r0, r3
    a56c:	4152      	adcs	r2, r2
    a56e:	d2d9      	bcs.n	a524 <__divsi3+0x148>
    a570:	0843      	lsrs	r3, r0, #1
    a572:	428b      	cmp	r3, r1
    a574:	d301      	bcc.n	a57a <__divsi3+0x19e>
    a576:	004b      	lsls	r3, r1, #1
    a578:	1ac0      	subs	r0, r0, r3
    a57a:	4152      	adcs	r2, r2
    a57c:	1a41      	subs	r1, r0, r1
    a57e:	d200      	bcs.n	a582 <__divsi3+0x1a6>
    a580:	4601      	mov	r1, r0
    a582:	4663      	mov	r3, ip
    a584:	4152      	adcs	r2, r2
    a586:	105b      	asrs	r3, r3, #1
    a588:	4610      	mov	r0, r2
    a58a:	d301      	bcc.n	a590 <__divsi3+0x1b4>
    a58c:	4240      	negs	r0, r0
    a58e:	2b00      	cmp	r3, #0
    a590:	d500      	bpl.n	a594 <__divsi3+0x1b8>
    a592:	4249      	negs	r1, r1
    a594:	4770      	bx	lr
    a596:	4663      	mov	r3, ip
    a598:	105b      	asrs	r3, r3, #1
    a59a:	d300      	bcc.n	a59e <__divsi3+0x1c2>
    a59c:	4240      	negs	r0, r0
    a59e:	b501      	push	{r0, lr}
    a5a0:	2000      	movs	r0, #0
    a5a2:	f000 f805 	bl	a5b0 <__aeabi_idiv0>
    a5a6:	bd02      	pop	{r1, pc}

0000a5a8 <__aeabi_idivmod>:
    a5a8:	2900      	cmp	r1, #0
    a5aa:	d0f8      	beq.n	a59e <__divsi3+0x1c2>
    a5ac:	e716      	b.n	a3dc <__divsi3>
    a5ae:	4770      	bx	lr

0000a5b0 <__aeabi_idiv0>:
    a5b0:	4770      	bx	lr
    a5b2:	46c0      	nop			; (mov r8, r8)

0000a5b4 <__aeabi_llsl>:
    a5b4:	4091      	lsls	r1, r2
    a5b6:	1c03      	adds	r3, r0, #0
    a5b8:	4090      	lsls	r0, r2
    a5ba:	469c      	mov	ip, r3
    a5bc:	3a20      	subs	r2, #32
    a5be:	4093      	lsls	r3, r2
    a5c0:	4319      	orrs	r1, r3
    a5c2:	4252      	negs	r2, r2
    a5c4:	4663      	mov	r3, ip
    a5c6:	40d3      	lsrs	r3, r2
    a5c8:	4319      	orrs	r1, r3
    a5ca:	4770      	bx	lr

0000a5cc <__aeabi_cdrcmple>:
    a5cc:	4684      	mov	ip, r0
    a5ce:	1c10      	adds	r0, r2, #0
    a5d0:	4662      	mov	r2, ip
    a5d2:	468c      	mov	ip, r1
    a5d4:	1c19      	adds	r1, r3, #0
    a5d6:	4663      	mov	r3, ip
    a5d8:	e000      	b.n	a5dc <__aeabi_cdcmpeq>
    a5da:	46c0      	nop			; (mov r8, r8)

0000a5dc <__aeabi_cdcmpeq>:
    a5dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    a5de:	f000 ffdb 	bl	b598 <__ledf2>
    a5e2:	2800      	cmp	r0, #0
    a5e4:	d401      	bmi.n	a5ea <__aeabi_cdcmpeq+0xe>
    a5e6:	2100      	movs	r1, #0
    a5e8:	42c8      	cmn	r0, r1
    a5ea:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000a5ec <__aeabi_dcmpeq>:
    a5ec:	b510      	push	{r4, lr}
    a5ee:	f000 ff35 	bl	b45c <__eqdf2>
    a5f2:	4240      	negs	r0, r0
    a5f4:	3001      	adds	r0, #1
    a5f6:	bd10      	pop	{r4, pc}

0000a5f8 <__aeabi_dcmplt>:
    a5f8:	b510      	push	{r4, lr}
    a5fa:	f000 ffcd 	bl	b598 <__ledf2>
    a5fe:	2800      	cmp	r0, #0
    a600:	db01      	blt.n	a606 <__aeabi_dcmplt+0xe>
    a602:	2000      	movs	r0, #0
    a604:	bd10      	pop	{r4, pc}
    a606:	2001      	movs	r0, #1
    a608:	bd10      	pop	{r4, pc}
    a60a:	46c0      	nop			; (mov r8, r8)

0000a60c <__aeabi_dcmple>:
    a60c:	b510      	push	{r4, lr}
    a60e:	f000 ffc3 	bl	b598 <__ledf2>
    a612:	2800      	cmp	r0, #0
    a614:	dd01      	ble.n	a61a <__aeabi_dcmple+0xe>
    a616:	2000      	movs	r0, #0
    a618:	bd10      	pop	{r4, pc}
    a61a:	2001      	movs	r0, #1
    a61c:	bd10      	pop	{r4, pc}
    a61e:	46c0      	nop			; (mov r8, r8)

0000a620 <__aeabi_dcmpgt>:
    a620:	b510      	push	{r4, lr}
    a622:	f000 ff55 	bl	b4d0 <__gedf2>
    a626:	2800      	cmp	r0, #0
    a628:	dc01      	bgt.n	a62e <__aeabi_dcmpgt+0xe>
    a62a:	2000      	movs	r0, #0
    a62c:	bd10      	pop	{r4, pc}
    a62e:	2001      	movs	r0, #1
    a630:	bd10      	pop	{r4, pc}
    a632:	46c0      	nop			; (mov r8, r8)

0000a634 <__aeabi_dcmpge>:
    a634:	b510      	push	{r4, lr}
    a636:	f000 ff4b 	bl	b4d0 <__gedf2>
    a63a:	2800      	cmp	r0, #0
    a63c:	da01      	bge.n	a642 <__aeabi_dcmpge+0xe>
    a63e:	2000      	movs	r0, #0
    a640:	bd10      	pop	{r4, pc}
    a642:	2001      	movs	r0, #1
    a644:	bd10      	pop	{r4, pc}
    a646:	46c0      	nop			; (mov r8, r8)

0000a648 <__aeabi_uldivmod>:
    a648:	2b00      	cmp	r3, #0
    a64a:	d111      	bne.n	a670 <__aeabi_uldivmod+0x28>
    a64c:	2a00      	cmp	r2, #0
    a64e:	d10f      	bne.n	a670 <__aeabi_uldivmod+0x28>
    a650:	2900      	cmp	r1, #0
    a652:	d100      	bne.n	a656 <__aeabi_uldivmod+0xe>
    a654:	2800      	cmp	r0, #0
    a656:	d002      	beq.n	a65e <__aeabi_uldivmod+0x16>
    a658:	2100      	movs	r1, #0
    a65a:	43c9      	mvns	r1, r1
    a65c:	1c08      	adds	r0, r1, #0
    a65e:	b407      	push	{r0, r1, r2}
    a660:	4802      	ldr	r0, [pc, #8]	; (a66c <__aeabi_uldivmod+0x24>)
    a662:	a102      	add	r1, pc, #8	; (adr r1, a66c <__aeabi_uldivmod+0x24>)
    a664:	1840      	adds	r0, r0, r1
    a666:	9002      	str	r0, [sp, #8]
    a668:	bd03      	pop	{r0, r1, pc}
    a66a:	46c0      	nop			; (mov r8, r8)
    a66c:	ffffff45 	.word	0xffffff45
    a670:	b403      	push	{r0, r1}
    a672:	4668      	mov	r0, sp
    a674:	b501      	push	{r0, lr}
    a676:	9802      	ldr	r0, [sp, #8]
    a678:	f000 f84e 	bl	a718 <__udivmoddi4>
    a67c:	9b01      	ldr	r3, [sp, #4]
    a67e:	469e      	mov	lr, r3
    a680:	b002      	add	sp, #8
    a682:	bc0c      	pop	{r2, r3}
    a684:	4770      	bx	lr
    a686:	46c0      	nop			; (mov r8, r8)

0000a688 <__aeabi_lmul>:
    a688:	b5f0      	push	{r4, r5, r6, r7, lr}
    a68a:	46ce      	mov	lr, r9
    a68c:	4647      	mov	r7, r8
    a68e:	0415      	lsls	r5, r2, #16
    a690:	0c2d      	lsrs	r5, r5, #16
    a692:	002e      	movs	r6, r5
    a694:	b580      	push	{r7, lr}
    a696:	0407      	lsls	r7, r0, #16
    a698:	0c14      	lsrs	r4, r2, #16
    a69a:	0c3f      	lsrs	r7, r7, #16
    a69c:	4699      	mov	r9, r3
    a69e:	0c03      	lsrs	r3, r0, #16
    a6a0:	437e      	muls	r6, r7
    a6a2:	435d      	muls	r5, r3
    a6a4:	4367      	muls	r7, r4
    a6a6:	4363      	muls	r3, r4
    a6a8:	197f      	adds	r7, r7, r5
    a6aa:	0c34      	lsrs	r4, r6, #16
    a6ac:	19e4      	adds	r4, r4, r7
    a6ae:	469c      	mov	ip, r3
    a6b0:	42a5      	cmp	r5, r4
    a6b2:	d903      	bls.n	a6bc <__aeabi_lmul+0x34>
    a6b4:	2380      	movs	r3, #128	; 0x80
    a6b6:	025b      	lsls	r3, r3, #9
    a6b8:	4698      	mov	r8, r3
    a6ba:	44c4      	add	ip, r8
    a6bc:	464b      	mov	r3, r9
    a6be:	4351      	muls	r1, r2
    a6c0:	4343      	muls	r3, r0
    a6c2:	0436      	lsls	r6, r6, #16
    a6c4:	0c36      	lsrs	r6, r6, #16
    a6c6:	0c25      	lsrs	r5, r4, #16
    a6c8:	0424      	lsls	r4, r4, #16
    a6ca:	4465      	add	r5, ip
    a6cc:	19a4      	adds	r4, r4, r6
    a6ce:	1859      	adds	r1, r3, r1
    a6d0:	1949      	adds	r1, r1, r5
    a6d2:	0020      	movs	r0, r4
    a6d4:	bc0c      	pop	{r2, r3}
    a6d6:	4690      	mov	r8, r2
    a6d8:	4699      	mov	r9, r3
    a6da:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a6dc <__aeabi_d2uiz>:
    a6dc:	b570      	push	{r4, r5, r6, lr}
    a6de:	2200      	movs	r2, #0
    a6e0:	4b0c      	ldr	r3, [pc, #48]	; (a714 <__aeabi_d2uiz+0x38>)
    a6e2:	0004      	movs	r4, r0
    a6e4:	000d      	movs	r5, r1
    a6e6:	f7ff ffa5 	bl	a634 <__aeabi_dcmpge>
    a6ea:	2800      	cmp	r0, #0
    a6ec:	d104      	bne.n	a6f8 <__aeabi_d2uiz+0x1c>
    a6ee:	0020      	movs	r0, r4
    a6f0:	0029      	movs	r1, r5
    a6f2:	f001 fd49 	bl	c188 <__aeabi_d2iz>
    a6f6:	bd70      	pop	{r4, r5, r6, pc}
    a6f8:	4b06      	ldr	r3, [pc, #24]	; (a714 <__aeabi_d2uiz+0x38>)
    a6fa:	2200      	movs	r2, #0
    a6fc:	0020      	movs	r0, r4
    a6fe:	0029      	movs	r1, r5
    a700:	f001 fa2c 	bl	bb5c <__aeabi_dsub>
    a704:	f001 fd40 	bl	c188 <__aeabi_d2iz>
    a708:	2380      	movs	r3, #128	; 0x80
    a70a:	061b      	lsls	r3, r3, #24
    a70c:	469c      	mov	ip, r3
    a70e:	4460      	add	r0, ip
    a710:	e7f1      	b.n	a6f6 <__aeabi_d2uiz+0x1a>
    a712:	46c0      	nop			; (mov r8, r8)
    a714:	41e00000 	.word	0x41e00000

0000a718 <__udivmoddi4>:
    a718:	b5f0      	push	{r4, r5, r6, r7, lr}
    a71a:	4657      	mov	r7, sl
    a71c:	464e      	mov	r6, r9
    a71e:	4645      	mov	r5, r8
    a720:	46de      	mov	lr, fp
    a722:	b5e0      	push	{r5, r6, r7, lr}
    a724:	0004      	movs	r4, r0
    a726:	b083      	sub	sp, #12
    a728:	000d      	movs	r5, r1
    a72a:	4692      	mov	sl, r2
    a72c:	4699      	mov	r9, r3
    a72e:	428b      	cmp	r3, r1
    a730:	d82f      	bhi.n	a792 <__udivmoddi4+0x7a>
    a732:	d02c      	beq.n	a78e <__udivmoddi4+0x76>
    a734:	4649      	mov	r1, r9
    a736:	4650      	mov	r0, sl
    a738:	f001 fdca 	bl	c2d0 <__clzdi2>
    a73c:	0029      	movs	r1, r5
    a73e:	0006      	movs	r6, r0
    a740:	0020      	movs	r0, r4
    a742:	f001 fdc5 	bl	c2d0 <__clzdi2>
    a746:	1a33      	subs	r3, r6, r0
    a748:	4698      	mov	r8, r3
    a74a:	3b20      	subs	r3, #32
    a74c:	469b      	mov	fp, r3
    a74e:	d500      	bpl.n	a752 <__udivmoddi4+0x3a>
    a750:	e074      	b.n	a83c <__udivmoddi4+0x124>
    a752:	4653      	mov	r3, sl
    a754:	465a      	mov	r2, fp
    a756:	4093      	lsls	r3, r2
    a758:	001f      	movs	r7, r3
    a75a:	4653      	mov	r3, sl
    a75c:	4642      	mov	r2, r8
    a75e:	4093      	lsls	r3, r2
    a760:	001e      	movs	r6, r3
    a762:	42af      	cmp	r7, r5
    a764:	d829      	bhi.n	a7ba <__udivmoddi4+0xa2>
    a766:	d026      	beq.n	a7b6 <__udivmoddi4+0x9e>
    a768:	465b      	mov	r3, fp
    a76a:	1ba4      	subs	r4, r4, r6
    a76c:	41bd      	sbcs	r5, r7
    a76e:	2b00      	cmp	r3, #0
    a770:	da00      	bge.n	a774 <__udivmoddi4+0x5c>
    a772:	e079      	b.n	a868 <__udivmoddi4+0x150>
    a774:	2200      	movs	r2, #0
    a776:	2300      	movs	r3, #0
    a778:	9200      	str	r2, [sp, #0]
    a77a:	9301      	str	r3, [sp, #4]
    a77c:	2301      	movs	r3, #1
    a77e:	465a      	mov	r2, fp
    a780:	4093      	lsls	r3, r2
    a782:	9301      	str	r3, [sp, #4]
    a784:	2301      	movs	r3, #1
    a786:	4642      	mov	r2, r8
    a788:	4093      	lsls	r3, r2
    a78a:	9300      	str	r3, [sp, #0]
    a78c:	e019      	b.n	a7c2 <__udivmoddi4+0xaa>
    a78e:	4282      	cmp	r2, r0
    a790:	d9d0      	bls.n	a734 <__udivmoddi4+0x1c>
    a792:	2200      	movs	r2, #0
    a794:	2300      	movs	r3, #0
    a796:	9200      	str	r2, [sp, #0]
    a798:	9301      	str	r3, [sp, #4]
    a79a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a79c:	2b00      	cmp	r3, #0
    a79e:	d001      	beq.n	a7a4 <__udivmoddi4+0x8c>
    a7a0:	601c      	str	r4, [r3, #0]
    a7a2:	605d      	str	r5, [r3, #4]
    a7a4:	9800      	ldr	r0, [sp, #0]
    a7a6:	9901      	ldr	r1, [sp, #4]
    a7a8:	b003      	add	sp, #12
    a7aa:	bc3c      	pop	{r2, r3, r4, r5}
    a7ac:	4690      	mov	r8, r2
    a7ae:	4699      	mov	r9, r3
    a7b0:	46a2      	mov	sl, r4
    a7b2:	46ab      	mov	fp, r5
    a7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a7b6:	42a3      	cmp	r3, r4
    a7b8:	d9d6      	bls.n	a768 <__udivmoddi4+0x50>
    a7ba:	2200      	movs	r2, #0
    a7bc:	2300      	movs	r3, #0
    a7be:	9200      	str	r2, [sp, #0]
    a7c0:	9301      	str	r3, [sp, #4]
    a7c2:	4643      	mov	r3, r8
    a7c4:	2b00      	cmp	r3, #0
    a7c6:	d0e8      	beq.n	a79a <__udivmoddi4+0x82>
    a7c8:	07fb      	lsls	r3, r7, #31
    a7ca:	0872      	lsrs	r2, r6, #1
    a7cc:	431a      	orrs	r2, r3
    a7ce:	4646      	mov	r6, r8
    a7d0:	087b      	lsrs	r3, r7, #1
    a7d2:	e00e      	b.n	a7f2 <__udivmoddi4+0xda>
    a7d4:	42ab      	cmp	r3, r5
    a7d6:	d101      	bne.n	a7dc <__udivmoddi4+0xc4>
    a7d8:	42a2      	cmp	r2, r4
    a7da:	d80c      	bhi.n	a7f6 <__udivmoddi4+0xde>
    a7dc:	1aa4      	subs	r4, r4, r2
    a7de:	419d      	sbcs	r5, r3
    a7e0:	2001      	movs	r0, #1
    a7e2:	1924      	adds	r4, r4, r4
    a7e4:	416d      	adcs	r5, r5
    a7e6:	2100      	movs	r1, #0
    a7e8:	3e01      	subs	r6, #1
    a7ea:	1824      	adds	r4, r4, r0
    a7ec:	414d      	adcs	r5, r1
    a7ee:	2e00      	cmp	r6, #0
    a7f0:	d006      	beq.n	a800 <__udivmoddi4+0xe8>
    a7f2:	42ab      	cmp	r3, r5
    a7f4:	d9ee      	bls.n	a7d4 <__udivmoddi4+0xbc>
    a7f6:	3e01      	subs	r6, #1
    a7f8:	1924      	adds	r4, r4, r4
    a7fa:	416d      	adcs	r5, r5
    a7fc:	2e00      	cmp	r6, #0
    a7fe:	d1f8      	bne.n	a7f2 <__udivmoddi4+0xda>
    a800:	465b      	mov	r3, fp
    a802:	9800      	ldr	r0, [sp, #0]
    a804:	9901      	ldr	r1, [sp, #4]
    a806:	1900      	adds	r0, r0, r4
    a808:	4169      	adcs	r1, r5
    a80a:	2b00      	cmp	r3, #0
    a80c:	db22      	blt.n	a854 <__udivmoddi4+0x13c>
    a80e:	002b      	movs	r3, r5
    a810:	465a      	mov	r2, fp
    a812:	40d3      	lsrs	r3, r2
    a814:	002a      	movs	r2, r5
    a816:	4644      	mov	r4, r8
    a818:	40e2      	lsrs	r2, r4
    a81a:	001c      	movs	r4, r3
    a81c:	465b      	mov	r3, fp
    a81e:	0015      	movs	r5, r2
    a820:	2b00      	cmp	r3, #0
    a822:	db2c      	blt.n	a87e <__udivmoddi4+0x166>
    a824:	0026      	movs	r6, r4
    a826:	409e      	lsls	r6, r3
    a828:	0033      	movs	r3, r6
    a82a:	0026      	movs	r6, r4
    a82c:	4647      	mov	r7, r8
    a82e:	40be      	lsls	r6, r7
    a830:	0032      	movs	r2, r6
    a832:	1a80      	subs	r0, r0, r2
    a834:	4199      	sbcs	r1, r3
    a836:	9000      	str	r0, [sp, #0]
    a838:	9101      	str	r1, [sp, #4]
    a83a:	e7ae      	b.n	a79a <__udivmoddi4+0x82>
    a83c:	4642      	mov	r2, r8
    a83e:	2320      	movs	r3, #32
    a840:	1a9b      	subs	r3, r3, r2
    a842:	4652      	mov	r2, sl
    a844:	40da      	lsrs	r2, r3
    a846:	4641      	mov	r1, r8
    a848:	0013      	movs	r3, r2
    a84a:	464a      	mov	r2, r9
    a84c:	408a      	lsls	r2, r1
    a84e:	0017      	movs	r7, r2
    a850:	431f      	orrs	r7, r3
    a852:	e782      	b.n	a75a <__udivmoddi4+0x42>
    a854:	4642      	mov	r2, r8
    a856:	2320      	movs	r3, #32
    a858:	1a9b      	subs	r3, r3, r2
    a85a:	002a      	movs	r2, r5
    a85c:	4646      	mov	r6, r8
    a85e:	409a      	lsls	r2, r3
    a860:	0023      	movs	r3, r4
    a862:	40f3      	lsrs	r3, r6
    a864:	4313      	orrs	r3, r2
    a866:	e7d5      	b.n	a814 <__udivmoddi4+0xfc>
    a868:	4642      	mov	r2, r8
    a86a:	2320      	movs	r3, #32
    a86c:	2100      	movs	r1, #0
    a86e:	1a9b      	subs	r3, r3, r2
    a870:	2200      	movs	r2, #0
    a872:	9100      	str	r1, [sp, #0]
    a874:	9201      	str	r2, [sp, #4]
    a876:	2201      	movs	r2, #1
    a878:	40da      	lsrs	r2, r3
    a87a:	9201      	str	r2, [sp, #4]
    a87c:	e782      	b.n	a784 <__udivmoddi4+0x6c>
    a87e:	4642      	mov	r2, r8
    a880:	2320      	movs	r3, #32
    a882:	0026      	movs	r6, r4
    a884:	1a9b      	subs	r3, r3, r2
    a886:	40de      	lsrs	r6, r3
    a888:	002f      	movs	r7, r5
    a88a:	46b4      	mov	ip, r6
    a88c:	4097      	lsls	r7, r2
    a88e:	4666      	mov	r6, ip
    a890:	003b      	movs	r3, r7
    a892:	4333      	orrs	r3, r6
    a894:	e7c9      	b.n	a82a <__udivmoddi4+0x112>
    a896:	46c0      	nop			; (mov r8, r8)

0000a898 <__aeabi_fdiv>:
    a898:	b5f0      	push	{r4, r5, r6, r7, lr}
    a89a:	4657      	mov	r7, sl
    a89c:	464e      	mov	r6, r9
    a89e:	46de      	mov	lr, fp
    a8a0:	4645      	mov	r5, r8
    a8a2:	b5e0      	push	{r5, r6, r7, lr}
    a8a4:	0244      	lsls	r4, r0, #9
    a8a6:	0043      	lsls	r3, r0, #1
    a8a8:	0fc6      	lsrs	r6, r0, #31
    a8aa:	b083      	sub	sp, #12
    a8ac:	1c0f      	adds	r7, r1, #0
    a8ae:	0a64      	lsrs	r4, r4, #9
    a8b0:	0e1b      	lsrs	r3, r3, #24
    a8b2:	46b2      	mov	sl, r6
    a8b4:	d053      	beq.n	a95e <__aeabi_fdiv+0xc6>
    a8b6:	2bff      	cmp	r3, #255	; 0xff
    a8b8:	d027      	beq.n	a90a <__aeabi_fdiv+0x72>
    a8ba:	2280      	movs	r2, #128	; 0x80
    a8bc:	00e4      	lsls	r4, r4, #3
    a8be:	04d2      	lsls	r2, r2, #19
    a8c0:	4314      	orrs	r4, r2
    a8c2:	227f      	movs	r2, #127	; 0x7f
    a8c4:	4252      	negs	r2, r2
    a8c6:	4690      	mov	r8, r2
    a8c8:	4498      	add	r8, r3
    a8ca:	2300      	movs	r3, #0
    a8cc:	4699      	mov	r9, r3
    a8ce:	469b      	mov	fp, r3
    a8d0:	027d      	lsls	r5, r7, #9
    a8d2:	0078      	lsls	r0, r7, #1
    a8d4:	0ffb      	lsrs	r3, r7, #31
    a8d6:	0a6d      	lsrs	r5, r5, #9
    a8d8:	0e00      	lsrs	r0, r0, #24
    a8da:	9300      	str	r3, [sp, #0]
    a8dc:	d024      	beq.n	a928 <__aeabi_fdiv+0x90>
    a8de:	28ff      	cmp	r0, #255	; 0xff
    a8e0:	d046      	beq.n	a970 <__aeabi_fdiv+0xd8>
    a8e2:	2380      	movs	r3, #128	; 0x80
    a8e4:	2100      	movs	r1, #0
    a8e6:	00ed      	lsls	r5, r5, #3
    a8e8:	04db      	lsls	r3, r3, #19
    a8ea:	431d      	orrs	r5, r3
    a8ec:	387f      	subs	r0, #127	; 0x7f
    a8ee:	4647      	mov	r7, r8
    a8f0:	1a38      	subs	r0, r7, r0
    a8f2:	464f      	mov	r7, r9
    a8f4:	430f      	orrs	r7, r1
    a8f6:	00bf      	lsls	r7, r7, #2
    a8f8:	46b9      	mov	r9, r7
    a8fa:	0033      	movs	r3, r6
    a8fc:	9a00      	ldr	r2, [sp, #0]
    a8fe:	4f87      	ldr	r7, [pc, #540]	; (ab1c <__aeabi_fdiv+0x284>)
    a900:	4053      	eors	r3, r2
    a902:	464a      	mov	r2, r9
    a904:	58ba      	ldr	r2, [r7, r2]
    a906:	9301      	str	r3, [sp, #4]
    a908:	4697      	mov	pc, r2
    a90a:	2c00      	cmp	r4, #0
    a90c:	d14e      	bne.n	a9ac <__aeabi_fdiv+0x114>
    a90e:	2308      	movs	r3, #8
    a910:	4699      	mov	r9, r3
    a912:	33f7      	adds	r3, #247	; 0xf7
    a914:	4698      	mov	r8, r3
    a916:	3bfd      	subs	r3, #253	; 0xfd
    a918:	469b      	mov	fp, r3
    a91a:	027d      	lsls	r5, r7, #9
    a91c:	0078      	lsls	r0, r7, #1
    a91e:	0ffb      	lsrs	r3, r7, #31
    a920:	0a6d      	lsrs	r5, r5, #9
    a922:	0e00      	lsrs	r0, r0, #24
    a924:	9300      	str	r3, [sp, #0]
    a926:	d1da      	bne.n	a8de <__aeabi_fdiv+0x46>
    a928:	2d00      	cmp	r5, #0
    a92a:	d126      	bne.n	a97a <__aeabi_fdiv+0xe2>
    a92c:	2000      	movs	r0, #0
    a92e:	2101      	movs	r1, #1
    a930:	0033      	movs	r3, r6
    a932:	9a00      	ldr	r2, [sp, #0]
    a934:	4f7a      	ldr	r7, [pc, #488]	; (ab20 <__aeabi_fdiv+0x288>)
    a936:	4053      	eors	r3, r2
    a938:	4642      	mov	r2, r8
    a93a:	1a10      	subs	r0, r2, r0
    a93c:	464a      	mov	r2, r9
    a93e:	430a      	orrs	r2, r1
    a940:	0092      	lsls	r2, r2, #2
    a942:	58ba      	ldr	r2, [r7, r2]
    a944:	001d      	movs	r5, r3
    a946:	4697      	mov	pc, r2
    a948:	9b00      	ldr	r3, [sp, #0]
    a94a:	002c      	movs	r4, r5
    a94c:	469a      	mov	sl, r3
    a94e:	468b      	mov	fp, r1
    a950:	465b      	mov	r3, fp
    a952:	2b02      	cmp	r3, #2
    a954:	d131      	bne.n	a9ba <__aeabi_fdiv+0x122>
    a956:	4653      	mov	r3, sl
    a958:	21ff      	movs	r1, #255	; 0xff
    a95a:	2400      	movs	r4, #0
    a95c:	e038      	b.n	a9d0 <__aeabi_fdiv+0x138>
    a95e:	2c00      	cmp	r4, #0
    a960:	d117      	bne.n	a992 <__aeabi_fdiv+0xfa>
    a962:	2304      	movs	r3, #4
    a964:	4699      	mov	r9, r3
    a966:	2300      	movs	r3, #0
    a968:	4698      	mov	r8, r3
    a96a:	3301      	adds	r3, #1
    a96c:	469b      	mov	fp, r3
    a96e:	e7af      	b.n	a8d0 <__aeabi_fdiv+0x38>
    a970:	20ff      	movs	r0, #255	; 0xff
    a972:	2d00      	cmp	r5, #0
    a974:	d10b      	bne.n	a98e <__aeabi_fdiv+0xf6>
    a976:	2102      	movs	r1, #2
    a978:	e7da      	b.n	a930 <__aeabi_fdiv+0x98>
    a97a:	0028      	movs	r0, r5
    a97c:	f001 fc8a 	bl	c294 <__clzsi2>
    a980:	1f43      	subs	r3, r0, #5
    a982:	409d      	lsls	r5, r3
    a984:	2376      	movs	r3, #118	; 0x76
    a986:	425b      	negs	r3, r3
    a988:	1a18      	subs	r0, r3, r0
    a98a:	2100      	movs	r1, #0
    a98c:	e7af      	b.n	a8ee <__aeabi_fdiv+0x56>
    a98e:	2103      	movs	r1, #3
    a990:	e7ad      	b.n	a8ee <__aeabi_fdiv+0x56>
    a992:	0020      	movs	r0, r4
    a994:	f001 fc7e 	bl	c294 <__clzsi2>
    a998:	1f43      	subs	r3, r0, #5
    a99a:	409c      	lsls	r4, r3
    a99c:	2376      	movs	r3, #118	; 0x76
    a99e:	425b      	negs	r3, r3
    a9a0:	1a1b      	subs	r3, r3, r0
    a9a2:	4698      	mov	r8, r3
    a9a4:	2300      	movs	r3, #0
    a9a6:	4699      	mov	r9, r3
    a9a8:	469b      	mov	fp, r3
    a9aa:	e791      	b.n	a8d0 <__aeabi_fdiv+0x38>
    a9ac:	230c      	movs	r3, #12
    a9ae:	4699      	mov	r9, r3
    a9b0:	33f3      	adds	r3, #243	; 0xf3
    a9b2:	4698      	mov	r8, r3
    a9b4:	3bfc      	subs	r3, #252	; 0xfc
    a9b6:	469b      	mov	fp, r3
    a9b8:	e78a      	b.n	a8d0 <__aeabi_fdiv+0x38>
    a9ba:	2b03      	cmp	r3, #3
    a9bc:	d100      	bne.n	a9c0 <__aeabi_fdiv+0x128>
    a9be:	e0a5      	b.n	ab0c <__aeabi_fdiv+0x274>
    a9c0:	4655      	mov	r5, sl
    a9c2:	2b01      	cmp	r3, #1
    a9c4:	d000      	beq.n	a9c8 <__aeabi_fdiv+0x130>
    a9c6:	e081      	b.n	aacc <__aeabi_fdiv+0x234>
    a9c8:	2301      	movs	r3, #1
    a9ca:	2100      	movs	r1, #0
    a9cc:	2400      	movs	r4, #0
    a9ce:	402b      	ands	r3, r5
    a9d0:	0264      	lsls	r4, r4, #9
    a9d2:	05c9      	lsls	r1, r1, #23
    a9d4:	0a60      	lsrs	r0, r4, #9
    a9d6:	07db      	lsls	r3, r3, #31
    a9d8:	4308      	orrs	r0, r1
    a9da:	4318      	orrs	r0, r3
    a9dc:	b003      	add	sp, #12
    a9de:	bc3c      	pop	{r2, r3, r4, r5}
    a9e0:	4690      	mov	r8, r2
    a9e2:	4699      	mov	r9, r3
    a9e4:	46a2      	mov	sl, r4
    a9e6:	46ab      	mov	fp, r5
    a9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a9ea:	2480      	movs	r4, #128	; 0x80
    a9ec:	2300      	movs	r3, #0
    a9ee:	03e4      	lsls	r4, r4, #15
    a9f0:	21ff      	movs	r1, #255	; 0xff
    a9f2:	e7ed      	b.n	a9d0 <__aeabi_fdiv+0x138>
    a9f4:	21ff      	movs	r1, #255	; 0xff
    a9f6:	2400      	movs	r4, #0
    a9f8:	e7ea      	b.n	a9d0 <__aeabi_fdiv+0x138>
    a9fa:	2301      	movs	r3, #1
    a9fc:	1a59      	subs	r1, r3, r1
    a9fe:	291b      	cmp	r1, #27
    aa00:	dd66      	ble.n	aad0 <__aeabi_fdiv+0x238>
    aa02:	9a01      	ldr	r2, [sp, #4]
    aa04:	4013      	ands	r3, r2
    aa06:	2100      	movs	r1, #0
    aa08:	2400      	movs	r4, #0
    aa0a:	e7e1      	b.n	a9d0 <__aeabi_fdiv+0x138>
    aa0c:	2380      	movs	r3, #128	; 0x80
    aa0e:	03db      	lsls	r3, r3, #15
    aa10:	421c      	tst	r4, r3
    aa12:	d038      	beq.n	aa86 <__aeabi_fdiv+0x1ee>
    aa14:	421d      	tst	r5, r3
    aa16:	d051      	beq.n	aabc <__aeabi_fdiv+0x224>
    aa18:	431c      	orrs	r4, r3
    aa1a:	0264      	lsls	r4, r4, #9
    aa1c:	0a64      	lsrs	r4, r4, #9
    aa1e:	0033      	movs	r3, r6
    aa20:	21ff      	movs	r1, #255	; 0xff
    aa22:	e7d5      	b.n	a9d0 <__aeabi_fdiv+0x138>
    aa24:	0163      	lsls	r3, r4, #5
    aa26:	016c      	lsls	r4, r5, #5
    aa28:	42a3      	cmp	r3, r4
    aa2a:	d23b      	bcs.n	aaa4 <__aeabi_fdiv+0x20c>
    aa2c:	261b      	movs	r6, #27
    aa2e:	2100      	movs	r1, #0
    aa30:	3801      	subs	r0, #1
    aa32:	2501      	movs	r5, #1
    aa34:	001f      	movs	r7, r3
    aa36:	0049      	lsls	r1, r1, #1
    aa38:	005b      	lsls	r3, r3, #1
    aa3a:	2f00      	cmp	r7, #0
    aa3c:	db01      	blt.n	aa42 <__aeabi_fdiv+0x1aa>
    aa3e:	429c      	cmp	r4, r3
    aa40:	d801      	bhi.n	aa46 <__aeabi_fdiv+0x1ae>
    aa42:	1b1b      	subs	r3, r3, r4
    aa44:	4329      	orrs	r1, r5
    aa46:	3e01      	subs	r6, #1
    aa48:	2e00      	cmp	r6, #0
    aa4a:	d1f3      	bne.n	aa34 <__aeabi_fdiv+0x19c>
    aa4c:	001c      	movs	r4, r3
    aa4e:	1e63      	subs	r3, r4, #1
    aa50:	419c      	sbcs	r4, r3
    aa52:	430c      	orrs	r4, r1
    aa54:	0001      	movs	r1, r0
    aa56:	317f      	adds	r1, #127	; 0x7f
    aa58:	2900      	cmp	r1, #0
    aa5a:	ddce      	ble.n	a9fa <__aeabi_fdiv+0x162>
    aa5c:	0763      	lsls	r3, r4, #29
    aa5e:	d004      	beq.n	aa6a <__aeabi_fdiv+0x1d2>
    aa60:	230f      	movs	r3, #15
    aa62:	4023      	ands	r3, r4
    aa64:	2b04      	cmp	r3, #4
    aa66:	d000      	beq.n	aa6a <__aeabi_fdiv+0x1d2>
    aa68:	3404      	adds	r4, #4
    aa6a:	0123      	lsls	r3, r4, #4
    aa6c:	d503      	bpl.n	aa76 <__aeabi_fdiv+0x1de>
    aa6e:	0001      	movs	r1, r0
    aa70:	4b2c      	ldr	r3, [pc, #176]	; (ab24 <__aeabi_fdiv+0x28c>)
    aa72:	3180      	adds	r1, #128	; 0x80
    aa74:	401c      	ands	r4, r3
    aa76:	29fe      	cmp	r1, #254	; 0xfe
    aa78:	dd0d      	ble.n	aa96 <__aeabi_fdiv+0x1fe>
    aa7a:	2301      	movs	r3, #1
    aa7c:	9a01      	ldr	r2, [sp, #4]
    aa7e:	21ff      	movs	r1, #255	; 0xff
    aa80:	4013      	ands	r3, r2
    aa82:	2400      	movs	r4, #0
    aa84:	e7a4      	b.n	a9d0 <__aeabi_fdiv+0x138>
    aa86:	2380      	movs	r3, #128	; 0x80
    aa88:	03db      	lsls	r3, r3, #15
    aa8a:	431c      	orrs	r4, r3
    aa8c:	0264      	lsls	r4, r4, #9
    aa8e:	0a64      	lsrs	r4, r4, #9
    aa90:	0033      	movs	r3, r6
    aa92:	21ff      	movs	r1, #255	; 0xff
    aa94:	e79c      	b.n	a9d0 <__aeabi_fdiv+0x138>
    aa96:	2301      	movs	r3, #1
    aa98:	9a01      	ldr	r2, [sp, #4]
    aa9a:	01a4      	lsls	r4, r4, #6
    aa9c:	0a64      	lsrs	r4, r4, #9
    aa9e:	b2c9      	uxtb	r1, r1
    aaa0:	4013      	ands	r3, r2
    aaa2:	e795      	b.n	a9d0 <__aeabi_fdiv+0x138>
    aaa4:	1b1b      	subs	r3, r3, r4
    aaa6:	261a      	movs	r6, #26
    aaa8:	2101      	movs	r1, #1
    aaaa:	e7c2      	b.n	aa32 <__aeabi_fdiv+0x19a>
    aaac:	9b00      	ldr	r3, [sp, #0]
    aaae:	468b      	mov	fp, r1
    aab0:	469a      	mov	sl, r3
    aab2:	2400      	movs	r4, #0
    aab4:	e74c      	b.n	a950 <__aeabi_fdiv+0xb8>
    aab6:	0263      	lsls	r3, r4, #9
    aab8:	d5e5      	bpl.n	aa86 <__aeabi_fdiv+0x1ee>
    aaba:	2500      	movs	r5, #0
    aabc:	2480      	movs	r4, #128	; 0x80
    aabe:	03e4      	lsls	r4, r4, #15
    aac0:	432c      	orrs	r4, r5
    aac2:	0264      	lsls	r4, r4, #9
    aac4:	0a64      	lsrs	r4, r4, #9
    aac6:	9b00      	ldr	r3, [sp, #0]
    aac8:	21ff      	movs	r1, #255	; 0xff
    aaca:	e781      	b.n	a9d0 <__aeabi_fdiv+0x138>
    aacc:	9501      	str	r5, [sp, #4]
    aace:	e7c1      	b.n	aa54 <__aeabi_fdiv+0x1bc>
    aad0:	0023      	movs	r3, r4
    aad2:	2020      	movs	r0, #32
    aad4:	40cb      	lsrs	r3, r1
    aad6:	1a41      	subs	r1, r0, r1
    aad8:	408c      	lsls	r4, r1
    aada:	1e61      	subs	r1, r4, #1
    aadc:	418c      	sbcs	r4, r1
    aade:	431c      	orrs	r4, r3
    aae0:	0763      	lsls	r3, r4, #29
    aae2:	d004      	beq.n	aaee <__aeabi_fdiv+0x256>
    aae4:	230f      	movs	r3, #15
    aae6:	4023      	ands	r3, r4
    aae8:	2b04      	cmp	r3, #4
    aaea:	d000      	beq.n	aaee <__aeabi_fdiv+0x256>
    aaec:	3404      	adds	r4, #4
    aaee:	0163      	lsls	r3, r4, #5
    aaf0:	d505      	bpl.n	aafe <__aeabi_fdiv+0x266>
    aaf2:	2301      	movs	r3, #1
    aaf4:	9a01      	ldr	r2, [sp, #4]
    aaf6:	2101      	movs	r1, #1
    aaf8:	4013      	ands	r3, r2
    aafa:	2400      	movs	r4, #0
    aafc:	e768      	b.n	a9d0 <__aeabi_fdiv+0x138>
    aafe:	2301      	movs	r3, #1
    ab00:	9a01      	ldr	r2, [sp, #4]
    ab02:	01a4      	lsls	r4, r4, #6
    ab04:	0a64      	lsrs	r4, r4, #9
    ab06:	4013      	ands	r3, r2
    ab08:	2100      	movs	r1, #0
    ab0a:	e761      	b.n	a9d0 <__aeabi_fdiv+0x138>
    ab0c:	2380      	movs	r3, #128	; 0x80
    ab0e:	03db      	lsls	r3, r3, #15
    ab10:	431c      	orrs	r4, r3
    ab12:	0264      	lsls	r4, r4, #9
    ab14:	0a64      	lsrs	r4, r4, #9
    ab16:	4653      	mov	r3, sl
    ab18:	21ff      	movs	r1, #255	; 0xff
    ab1a:	e759      	b.n	a9d0 <__aeabi_fdiv+0x138>
    ab1c:	0000d86c 	.word	0x0000d86c
    ab20:	0000d8ac 	.word	0x0000d8ac
    ab24:	f7ffffff 	.word	0xf7ffffff

0000ab28 <__aeabi_fmul>:
    ab28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab2a:	4657      	mov	r7, sl
    ab2c:	464e      	mov	r6, r9
    ab2e:	4645      	mov	r5, r8
    ab30:	46de      	mov	lr, fp
    ab32:	b5e0      	push	{r5, r6, r7, lr}
    ab34:	0247      	lsls	r7, r0, #9
    ab36:	0046      	lsls	r6, r0, #1
    ab38:	4688      	mov	r8, r1
    ab3a:	0a7f      	lsrs	r7, r7, #9
    ab3c:	0e36      	lsrs	r6, r6, #24
    ab3e:	0fc4      	lsrs	r4, r0, #31
    ab40:	2e00      	cmp	r6, #0
    ab42:	d047      	beq.n	abd4 <__aeabi_fmul+0xac>
    ab44:	2eff      	cmp	r6, #255	; 0xff
    ab46:	d024      	beq.n	ab92 <__aeabi_fmul+0x6a>
    ab48:	00fb      	lsls	r3, r7, #3
    ab4a:	2780      	movs	r7, #128	; 0x80
    ab4c:	04ff      	lsls	r7, r7, #19
    ab4e:	431f      	orrs	r7, r3
    ab50:	2300      	movs	r3, #0
    ab52:	4699      	mov	r9, r3
    ab54:	469a      	mov	sl, r3
    ab56:	3e7f      	subs	r6, #127	; 0x7f
    ab58:	4643      	mov	r3, r8
    ab5a:	025d      	lsls	r5, r3, #9
    ab5c:	0058      	lsls	r0, r3, #1
    ab5e:	0fdb      	lsrs	r3, r3, #31
    ab60:	0a6d      	lsrs	r5, r5, #9
    ab62:	0e00      	lsrs	r0, r0, #24
    ab64:	4698      	mov	r8, r3
    ab66:	d043      	beq.n	abf0 <__aeabi_fmul+0xc8>
    ab68:	28ff      	cmp	r0, #255	; 0xff
    ab6a:	d03b      	beq.n	abe4 <__aeabi_fmul+0xbc>
    ab6c:	00eb      	lsls	r3, r5, #3
    ab6e:	2580      	movs	r5, #128	; 0x80
    ab70:	2200      	movs	r2, #0
    ab72:	04ed      	lsls	r5, r5, #19
    ab74:	431d      	orrs	r5, r3
    ab76:	387f      	subs	r0, #127	; 0x7f
    ab78:	1836      	adds	r6, r6, r0
    ab7a:	1c73      	adds	r3, r6, #1
    ab7c:	4641      	mov	r1, r8
    ab7e:	469b      	mov	fp, r3
    ab80:	464b      	mov	r3, r9
    ab82:	4061      	eors	r1, r4
    ab84:	4313      	orrs	r3, r2
    ab86:	2b0f      	cmp	r3, #15
    ab88:	d864      	bhi.n	ac54 <__aeabi_fmul+0x12c>
    ab8a:	4875      	ldr	r0, [pc, #468]	; (ad60 <__aeabi_fmul+0x238>)
    ab8c:	009b      	lsls	r3, r3, #2
    ab8e:	58c3      	ldr	r3, [r0, r3]
    ab90:	469f      	mov	pc, r3
    ab92:	2f00      	cmp	r7, #0
    ab94:	d142      	bne.n	ac1c <__aeabi_fmul+0xf4>
    ab96:	2308      	movs	r3, #8
    ab98:	4699      	mov	r9, r3
    ab9a:	3b06      	subs	r3, #6
    ab9c:	26ff      	movs	r6, #255	; 0xff
    ab9e:	469a      	mov	sl, r3
    aba0:	e7da      	b.n	ab58 <__aeabi_fmul+0x30>
    aba2:	4641      	mov	r1, r8
    aba4:	2a02      	cmp	r2, #2
    aba6:	d028      	beq.n	abfa <__aeabi_fmul+0xd2>
    aba8:	2a03      	cmp	r2, #3
    abaa:	d100      	bne.n	abae <__aeabi_fmul+0x86>
    abac:	e0ce      	b.n	ad4c <__aeabi_fmul+0x224>
    abae:	2a01      	cmp	r2, #1
    abb0:	d000      	beq.n	abb4 <__aeabi_fmul+0x8c>
    abb2:	e0ac      	b.n	ad0e <__aeabi_fmul+0x1e6>
    abb4:	4011      	ands	r1, r2
    abb6:	2000      	movs	r0, #0
    abb8:	2200      	movs	r2, #0
    abba:	b2cc      	uxtb	r4, r1
    abbc:	0240      	lsls	r0, r0, #9
    abbe:	05d2      	lsls	r2, r2, #23
    abc0:	0a40      	lsrs	r0, r0, #9
    abc2:	07e4      	lsls	r4, r4, #31
    abc4:	4310      	orrs	r0, r2
    abc6:	4320      	orrs	r0, r4
    abc8:	bc3c      	pop	{r2, r3, r4, r5}
    abca:	4690      	mov	r8, r2
    abcc:	4699      	mov	r9, r3
    abce:	46a2      	mov	sl, r4
    abd0:	46ab      	mov	fp, r5
    abd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    abd4:	2f00      	cmp	r7, #0
    abd6:	d115      	bne.n	ac04 <__aeabi_fmul+0xdc>
    abd8:	2304      	movs	r3, #4
    abda:	4699      	mov	r9, r3
    abdc:	3b03      	subs	r3, #3
    abde:	2600      	movs	r6, #0
    abe0:	469a      	mov	sl, r3
    abe2:	e7b9      	b.n	ab58 <__aeabi_fmul+0x30>
    abe4:	20ff      	movs	r0, #255	; 0xff
    abe6:	2202      	movs	r2, #2
    abe8:	2d00      	cmp	r5, #0
    abea:	d0c5      	beq.n	ab78 <__aeabi_fmul+0x50>
    abec:	2203      	movs	r2, #3
    abee:	e7c3      	b.n	ab78 <__aeabi_fmul+0x50>
    abf0:	2d00      	cmp	r5, #0
    abf2:	d119      	bne.n	ac28 <__aeabi_fmul+0x100>
    abf4:	2000      	movs	r0, #0
    abf6:	2201      	movs	r2, #1
    abf8:	e7be      	b.n	ab78 <__aeabi_fmul+0x50>
    abfa:	2401      	movs	r4, #1
    abfc:	22ff      	movs	r2, #255	; 0xff
    abfe:	400c      	ands	r4, r1
    ac00:	2000      	movs	r0, #0
    ac02:	e7db      	b.n	abbc <__aeabi_fmul+0x94>
    ac04:	0038      	movs	r0, r7
    ac06:	f001 fb45 	bl	c294 <__clzsi2>
    ac0a:	2676      	movs	r6, #118	; 0x76
    ac0c:	1f43      	subs	r3, r0, #5
    ac0e:	409f      	lsls	r7, r3
    ac10:	2300      	movs	r3, #0
    ac12:	4276      	negs	r6, r6
    ac14:	1a36      	subs	r6, r6, r0
    ac16:	4699      	mov	r9, r3
    ac18:	469a      	mov	sl, r3
    ac1a:	e79d      	b.n	ab58 <__aeabi_fmul+0x30>
    ac1c:	230c      	movs	r3, #12
    ac1e:	4699      	mov	r9, r3
    ac20:	3b09      	subs	r3, #9
    ac22:	26ff      	movs	r6, #255	; 0xff
    ac24:	469a      	mov	sl, r3
    ac26:	e797      	b.n	ab58 <__aeabi_fmul+0x30>
    ac28:	0028      	movs	r0, r5
    ac2a:	f001 fb33 	bl	c294 <__clzsi2>
    ac2e:	1f43      	subs	r3, r0, #5
    ac30:	409d      	lsls	r5, r3
    ac32:	2376      	movs	r3, #118	; 0x76
    ac34:	425b      	negs	r3, r3
    ac36:	1a18      	subs	r0, r3, r0
    ac38:	2200      	movs	r2, #0
    ac3a:	e79d      	b.n	ab78 <__aeabi_fmul+0x50>
    ac3c:	2080      	movs	r0, #128	; 0x80
    ac3e:	2400      	movs	r4, #0
    ac40:	03c0      	lsls	r0, r0, #15
    ac42:	22ff      	movs	r2, #255	; 0xff
    ac44:	e7ba      	b.n	abbc <__aeabi_fmul+0x94>
    ac46:	003d      	movs	r5, r7
    ac48:	4652      	mov	r2, sl
    ac4a:	e7ab      	b.n	aba4 <__aeabi_fmul+0x7c>
    ac4c:	003d      	movs	r5, r7
    ac4e:	0021      	movs	r1, r4
    ac50:	4652      	mov	r2, sl
    ac52:	e7a7      	b.n	aba4 <__aeabi_fmul+0x7c>
    ac54:	0c3b      	lsrs	r3, r7, #16
    ac56:	469c      	mov	ip, r3
    ac58:	042a      	lsls	r2, r5, #16
    ac5a:	0c12      	lsrs	r2, r2, #16
    ac5c:	0c2b      	lsrs	r3, r5, #16
    ac5e:	0014      	movs	r4, r2
    ac60:	4660      	mov	r0, ip
    ac62:	4665      	mov	r5, ip
    ac64:	043f      	lsls	r7, r7, #16
    ac66:	0c3f      	lsrs	r7, r7, #16
    ac68:	437c      	muls	r4, r7
    ac6a:	4342      	muls	r2, r0
    ac6c:	435d      	muls	r5, r3
    ac6e:	437b      	muls	r3, r7
    ac70:	0c27      	lsrs	r7, r4, #16
    ac72:	189b      	adds	r3, r3, r2
    ac74:	18ff      	adds	r7, r7, r3
    ac76:	42ba      	cmp	r2, r7
    ac78:	d903      	bls.n	ac82 <__aeabi_fmul+0x15a>
    ac7a:	2380      	movs	r3, #128	; 0x80
    ac7c:	025b      	lsls	r3, r3, #9
    ac7e:	469c      	mov	ip, r3
    ac80:	4465      	add	r5, ip
    ac82:	0424      	lsls	r4, r4, #16
    ac84:	043a      	lsls	r2, r7, #16
    ac86:	0c24      	lsrs	r4, r4, #16
    ac88:	1912      	adds	r2, r2, r4
    ac8a:	0193      	lsls	r3, r2, #6
    ac8c:	1e5c      	subs	r4, r3, #1
    ac8e:	41a3      	sbcs	r3, r4
    ac90:	0c3f      	lsrs	r7, r7, #16
    ac92:	0e92      	lsrs	r2, r2, #26
    ac94:	197d      	adds	r5, r7, r5
    ac96:	431a      	orrs	r2, r3
    ac98:	01ad      	lsls	r5, r5, #6
    ac9a:	4315      	orrs	r5, r2
    ac9c:	012b      	lsls	r3, r5, #4
    ac9e:	d504      	bpl.n	acaa <__aeabi_fmul+0x182>
    aca0:	2301      	movs	r3, #1
    aca2:	465e      	mov	r6, fp
    aca4:	086a      	lsrs	r2, r5, #1
    aca6:	401d      	ands	r5, r3
    aca8:	4315      	orrs	r5, r2
    acaa:	0032      	movs	r2, r6
    acac:	327f      	adds	r2, #127	; 0x7f
    acae:	2a00      	cmp	r2, #0
    acb0:	dd25      	ble.n	acfe <__aeabi_fmul+0x1d6>
    acb2:	076b      	lsls	r3, r5, #29
    acb4:	d004      	beq.n	acc0 <__aeabi_fmul+0x198>
    acb6:	230f      	movs	r3, #15
    acb8:	402b      	ands	r3, r5
    acba:	2b04      	cmp	r3, #4
    acbc:	d000      	beq.n	acc0 <__aeabi_fmul+0x198>
    acbe:	3504      	adds	r5, #4
    acc0:	012b      	lsls	r3, r5, #4
    acc2:	d503      	bpl.n	accc <__aeabi_fmul+0x1a4>
    acc4:	0032      	movs	r2, r6
    acc6:	4b27      	ldr	r3, [pc, #156]	; (ad64 <__aeabi_fmul+0x23c>)
    acc8:	3280      	adds	r2, #128	; 0x80
    acca:	401d      	ands	r5, r3
    accc:	2afe      	cmp	r2, #254	; 0xfe
    acce:	dc94      	bgt.n	abfa <__aeabi_fmul+0xd2>
    acd0:	2401      	movs	r4, #1
    acd2:	01a8      	lsls	r0, r5, #6
    acd4:	0a40      	lsrs	r0, r0, #9
    acd6:	b2d2      	uxtb	r2, r2
    acd8:	400c      	ands	r4, r1
    acda:	e76f      	b.n	abbc <__aeabi_fmul+0x94>
    acdc:	2080      	movs	r0, #128	; 0x80
    acde:	03c0      	lsls	r0, r0, #15
    ace0:	4207      	tst	r7, r0
    ace2:	d007      	beq.n	acf4 <__aeabi_fmul+0x1cc>
    ace4:	4205      	tst	r5, r0
    ace6:	d105      	bne.n	acf4 <__aeabi_fmul+0x1cc>
    ace8:	4328      	orrs	r0, r5
    acea:	0240      	lsls	r0, r0, #9
    acec:	0a40      	lsrs	r0, r0, #9
    acee:	4644      	mov	r4, r8
    acf0:	22ff      	movs	r2, #255	; 0xff
    acf2:	e763      	b.n	abbc <__aeabi_fmul+0x94>
    acf4:	4338      	orrs	r0, r7
    acf6:	0240      	lsls	r0, r0, #9
    acf8:	0a40      	lsrs	r0, r0, #9
    acfa:	22ff      	movs	r2, #255	; 0xff
    acfc:	e75e      	b.n	abbc <__aeabi_fmul+0x94>
    acfe:	2401      	movs	r4, #1
    ad00:	1aa3      	subs	r3, r4, r2
    ad02:	2b1b      	cmp	r3, #27
    ad04:	dd05      	ble.n	ad12 <__aeabi_fmul+0x1ea>
    ad06:	400c      	ands	r4, r1
    ad08:	2200      	movs	r2, #0
    ad0a:	2000      	movs	r0, #0
    ad0c:	e756      	b.n	abbc <__aeabi_fmul+0x94>
    ad0e:	465e      	mov	r6, fp
    ad10:	e7cb      	b.n	acaa <__aeabi_fmul+0x182>
    ad12:	002a      	movs	r2, r5
    ad14:	2020      	movs	r0, #32
    ad16:	40da      	lsrs	r2, r3
    ad18:	1ac3      	subs	r3, r0, r3
    ad1a:	409d      	lsls	r5, r3
    ad1c:	002b      	movs	r3, r5
    ad1e:	1e5d      	subs	r5, r3, #1
    ad20:	41ab      	sbcs	r3, r5
    ad22:	4313      	orrs	r3, r2
    ad24:	075a      	lsls	r2, r3, #29
    ad26:	d004      	beq.n	ad32 <__aeabi_fmul+0x20a>
    ad28:	220f      	movs	r2, #15
    ad2a:	401a      	ands	r2, r3
    ad2c:	2a04      	cmp	r2, #4
    ad2e:	d000      	beq.n	ad32 <__aeabi_fmul+0x20a>
    ad30:	3304      	adds	r3, #4
    ad32:	015a      	lsls	r2, r3, #5
    ad34:	d504      	bpl.n	ad40 <__aeabi_fmul+0x218>
    ad36:	2401      	movs	r4, #1
    ad38:	2201      	movs	r2, #1
    ad3a:	400c      	ands	r4, r1
    ad3c:	2000      	movs	r0, #0
    ad3e:	e73d      	b.n	abbc <__aeabi_fmul+0x94>
    ad40:	2401      	movs	r4, #1
    ad42:	019b      	lsls	r3, r3, #6
    ad44:	0a58      	lsrs	r0, r3, #9
    ad46:	400c      	ands	r4, r1
    ad48:	2200      	movs	r2, #0
    ad4a:	e737      	b.n	abbc <__aeabi_fmul+0x94>
    ad4c:	2080      	movs	r0, #128	; 0x80
    ad4e:	2401      	movs	r4, #1
    ad50:	03c0      	lsls	r0, r0, #15
    ad52:	4328      	orrs	r0, r5
    ad54:	0240      	lsls	r0, r0, #9
    ad56:	0a40      	lsrs	r0, r0, #9
    ad58:	400c      	ands	r4, r1
    ad5a:	22ff      	movs	r2, #255	; 0xff
    ad5c:	e72e      	b.n	abbc <__aeabi_fmul+0x94>
    ad5e:	46c0      	nop			; (mov r8, r8)
    ad60:	0000d8ec 	.word	0x0000d8ec
    ad64:	f7ffffff 	.word	0xf7ffffff

0000ad68 <__aeabi_ui2f>:
    ad68:	b510      	push	{r4, lr}
    ad6a:	1e04      	subs	r4, r0, #0
    ad6c:	d027      	beq.n	adbe <__aeabi_ui2f+0x56>
    ad6e:	f001 fa91 	bl	c294 <__clzsi2>
    ad72:	239e      	movs	r3, #158	; 0x9e
    ad74:	1a1b      	subs	r3, r3, r0
    ad76:	2b96      	cmp	r3, #150	; 0x96
    ad78:	dc0a      	bgt.n	ad90 <__aeabi_ui2f+0x28>
    ad7a:	2296      	movs	r2, #150	; 0x96
    ad7c:	1ad2      	subs	r2, r2, r3
    ad7e:	4094      	lsls	r4, r2
    ad80:	0264      	lsls	r4, r4, #9
    ad82:	0a64      	lsrs	r4, r4, #9
    ad84:	b2db      	uxtb	r3, r3
    ad86:	0264      	lsls	r4, r4, #9
    ad88:	05db      	lsls	r3, r3, #23
    ad8a:	0a60      	lsrs	r0, r4, #9
    ad8c:	4318      	orrs	r0, r3
    ad8e:	bd10      	pop	{r4, pc}
    ad90:	2b99      	cmp	r3, #153	; 0x99
    ad92:	dc17      	bgt.n	adc4 <__aeabi_ui2f+0x5c>
    ad94:	2299      	movs	r2, #153	; 0x99
    ad96:	1ad2      	subs	r2, r2, r3
    ad98:	2a00      	cmp	r2, #0
    ad9a:	dd27      	ble.n	adec <__aeabi_ui2f+0x84>
    ad9c:	4094      	lsls	r4, r2
    ad9e:	0022      	movs	r2, r4
    ada0:	4c13      	ldr	r4, [pc, #76]	; (adf0 <__aeabi_ui2f+0x88>)
    ada2:	4014      	ands	r4, r2
    ada4:	0751      	lsls	r1, r2, #29
    ada6:	d004      	beq.n	adb2 <__aeabi_ui2f+0x4a>
    ada8:	210f      	movs	r1, #15
    adaa:	400a      	ands	r2, r1
    adac:	2a04      	cmp	r2, #4
    adae:	d000      	beq.n	adb2 <__aeabi_ui2f+0x4a>
    adb0:	3404      	adds	r4, #4
    adb2:	0162      	lsls	r2, r4, #5
    adb4:	d412      	bmi.n	addc <__aeabi_ui2f+0x74>
    adb6:	01a4      	lsls	r4, r4, #6
    adb8:	0a64      	lsrs	r4, r4, #9
    adba:	b2db      	uxtb	r3, r3
    adbc:	e7e3      	b.n	ad86 <__aeabi_ui2f+0x1e>
    adbe:	2300      	movs	r3, #0
    adc0:	2400      	movs	r4, #0
    adc2:	e7e0      	b.n	ad86 <__aeabi_ui2f+0x1e>
    adc4:	22b9      	movs	r2, #185	; 0xb9
    adc6:	0021      	movs	r1, r4
    adc8:	1ad2      	subs	r2, r2, r3
    adca:	4091      	lsls	r1, r2
    adcc:	000a      	movs	r2, r1
    adce:	1e51      	subs	r1, r2, #1
    add0:	418a      	sbcs	r2, r1
    add2:	2105      	movs	r1, #5
    add4:	1a09      	subs	r1, r1, r0
    add6:	40cc      	lsrs	r4, r1
    add8:	4314      	orrs	r4, r2
    adda:	e7db      	b.n	ad94 <__aeabi_ui2f+0x2c>
    addc:	4b04      	ldr	r3, [pc, #16]	; (adf0 <__aeabi_ui2f+0x88>)
    adde:	401c      	ands	r4, r3
    ade0:	239f      	movs	r3, #159	; 0x9f
    ade2:	01a4      	lsls	r4, r4, #6
    ade4:	1a1b      	subs	r3, r3, r0
    ade6:	0a64      	lsrs	r4, r4, #9
    ade8:	b2db      	uxtb	r3, r3
    adea:	e7cc      	b.n	ad86 <__aeabi_ui2f+0x1e>
    adec:	0022      	movs	r2, r4
    adee:	e7d7      	b.n	ada0 <__aeabi_ui2f+0x38>
    adf0:	fbffffff 	.word	0xfbffffff

0000adf4 <__aeabi_ddiv>:
    adf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    adf6:	4657      	mov	r7, sl
    adf8:	4645      	mov	r5, r8
    adfa:	46de      	mov	lr, fp
    adfc:	464e      	mov	r6, r9
    adfe:	b5e0      	push	{r5, r6, r7, lr}
    ae00:	004c      	lsls	r4, r1, #1
    ae02:	030e      	lsls	r6, r1, #12
    ae04:	b087      	sub	sp, #28
    ae06:	4683      	mov	fp, r0
    ae08:	4692      	mov	sl, r2
    ae0a:	001d      	movs	r5, r3
    ae0c:	4680      	mov	r8, r0
    ae0e:	0b36      	lsrs	r6, r6, #12
    ae10:	0d64      	lsrs	r4, r4, #21
    ae12:	0fcf      	lsrs	r7, r1, #31
    ae14:	2c00      	cmp	r4, #0
    ae16:	d04f      	beq.n	aeb8 <__aeabi_ddiv+0xc4>
    ae18:	4b6f      	ldr	r3, [pc, #444]	; (afd8 <__aeabi_ddiv+0x1e4>)
    ae1a:	429c      	cmp	r4, r3
    ae1c:	d035      	beq.n	ae8a <__aeabi_ddiv+0x96>
    ae1e:	2380      	movs	r3, #128	; 0x80
    ae20:	0f42      	lsrs	r2, r0, #29
    ae22:	041b      	lsls	r3, r3, #16
    ae24:	00f6      	lsls	r6, r6, #3
    ae26:	4313      	orrs	r3, r2
    ae28:	4333      	orrs	r3, r6
    ae2a:	4699      	mov	r9, r3
    ae2c:	00c3      	lsls	r3, r0, #3
    ae2e:	4698      	mov	r8, r3
    ae30:	4b6a      	ldr	r3, [pc, #424]	; (afdc <__aeabi_ddiv+0x1e8>)
    ae32:	2600      	movs	r6, #0
    ae34:	469c      	mov	ip, r3
    ae36:	2300      	movs	r3, #0
    ae38:	4464      	add	r4, ip
    ae3a:	9303      	str	r3, [sp, #12]
    ae3c:	032b      	lsls	r3, r5, #12
    ae3e:	0b1b      	lsrs	r3, r3, #12
    ae40:	469b      	mov	fp, r3
    ae42:	006b      	lsls	r3, r5, #1
    ae44:	0fed      	lsrs	r5, r5, #31
    ae46:	4650      	mov	r0, sl
    ae48:	0d5b      	lsrs	r3, r3, #21
    ae4a:	9501      	str	r5, [sp, #4]
    ae4c:	d05e      	beq.n	af0c <__aeabi_ddiv+0x118>
    ae4e:	4a62      	ldr	r2, [pc, #392]	; (afd8 <__aeabi_ddiv+0x1e4>)
    ae50:	4293      	cmp	r3, r2
    ae52:	d053      	beq.n	aefc <__aeabi_ddiv+0x108>
    ae54:	465a      	mov	r2, fp
    ae56:	00d1      	lsls	r1, r2, #3
    ae58:	2280      	movs	r2, #128	; 0x80
    ae5a:	0f40      	lsrs	r0, r0, #29
    ae5c:	0412      	lsls	r2, r2, #16
    ae5e:	4302      	orrs	r2, r0
    ae60:	430a      	orrs	r2, r1
    ae62:	4693      	mov	fp, r2
    ae64:	4652      	mov	r2, sl
    ae66:	00d1      	lsls	r1, r2, #3
    ae68:	4a5c      	ldr	r2, [pc, #368]	; (afdc <__aeabi_ddiv+0x1e8>)
    ae6a:	4694      	mov	ip, r2
    ae6c:	2200      	movs	r2, #0
    ae6e:	4463      	add	r3, ip
    ae70:	0038      	movs	r0, r7
    ae72:	4068      	eors	r0, r5
    ae74:	4684      	mov	ip, r0
    ae76:	9002      	str	r0, [sp, #8]
    ae78:	1ae4      	subs	r4, r4, r3
    ae7a:	4316      	orrs	r6, r2
    ae7c:	2e0f      	cmp	r6, #15
    ae7e:	d900      	bls.n	ae82 <__aeabi_ddiv+0x8e>
    ae80:	e0b4      	b.n	afec <__aeabi_ddiv+0x1f8>
    ae82:	4b57      	ldr	r3, [pc, #348]	; (afe0 <__aeabi_ddiv+0x1ec>)
    ae84:	00b6      	lsls	r6, r6, #2
    ae86:	599b      	ldr	r3, [r3, r6]
    ae88:	469f      	mov	pc, r3
    ae8a:	0003      	movs	r3, r0
    ae8c:	4333      	orrs	r3, r6
    ae8e:	4699      	mov	r9, r3
    ae90:	d16c      	bne.n	af6c <__aeabi_ddiv+0x178>
    ae92:	2300      	movs	r3, #0
    ae94:	4698      	mov	r8, r3
    ae96:	3302      	adds	r3, #2
    ae98:	2608      	movs	r6, #8
    ae9a:	9303      	str	r3, [sp, #12]
    ae9c:	e7ce      	b.n	ae3c <__aeabi_ddiv+0x48>
    ae9e:	46cb      	mov	fp, r9
    aea0:	4641      	mov	r1, r8
    aea2:	9a03      	ldr	r2, [sp, #12]
    aea4:	9701      	str	r7, [sp, #4]
    aea6:	2a02      	cmp	r2, #2
    aea8:	d165      	bne.n	af76 <__aeabi_ddiv+0x182>
    aeaa:	9b01      	ldr	r3, [sp, #4]
    aeac:	4c4a      	ldr	r4, [pc, #296]	; (afd8 <__aeabi_ddiv+0x1e4>)
    aeae:	469c      	mov	ip, r3
    aeb0:	2300      	movs	r3, #0
    aeb2:	2200      	movs	r2, #0
    aeb4:	4698      	mov	r8, r3
    aeb6:	e06b      	b.n	af90 <__aeabi_ddiv+0x19c>
    aeb8:	0003      	movs	r3, r0
    aeba:	4333      	orrs	r3, r6
    aebc:	4699      	mov	r9, r3
    aebe:	d04e      	beq.n	af5e <__aeabi_ddiv+0x16a>
    aec0:	2e00      	cmp	r6, #0
    aec2:	d100      	bne.n	aec6 <__aeabi_ddiv+0xd2>
    aec4:	e1bc      	b.n	b240 <__aeabi_ddiv+0x44c>
    aec6:	0030      	movs	r0, r6
    aec8:	f001 f9e4 	bl	c294 <__clzsi2>
    aecc:	0003      	movs	r3, r0
    aece:	3b0b      	subs	r3, #11
    aed0:	2b1c      	cmp	r3, #28
    aed2:	dd00      	ble.n	aed6 <__aeabi_ddiv+0xe2>
    aed4:	e1ac      	b.n	b230 <__aeabi_ddiv+0x43c>
    aed6:	221d      	movs	r2, #29
    aed8:	1ad3      	subs	r3, r2, r3
    aeda:	465a      	mov	r2, fp
    aedc:	0001      	movs	r1, r0
    aede:	40da      	lsrs	r2, r3
    aee0:	3908      	subs	r1, #8
    aee2:	408e      	lsls	r6, r1
    aee4:	0013      	movs	r3, r2
    aee6:	4333      	orrs	r3, r6
    aee8:	4699      	mov	r9, r3
    aeea:	465b      	mov	r3, fp
    aeec:	408b      	lsls	r3, r1
    aeee:	4698      	mov	r8, r3
    aef0:	2300      	movs	r3, #0
    aef2:	4c3c      	ldr	r4, [pc, #240]	; (afe4 <__aeabi_ddiv+0x1f0>)
    aef4:	2600      	movs	r6, #0
    aef6:	1a24      	subs	r4, r4, r0
    aef8:	9303      	str	r3, [sp, #12]
    aefa:	e79f      	b.n	ae3c <__aeabi_ddiv+0x48>
    aefc:	4651      	mov	r1, sl
    aefe:	465a      	mov	r2, fp
    af00:	4311      	orrs	r1, r2
    af02:	d129      	bne.n	af58 <__aeabi_ddiv+0x164>
    af04:	2200      	movs	r2, #0
    af06:	4693      	mov	fp, r2
    af08:	3202      	adds	r2, #2
    af0a:	e7b1      	b.n	ae70 <__aeabi_ddiv+0x7c>
    af0c:	4659      	mov	r1, fp
    af0e:	4301      	orrs	r1, r0
    af10:	d01e      	beq.n	af50 <__aeabi_ddiv+0x15c>
    af12:	465b      	mov	r3, fp
    af14:	2b00      	cmp	r3, #0
    af16:	d100      	bne.n	af1a <__aeabi_ddiv+0x126>
    af18:	e19e      	b.n	b258 <__aeabi_ddiv+0x464>
    af1a:	4658      	mov	r0, fp
    af1c:	f001 f9ba 	bl	c294 <__clzsi2>
    af20:	0003      	movs	r3, r0
    af22:	3b0b      	subs	r3, #11
    af24:	2b1c      	cmp	r3, #28
    af26:	dd00      	ble.n	af2a <__aeabi_ddiv+0x136>
    af28:	e18f      	b.n	b24a <__aeabi_ddiv+0x456>
    af2a:	0002      	movs	r2, r0
    af2c:	4659      	mov	r1, fp
    af2e:	3a08      	subs	r2, #8
    af30:	4091      	lsls	r1, r2
    af32:	468b      	mov	fp, r1
    af34:	211d      	movs	r1, #29
    af36:	1acb      	subs	r3, r1, r3
    af38:	4651      	mov	r1, sl
    af3a:	40d9      	lsrs	r1, r3
    af3c:	000b      	movs	r3, r1
    af3e:	4659      	mov	r1, fp
    af40:	430b      	orrs	r3, r1
    af42:	4651      	mov	r1, sl
    af44:	469b      	mov	fp, r3
    af46:	4091      	lsls	r1, r2
    af48:	4b26      	ldr	r3, [pc, #152]	; (afe4 <__aeabi_ddiv+0x1f0>)
    af4a:	2200      	movs	r2, #0
    af4c:	1a1b      	subs	r3, r3, r0
    af4e:	e78f      	b.n	ae70 <__aeabi_ddiv+0x7c>
    af50:	2300      	movs	r3, #0
    af52:	2201      	movs	r2, #1
    af54:	469b      	mov	fp, r3
    af56:	e78b      	b.n	ae70 <__aeabi_ddiv+0x7c>
    af58:	4651      	mov	r1, sl
    af5a:	2203      	movs	r2, #3
    af5c:	e788      	b.n	ae70 <__aeabi_ddiv+0x7c>
    af5e:	2300      	movs	r3, #0
    af60:	4698      	mov	r8, r3
    af62:	3301      	adds	r3, #1
    af64:	2604      	movs	r6, #4
    af66:	2400      	movs	r4, #0
    af68:	9303      	str	r3, [sp, #12]
    af6a:	e767      	b.n	ae3c <__aeabi_ddiv+0x48>
    af6c:	2303      	movs	r3, #3
    af6e:	46b1      	mov	r9, r6
    af70:	9303      	str	r3, [sp, #12]
    af72:	260c      	movs	r6, #12
    af74:	e762      	b.n	ae3c <__aeabi_ddiv+0x48>
    af76:	2a03      	cmp	r2, #3
    af78:	d100      	bne.n	af7c <__aeabi_ddiv+0x188>
    af7a:	e25c      	b.n	b436 <__aeabi_ddiv+0x642>
    af7c:	9b01      	ldr	r3, [sp, #4]
    af7e:	2a01      	cmp	r2, #1
    af80:	d000      	beq.n	af84 <__aeabi_ddiv+0x190>
    af82:	e1e4      	b.n	b34e <__aeabi_ddiv+0x55a>
    af84:	4013      	ands	r3, r2
    af86:	469c      	mov	ip, r3
    af88:	2300      	movs	r3, #0
    af8a:	2400      	movs	r4, #0
    af8c:	2200      	movs	r2, #0
    af8e:	4698      	mov	r8, r3
    af90:	2100      	movs	r1, #0
    af92:	0312      	lsls	r2, r2, #12
    af94:	0b13      	lsrs	r3, r2, #12
    af96:	0d0a      	lsrs	r2, r1, #20
    af98:	0512      	lsls	r2, r2, #20
    af9a:	431a      	orrs	r2, r3
    af9c:	0523      	lsls	r3, r4, #20
    af9e:	4c12      	ldr	r4, [pc, #72]	; (afe8 <__aeabi_ddiv+0x1f4>)
    afa0:	4640      	mov	r0, r8
    afa2:	4022      	ands	r2, r4
    afa4:	4313      	orrs	r3, r2
    afa6:	4662      	mov	r2, ip
    afa8:	005b      	lsls	r3, r3, #1
    afaa:	07d2      	lsls	r2, r2, #31
    afac:	085b      	lsrs	r3, r3, #1
    afae:	4313      	orrs	r3, r2
    afb0:	0019      	movs	r1, r3
    afb2:	b007      	add	sp, #28
    afb4:	bc3c      	pop	{r2, r3, r4, r5}
    afb6:	4690      	mov	r8, r2
    afb8:	4699      	mov	r9, r3
    afba:	46a2      	mov	sl, r4
    afbc:	46ab      	mov	fp, r5
    afbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    afc0:	2300      	movs	r3, #0
    afc2:	2280      	movs	r2, #128	; 0x80
    afc4:	469c      	mov	ip, r3
    afc6:	0312      	lsls	r2, r2, #12
    afc8:	4698      	mov	r8, r3
    afca:	4c03      	ldr	r4, [pc, #12]	; (afd8 <__aeabi_ddiv+0x1e4>)
    afcc:	e7e0      	b.n	af90 <__aeabi_ddiv+0x19c>
    afce:	2300      	movs	r3, #0
    afd0:	4c01      	ldr	r4, [pc, #4]	; (afd8 <__aeabi_ddiv+0x1e4>)
    afd2:	2200      	movs	r2, #0
    afd4:	4698      	mov	r8, r3
    afd6:	e7db      	b.n	af90 <__aeabi_ddiv+0x19c>
    afd8:	000007ff 	.word	0x000007ff
    afdc:	fffffc01 	.word	0xfffffc01
    afe0:	0000d92c 	.word	0x0000d92c
    afe4:	fffffc0d 	.word	0xfffffc0d
    afe8:	800fffff 	.word	0x800fffff
    afec:	45d9      	cmp	r9, fp
    afee:	d900      	bls.n	aff2 <__aeabi_ddiv+0x1fe>
    aff0:	e139      	b.n	b266 <__aeabi_ddiv+0x472>
    aff2:	d100      	bne.n	aff6 <__aeabi_ddiv+0x202>
    aff4:	e134      	b.n	b260 <__aeabi_ddiv+0x46c>
    aff6:	2300      	movs	r3, #0
    aff8:	4646      	mov	r6, r8
    affa:	464d      	mov	r5, r9
    affc:	469a      	mov	sl, r3
    affe:	3c01      	subs	r4, #1
    b000:	465b      	mov	r3, fp
    b002:	0e0a      	lsrs	r2, r1, #24
    b004:	021b      	lsls	r3, r3, #8
    b006:	431a      	orrs	r2, r3
    b008:	020b      	lsls	r3, r1, #8
    b00a:	0c17      	lsrs	r7, r2, #16
    b00c:	9303      	str	r3, [sp, #12]
    b00e:	0413      	lsls	r3, r2, #16
    b010:	0c1b      	lsrs	r3, r3, #16
    b012:	0039      	movs	r1, r7
    b014:	0028      	movs	r0, r5
    b016:	4690      	mov	r8, r2
    b018:	9301      	str	r3, [sp, #4]
    b01a:	f7ff f955 	bl	a2c8 <__udivsi3>
    b01e:	0002      	movs	r2, r0
    b020:	9b01      	ldr	r3, [sp, #4]
    b022:	4683      	mov	fp, r0
    b024:	435a      	muls	r2, r3
    b026:	0028      	movs	r0, r5
    b028:	0039      	movs	r1, r7
    b02a:	4691      	mov	r9, r2
    b02c:	f7ff f9d2 	bl	a3d4 <__aeabi_uidivmod>
    b030:	0c35      	lsrs	r5, r6, #16
    b032:	0409      	lsls	r1, r1, #16
    b034:	430d      	orrs	r5, r1
    b036:	45a9      	cmp	r9, r5
    b038:	d90d      	bls.n	b056 <__aeabi_ddiv+0x262>
    b03a:	465b      	mov	r3, fp
    b03c:	4445      	add	r5, r8
    b03e:	3b01      	subs	r3, #1
    b040:	45a8      	cmp	r8, r5
    b042:	d900      	bls.n	b046 <__aeabi_ddiv+0x252>
    b044:	e13a      	b.n	b2bc <__aeabi_ddiv+0x4c8>
    b046:	45a9      	cmp	r9, r5
    b048:	d800      	bhi.n	b04c <__aeabi_ddiv+0x258>
    b04a:	e137      	b.n	b2bc <__aeabi_ddiv+0x4c8>
    b04c:	2302      	movs	r3, #2
    b04e:	425b      	negs	r3, r3
    b050:	469c      	mov	ip, r3
    b052:	4445      	add	r5, r8
    b054:	44e3      	add	fp, ip
    b056:	464b      	mov	r3, r9
    b058:	1aeb      	subs	r3, r5, r3
    b05a:	0039      	movs	r1, r7
    b05c:	0018      	movs	r0, r3
    b05e:	9304      	str	r3, [sp, #16]
    b060:	f7ff f932 	bl	a2c8 <__udivsi3>
    b064:	9b01      	ldr	r3, [sp, #4]
    b066:	0005      	movs	r5, r0
    b068:	4343      	muls	r3, r0
    b06a:	0039      	movs	r1, r7
    b06c:	9804      	ldr	r0, [sp, #16]
    b06e:	4699      	mov	r9, r3
    b070:	f7ff f9b0 	bl	a3d4 <__aeabi_uidivmod>
    b074:	0433      	lsls	r3, r6, #16
    b076:	0409      	lsls	r1, r1, #16
    b078:	0c1b      	lsrs	r3, r3, #16
    b07a:	430b      	orrs	r3, r1
    b07c:	4599      	cmp	r9, r3
    b07e:	d909      	bls.n	b094 <__aeabi_ddiv+0x2a0>
    b080:	4443      	add	r3, r8
    b082:	1e6a      	subs	r2, r5, #1
    b084:	4598      	cmp	r8, r3
    b086:	d900      	bls.n	b08a <__aeabi_ddiv+0x296>
    b088:	e11a      	b.n	b2c0 <__aeabi_ddiv+0x4cc>
    b08a:	4599      	cmp	r9, r3
    b08c:	d800      	bhi.n	b090 <__aeabi_ddiv+0x29c>
    b08e:	e117      	b.n	b2c0 <__aeabi_ddiv+0x4cc>
    b090:	3d02      	subs	r5, #2
    b092:	4443      	add	r3, r8
    b094:	464a      	mov	r2, r9
    b096:	1a9b      	subs	r3, r3, r2
    b098:	465a      	mov	r2, fp
    b09a:	0412      	lsls	r2, r2, #16
    b09c:	432a      	orrs	r2, r5
    b09e:	9903      	ldr	r1, [sp, #12]
    b0a0:	4693      	mov	fp, r2
    b0a2:	0c10      	lsrs	r0, r2, #16
    b0a4:	0c0a      	lsrs	r2, r1, #16
    b0a6:	4691      	mov	r9, r2
    b0a8:	0409      	lsls	r1, r1, #16
    b0aa:	465a      	mov	r2, fp
    b0ac:	0c09      	lsrs	r1, r1, #16
    b0ae:	464e      	mov	r6, r9
    b0b0:	000d      	movs	r5, r1
    b0b2:	0412      	lsls	r2, r2, #16
    b0b4:	0c12      	lsrs	r2, r2, #16
    b0b6:	4345      	muls	r5, r0
    b0b8:	9105      	str	r1, [sp, #20]
    b0ba:	4351      	muls	r1, r2
    b0bc:	4372      	muls	r2, r6
    b0be:	4370      	muls	r0, r6
    b0c0:	1952      	adds	r2, r2, r5
    b0c2:	0c0e      	lsrs	r6, r1, #16
    b0c4:	18b2      	adds	r2, r6, r2
    b0c6:	4295      	cmp	r5, r2
    b0c8:	d903      	bls.n	b0d2 <__aeabi_ddiv+0x2de>
    b0ca:	2580      	movs	r5, #128	; 0x80
    b0cc:	026d      	lsls	r5, r5, #9
    b0ce:	46ac      	mov	ip, r5
    b0d0:	4460      	add	r0, ip
    b0d2:	0c15      	lsrs	r5, r2, #16
    b0d4:	0409      	lsls	r1, r1, #16
    b0d6:	0412      	lsls	r2, r2, #16
    b0d8:	0c09      	lsrs	r1, r1, #16
    b0da:	1828      	adds	r0, r5, r0
    b0dc:	1852      	adds	r2, r2, r1
    b0de:	4283      	cmp	r3, r0
    b0e0:	d200      	bcs.n	b0e4 <__aeabi_ddiv+0x2f0>
    b0e2:	e0ce      	b.n	b282 <__aeabi_ddiv+0x48e>
    b0e4:	d100      	bne.n	b0e8 <__aeabi_ddiv+0x2f4>
    b0e6:	e0c8      	b.n	b27a <__aeabi_ddiv+0x486>
    b0e8:	1a1d      	subs	r5, r3, r0
    b0ea:	4653      	mov	r3, sl
    b0ec:	1a9e      	subs	r6, r3, r2
    b0ee:	45b2      	cmp	sl, r6
    b0f0:	4192      	sbcs	r2, r2
    b0f2:	4252      	negs	r2, r2
    b0f4:	1aab      	subs	r3, r5, r2
    b0f6:	469a      	mov	sl, r3
    b0f8:	4598      	cmp	r8, r3
    b0fa:	d100      	bne.n	b0fe <__aeabi_ddiv+0x30a>
    b0fc:	e117      	b.n	b32e <__aeabi_ddiv+0x53a>
    b0fe:	0039      	movs	r1, r7
    b100:	0018      	movs	r0, r3
    b102:	f7ff f8e1 	bl	a2c8 <__udivsi3>
    b106:	9b01      	ldr	r3, [sp, #4]
    b108:	0005      	movs	r5, r0
    b10a:	4343      	muls	r3, r0
    b10c:	0039      	movs	r1, r7
    b10e:	4650      	mov	r0, sl
    b110:	9304      	str	r3, [sp, #16]
    b112:	f7ff f95f 	bl	a3d4 <__aeabi_uidivmod>
    b116:	9804      	ldr	r0, [sp, #16]
    b118:	040b      	lsls	r3, r1, #16
    b11a:	0c31      	lsrs	r1, r6, #16
    b11c:	4319      	orrs	r1, r3
    b11e:	4288      	cmp	r0, r1
    b120:	d909      	bls.n	b136 <__aeabi_ddiv+0x342>
    b122:	4441      	add	r1, r8
    b124:	1e6b      	subs	r3, r5, #1
    b126:	4588      	cmp	r8, r1
    b128:	d900      	bls.n	b12c <__aeabi_ddiv+0x338>
    b12a:	e107      	b.n	b33c <__aeabi_ddiv+0x548>
    b12c:	4288      	cmp	r0, r1
    b12e:	d800      	bhi.n	b132 <__aeabi_ddiv+0x33e>
    b130:	e104      	b.n	b33c <__aeabi_ddiv+0x548>
    b132:	3d02      	subs	r5, #2
    b134:	4441      	add	r1, r8
    b136:	9b04      	ldr	r3, [sp, #16]
    b138:	1acb      	subs	r3, r1, r3
    b13a:	0018      	movs	r0, r3
    b13c:	0039      	movs	r1, r7
    b13e:	9304      	str	r3, [sp, #16]
    b140:	f7ff f8c2 	bl	a2c8 <__udivsi3>
    b144:	9b01      	ldr	r3, [sp, #4]
    b146:	4682      	mov	sl, r0
    b148:	4343      	muls	r3, r0
    b14a:	0039      	movs	r1, r7
    b14c:	9804      	ldr	r0, [sp, #16]
    b14e:	9301      	str	r3, [sp, #4]
    b150:	f7ff f940 	bl	a3d4 <__aeabi_uidivmod>
    b154:	9801      	ldr	r0, [sp, #4]
    b156:	040b      	lsls	r3, r1, #16
    b158:	0431      	lsls	r1, r6, #16
    b15a:	0c09      	lsrs	r1, r1, #16
    b15c:	4319      	orrs	r1, r3
    b15e:	4288      	cmp	r0, r1
    b160:	d90d      	bls.n	b17e <__aeabi_ddiv+0x38a>
    b162:	4653      	mov	r3, sl
    b164:	4441      	add	r1, r8
    b166:	3b01      	subs	r3, #1
    b168:	4588      	cmp	r8, r1
    b16a:	d900      	bls.n	b16e <__aeabi_ddiv+0x37a>
    b16c:	e0e8      	b.n	b340 <__aeabi_ddiv+0x54c>
    b16e:	4288      	cmp	r0, r1
    b170:	d800      	bhi.n	b174 <__aeabi_ddiv+0x380>
    b172:	e0e5      	b.n	b340 <__aeabi_ddiv+0x54c>
    b174:	2302      	movs	r3, #2
    b176:	425b      	negs	r3, r3
    b178:	469c      	mov	ip, r3
    b17a:	4441      	add	r1, r8
    b17c:	44e2      	add	sl, ip
    b17e:	9b01      	ldr	r3, [sp, #4]
    b180:	042d      	lsls	r5, r5, #16
    b182:	1ace      	subs	r6, r1, r3
    b184:	4651      	mov	r1, sl
    b186:	4329      	orrs	r1, r5
    b188:	9d05      	ldr	r5, [sp, #20]
    b18a:	464f      	mov	r7, r9
    b18c:	002a      	movs	r2, r5
    b18e:	040b      	lsls	r3, r1, #16
    b190:	0c08      	lsrs	r0, r1, #16
    b192:	0c1b      	lsrs	r3, r3, #16
    b194:	435a      	muls	r2, r3
    b196:	4345      	muls	r5, r0
    b198:	437b      	muls	r3, r7
    b19a:	4378      	muls	r0, r7
    b19c:	195b      	adds	r3, r3, r5
    b19e:	0c17      	lsrs	r7, r2, #16
    b1a0:	18fb      	adds	r3, r7, r3
    b1a2:	429d      	cmp	r5, r3
    b1a4:	d903      	bls.n	b1ae <__aeabi_ddiv+0x3ba>
    b1a6:	2580      	movs	r5, #128	; 0x80
    b1a8:	026d      	lsls	r5, r5, #9
    b1aa:	46ac      	mov	ip, r5
    b1ac:	4460      	add	r0, ip
    b1ae:	0c1d      	lsrs	r5, r3, #16
    b1b0:	0412      	lsls	r2, r2, #16
    b1b2:	041b      	lsls	r3, r3, #16
    b1b4:	0c12      	lsrs	r2, r2, #16
    b1b6:	1828      	adds	r0, r5, r0
    b1b8:	189b      	adds	r3, r3, r2
    b1ba:	4286      	cmp	r6, r0
    b1bc:	d200      	bcs.n	b1c0 <__aeabi_ddiv+0x3cc>
    b1be:	e093      	b.n	b2e8 <__aeabi_ddiv+0x4f4>
    b1c0:	d100      	bne.n	b1c4 <__aeabi_ddiv+0x3d0>
    b1c2:	e08e      	b.n	b2e2 <__aeabi_ddiv+0x4ee>
    b1c4:	2301      	movs	r3, #1
    b1c6:	4319      	orrs	r1, r3
    b1c8:	4ba0      	ldr	r3, [pc, #640]	; (b44c <__aeabi_ddiv+0x658>)
    b1ca:	18e3      	adds	r3, r4, r3
    b1cc:	2b00      	cmp	r3, #0
    b1ce:	dc00      	bgt.n	b1d2 <__aeabi_ddiv+0x3de>
    b1d0:	e099      	b.n	b306 <__aeabi_ddiv+0x512>
    b1d2:	074a      	lsls	r2, r1, #29
    b1d4:	d000      	beq.n	b1d8 <__aeabi_ddiv+0x3e4>
    b1d6:	e09e      	b.n	b316 <__aeabi_ddiv+0x522>
    b1d8:	465a      	mov	r2, fp
    b1da:	01d2      	lsls	r2, r2, #7
    b1dc:	d506      	bpl.n	b1ec <__aeabi_ddiv+0x3f8>
    b1de:	465a      	mov	r2, fp
    b1e0:	4b9b      	ldr	r3, [pc, #620]	; (b450 <__aeabi_ddiv+0x65c>)
    b1e2:	401a      	ands	r2, r3
    b1e4:	2380      	movs	r3, #128	; 0x80
    b1e6:	4693      	mov	fp, r2
    b1e8:	00db      	lsls	r3, r3, #3
    b1ea:	18e3      	adds	r3, r4, r3
    b1ec:	4a99      	ldr	r2, [pc, #612]	; (b454 <__aeabi_ddiv+0x660>)
    b1ee:	4293      	cmp	r3, r2
    b1f0:	dd68      	ble.n	b2c4 <__aeabi_ddiv+0x4d0>
    b1f2:	2301      	movs	r3, #1
    b1f4:	9a02      	ldr	r2, [sp, #8]
    b1f6:	4c98      	ldr	r4, [pc, #608]	; (b458 <__aeabi_ddiv+0x664>)
    b1f8:	401a      	ands	r2, r3
    b1fa:	2300      	movs	r3, #0
    b1fc:	4694      	mov	ip, r2
    b1fe:	4698      	mov	r8, r3
    b200:	2200      	movs	r2, #0
    b202:	e6c5      	b.n	af90 <__aeabi_ddiv+0x19c>
    b204:	2280      	movs	r2, #128	; 0x80
    b206:	464b      	mov	r3, r9
    b208:	0312      	lsls	r2, r2, #12
    b20a:	4213      	tst	r3, r2
    b20c:	d00a      	beq.n	b224 <__aeabi_ddiv+0x430>
    b20e:	465b      	mov	r3, fp
    b210:	4213      	tst	r3, r2
    b212:	d106      	bne.n	b222 <__aeabi_ddiv+0x42e>
    b214:	431a      	orrs	r2, r3
    b216:	0312      	lsls	r2, r2, #12
    b218:	0b12      	lsrs	r2, r2, #12
    b21a:	46ac      	mov	ip, r5
    b21c:	4688      	mov	r8, r1
    b21e:	4c8e      	ldr	r4, [pc, #568]	; (b458 <__aeabi_ddiv+0x664>)
    b220:	e6b6      	b.n	af90 <__aeabi_ddiv+0x19c>
    b222:	464b      	mov	r3, r9
    b224:	431a      	orrs	r2, r3
    b226:	0312      	lsls	r2, r2, #12
    b228:	0b12      	lsrs	r2, r2, #12
    b22a:	46bc      	mov	ip, r7
    b22c:	4c8a      	ldr	r4, [pc, #552]	; (b458 <__aeabi_ddiv+0x664>)
    b22e:	e6af      	b.n	af90 <__aeabi_ddiv+0x19c>
    b230:	0003      	movs	r3, r0
    b232:	465a      	mov	r2, fp
    b234:	3b28      	subs	r3, #40	; 0x28
    b236:	409a      	lsls	r2, r3
    b238:	2300      	movs	r3, #0
    b23a:	4691      	mov	r9, r2
    b23c:	4698      	mov	r8, r3
    b23e:	e657      	b.n	aef0 <__aeabi_ddiv+0xfc>
    b240:	4658      	mov	r0, fp
    b242:	f001 f827 	bl	c294 <__clzsi2>
    b246:	3020      	adds	r0, #32
    b248:	e640      	b.n	aecc <__aeabi_ddiv+0xd8>
    b24a:	0003      	movs	r3, r0
    b24c:	4652      	mov	r2, sl
    b24e:	3b28      	subs	r3, #40	; 0x28
    b250:	409a      	lsls	r2, r3
    b252:	2100      	movs	r1, #0
    b254:	4693      	mov	fp, r2
    b256:	e677      	b.n	af48 <__aeabi_ddiv+0x154>
    b258:	f001 f81c 	bl	c294 <__clzsi2>
    b25c:	3020      	adds	r0, #32
    b25e:	e65f      	b.n	af20 <__aeabi_ddiv+0x12c>
    b260:	4588      	cmp	r8, r1
    b262:	d200      	bcs.n	b266 <__aeabi_ddiv+0x472>
    b264:	e6c7      	b.n	aff6 <__aeabi_ddiv+0x202>
    b266:	464b      	mov	r3, r9
    b268:	07de      	lsls	r6, r3, #31
    b26a:	085d      	lsrs	r5, r3, #1
    b26c:	4643      	mov	r3, r8
    b26e:	085b      	lsrs	r3, r3, #1
    b270:	431e      	orrs	r6, r3
    b272:	4643      	mov	r3, r8
    b274:	07db      	lsls	r3, r3, #31
    b276:	469a      	mov	sl, r3
    b278:	e6c2      	b.n	b000 <__aeabi_ddiv+0x20c>
    b27a:	2500      	movs	r5, #0
    b27c:	4592      	cmp	sl, r2
    b27e:	d300      	bcc.n	b282 <__aeabi_ddiv+0x48e>
    b280:	e733      	b.n	b0ea <__aeabi_ddiv+0x2f6>
    b282:	9e03      	ldr	r6, [sp, #12]
    b284:	4659      	mov	r1, fp
    b286:	46b4      	mov	ip, r6
    b288:	44e2      	add	sl, ip
    b28a:	45b2      	cmp	sl, r6
    b28c:	41ad      	sbcs	r5, r5
    b28e:	426d      	negs	r5, r5
    b290:	4445      	add	r5, r8
    b292:	18eb      	adds	r3, r5, r3
    b294:	3901      	subs	r1, #1
    b296:	4598      	cmp	r8, r3
    b298:	d207      	bcs.n	b2aa <__aeabi_ddiv+0x4b6>
    b29a:	4298      	cmp	r0, r3
    b29c:	d900      	bls.n	b2a0 <__aeabi_ddiv+0x4ac>
    b29e:	e07f      	b.n	b3a0 <__aeabi_ddiv+0x5ac>
    b2a0:	d100      	bne.n	b2a4 <__aeabi_ddiv+0x4b0>
    b2a2:	e0bc      	b.n	b41e <__aeabi_ddiv+0x62a>
    b2a4:	1a1d      	subs	r5, r3, r0
    b2a6:	468b      	mov	fp, r1
    b2a8:	e71f      	b.n	b0ea <__aeabi_ddiv+0x2f6>
    b2aa:	4598      	cmp	r8, r3
    b2ac:	d1fa      	bne.n	b2a4 <__aeabi_ddiv+0x4b0>
    b2ae:	9d03      	ldr	r5, [sp, #12]
    b2b0:	4555      	cmp	r5, sl
    b2b2:	d9f2      	bls.n	b29a <__aeabi_ddiv+0x4a6>
    b2b4:	4643      	mov	r3, r8
    b2b6:	468b      	mov	fp, r1
    b2b8:	1a1d      	subs	r5, r3, r0
    b2ba:	e716      	b.n	b0ea <__aeabi_ddiv+0x2f6>
    b2bc:	469b      	mov	fp, r3
    b2be:	e6ca      	b.n	b056 <__aeabi_ddiv+0x262>
    b2c0:	0015      	movs	r5, r2
    b2c2:	e6e7      	b.n	b094 <__aeabi_ddiv+0x2a0>
    b2c4:	465a      	mov	r2, fp
    b2c6:	08c9      	lsrs	r1, r1, #3
    b2c8:	0752      	lsls	r2, r2, #29
    b2ca:	430a      	orrs	r2, r1
    b2cc:	055b      	lsls	r3, r3, #21
    b2ce:	4690      	mov	r8, r2
    b2d0:	0d5c      	lsrs	r4, r3, #21
    b2d2:	465a      	mov	r2, fp
    b2d4:	2301      	movs	r3, #1
    b2d6:	9902      	ldr	r1, [sp, #8]
    b2d8:	0252      	lsls	r2, r2, #9
    b2da:	4019      	ands	r1, r3
    b2dc:	0b12      	lsrs	r2, r2, #12
    b2de:	468c      	mov	ip, r1
    b2e0:	e656      	b.n	af90 <__aeabi_ddiv+0x19c>
    b2e2:	2b00      	cmp	r3, #0
    b2e4:	d100      	bne.n	b2e8 <__aeabi_ddiv+0x4f4>
    b2e6:	e76f      	b.n	b1c8 <__aeabi_ddiv+0x3d4>
    b2e8:	4446      	add	r6, r8
    b2ea:	1e4a      	subs	r2, r1, #1
    b2ec:	45b0      	cmp	r8, r6
    b2ee:	d929      	bls.n	b344 <__aeabi_ddiv+0x550>
    b2f0:	0011      	movs	r1, r2
    b2f2:	4286      	cmp	r6, r0
    b2f4:	d000      	beq.n	b2f8 <__aeabi_ddiv+0x504>
    b2f6:	e765      	b.n	b1c4 <__aeabi_ddiv+0x3d0>
    b2f8:	9a03      	ldr	r2, [sp, #12]
    b2fa:	4293      	cmp	r3, r2
    b2fc:	d000      	beq.n	b300 <__aeabi_ddiv+0x50c>
    b2fe:	e761      	b.n	b1c4 <__aeabi_ddiv+0x3d0>
    b300:	e762      	b.n	b1c8 <__aeabi_ddiv+0x3d4>
    b302:	2101      	movs	r1, #1
    b304:	4249      	negs	r1, r1
    b306:	2001      	movs	r0, #1
    b308:	1ac2      	subs	r2, r0, r3
    b30a:	2a38      	cmp	r2, #56	; 0x38
    b30c:	dd21      	ble.n	b352 <__aeabi_ddiv+0x55e>
    b30e:	9b02      	ldr	r3, [sp, #8]
    b310:	4003      	ands	r3, r0
    b312:	469c      	mov	ip, r3
    b314:	e638      	b.n	af88 <__aeabi_ddiv+0x194>
    b316:	220f      	movs	r2, #15
    b318:	400a      	ands	r2, r1
    b31a:	2a04      	cmp	r2, #4
    b31c:	d100      	bne.n	b320 <__aeabi_ddiv+0x52c>
    b31e:	e75b      	b.n	b1d8 <__aeabi_ddiv+0x3e4>
    b320:	000a      	movs	r2, r1
    b322:	1d11      	adds	r1, r2, #4
    b324:	4291      	cmp	r1, r2
    b326:	4192      	sbcs	r2, r2
    b328:	4252      	negs	r2, r2
    b32a:	4493      	add	fp, r2
    b32c:	e754      	b.n	b1d8 <__aeabi_ddiv+0x3e4>
    b32e:	4b47      	ldr	r3, [pc, #284]	; (b44c <__aeabi_ddiv+0x658>)
    b330:	18e3      	adds	r3, r4, r3
    b332:	2b00      	cmp	r3, #0
    b334:	dde5      	ble.n	b302 <__aeabi_ddiv+0x50e>
    b336:	2201      	movs	r2, #1
    b338:	4252      	negs	r2, r2
    b33a:	e7f2      	b.n	b322 <__aeabi_ddiv+0x52e>
    b33c:	001d      	movs	r5, r3
    b33e:	e6fa      	b.n	b136 <__aeabi_ddiv+0x342>
    b340:	469a      	mov	sl, r3
    b342:	e71c      	b.n	b17e <__aeabi_ddiv+0x38a>
    b344:	42b0      	cmp	r0, r6
    b346:	d839      	bhi.n	b3bc <__aeabi_ddiv+0x5c8>
    b348:	d06e      	beq.n	b428 <__aeabi_ddiv+0x634>
    b34a:	0011      	movs	r1, r2
    b34c:	e73a      	b.n	b1c4 <__aeabi_ddiv+0x3d0>
    b34e:	9302      	str	r3, [sp, #8]
    b350:	e73a      	b.n	b1c8 <__aeabi_ddiv+0x3d4>
    b352:	2a1f      	cmp	r2, #31
    b354:	dc3c      	bgt.n	b3d0 <__aeabi_ddiv+0x5dc>
    b356:	2320      	movs	r3, #32
    b358:	1a9b      	subs	r3, r3, r2
    b35a:	000c      	movs	r4, r1
    b35c:	4658      	mov	r0, fp
    b35e:	4099      	lsls	r1, r3
    b360:	4098      	lsls	r0, r3
    b362:	1e4b      	subs	r3, r1, #1
    b364:	4199      	sbcs	r1, r3
    b366:	465b      	mov	r3, fp
    b368:	40d4      	lsrs	r4, r2
    b36a:	40d3      	lsrs	r3, r2
    b36c:	4320      	orrs	r0, r4
    b36e:	4308      	orrs	r0, r1
    b370:	001a      	movs	r2, r3
    b372:	0743      	lsls	r3, r0, #29
    b374:	d009      	beq.n	b38a <__aeabi_ddiv+0x596>
    b376:	230f      	movs	r3, #15
    b378:	4003      	ands	r3, r0
    b37a:	2b04      	cmp	r3, #4
    b37c:	d005      	beq.n	b38a <__aeabi_ddiv+0x596>
    b37e:	0001      	movs	r1, r0
    b380:	1d08      	adds	r0, r1, #4
    b382:	4288      	cmp	r0, r1
    b384:	419b      	sbcs	r3, r3
    b386:	425b      	negs	r3, r3
    b388:	18d2      	adds	r2, r2, r3
    b38a:	0213      	lsls	r3, r2, #8
    b38c:	d53a      	bpl.n	b404 <__aeabi_ddiv+0x610>
    b38e:	2301      	movs	r3, #1
    b390:	9a02      	ldr	r2, [sp, #8]
    b392:	2401      	movs	r4, #1
    b394:	401a      	ands	r2, r3
    b396:	2300      	movs	r3, #0
    b398:	4694      	mov	ip, r2
    b39a:	4698      	mov	r8, r3
    b39c:	2200      	movs	r2, #0
    b39e:	e5f7      	b.n	af90 <__aeabi_ddiv+0x19c>
    b3a0:	2102      	movs	r1, #2
    b3a2:	4249      	negs	r1, r1
    b3a4:	468c      	mov	ip, r1
    b3a6:	9d03      	ldr	r5, [sp, #12]
    b3a8:	44e3      	add	fp, ip
    b3aa:	46ac      	mov	ip, r5
    b3ac:	44e2      	add	sl, ip
    b3ae:	45aa      	cmp	sl, r5
    b3b0:	41ad      	sbcs	r5, r5
    b3b2:	426d      	negs	r5, r5
    b3b4:	4445      	add	r5, r8
    b3b6:	18ed      	adds	r5, r5, r3
    b3b8:	1a2d      	subs	r5, r5, r0
    b3ba:	e696      	b.n	b0ea <__aeabi_ddiv+0x2f6>
    b3bc:	1e8a      	subs	r2, r1, #2
    b3be:	9903      	ldr	r1, [sp, #12]
    b3c0:	004d      	lsls	r5, r1, #1
    b3c2:	428d      	cmp	r5, r1
    b3c4:	4189      	sbcs	r1, r1
    b3c6:	4249      	negs	r1, r1
    b3c8:	4441      	add	r1, r8
    b3ca:	1876      	adds	r6, r6, r1
    b3cc:	9503      	str	r5, [sp, #12]
    b3ce:	e78f      	b.n	b2f0 <__aeabi_ddiv+0x4fc>
    b3d0:	201f      	movs	r0, #31
    b3d2:	4240      	negs	r0, r0
    b3d4:	1ac3      	subs	r3, r0, r3
    b3d6:	4658      	mov	r0, fp
    b3d8:	40d8      	lsrs	r0, r3
    b3da:	0003      	movs	r3, r0
    b3dc:	2a20      	cmp	r2, #32
    b3de:	d028      	beq.n	b432 <__aeabi_ddiv+0x63e>
    b3e0:	2040      	movs	r0, #64	; 0x40
    b3e2:	465d      	mov	r5, fp
    b3e4:	1a82      	subs	r2, r0, r2
    b3e6:	4095      	lsls	r5, r2
    b3e8:	4329      	orrs	r1, r5
    b3ea:	1e4a      	subs	r2, r1, #1
    b3ec:	4191      	sbcs	r1, r2
    b3ee:	4319      	orrs	r1, r3
    b3f0:	2307      	movs	r3, #7
    b3f2:	2200      	movs	r2, #0
    b3f4:	400b      	ands	r3, r1
    b3f6:	d009      	beq.n	b40c <__aeabi_ddiv+0x618>
    b3f8:	230f      	movs	r3, #15
    b3fa:	2200      	movs	r2, #0
    b3fc:	400b      	ands	r3, r1
    b3fe:	0008      	movs	r0, r1
    b400:	2b04      	cmp	r3, #4
    b402:	d1bd      	bne.n	b380 <__aeabi_ddiv+0x58c>
    b404:	0001      	movs	r1, r0
    b406:	0753      	lsls	r3, r2, #29
    b408:	0252      	lsls	r2, r2, #9
    b40a:	0b12      	lsrs	r2, r2, #12
    b40c:	08c9      	lsrs	r1, r1, #3
    b40e:	4319      	orrs	r1, r3
    b410:	2301      	movs	r3, #1
    b412:	4688      	mov	r8, r1
    b414:	9902      	ldr	r1, [sp, #8]
    b416:	2400      	movs	r4, #0
    b418:	4019      	ands	r1, r3
    b41a:	468c      	mov	ip, r1
    b41c:	e5b8      	b.n	af90 <__aeabi_ddiv+0x19c>
    b41e:	4552      	cmp	r2, sl
    b420:	d8be      	bhi.n	b3a0 <__aeabi_ddiv+0x5ac>
    b422:	468b      	mov	fp, r1
    b424:	2500      	movs	r5, #0
    b426:	e660      	b.n	b0ea <__aeabi_ddiv+0x2f6>
    b428:	9d03      	ldr	r5, [sp, #12]
    b42a:	429d      	cmp	r5, r3
    b42c:	d3c6      	bcc.n	b3bc <__aeabi_ddiv+0x5c8>
    b42e:	0011      	movs	r1, r2
    b430:	e762      	b.n	b2f8 <__aeabi_ddiv+0x504>
    b432:	2500      	movs	r5, #0
    b434:	e7d8      	b.n	b3e8 <__aeabi_ddiv+0x5f4>
    b436:	2280      	movs	r2, #128	; 0x80
    b438:	465b      	mov	r3, fp
    b43a:	0312      	lsls	r2, r2, #12
    b43c:	431a      	orrs	r2, r3
    b43e:	9b01      	ldr	r3, [sp, #4]
    b440:	0312      	lsls	r2, r2, #12
    b442:	0b12      	lsrs	r2, r2, #12
    b444:	469c      	mov	ip, r3
    b446:	4688      	mov	r8, r1
    b448:	4c03      	ldr	r4, [pc, #12]	; (b458 <__aeabi_ddiv+0x664>)
    b44a:	e5a1      	b.n	af90 <__aeabi_ddiv+0x19c>
    b44c:	000003ff 	.word	0x000003ff
    b450:	feffffff 	.word	0xfeffffff
    b454:	000007fe 	.word	0x000007fe
    b458:	000007ff 	.word	0x000007ff

0000b45c <__eqdf2>:
    b45c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b45e:	464f      	mov	r7, r9
    b460:	4646      	mov	r6, r8
    b462:	46d6      	mov	lr, sl
    b464:	005c      	lsls	r4, r3, #1
    b466:	b5c0      	push	{r6, r7, lr}
    b468:	031f      	lsls	r7, r3, #12
    b46a:	0fdb      	lsrs	r3, r3, #31
    b46c:	469a      	mov	sl, r3
    b46e:	4b17      	ldr	r3, [pc, #92]	; (b4cc <__eqdf2+0x70>)
    b470:	030e      	lsls	r6, r1, #12
    b472:	004d      	lsls	r5, r1, #1
    b474:	4684      	mov	ip, r0
    b476:	4680      	mov	r8, r0
    b478:	0b36      	lsrs	r6, r6, #12
    b47a:	0d6d      	lsrs	r5, r5, #21
    b47c:	0fc9      	lsrs	r1, r1, #31
    b47e:	4691      	mov	r9, r2
    b480:	0b3f      	lsrs	r7, r7, #12
    b482:	0d64      	lsrs	r4, r4, #21
    b484:	2001      	movs	r0, #1
    b486:	429d      	cmp	r5, r3
    b488:	d008      	beq.n	b49c <__eqdf2+0x40>
    b48a:	429c      	cmp	r4, r3
    b48c:	d001      	beq.n	b492 <__eqdf2+0x36>
    b48e:	42a5      	cmp	r5, r4
    b490:	d00b      	beq.n	b4aa <__eqdf2+0x4e>
    b492:	bc1c      	pop	{r2, r3, r4}
    b494:	4690      	mov	r8, r2
    b496:	4699      	mov	r9, r3
    b498:	46a2      	mov	sl, r4
    b49a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b49c:	4663      	mov	r3, ip
    b49e:	4333      	orrs	r3, r6
    b4a0:	d1f7      	bne.n	b492 <__eqdf2+0x36>
    b4a2:	42ac      	cmp	r4, r5
    b4a4:	d1f5      	bne.n	b492 <__eqdf2+0x36>
    b4a6:	433a      	orrs	r2, r7
    b4a8:	d1f3      	bne.n	b492 <__eqdf2+0x36>
    b4aa:	2001      	movs	r0, #1
    b4ac:	42be      	cmp	r6, r7
    b4ae:	d1f0      	bne.n	b492 <__eqdf2+0x36>
    b4b0:	45c8      	cmp	r8, r9
    b4b2:	d1ee      	bne.n	b492 <__eqdf2+0x36>
    b4b4:	4551      	cmp	r1, sl
    b4b6:	d007      	beq.n	b4c8 <__eqdf2+0x6c>
    b4b8:	2d00      	cmp	r5, #0
    b4ba:	d1ea      	bne.n	b492 <__eqdf2+0x36>
    b4bc:	4663      	mov	r3, ip
    b4be:	431e      	orrs	r6, r3
    b4c0:	0030      	movs	r0, r6
    b4c2:	1e46      	subs	r6, r0, #1
    b4c4:	41b0      	sbcs	r0, r6
    b4c6:	e7e4      	b.n	b492 <__eqdf2+0x36>
    b4c8:	2000      	movs	r0, #0
    b4ca:	e7e2      	b.n	b492 <__eqdf2+0x36>
    b4cc:	000007ff 	.word	0x000007ff

0000b4d0 <__gedf2>:
    b4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4d2:	4645      	mov	r5, r8
    b4d4:	46de      	mov	lr, fp
    b4d6:	4657      	mov	r7, sl
    b4d8:	464e      	mov	r6, r9
    b4da:	b5e0      	push	{r5, r6, r7, lr}
    b4dc:	031f      	lsls	r7, r3, #12
    b4de:	0b3d      	lsrs	r5, r7, #12
    b4e0:	4f2c      	ldr	r7, [pc, #176]	; (b594 <__gedf2+0xc4>)
    b4e2:	030e      	lsls	r6, r1, #12
    b4e4:	004c      	lsls	r4, r1, #1
    b4e6:	46ab      	mov	fp, r5
    b4e8:	005d      	lsls	r5, r3, #1
    b4ea:	4684      	mov	ip, r0
    b4ec:	0b36      	lsrs	r6, r6, #12
    b4ee:	0d64      	lsrs	r4, r4, #21
    b4f0:	0fc9      	lsrs	r1, r1, #31
    b4f2:	4690      	mov	r8, r2
    b4f4:	0d6d      	lsrs	r5, r5, #21
    b4f6:	0fdb      	lsrs	r3, r3, #31
    b4f8:	42bc      	cmp	r4, r7
    b4fa:	d02a      	beq.n	b552 <__gedf2+0x82>
    b4fc:	4f25      	ldr	r7, [pc, #148]	; (b594 <__gedf2+0xc4>)
    b4fe:	42bd      	cmp	r5, r7
    b500:	d02d      	beq.n	b55e <__gedf2+0x8e>
    b502:	2c00      	cmp	r4, #0
    b504:	d10f      	bne.n	b526 <__gedf2+0x56>
    b506:	4330      	orrs	r0, r6
    b508:	0007      	movs	r7, r0
    b50a:	4681      	mov	r9, r0
    b50c:	4278      	negs	r0, r7
    b50e:	4178      	adcs	r0, r7
    b510:	b2c0      	uxtb	r0, r0
    b512:	2d00      	cmp	r5, #0
    b514:	d117      	bne.n	b546 <__gedf2+0x76>
    b516:	465f      	mov	r7, fp
    b518:	433a      	orrs	r2, r7
    b51a:	d114      	bne.n	b546 <__gedf2+0x76>
    b51c:	464b      	mov	r3, r9
    b51e:	2000      	movs	r0, #0
    b520:	2b00      	cmp	r3, #0
    b522:	d00a      	beq.n	b53a <__gedf2+0x6a>
    b524:	e006      	b.n	b534 <__gedf2+0x64>
    b526:	2d00      	cmp	r5, #0
    b528:	d102      	bne.n	b530 <__gedf2+0x60>
    b52a:	4658      	mov	r0, fp
    b52c:	4302      	orrs	r2, r0
    b52e:	d001      	beq.n	b534 <__gedf2+0x64>
    b530:	4299      	cmp	r1, r3
    b532:	d018      	beq.n	b566 <__gedf2+0x96>
    b534:	4248      	negs	r0, r1
    b536:	2101      	movs	r1, #1
    b538:	4308      	orrs	r0, r1
    b53a:	bc3c      	pop	{r2, r3, r4, r5}
    b53c:	4690      	mov	r8, r2
    b53e:	4699      	mov	r9, r3
    b540:	46a2      	mov	sl, r4
    b542:	46ab      	mov	fp, r5
    b544:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b546:	2800      	cmp	r0, #0
    b548:	d0f2      	beq.n	b530 <__gedf2+0x60>
    b54a:	2001      	movs	r0, #1
    b54c:	3b01      	subs	r3, #1
    b54e:	4318      	orrs	r0, r3
    b550:	e7f3      	b.n	b53a <__gedf2+0x6a>
    b552:	0037      	movs	r7, r6
    b554:	4307      	orrs	r7, r0
    b556:	d0d1      	beq.n	b4fc <__gedf2+0x2c>
    b558:	2002      	movs	r0, #2
    b55a:	4240      	negs	r0, r0
    b55c:	e7ed      	b.n	b53a <__gedf2+0x6a>
    b55e:	465f      	mov	r7, fp
    b560:	4317      	orrs	r7, r2
    b562:	d0ce      	beq.n	b502 <__gedf2+0x32>
    b564:	e7f8      	b.n	b558 <__gedf2+0x88>
    b566:	42ac      	cmp	r4, r5
    b568:	dce4      	bgt.n	b534 <__gedf2+0x64>
    b56a:	da03      	bge.n	b574 <__gedf2+0xa4>
    b56c:	1e48      	subs	r0, r1, #1
    b56e:	2101      	movs	r1, #1
    b570:	4308      	orrs	r0, r1
    b572:	e7e2      	b.n	b53a <__gedf2+0x6a>
    b574:	455e      	cmp	r6, fp
    b576:	d8dd      	bhi.n	b534 <__gedf2+0x64>
    b578:	d006      	beq.n	b588 <__gedf2+0xb8>
    b57a:	2000      	movs	r0, #0
    b57c:	455e      	cmp	r6, fp
    b57e:	d2dc      	bcs.n	b53a <__gedf2+0x6a>
    b580:	2301      	movs	r3, #1
    b582:	1e48      	subs	r0, r1, #1
    b584:	4318      	orrs	r0, r3
    b586:	e7d8      	b.n	b53a <__gedf2+0x6a>
    b588:	45c4      	cmp	ip, r8
    b58a:	d8d3      	bhi.n	b534 <__gedf2+0x64>
    b58c:	2000      	movs	r0, #0
    b58e:	45c4      	cmp	ip, r8
    b590:	d3f6      	bcc.n	b580 <__gedf2+0xb0>
    b592:	e7d2      	b.n	b53a <__gedf2+0x6a>
    b594:	000007ff 	.word	0x000007ff

0000b598 <__ledf2>:
    b598:	b5f0      	push	{r4, r5, r6, r7, lr}
    b59a:	464e      	mov	r6, r9
    b59c:	4645      	mov	r5, r8
    b59e:	46de      	mov	lr, fp
    b5a0:	4657      	mov	r7, sl
    b5a2:	005c      	lsls	r4, r3, #1
    b5a4:	b5e0      	push	{r5, r6, r7, lr}
    b5a6:	031f      	lsls	r7, r3, #12
    b5a8:	0fdb      	lsrs	r3, r3, #31
    b5aa:	4699      	mov	r9, r3
    b5ac:	4b2a      	ldr	r3, [pc, #168]	; (b658 <__ledf2+0xc0>)
    b5ae:	030e      	lsls	r6, r1, #12
    b5b0:	004d      	lsls	r5, r1, #1
    b5b2:	0fc9      	lsrs	r1, r1, #31
    b5b4:	4684      	mov	ip, r0
    b5b6:	0b36      	lsrs	r6, r6, #12
    b5b8:	0d6d      	lsrs	r5, r5, #21
    b5ba:	468b      	mov	fp, r1
    b5bc:	4690      	mov	r8, r2
    b5be:	0b3f      	lsrs	r7, r7, #12
    b5c0:	0d64      	lsrs	r4, r4, #21
    b5c2:	429d      	cmp	r5, r3
    b5c4:	d020      	beq.n	b608 <__ledf2+0x70>
    b5c6:	4b24      	ldr	r3, [pc, #144]	; (b658 <__ledf2+0xc0>)
    b5c8:	429c      	cmp	r4, r3
    b5ca:	d022      	beq.n	b612 <__ledf2+0x7a>
    b5cc:	2d00      	cmp	r5, #0
    b5ce:	d112      	bne.n	b5f6 <__ledf2+0x5e>
    b5d0:	4330      	orrs	r0, r6
    b5d2:	4243      	negs	r3, r0
    b5d4:	4143      	adcs	r3, r0
    b5d6:	b2db      	uxtb	r3, r3
    b5d8:	2c00      	cmp	r4, #0
    b5da:	d01f      	beq.n	b61c <__ledf2+0x84>
    b5dc:	2b00      	cmp	r3, #0
    b5de:	d00c      	beq.n	b5fa <__ledf2+0x62>
    b5e0:	464b      	mov	r3, r9
    b5e2:	2001      	movs	r0, #1
    b5e4:	3b01      	subs	r3, #1
    b5e6:	4303      	orrs	r3, r0
    b5e8:	0018      	movs	r0, r3
    b5ea:	bc3c      	pop	{r2, r3, r4, r5}
    b5ec:	4690      	mov	r8, r2
    b5ee:	4699      	mov	r9, r3
    b5f0:	46a2      	mov	sl, r4
    b5f2:	46ab      	mov	fp, r5
    b5f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b5f6:	2c00      	cmp	r4, #0
    b5f8:	d016      	beq.n	b628 <__ledf2+0x90>
    b5fa:	45cb      	cmp	fp, r9
    b5fc:	d017      	beq.n	b62e <__ledf2+0x96>
    b5fe:	465b      	mov	r3, fp
    b600:	4259      	negs	r1, r3
    b602:	2301      	movs	r3, #1
    b604:	430b      	orrs	r3, r1
    b606:	e7ef      	b.n	b5e8 <__ledf2+0x50>
    b608:	0031      	movs	r1, r6
    b60a:	2302      	movs	r3, #2
    b60c:	4301      	orrs	r1, r0
    b60e:	d1eb      	bne.n	b5e8 <__ledf2+0x50>
    b610:	e7d9      	b.n	b5c6 <__ledf2+0x2e>
    b612:	0039      	movs	r1, r7
    b614:	2302      	movs	r3, #2
    b616:	4311      	orrs	r1, r2
    b618:	d1e6      	bne.n	b5e8 <__ledf2+0x50>
    b61a:	e7d7      	b.n	b5cc <__ledf2+0x34>
    b61c:	433a      	orrs	r2, r7
    b61e:	d1dd      	bne.n	b5dc <__ledf2+0x44>
    b620:	2300      	movs	r3, #0
    b622:	2800      	cmp	r0, #0
    b624:	d0e0      	beq.n	b5e8 <__ledf2+0x50>
    b626:	e7ea      	b.n	b5fe <__ledf2+0x66>
    b628:	433a      	orrs	r2, r7
    b62a:	d1e6      	bne.n	b5fa <__ledf2+0x62>
    b62c:	e7e7      	b.n	b5fe <__ledf2+0x66>
    b62e:	42a5      	cmp	r5, r4
    b630:	dce5      	bgt.n	b5fe <__ledf2+0x66>
    b632:	db05      	blt.n	b640 <__ledf2+0xa8>
    b634:	42be      	cmp	r6, r7
    b636:	d8e2      	bhi.n	b5fe <__ledf2+0x66>
    b638:	d007      	beq.n	b64a <__ledf2+0xb2>
    b63a:	2300      	movs	r3, #0
    b63c:	42be      	cmp	r6, r7
    b63e:	d2d3      	bcs.n	b5e8 <__ledf2+0x50>
    b640:	4659      	mov	r1, fp
    b642:	2301      	movs	r3, #1
    b644:	3901      	subs	r1, #1
    b646:	430b      	orrs	r3, r1
    b648:	e7ce      	b.n	b5e8 <__ledf2+0x50>
    b64a:	45c4      	cmp	ip, r8
    b64c:	d8d7      	bhi.n	b5fe <__ledf2+0x66>
    b64e:	2300      	movs	r3, #0
    b650:	45c4      	cmp	ip, r8
    b652:	d3f5      	bcc.n	b640 <__ledf2+0xa8>
    b654:	e7c8      	b.n	b5e8 <__ledf2+0x50>
    b656:	46c0      	nop			; (mov r8, r8)
    b658:	000007ff 	.word	0x000007ff

0000b65c <__aeabi_dmul>:
    b65c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b65e:	4657      	mov	r7, sl
    b660:	4645      	mov	r5, r8
    b662:	46de      	mov	lr, fp
    b664:	464e      	mov	r6, r9
    b666:	b5e0      	push	{r5, r6, r7, lr}
    b668:	030c      	lsls	r4, r1, #12
    b66a:	4698      	mov	r8, r3
    b66c:	004e      	lsls	r6, r1, #1
    b66e:	0b23      	lsrs	r3, r4, #12
    b670:	b087      	sub	sp, #28
    b672:	0007      	movs	r7, r0
    b674:	4692      	mov	sl, r2
    b676:	469b      	mov	fp, r3
    b678:	0d76      	lsrs	r6, r6, #21
    b67a:	0fcd      	lsrs	r5, r1, #31
    b67c:	2e00      	cmp	r6, #0
    b67e:	d06b      	beq.n	b758 <__aeabi_dmul+0xfc>
    b680:	4b6d      	ldr	r3, [pc, #436]	; (b838 <__aeabi_dmul+0x1dc>)
    b682:	429e      	cmp	r6, r3
    b684:	d035      	beq.n	b6f2 <__aeabi_dmul+0x96>
    b686:	2480      	movs	r4, #128	; 0x80
    b688:	465b      	mov	r3, fp
    b68a:	0f42      	lsrs	r2, r0, #29
    b68c:	0424      	lsls	r4, r4, #16
    b68e:	00db      	lsls	r3, r3, #3
    b690:	4314      	orrs	r4, r2
    b692:	431c      	orrs	r4, r3
    b694:	00c3      	lsls	r3, r0, #3
    b696:	4699      	mov	r9, r3
    b698:	4b68      	ldr	r3, [pc, #416]	; (b83c <__aeabi_dmul+0x1e0>)
    b69a:	46a3      	mov	fp, r4
    b69c:	469c      	mov	ip, r3
    b69e:	2300      	movs	r3, #0
    b6a0:	2700      	movs	r7, #0
    b6a2:	4466      	add	r6, ip
    b6a4:	9302      	str	r3, [sp, #8]
    b6a6:	4643      	mov	r3, r8
    b6a8:	031c      	lsls	r4, r3, #12
    b6aa:	005a      	lsls	r2, r3, #1
    b6ac:	0fdb      	lsrs	r3, r3, #31
    b6ae:	4650      	mov	r0, sl
    b6b0:	0b24      	lsrs	r4, r4, #12
    b6b2:	0d52      	lsrs	r2, r2, #21
    b6b4:	4698      	mov	r8, r3
    b6b6:	d100      	bne.n	b6ba <__aeabi_dmul+0x5e>
    b6b8:	e076      	b.n	b7a8 <__aeabi_dmul+0x14c>
    b6ba:	4b5f      	ldr	r3, [pc, #380]	; (b838 <__aeabi_dmul+0x1dc>)
    b6bc:	429a      	cmp	r2, r3
    b6be:	d06d      	beq.n	b79c <__aeabi_dmul+0x140>
    b6c0:	2380      	movs	r3, #128	; 0x80
    b6c2:	0f41      	lsrs	r1, r0, #29
    b6c4:	041b      	lsls	r3, r3, #16
    b6c6:	430b      	orrs	r3, r1
    b6c8:	495c      	ldr	r1, [pc, #368]	; (b83c <__aeabi_dmul+0x1e0>)
    b6ca:	00e4      	lsls	r4, r4, #3
    b6cc:	468c      	mov	ip, r1
    b6ce:	431c      	orrs	r4, r3
    b6d0:	00c3      	lsls	r3, r0, #3
    b6d2:	2000      	movs	r0, #0
    b6d4:	4462      	add	r2, ip
    b6d6:	4641      	mov	r1, r8
    b6d8:	18b6      	adds	r6, r6, r2
    b6da:	4069      	eors	r1, r5
    b6dc:	1c72      	adds	r2, r6, #1
    b6de:	9101      	str	r1, [sp, #4]
    b6e0:	4694      	mov	ip, r2
    b6e2:	4307      	orrs	r7, r0
    b6e4:	2f0f      	cmp	r7, #15
    b6e6:	d900      	bls.n	b6ea <__aeabi_dmul+0x8e>
    b6e8:	e0b0      	b.n	b84c <__aeabi_dmul+0x1f0>
    b6ea:	4a55      	ldr	r2, [pc, #340]	; (b840 <__aeabi_dmul+0x1e4>)
    b6ec:	00bf      	lsls	r7, r7, #2
    b6ee:	59d2      	ldr	r2, [r2, r7]
    b6f0:	4697      	mov	pc, r2
    b6f2:	465b      	mov	r3, fp
    b6f4:	4303      	orrs	r3, r0
    b6f6:	4699      	mov	r9, r3
    b6f8:	d000      	beq.n	b6fc <__aeabi_dmul+0xa0>
    b6fa:	e087      	b.n	b80c <__aeabi_dmul+0x1b0>
    b6fc:	2300      	movs	r3, #0
    b6fe:	469b      	mov	fp, r3
    b700:	3302      	adds	r3, #2
    b702:	2708      	movs	r7, #8
    b704:	9302      	str	r3, [sp, #8]
    b706:	e7ce      	b.n	b6a6 <__aeabi_dmul+0x4a>
    b708:	4642      	mov	r2, r8
    b70a:	9201      	str	r2, [sp, #4]
    b70c:	2802      	cmp	r0, #2
    b70e:	d067      	beq.n	b7e0 <__aeabi_dmul+0x184>
    b710:	2803      	cmp	r0, #3
    b712:	d100      	bne.n	b716 <__aeabi_dmul+0xba>
    b714:	e20e      	b.n	bb34 <__aeabi_dmul+0x4d8>
    b716:	2801      	cmp	r0, #1
    b718:	d000      	beq.n	b71c <__aeabi_dmul+0xc0>
    b71a:	e162      	b.n	b9e2 <__aeabi_dmul+0x386>
    b71c:	2300      	movs	r3, #0
    b71e:	2400      	movs	r4, #0
    b720:	2200      	movs	r2, #0
    b722:	4699      	mov	r9, r3
    b724:	9901      	ldr	r1, [sp, #4]
    b726:	4001      	ands	r1, r0
    b728:	b2cd      	uxtb	r5, r1
    b72a:	2100      	movs	r1, #0
    b72c:	0312      	lsls	r2, r2, #12
    b72e:	0d0b      	lsrs	r3, r1, #20
    b730:	0b12      	lsrs	r2, r2, #12
    b732:	051b      	lsls	r3, r3, #20
    b734:	4313      	orrs	r3, r2
    b736:	4a43      	ldr	r2, [pc, #268]	; (b844 <__aeabi_dmul+0x1e8>)
    b738:	0524      	lsls	r4, r4, #20
    b73a:	4013      	ands	r3, r2
    b73c:	431c      	orrs	r4, r3
    b73e:	0064      	lsls	r4, r4, #1
    b740:	07ed      	lsls	r5, r5, #31
    b742:	0864      	lsrs	r4, r4, #1
    b744:	432c      	orrs	r4, r5
    b746:	4648      	mov	r0, r9
    b748:	0021      	movs	r1, r4
    b74a:	b007      	add	sp, #28
    b74c:	bc3c      	pop	{r2, r3, r4, r5}
    b74e:	4690      	mov	r8, r2
    b750:	4699      	mov	r9, r3
    b752:	46a2      	mov	sl, r4
    b754:	46ab      	mov	fp, r5
    b756:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b758:	4303      	orrs	r3, r0
    b75a:	4699      	mov	r9, r3
    b75c:	d04f      	beq.n	b7fe <__aeabi_dmul+0x1a2>
    b75e:	465b      	mov	r3, fp
    b760:	2b00      	cmp	r3, #0
    b762:	d100      	bne.n	b766 <__aeabi_dmul+0x10a>
    b764:	e189      	b.n	ba7a <__aeabi_dmul+0x41e>
    b766:	4658      	mov	r0, fp
    b768:	f000 fd94 	bl	c294 <__clzsi2>
    b76c:	0003      	movs	r3, r0
    b76e:	3b0b      	subs	r3, #11
    b770:	2b1c      	cmp	r3, #28
    b772:	dd00      	ble.n	b776 <__aeabi_dmul+0x11a>
    b774:	e17a      	b.n	ba6c <__aeabi_dmul+0x410>
    b776:	221d      	movs	r2, #29
    b778:	1ad3      	subs	r3, r2, r3
    b77a:	003a      	movs	r2, r7
    b77c:	0001      	movs	r1, r0
    b77e:	465c      	mov	r4, fp
    b780:	40da      	lsrs	r2, r3
    b782:	3908      	subs	r1, #8
    b784:	408c      	lsls	r4, r1
    b786:	0013      	movs	r3, r2
    b788:	408f      	lsls	r7, r1
    b78a:	4323      	orrs	r3, r4
    b78c:	469b      	mov	fp, r3
    b78e:	46b9      	mov	r9, r7
    b790:	2300      	movs	r3, #0
    b792:	4e2d      	ldr	r6, [pc, #180]	; (b848 <__aeabi_dmul+0x1ec>)
    b794:	2700      	movs	r7, #0
    b796:	1a36      	subs	r6, r6, r0
    b798:	9302      	str	r3, [sp, #8]
    b79a:	e784      	b.n	b6a6 <__aeabi_dmul+0x4a>
    b79c:	4653      	mov	r3, sl
    b79e:	4323      	orrs	r3, r4
    b7a0:	d12a      	bne.n	b7f8 <__aeabi_dmul+0x19c>
    b7a2:	2400      	movs	r4, #0
    b7a4:	2002      	movs	r0, #2
    b7a6:	e796      	b.n	b6d6 <__aeabi_dmul+0x7a>
    b7a8:	4653      	mov	r3, sl
    b7aa:	4323      	orrs	r3, r4
    b7ac:	d020      	beq.n	b7f0 <__aeabi_dmul+0x194>
    b7ae:	2c00      	cmp	r4, #0
    b7b0:	d100      	bne.n	b7b4 <__aeabi_dmul+0x158>
    b7b2:	e157      	b.n	ba64 <__aeabi_dmul+0x408>
    b7b4:	0020      	movs	r0, r4
    b7b6:	f000 fd6d 	bl	c294 <__clzsi2>
    b7ba:	0003      	movs	r3, r0
    b7bc:	3b0b      	subs	r3, #11
    b7be:	2b1c      	cmp	r3, #28
    b7c0:	dd00      	ble.n	b7c4 <__aeabi_dmul+0x168>
    b7c2:	e149      	b.n	ba58 <__aeabi_dmul+0x3fc>
    b7c4:	211d      	movs	r1, #29
    b7c6:	1acb      	subs	r3, r1, r3
    b7c8:	4651      	mov	r1, sl
    b7ca:	0002      	movs	r2, r0
    b7cc:	40d9      	lsrs	r1, r3
    b7ce:	4653      	mov	r3, sl
    b7d0:	3a08      	subs	r2, #8
    b7d2:	4094      	lsls	r4, r2
    b7d4:	4093      	lsls	r3, r2
    b7d6:	430c      	orrs	r4, r1
    b7d8:	4a1b      	ldr	r2, [pc, #108]	; (b848 <__aeabi_dmul+0x1ec>)
    b7da:	1a12      	subs	r2, r2, r0
    b7dc:	2000      	movs	r0, #0
    b7de:	e77a      	b.n	b6d6 <__aeabi_dmul+0x7a>
    b7e0:	2501      	movs	r5, #1
    b7e2:	9b01      	ldr	r3, [sp, #4]
    b7e4:	4c14      	ldr	r4, [pc, #80]	; (b838 <__aeabi_dmul+0x1dc>)
    b7e6:	401d      	ands	r5, r3
    b7e8:	2300      	movs	r3, #0
    b7ea:	2200      	movs	r2, #0
    b7ec:	4699      	mov	r9, r3
    b7ee:	e79c      	b.n	b72a <__aeabi_dmul+0xce>
    b7f0:	2400      	movs	r4, #0
    b7f2:	2200      	movs	r2, #0
    b7f4:	2001      	movs	r0, #1
    b7f6:	e76e      	b.n	b6d6 <__aeabi_dmul+0x7a>
    b7f8:	4653      	mov	r3, sl
    b7fa:	2003      	movs	r0, #3
    b7fc:	e76b      	b.n	b6d6 <__aeabi_dmul+0x7a>
    b7fe:	2300      	movs	r3, #0
    b800:	469b      	mov	fp, r3
    b802:	3301      	adds	r3, #1
    b804:	2704      	movs	r7, #4
    b806:	2600      	movs	r6, #0
    b808:	9302      	str	r3, [sp, #8]
    b80a:	e74c      	b.n	b6a6 <__aeabi_dmul+0x4a>
    b80c:	2303      	movs	r3, #3
    b80e:	4681      	mov	r9, r0
    b810:	270c      	movs	r7, #12
    b812:	9302      	str	r3, [sp, #8]
    b814:	e747      	b.n	b6a6 <__aeabi_dmul+0x4a>
    b816:	2280      	movs	r2, #128	; 0x80
    b818:	2300      	movs	r3, #0
    b81a:	2500      	movs	r5, #0
    b81c:	0312      	lsls	r2, r2, #12
    b81e:	4699      	mov	r9, r3
    b820:	4c05      	ldr	r4, [pc, #20]	; (b838 <__aeabi_dmul+0x1dc>)
    b822:	e782      	b.n	b72a <__aeabi_dmul+0xce>
    b824:	465c      	mov	r4, fp
    b826:	464b      	mov	r3, r9
    b828:	9802      	ldr	r0, [sp, #8]
    b82a:	e76f      	b.n	b70c <__aeabi_dmul+0xb0>
    b82c:	465c      	mov	r4, fp
    b82e:	464b      	mov	r3, r9
    b830:	9501      	str	r5, [sp, #4]
    b832:	9802      	ldr	r0, [sp, #8]
    b834:	e76a      	b.n	b70c <__aeabi_dmul+0xb0>
    b836:	46c0      	nop			; (mov r8, r8)
    b838:	000007ff 	.word	0x000007ff
    b83c:	fffffc01 	.word	0xfffffc01
    b840:	0000d96c 	.word	0x0000d96c
    b844:	800fffff 	.word	0x800fffff
    b848:	fffffc0d 	.word	0xfffffc0d
    b84c:	464a      	mov	r2, r9
    b84e:	4649      	mov	r1, r9
    b850:	0c17      	lsrs	r7, r2, #16
    b852:	0c1a      	lsrs	r2, r3, #16
    b854:	041b      	lsls	r3, r3, #16
    b856:	0c1b      	lsrs	r3, r3, #16
    b858:	0408      	lsls	r0, r1, #16
    b85a:	0019      	movs	r1, r3
    b85c:	0c00      	lsrs	r0, r0, #16
    b85e:	4341      	muls	r1, r0
    b860:	0015      	movs	r5, r2
    b862:	4688      	mov	r8, r1
    b864:	0019      	movs	r1, r3
    b866:	437d      	muls	r5, r7
    b868:	4379      	muls	r1, r7
    b86a:	9503      	str	r5, [sp, #12]
    b86c:	4689      	mov	r9, r1
    b86e:	0029      	movs	r1, r5
    b870:	0015      	movs	r5, r2
    b872:	4345      	muls	r5, r0
    b874:	444d      	add	r5, r9
    b876:	9502      	str	r5, [sp, #8]
    b878:	4645      	mov	r5, r8
    b87a:	0c2d      	lsrs	r5, r5, #16
    b87c:	46aa      	mov	sl, r5
    b87e:	9d02      	ldr	r5, [sp, #8]
    b880:	4455      	add	r5, sl
    b882:	45a9      	cmp	r9, r5
    b884:	d906      	bls.n	b894 <__aeabi_dmul+0x238>
    b886:	468a      	mov	sl, r1
    b888:	2180      	movs	r1, #128	; 0x80
    b88a:	0249      	lsls	r1, r1, #9
    b88c:	4689      	mov	r9, r1
    b88e:	44ca      	add	sl, r9
    b890:	4651      	mov	r1, sl
    b892:	9103      	str	r1, [sp, #12]
    b894:	0c29      	lsrs	r1, r5, #16
    b896:	9104      	str	r1, [sp, #16]
    b898:	4641      	mov	r1, r8
    b89a:	0409      	lsls	r1, r1, #16
    b89c:	042d      	lsls	r5, r5, #16
    b89e:	0c09      	lsrs	r1, r1, #16
    b8a0:	4688      	mov	r8, r1
    b8a2:	0029      	movs	r1, r5
    b8a4:	0c25      	lsrs	r5, r4, #16
    b8a6:	0424      	lsls	r4, r4, #16
    b8a8:	4441      	add	r1, r8
    b8aa:	0c24      	lsrs	r4, r4, #16
    b8ac:	9105      	str	r1, [sp, #20]
    b8ae:	0021      	movs	r1, r4
    b8b0:	4341      	muls	r1, r0
    b8b2:	4688      	mov	r8, r1
    b8b4:	0021      	movs	r1, r4
    b8b6:	4379      	muls	r1, r7
    b8b8:	468a      	mov	sl, r1
    b8ba:	4368      	muls	r0, r5
    b8bc:	4641      	mov	r1, r8
    b8be:	4450      	add	r0, sl
    b8c0:	4681      	mov	r9, r0
    b8c2:	0c08      	lsrs	r0, r1, #16
    b8c4:	4448      	add	r0, r9
    b8c6:	436f      	muls	r7, r5
    b8c8:	4582      	cmp	sl, r0
    b8ca:	d903      	bls.n	b8d4 <__aeabi_dmul+0x278>
    b8cc:	2180      	movs	r1, #128	; 0x80
    b8ce:	0249      	lsls	r1, r1, #9
    b8d0:	4689      	mov	r9, r1
    b8d2:	444f      	add	r7, r9
    b8d4:	0c01      	lsrs	r1, r0, #16
    b8d6:	4689      	mov	r9, r1
    b8d8:	0039      	movs	r1, r7
    b8da:	4449      	add	r1, r9
    b8dc:	9102      	str	r1, [sp, #8]
    b8de:	4641      	mov	r1, r8
    b8e0:	040f      	lsls	r7, r1, #16
    b8e2:	9904      	ldr	r1, [sp, #16]
    b8e4:	0c3f      	lsrs	r7, r7, #16
    b8e6:	4688      	mov	r8, r1
    b8e8:	0400      	lsls	r0, r0, #16
    b8ea:	19c0      	adds	r0, r0, r7
    b8ec:	4480      	add	r8, r0
    b8ee:	4641      	mov	r1, r8
    b8f0:	9104      	str	r1, [sp, #16]
    b8f2:	4659      	mov	r1, fp
    b8f4:	0c0f      	lsrs	r7, r1, #16
    b8f6:	0409      	lsls	r1, r1, #16
    b8f8:	0c09      	lsrs	r1, r1, #16
    b8fa:	4688      	mov	r8, r1
    b8fc:	4359      	muls	r1, r3
    b8fe:	468a      	mov	sl, r1
    b900:	0039      	movs	r1, r7
    b902:	4351      	muls	r1, r2
    b904:	4689      	mov	r9, r1
    b906:	4641      	mov	r1, r8
    b908:	434a      	muls	r2, r1
    b90a:	4651      	mov	r1, sl
    b90c:	0c09      	lsrs	r1, r1, #16
    b90e:	468b      	mov	fp, r1
    b910:	437b      	muls	r3, r7
    b912:	18d2      	adds	r2, r2, r3
    b914:	445a      	add	r2, fp
    b916:	4293      	cmp	r3, r2
    b918:	d903      	bls.n	b922 <__aeabi_dmul+0x2c6>
    b91a:	2380      	movs	r3, #128	; 0x80
    b91c:	025b      	lsls	r3, r3, #9
    b91e:	469b      	mov	fp, r3
    b920:	44d9      	add	r9, fp
    b922:	4651      	mov	r1, sl
    b924:	0409      	lsls	r1, r1, #16
    b926:	0c09      	lsrs	r1, r1, #16
    b928:	468a      	mov	sl, r1
    b92a:	4641      	mov	r1, r8
    b92c:	4361      	muls	r1, r4
    b92e:	437c      	muls	r4, r7
    b930:	0c13      	lsrs	r3, r2, #16
    b932:	0412      	lsls	r2, r2, #16
    b934:	444b      	add	r3, r9
    b936:	4452      	add	r2, sl
    b938:	46a1      	mov	r9, r4
    b93a:	468a      	mov	sl, r1
    b93c:	003c      	movs	r4, r7
    b93e:	4641      	mov	r1, r8
    b940:	436c      	muls	r4, r5
    b942:	434d      	muls	r5, r1
    b944:	4651      	mov	r1, sl
    b946:	444d      	add	r5, r9
    b948:	0c0f      	lsrs	r7, r1, #16
    b94a:	197d      	adds	r5, r7, r5
    b94c:	45a9      	cmp	r9, r5
    b94e:	d903      	bls.n	b958 <__aeabi_dmul+0x2fc>
    b950:	2180      	movs	r1, #128	; 0x80
    b952:	0249      	lsls	r1, r1, #9
    b954:	4688      	mov	r8, r1
    b956:	4444      	add	r4, r8
    b958:	9f04      	ldr	r7, [sp, #16]
    b95a:	9903      	ldr	r1, [sp, #12]
    b95c:	46b8      	mov	r8, r7
    b95e:	4441      	add	r1, r8
    b960:	468b      	mov	fp, r1
    b962:	4583      	cmp	fp, r0
    b964:	4180      	sbcs	r0, r0
    b966:	4241      	negs	r1, r0
    b968:	4688      	mov	r8, r1
    b96a:	4651      	mov	r1, sl
    b96c:	0408      	lsls	r0, r1, #16
    b96e:	042f      	lsls	r7, r5, #16
    b970:	0c00      	lsrs	r0, r0, #16
    b972:	183f      	adds	r7, r7, r0
    b974:	4658      	mov	r0, fp
    b976:	9902      	ldr	r1, [sp, #8]
    b978:	1810      	adds	r0, r2, r0
    b97a:	4689      	mov	r9, r1
    b97c:	4290      	cmp	r0, r2
    b97e:	4192      	sbcs	r2, r2
    b980:	444f      	add	r7, r9
    b982:	46ba      	mov	sl, r7
    b984:	4252      	negs	r2, r2
    b986:	4699      	mov	r9, r3
    b988:	4693      	mov	fp, r2
    b98a:	44c2      	add	sl, r8
    b98c:	44d1      	add	r9, sl
    b98e:	44cb      	add	fp, r9
    b990:	428f      	cmp	r7, r1
    b992:	41bf      	sbcs	r7, r7
    b994:	45c2      	cmp	sl, r8
    b996:	4189      	sbcs	r1, r1
    b998:	4599      	cmp	r9, r3
    b99a:	419b      	sbcs	r3, r3
    b99c:	4593      	cmp	fp, r2
    b99e:	4192      	sbcs	r2, r2
    b9a0:	427f      	negs	r7, r7
    b9a2:	4249      	negs	r1, r1
    b9a4:	0c2d      	lsrs	r5, r5, #16
    b9a6:	4252      	negs	r2, r2
    b9a8:	430f      	orrs	r7, r1
    b9aa:	425b      	negs	r3, r3
    b9ac:	4313      	orrs	r3, r2
    b9ae:	197f      	adds	r7, r7, r5
    b9b0:	18ff      	adds	r7, r7, r3
    b9b2:	465b      	mov	r3, fp
    b9b4:	193c      	adds	r4, r7, r4
    b9b6:	0ddb      	lsrs	r3, r3, #23
    b9b8:	9a05      	ldr	r2, [sp, #20]
    b9ba:	0264      	lsls	r4, r4, #9
    b9bc:	431c      	orrs	r4, r3
    b9be:	0243      	lsls	r3, r0, #9
    b9c0:	4313      	orrs	r3, r2
    b9c2:	1e5d      	subs	r5, r3, #1
    b9c4:	41ab      	sbcs	r3, r5
    b9c6:	465a      	mov	r2, fp
    b9c8:	0dc0      	lsrs	r0, r0, #23
    b9ca:	4303      	orrs	r3, r0
    b9cc:	0252      	lsls	r2, r2, #9
    b9ce:	4313      	orrs	r3, r2
    b9d0:	01e2      	lsls	r2, r4, #7
    b9d2:	d556      	bpl.n	ba82 <__aeabi_dmul+0x426>
    b9d4:	2001      	movs	r0, #1
    b9d6:	085a      	lsrs	r2, r3, #1
    b9d8:	4003      	ands	r3, r0
    b9da:	4313      	orrs	r3, r2
    b9dc:	07e2      	lsls	r2, r4, #31
    b9de:	4313      	orrs	r3, r2
    b9e0:	0864      	lsrs	r4, r4, #1
    b9e2:	485a      	ldr	r0, [pc, #360]	; (bb4c <__aeabi_dmul+0x4f0>)
    b9e4:	4460      	add	r0, ip
    b9e6:	2800      	cmp	r0, #0
    b9e8:	dd4d      	ble.n	ba86 <__aeabi_dmul+0x42a>
    b9ea:	075a      	lsls	r2, r3, #29
    b9ec:	d009      	beq.n	ba02 <__aeabi_dmul+0x3a6>
    b9ee:	220f      	movs	r2, #15
    b9f0:	401a      	ands	r2, r3
    b9f2:	2a04      	cmp	r2, #4
    b9f4:	d005      	beq.n	ba02 <__aeabi_dmul+0x3a6>
    b9f6:	1d1a      	adds	r2, r3, #4
    b9f8:	429a      	cmp	r2, r3
    b9fa:	419b      	sbcs	r3, r3
    b9fc:	425b      	negs	r3, r3
    b9fe:	18e4      	adds	r4, r4, r3
    ba00:	0013      	movs	r3, r2
    ba02:	01e2      	lsls	r2, r4, #7
    ba04:	d504      	bpl.n	ba10 <__aeabi_dmul+0x3b4>
    ba06:	2080      	movs	r0, #128	; 0x80
    ba08:	4a51      	ldr	r2, [pc, #324]	; (bb50 <__aeabi_dmul+0x4f4>)
    ba0a:	00c0      	lsls	r0, r0, #3
    ba0c:	4014      	ands	r4, r2
    ba0e:	4460      	add	r0, ip
    ba10:	4a50      	ldr	r2, [pc, #320]	; (bb54 <__aeabi_dmul+0x4f8>)
    ba12:	4290      	cmp	r0, r2
    ba14:	dd00      	ble.n	ba18 <__aeabi_dmul+0x3bc>
    ba16:	e6e3      	b.n	b7e0 <__aeabi_dmul+0x184>
    ba18:	2501      	movs	r5, #1
    ba1a:	08db      	lsrs	r3, r3, #3
    ba1c:	0762      	lsls	r2, r4, #29
    ba1e:	431a      	orrs	r2, r3
    ba20:	0264      	lsls	r4, r4, #9
    ba22:	9b01      	ldr	r3, [sp, #4]
    ba24:	4691      	mov	r9, r2
    ba26:	0b22      	lsrs	r2, r4, #12
    ba28:	0544      	lsls	r4, r0, #21
    ba2a:	0d64      	lsrs	r4, r4, #21
    ba2c:	401d      	ands	r5, r3
    ba2e:	e67c      	b.n	b72a <__aeabi_dmul+0xce>
    ba30:	2280      	movs	r2, #128	; 0x80
    ba32:	4659      	mov	r1, fp
    ba34:	0312      	lsls	r2, r2, #12
    ba36:	4211      	tst	r1, r2
    ba38:	d008      	beq.n	ba4c <__aeabi_dmul+0x3f0>
    ba3a:	4214      	tst	r4, r2
    ba3c:	d106      	bne.n	ba4c <__aeabi_dmul+0x3f0>
    ba3e:	4322      	orrs	r2, r4
    ba40:	0312      	lsls	r2, r2, #12
    ba42:	0b12      	lsrs	r2, r2, #12
    ba44:	4645      	mov	r5, r8
    ba46:	4699      	mov	r9, r3
    ba48:	4c43      	ldr	r4, [pc, #268]	; (bb58 <__aeabi_dmul+0x4fc>)
    ba4a:	e66e      	b.n	b72a <__aeabi_dmul+0xce>
    ba4c:	465b      	mov	r3, fp
    ba4e:	431a      	orrs	r2, r3
    ba50:	0312      	lsls	r2, r2, #12
    ba52:	0b12      	lsrs	r2, r2, #12
    ba54:	4c40      	ldr	r4, [pc, #256]	; (bb58 <__aeabi_dmul+0x4fc>)
    ba56:	e668      	b.n	b72a <__aeabi_dmul+0xce>
    ba58:	0003      	movs	r3, r0
    ba5a:	4654      	mov	r4, sl
    ba5c:	3b28      	subs	r3, #40	; 0x28
    ba5e:	409c      	lsls	r4, r3
    ba60:	2300      	movs	r3, #0
    ba62:	e6b9      	b.n	b7d8 <__aeabi_dmul+0x17c>
    ba64:	f000 fc16 	bl	c294 <__clzsi2>
    ba68:	3020      	adds	r0, #32
    ba6a:	e6a6      	b.n	b7ba <__aeabi_dmul+0x15e>
    ba6c:	0003      	movs	r3, r0
    ba6e:	3b28      	subs	r3, #40	; 0x28
    ba70:	409f      	lsls	r7, r3
    ba72:	2300      	movs	r3, #0
    ba74:	46bb      	mov	fp, r7
    ba76:	4699      	mov	r9, r3
    ba78:	e68a      	b.n	b790 <__aeabi_dmul+0x134>
    ba7a:	f000 fc0b 	bl	c294 <__clzsi2>
    ba7e:	3020      	adds	r0, #32
    ba80:	e674      	b.n	b76c <__aeabi_dmul+0x110>
    ba82:	46b4      	mov	ip, r6
    ba84:	e7ad      	b.n	b9e2 <__aeabi_dmul+0x386>
    ba86:	2501      	movs	r5, #1
    ba88:	1a2a      	subs	r2, r5, r0
    ba8a:	2a38      	cmp	r2, #56	; 0x38
    ba8c:	dd06      	ble.n	ba9c <__aeabi_dmul+0x440>
    ba8e:	9b01      	ldr	r3, [sp, #4]
    ba90:	2400      	movs	r4, #0
    ba92:	401d      	ands	r5, r3
    ba94:	2300      	movs	r3, #0
    ba96:	2200      	movs	r2, #0
    ba98:	4699      	mov	r9, r3
    ba9a:	e646      	b.n	b72a <__aeabi_dmul+0xce>
    ba9c:	2a1f      	cmp	r2, #31
    ba9e:	dc21      	bgt.n	bae4 <__aeabi_dmul+0x488>
    baa0:	2520      	movs	r5, #32
    baa2:	0020      	movs	r0, r4
    baa4:	1aad      	subs	r5, r5, r2
    baa6:	001e      	movs	r6, r3
    baa8:	40ab      	lsls	r3, r5
    baaa:	40a8      	lsls	r0, r5
    baac:	40d6      	lsrs	r6, r2
    baae:	1e5d      	subs	r5, r3, #1
    bab0:	41ab      	sbcs	r3, r5
    bab2:	4330      	orrs	r0, r6
    bab4:	4318      	orrs	r0, r3
    bab6:	40d4      	lsrs	r4, r2
    bab8:	0743      	lsls	r3, r0, #29
    baba:	d009      	beq.n	bad0 <__aeabi_dmul+0x474>
    babc:	230f      	movs	r3, #15
    babe:	4003      	ands	r3, r0
    bac0:	2b04      	cmp	r3, #4
    bac2:	d005      	beq.n	bad0 <__aeabi_dmul+0x474>
    bac4:	0003      	movs	r3, r0
    bac6:	1d18      	adds	r0, r3, #4
    bac8:	4298      	cmp	r0, r3
    baca:	419b      	sbcs	r3, r3
    bacc:	425b      	negs	r3, r3
    bace:	18e4      	adds	r4, r4, r3
    bad0:	0223      	lsls	r3, r4, #8
    bad2:	d521      	bpl.n	bb18 <__aeabi_dmul+0x4bc>
    bad4:	2501      	movs	r5, #1
    bad6:	9b01      	ldr	r3, [sp, #4]
    bad8:	2401      	movs	r4, #1
    bada:	401d      	ands	r5, r3
    badc:	2300      	movs	r3, #0
    bade:	2200      	movs	r2, #0
    bae0:	4699      	mov	r9, r3
    bae2:	e622      	b.n	b72a <__aeabi_dmul+0xce>
    bae4:	251f      	movs	r5, #31
    bae6:	0021      	movs	r1, r4
    bae8:	426d      	negs	r5, r5
    baea:	1a28      	subs	r0, r5, r0
    baec:	40c1      	lsrs	r1, r0
    baee:	0008      	movs	r0, r1
    baf0:	2a20      	cmp	r2, #32
    baf2:	d01d      	beq.n	bb30 <__aeabi_dmul+0x4d4>
    baf4:	355f      	adds	r5, #95	; 0x5f
    baf6:	1aaa      	subs	r2, r5, r2
    baf8:	4094      	lsls	r4, r2
    bafa:	4323      	orrs	r3, r4
    bafc:	1e5c      	subs	r4, r3, #1
    bafe:	41a3      	sbcs	r3, r4
    bb00:	2507      	movs	r5, #7
    bb02:	4303      	orrs	r3, r0
    bb04:	401d      	ands	r5, r3
    bb06:	2200      	movs	r2, #0
    bb08:	2d00      	cmp	r5, #0
    bb0a:	d009      	beq.n	bb20 <__aeabi_dmul+0x4c4>
    bb0c:	220f      	movs	r2, #15
    bb0e:	2400      	movs	r4, #0
    bb10:	401a      	ands	r2, r3
    bb12:	0018      	movs	r0, r3
    bb14:	2a04      	cmp	r2, #4
    bb16:	d1d6      	bne.n	bac6 <__aeabi_dmul+0x46a>
    bb18:	0003      	movs	r3, r0
    bb1a:	0765      	lsls	r5, r4, #29
    bb1c:	0264      	lsls	r4, r4, #9
    bb1e:	0b22      	lsrs	r2, r4, #12
    bb20:	08db      	lsrs	r3, r3, #3
    bb22:	432b      	orrs	r3, r5
    bb24:	2501      	movs	r5, #1
    bb26:	4699      	mov	r9, r3
    bb28:	9b01      	ldr	r3, [sp, #4]
    bb2a:	2400      	movs	r4, #0
    bb2c:	401d      	ands	r5, r3
    bb2e:	e5fc      	b.n	b72a <__aeabi_dmul+0xce>
    bb30:	2400      	movs	r4, #0
    bb32:	e7e2      	b.n	bafa <__aeabi_dmul+0x49e>
    bb34:	2280      	movs	r2, #128	; 0x80
    bb36:	2501      	movs	r5, #1
    bb38:	0312      	lsls	r2, r2, #12
    bb3a:	4322      	orrs	r2, r4
    bb3c:	9901      	ldr	r1, [sp, #4]
    bb3e:	0312      	lsls	r2, r2, #12
    bb40:	0b12      	lsrs	r2, r2, #12
    bb42:	400d      	ands	r5, r1
    bb44:	4699      	mov	r9, r3
    bb46:	4c04      	ldr	r4, [pc, #16]	; (bb58 <__aeabi_dmul+0x4fc>)
    bb48:	e5ef      	b.n	b72a <__aeabi_dmul+0xce>
    bb4a:	46c0      	nop			; (mov r8, r8)
    bb4c:	000003ff 	.word	0x000003ff
    bb50:	feffffff 	.word	0xfeffffff
    bb54:	000007fe 	.word	0x000007fe
    bb58:	000007ff 	.word	0x000007ff

0000bb5c <__aeabi_dsub>:
    bb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb5e:	4646      	mov	r6, r8
    bb60:	46d6      	mov	lr, sl
    bb62:	464f      	mov	r7, r9
    bb64:	030c      	lsls	r4, r1, #12
    bb66:	b5c0      	push	{r6, r7, lr}
    bb68:	0fcd      	lsrs	r5, r1, #31
    bb6a:	004e      	lsls	r6, r1, #1
    bb6c:	0a61      	lsrs	r1, r4, #9
    bb6e:	0f44      	lsrs	r4, r0, #29
    bb70:	430c      	orrs	r4, r1
    bb72:	00c1      	lsls	r1, r0, #3
    bb74:	0058      	lsls	r0, r3, #1
    bb76:	0d40      	lsrs	r0, r0, #21
    bb78:	4684      	mov	ip, r0
    bb7a:	468a      	mov	sl, r1
    bb7c:	000f      	movs	r7, r1
    bb7e:	0319      	lsls	r1, r3, #12
    bb80:	0f50      	lsrs	r0, r2, #29
    bb82:	0a49      	lsrs	r1, r1, #9
    bb84:	4301      	orrs	r1, r0
    bb86:	48c6      	ldr	r0, [pc, #792]	; (bea0 <__aeabi_dsub+0x344>)
    bb88:	0d76      	lsrs	r6, r6, #21
    bb8a:	46a8      	mov	r8, r5
    bb8c:	0fdb      	lsrs	r3, r3, #31
    bb8e:	00d2      	lsls	r2, r2, #3
    bb90:	4584      	cmp	ip, r0
    bb92:	d100      	bne.n	bb96 <__aeabi_dsub+0x3a>
    bb94:	e0d8      	b.n	bd48 <__aeabi_dsub+0x1ec>
    bb96:	2001      	movs	r0, #1
    bb98:	4043      	eors	r3, r0
    bb9a:	42ab      	cmp	r3, r5
    bb9c:	d100      	bne.n	bba0 <__aeabi_dsub+0x44>
    bb9e:	e0a6      	b.n	bcee <__aeabi_dsub+0x192>
    bba0:	4660      	mov	r0, ip
    bba2:	1a35      	subs	r5, r6, r0
    bba4:	2d00      	cmp	r5, #0
    bba6:	dc00      	bgt.n	bbaa <__aeabi_dsub+0x4e>
    bba8:	e105      	b.n	bdb6 <__aeabi_dsub+0x25a>
    bbaa:	2800      	cmp	r0, #0
    bbac:	d110      	bne.n	bbd0 <__aeabi_dsub+0x74>
    bbae:	000b      	movs	r3, r1
    bbb0:	4313      	orrs	r3, r2
    bbb2:	d100      	bne.n	bbb6 <__aeabi_dsub+0x5a>
    bbb4:	e0d7      	b.n	bd66 <__aeabi_dsub+0x20a>
    bbb6:	1e6b      	subs	r3, r5, #1
    bbb8:	2b00      	cmp	r3, #0
    bbba:	d000      	beq.n	bbbe <__aeabi_dsub+0x62>
    bbbc:	e14b      	b.n	be56 <__aeabi_dsub+0x2fa>
    bbbe:	4653      	mov	r3, sl
    bbc0:	1a9f      	subs	r7, r3, r2
    bbc2:	45ba      	cmp	sl, r7
    bbc4:	4180      	sbcs	r0, r0
    bbc6:	1a64      	subs	r4, r4, r1
    bbc8:	4240      	negs	r0, r0
    bbca:	1a24      	subs	r4, r4, r0
    bbcc:	2601      	movs	r6, #1
    bbce:	e01e      	b.n	bc0e <__aeabi_dsub+0xb2>
    bbd0:	4bb3      	ldr	r3, [pc, #716]	; (bea0 <__aeabi_dsub+0x344>)
    bbd2:	429e      	cmp	r6, r3
    bbd4:	d048      	beq.n	bc68 <__aeabi_dsub+0x10c>
    bbd6:	2380      	movs	r3, #128	; 0x80
    bbd8:	041b      	lsls	r3, r3, #16
    bbda:	4319      	orrs	r1, r3
    bbdc:	2d38      	cmp	r5, #56	; 0x38
    bbde:	dd00      	ble.n	bbe2 <__aeabi_dsub+0x86>
    bbe0:	e119      	b.n	be16 <__aeabi_dsub+0x2ba>
    bbe2:	2d1f      	cmp	r5, #31
    bbe4:	dd00      	ble.n	bbe8 <__aeabi_dsub+0x8c>
    bbe6:	e14c      	b.n	be82 <__aeabi_dsub+0x326>
    bbe8:	2320      	movs	r3, #32
    bbea:	000f      	movs	r7, r1
    bbec:	1b5b      	subs	r3, r3, r5
    bbee:	0010      	movs	r0, r2
    bbf0:	409a      	lsls	r2, r3
    bbf2:	409f      	lsls	r7, r3
    bbf4:	40e8      	lsrs	r0, r5
    bbf6:	1e53      	subs	r3, r2, #1
    bbf8:	419a      	sbcs	r2, r3
    bbfa:	40e9      	lsrs	r1, r5
    bbfc:	4307      	orrs	r7, r0
    bbfe:	4317      	orrs	r7, r2
    bc00:	4653      	mov	r3, sl
    bc02:	1bdf      	subs	r7, r3, r7
    bc04:	1a61      	subs	r1, r4, r1
    bc06:	45ba      	cmp	sl, r7
    bc08:	41a4      	sbcs	r4, r4
    bc0a:	4264      	negs	r4, r4
    bc0c:	1b0c      	subs	r4, r1, r4
    bc0e:	0223      	lsls	r3, r4, #8
    bc10:	d400      	bmi.n	bc14 <__aeabi_dsub+0xb8>
    bc12:	e0c5      	b.n	bda0 <__aeabi_dsub+0x244>
    bc14:	0264      	lsls	r4, r4, #9
    bc16:	0a65      	lsrs	r5, r4, #9
    bc18:	2d00      	cmp	r5, #0
    bc1a:	d100      	bne.n	bc1e <__aeabi_dsub+0xc2>
    bc1c:	e0f6      	b.n	be0c <__aeabi_dsub+0x2b0>
    bc1e:	0028      	movs	r0, r5
    bc20:	f000 fb38 	bl	c294 <__clzsi2>
    bc24:	0003      	movs	r3, r0
    bc26:	3b08      	subs	r3, #8
    bc28:	2b1f      	cmp	r3, #31
    bc2a:	dd00      	ble.n	bc2e <__aeabi_dsub+0xd2>
    bc2c:	e0e9      	b.n	be02 <__aeabi_dsub+0x2a6>
    bc2e:	2220      	movs	r2, #32
    bc30:	003c      	movs	r4, r7
    bc32:	1ad2      	subs	r2, r2, r3
    bc34:	409d      	lsls	r5, r3
    bc36:	40d4      	lsrs	r4, r2
    bc38:	409f      	lsls	r7, r3
    bc3a:	4325      	orrs	r5, r4
    bc3c:	429e      	cmp	r6, r3
    bc3e:	dd00      	ble.n	bc42 <__aeabi_dsub+0xe6>
    bc40:	e0db      	b.n	bdfa <__aeabi_dsub+0x29e>
    bc42:	1b9e      	subs	r6, r3, r6
    bc44:	1c73      	adds	r3, r6, #1
    bc46:	2b1f      	cmp	r3, #31
    bc48:	dd00      	ble.n	bc4c <__aeabi_dsub+0xf0>
    bc4a:	e10a      	b.n	be62 <__aeabi_dsub+0x306>
    bc4c:	2220      	movs	r2, #32
    bc4e:	0038      	movs	r0, r7
    bc50:	1ad2      	subs	r2, r2, r3
    bc52:	0029      	movs	r1, r5
    bc54:	4097      	lsls	r7, r2
    bc56:	002c      	movs	r4, r5
    bc58:	4091      	lsls	r1, r2
    bc5a:	40d8      	lsrs	r0, r3
    bc5c:	1e7a      	subs	r2, r7, #1
    bc5e:	4197      	sbcs	r7, r2
    bc60:	40dc      	lsrs	r4, r3
    bc62:	2600      	movs	r6, #0
    bc64:	4301      	orrs	r1, r0
    bc66:	430f      	orrs	r7, r1
    bc68:	077b      	lsls	r3, r7, #29
    bc6a:	d009      	beq.n	bc80 <__aeabi_dsub+0x124>
    bc6c:	230f      	movs	r3, #15
    bc6e:	403b      	ands	r3, r7
    bc70:	2b04      	cmp	r3, #4
    bc72:	d005      	beq.n	bc80 <__aeabi_dsub+0x124>
    bc74:	1d3b      	adds	r3, r7, #4
    bc76:	42bb      	cmp	r3, r7
    bc78:	41bf      	sbcs	r7, r7
    bc7a:	427f      	negs	r7, r7
    bc7c:	19e4      	adds	r4, r4, r7
    bc7e:	001f      	movs	r7, r3
    bc80:	0223      	lsls	r3, r4, #8
    bc82:	d525      	bpl.n	bcd0 <__aeabi_dsub+0x174>
    bc84:	4b86      	ldr	r3, [pc, #536]	; (bea0 <__aeabi_dsub+0x344>)
    bc86:	3601      	adds	r6, #1
    bc88:	429e      	cmp	r6, r3
    bc8a:	d100      	bne.n	bc8e <__aeabi_dsub+0x132>
    bc8c:	e0af      	b.n	bdee <__aeabi_dsub+0x292>
    bc8e:	4b85      	ldr	r3, [pc, #532]	; (bea4 <__aeabi_dsub+0x348>)
    bc90:	2501      	movs	r5, #1
    bc92:	401c      	ands	r4, r3
    bc94:	4643      	mov	r3, r8
    bc96:	0762      	lsls	r2, r4, #29
    bc98:	08ff      	lsrs	r7, r7, #3
    bc9a:	0264      	lsls	r4, r4, #9
    bc9c:	0576      	lsls	r6, r6, #21
    bc9e:	4317      	orrs	r7, r2
    bca0:	0b24      	lsrs	r4, r4, #12
    bca2:	0d76      	lsrs	r6, r6, #21
    bca4:	401d      	ands	r5, r3
    bca6:	2100      	movs	r1, #0
    bca8:	0324      	lsls	r4, r4, #12
    bcaa:	0b23      	lsrs	r3, r4, #12
    bcac:	0d0c      	lsrs	r4, r1, #20
    bcae:	4a7e      	ldr	r2, [pc, #504]	; (bea8 <__aeabi_dsub+0x34c>)
    bcb0:	0524      	lsls	r4, r4, #20
    bcb2:	431c      	orrs	r4, r3
    bcb4:	4014      	ands	r4, r2
    bcb6:	0533      	lsls	r3, r6, #20
    bcb8:	4323      	orrs	r3, r4
    bcba:	005b      	lsls	r3, r3, #1
    bcbc:	07ed      	lsls	r5, r5, #31
    bcbe:	085b      	lsrs	r3, r3, #1
    bcc0:	432b      	orrs	r3, r5
    bcc2:	0038      	movs	r0, r7
    bcc4:	0019      	movs	r1, r3
    bcc6:	bc1c      	pop	{r2, r3, r4}
    bcc8:	4690      	mov	r8, r2
    bcca:	4699      	mov	r9, r3
    bccc:	46a2      	mov	sl, r4
    bcce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bcd0:	2501      	movs	r5, #1
    bcd2:	4643      	mov	r3, r8
    bcd4:	0762      	lsls	r2, r4, #29
    bcd6:	08ff      	lsrs	r7, r7, #3
    bcd8:	4317      	orrs	r7, r2
    bcda:	08e4      	lsrs	r4, r4, #3
    bcdc:	401d      	ands	r5, r3
    bcde:	4b70      	ldr	r3, [pc, #448]	; (bea0 <__aeabi_dsub+0x344>)
    bce0:	429e      	cmp	r6, r3
    bce2:	d036      	beq.n	bd52 <__aeabi_dsub+0x1f6>
    bce4:	0324      	lsls	r4, r4, #12
    bce6:	0576      	lsls	r6, r6, #21
    bce8:	0b24      	lsrs	r4, r4, #12
    bcea:	0d76      	lsrs	r6, r6, #21
    bcec:	e7db      	b.n	bca6 <__aeabi_dsub+0x14a>
    bcee:	4663      	mov	r3, ip
    bcf0:	1af3      	subs	r3, r6, r3
    bcf2:	2b00      	cmp	r3, #0
    bcf4:	dc00      	bgt.n	bcf8 <__aeabi_dsub+0x19c>
    bcf6:	e094      	b.n	be22 <__aeabi_dsub+0x2c6>
    bcf8:	4660      	mov	r0, ip
    bcfa:	2800      	cmp	r0, #0
    bcfc:	d035      	beq.n	bd6a <__aeabi_dsub+0x20e>
    bcfe:	4868      	ldr	r0, [pc, #416]	; (bea0 <__aeabi_dsub+0x344>)
    bd00:	4286      	cmp	r6, r0
    bd02:	d0b1      	beq.n	bc68 <__aeabi_dsub+0x10c>
    bd04:	2780      	movs	r7, #128	; 0x80
    bd06:	043f      	lsls	r7, r7, #16
    bd08:	4339      	orrs	r1, r7
    bd0a:	2b38      	cmp	r3, #56	; 0x38
    bd0c:	dc00      	bgt.n	bd10 <__aeabi_dsub+0x1b4>
    bd0e:	e0fd      	b.n	bf0c <__aeabi_dsub+0x3b0>
    bd10:	430a      	orrs	r2, r1
    bd12:	0017      	movs	r7, r2
    bd14:	2100      	movs	r1, #0
    bd16:	1e7a      	subs	r2, r7, #1
    bd18:	4197      	sbcs	r7, r2
    bd1a:	4457      	add	r7, sl
    bd1c:	4557      	cmp	r7, sl
    bd1e:	4180      	sbcs	r0, r0
    bd20:	1909      	adds	r1, r1, r4
    bd22:	4244      	negs	r4, r0
    bd24:	190c      	adds	r4, r1, r4
    bd26:	0223      	lsls	r3, r4, #8
    bd28:	d53a      	bpl.n	bda0 <__aeabi_dsub+0x244>
    bd2a:	4b5d      	ldr	r3, [pc, #372]	; (bea0 <__aeabi_dsub+0x344>)
    bd2c:	3601      	adds	r6, #1
    bd2e:	429e      	cmp	r6, r3
    bd30:	d100      	bne.n	bd34 <__aeabi_dsub+0x1d8>
    bd32:	e14b      	b.n	bfcc <__aeabi_dsub+0x470>
    bd34:	2201      	movs	r2, #1
    bd36:	4b5b      	ldr	r3, [pc, #364]	; (bea4 <__aeabi_dsub+0x348>)
    bd38:	401c      	ands	r4, r3
    bd3a:	087b      	lsrs	r3, r7, #1
    bd3c:	4017      	ands	r7, r2
    bd3e:	431f      	orrs	r7, r3
    bd40:	07e2      	lsls	r2, r4, #31
    bd42:	4317      	orrs	r7, r2
    bd44:	0864      	lsrs	r4, r4, #1
    bd46:	e78f      	b.n	bc68 <__aeabi_dsub+0x10c>
    bd48:	0008      	movs	r0, r1
    bd4a:	4310      	orrs	r0, r2
    bd4c:	d000      	beq.n	bd50 <__aeabi_dsub+0x1f4>
    bd4e:	e724      	b.n	bb9a <__aeabi_dsub+0x3e>
    bd50:	e721      	b.n	bb96 <__aeabi_dsub+0x3a>
    bd52:	0023      	movs	r3, r4
    bd54:	433b      	orrs	r3, r7
    bd56:	d100      	bne.n	bd5a <__aeabi_dsub+0x1fe>
    bd58:	e1b9      	b.n	c0ce <__aeabi_dsub+0x572>
    bd5a:	2280      	movs	r2, #128	; 0x80
    bd5c:	0312      	lsls	r2, r2, #12
    bd5e:	4314      	orrs	r4, r2
    bd60:	0324      	lsls	r4, r4, #12
    bd62:	0b24      	lsrs	r4, r4, #12
    bd64:	e79f      	b.n	bca6 <__aeabi_dsub+0x14a>
    bd66:	002e      	movs	r6, r5
    bd68:	e77e      	b.n	bc68 <__aeabi_dsub+0x10c>
    bd6a:	0008      	movs	r0, r1
    bd6c:	4310      	orrs	r0, r2
    bd6e:	d100      	bne.n	bd72 <__aeabi_dsub+0x216>
    bd70:	e0ca      	b.n	bf08 <__aeabi_dsub+0x3ac>
    bd72:	1e58      	subs	r0, r3, #1
    bd74:	4684      	mov	ip, r0
    bd76:	2800      	cmp	r0, #0
    bd78:	d000      	beq.n	bd7c <__aeabi_dsub+0x220>
    bd7a:	e0e7      	b.n	bf4c <__aeabi_dsub+0x3f0>
    bd7c:	4452      	add	r2, sl
    bd7e:	4552      	cmp	r2, sl
    bd80:	4180      	sbcs	r0, r0
    bd82:	1864      	adds	r4, r4, r1
    bd84:	4240      	negs	r0, r0
    bd86:	1824      	adds	r4, r4, r0
    bd88:	0017      	movs	r7, r2
    bd8a:	2601      	movs	r6, #1
    bd8c:	0223      	lsls	r3, r4, #8
    bd8e:	d507      	bpl.n	bda0 <__aeabi_dsub+0x244>
    bd90:	2602      	movs	r6, #2
    bd92:	e7cf      	b.n	bd34 <__aeabi_dsub+0x1d8>
    bd94:	4664      	mov	r4, ip
    bd96:	432c      	orrs	r4, r5
    bd98:	d100      	bne.n	bd9c <__aeabi_dsub+0x240>
    bd9a:	e1b3      	b.n	c104 <__aeabi_dsub+0x5a8>
    bd9c:	002c      	movs	r4, r5
    bd9e:	4667      	mov	r7, ip
    bda0:	077b      	lsls	r3, r7, #29
    bda2:	d000      	beq.n	bda6 <__aeabi_dsub+0x24a>
    bda4:	e762      	b.n	bc6c <__aeabi_dsub+0x110>
    bda6:	0763      	lsls	r3, r4, #29
    bda8:	08ff      	lsrs	r7, r7, #3
    bdaa:	431f      	orrs	r7, r3
    bdac:	2501      	movs	r5, #1
    bdae:	4643      	mov	r3, r8
    bdb0:	08e4      	lsrs	r4, r4, #3
    bdb2:	401d      	ands	r5, r3
    bdb4:	e793      	b.n	bcde <__aeabi_dsub+0x182>
    bdb6:	2d00      	cmp	r5, #0
    bdb8:	d178      	bne.n	beac <__aeabi_dsub+0x350>
    bdba:	1c75      	adds	r5, r6, #1
    bdbc:	056d      	lsls	r5, r5, #21
    bdbe:	0d6d      	lsrs	r5, r5, #21
    bdc0:	2d01      	cmp	r5, #1
    bdc2:	dc00      	bgt.n	bdc6 <__aeabi_dsub+0x26a>
    bdc4:	e0f2      	b.n	bfac <__aeabi_dsub+0x450>
    bdc6:	4650      	mov	r0, sl
    bdc8:	1a80      	subs	r0, r0, r2
    bdca:	4582      	cmp	sl, r0
    bdcc:	41bf      	sbcs	r7, r7
    bdce:	1a65      	subs	r5, r4, r1
    bdd0:	427f      	negs	r7, r7
    bdd2:	1bed      	subs	r5, r5, r7
    bdd4:	4684      	mov	ip, r0
    bdd6:	0228      	lsls	r0, r5, #8
    bdd8:	d400      	bmi.n	bddc <__aeabi_dsub+0x280>
    bdda:	e08c      	b.n	bef6 <__aeabi_dsub+0x39a>
    bddc:	4650      	mov	r0, sl
    bdde:	1a17      	subs	r7, r2, r0
    bde0:	42ba      	cmp	r2, r7
    bde2:	4192      	sbcs	r2, r2
    bde4:	1b0c      	subs	r4, r1, r4
    bde6:	4255      	negs	r5, r2
    bde8:	1b65      	subs	r5, r4, r5
    bdea:	4698      	mov	r8, r3
    bdec:	e714      	b.n	bc18 <__aeabi_dsub+0xbc>
    bdee:	2501      	movs	r5, #1
    bdf0:	4643      	mov	r3, r8
    bdf2:	2400      	movs	r4, #0
    bdf4:	401d      	ands	r5, r3
    bdf6:	2700      	movs	r7, #0
    bdf8:	e755      	b.n	bca6 <__aeabi_dsub+0x14a>
    bdfa:	4c2a      	ldr	r4, [pc, #168]	; (bea4 <__aeabi_dsub+0x348>)
    bdfc:	1af6      	subs	r6, r6, r3
    bdfe:	402c      	ands	r4, r5
    be00:	e732      	b.n	bc68 <__aeabi_dsub+0x10c>
    be02:	003d      	movs	r5, r7
    be04:	3828      	subs	r0, #40	; 0x28
    be06:	4085      	lsls	r5, r0
    be08:	2700      	movs	r7, #0
    be0a:	e717      	b.n	bc3c <__aeabi_dsub+0xe0>
    be0c:	0038      	movs	r0, r7
    be0e:	f000 fa41 	bl	c294 <__clzsi2>
    be12:	3020      	adds	r0, #32
    be14:	e706      	b.n	bc24 <__aeabi_dsub+0xc8>
    be16:	430a      	orrs	r2, r1
    be18:	0017      	movs	r7, r2
    be1a:	2100      	movs	r1, #0
    be1c:	1e7a      	subs	r2, r7, #1
    be1e:	4197      	sbcs	r7, r2
    be20:	e6ee      	b.n	bc00 <__aeabi_dsub+0xa4>
    be22:	2b00      	cmp	r3, #0
    be24:	d000      	beq.n	be28 <__aeabi_dsub+0x2cc>
    be26:	e0e5      	b.n	bff4 <__aeabi_dsub+0x498>
    be28:	1c73      	adds	r3, r6, #1
    be2a:	469c      	mov	ip, r3
    be2c:	055b      	lsls	r3, r3, #21
    be2e:	0d5b      	lsrs	r3, r3, #21
    be30:	2b01      	cmp	r3, #1
    be32:	dc00      	bgt.n	be36 <__aeabi_dsub+0x2da>
    be34:	e09f      	b.n	bf76 <__aeabi_dsub+0x41a>
    be36:	4b1a      	ldr	r3, [pc, #104]	; (bea0 <__aeabi_dsub+0x344>)
    be38:	459c      	cmp	ip, r3
    be3a:	d100      	bne.n	be3e <__aeabi_dsub+0x2e2>
    be3c:	e0c5      	b.n	bfca <__aeabi_dsub+0x46e>
    be3e:	4452      	add	r2, sl
    be40:	4552      	cmp	r2, sl
    be42:	4180      	sbcs	r0, r0
    be44:	1864      	adds	r4, r4, r1
    be46:	4240      	negs	r0, r0
    be48:	1824      	adds	r4, r4, r0
    be4a:	07e7      	lsls	r7, r4, #31
    be4c:	0852      	lsrs	r2, r2, #1
    be4e:	4317      	orrs	r7, r2
    be50:	0864      	lsrs	r4, r4, #1
    be52:	4666      	mov	r6, ip
    be54:	e708      	b.n	bc68 <__aeabi_dsub+0x10c>
    be56:	4812      	ldr	r0, [pc, #72]	; (bea0 <__aeabi_dsub+0x344>)
    be58:	4285      	cmp	r5, r0
    be5a:	d100      	bne.n	be5e <__aeabi_dsub+0x302>
    be5c:	e085      	b.n	bf6a <__aeabi_dsub+0x40e>
    be5e:	001d      	movs	r5, r3
    be60:	e6bc      	b.n	bbdc <__aeabi_dsub+0x80>
    be62:	0029      	movs	r1, r5
    be64:	3e1f      	subs	r6, #31
    be66:	40f1      	lsrs	r1, r6
    be68:	2b20      	cmp	r3, #32
    be6a:	d100      	bne.n	be6e <__aeabi_dsub+0x312>
    be6c:	e07f      	b.n	bf6e <__aeabi_dsub+0x412>
    be6e:	2240      	movs	r2, #64	; 0x40
    be70:	1ad3      	subs	r3, r2, r3
    be72:	409d      	lsls	r5, r3
    be74:	432f      	orrs	r7, r5
    be76:	1e7d      	subs	r5, r7, #1
    be78:	41af      	sbcs	r7, r5
    be7a:	2400      	movs	r4, #0
    be7c:	430f      	orrs	r7, r1
    be7e:	2600      	movs	r6, #0
    be80:	e78e      	b.n	bda0 <__aeabi_dsub+0x244>
    be82:	002b      	movs	r3, r5
    be84:	000f      	movs	r7, r1
    be86:	3b20      	subs	r3, #32
    be88:	40df      	lsrs	r7, r3
    be8a:	2d20      	cmp	r5, #32
    be8c:	d071      	beq.n	bf72 <__aeabi_dsub+0x416>
    be8e:	2340      	movs	r3, #64	; 0x40
    be90:	1b5d      	subs	r5, r3, r5
    be92:	40a9      	lsls	r1, r5
    be94:	430a      	orrs	r2, r1
    be96:	1e51      	subs	r1, r2, #1
    be98:	418a      	sbcs	r2, r1
    be9a:	2100      	movs	r1, #0
    be9c:	4317      	orrs	r7, r2
    be9e:	e6af      	b.n	bc00 <__aeabi_dsub+0xa4>
    bea0:	000007ff 	.word	0x000007ff
    bea4:	ff7fffff 	.word	0xff7fffff
    bea8:	800fffff 	.word	0x800fffff
    beac:	2e00      	cmp	r6, #0
    beae:	d03e      	beq.n	bf2e <__aeabi_dsub+0x3d2>
    beb0:	4eb3      	ldr	r6, [pc, #716]	; (c180 <__aeabi_dsub+0x624>)
    beb2:	45b4      	cmp	ip, r6
    beb4:	d045      	beq.n	bf42 <__aeabi_dsub+0x3e6>
    beb6:	2680      	movs	r6, #128	; 0x80
    beb8:	0436      	lsls	r6, r6, #16
    beba:	426d      	negs	r5, r5
    bebc:	4334      	orrs	r4, r6
    bebe:	2d38      	cmp	r5, #56	; 0x38
    bec0:	dd00      	ble.n	bec4 <__aeabi_dsub+0x368>
    bec2:	e0a8      	b.n	c016 <__aeabi_dsub+0x4ba>
    bec4:	2d1f      	cmp	r5, #31
    bec6:	dd00      	ble.n	beca <__aeabi_dsub+0x36e>
    bec8:	e11f      	b.n	c10a <__aeabi_dsub+0x5ae>
    beca:	2620      	movs	r6, #32
    becc:	0027      	movs	r7, r4
    bece:	4650      	mov	r0, sl
    bed0:	1b76      	subs	r6, r6, r5
    bed2:	40b7      	lsls	r7, r6
    bed4:	40e8      	lsrs	r0, r5
    bed6:	4307      	orrs	r7, r0
    bed8:	4650      	mov	r0, sl
    beda:	40b0      	lsls	r0, r6
    bedc:	1e46      	subs	r6, r0, #1
    bede:	41b0      	sbcs	r0, r6
    bee0:	40ec      	lsrs	r4, r5
    bee2:	4338      	orrs	r0, r7
    bee4:	1a17      	subs	r7, r2, r0
    bee6:	42ba      	cmp	r2, r7
    bee8:	4192      	sbcs	r2, r2
    beea:	1b0c      	subs	r4, r1, r4
    beec:	4252      	negs	r2, r2
    beee:	1aa4      	subs	r4, r4, r2
    bef0:	4666      	mov	r6, ip
    bef2:	4698      	mov	r8, r3
    bef4:	e68b      	b.n	bc0e <__aeabi_dsub+0xb2>
    bef6:	4664      	mov	r4, ip
    bef8:	4667      	mov	r7, ip
    befa:	432c      	orrs	r4, r5
    befc:	d000      	beq.n	bf00 <__aeabi_dsub+0x3a4>
    befe:	e68b      	b.n	bc18 <__aeabi_dsub+0xbc>
    bf00:	2500      	movs	r5, #0
    bf02:	2600      	movs	r6, #0
    bf04:	2700      	movs	r7, #0
    bf06:	e6ea      	b.n	bcde <__aeabi_dsub+0x182>
    bf08:	001e      	movs	r6, r3
    bf0a:	e6ad      	b.n	bc68 <__aeabi_dsub+0x10c>
    bf0c:	2b1f      	cmp	r3, #31
    bf0e:	dc60      	bgt.n	bfd2 <__aeabi_dsub+0x476>
    bf10:	2720      	movs	r7, #32
    bf12:	1af8      	subs	r0, r7, r3
    bf14:	000f      	movs	r7, r1
    bf16:	4684      	mov	ip, r0
    bf18:	4087      	lsls	r7, r0
    bf1a:	0010      	movs	r0, r2
    bf1c:	40d8      	lsrs	r0, r3
    bf1e:	4307      	orrs	r7, r0
    bf20:	4660      	mov	r0, ip
    bf22:	4082      	lsls	r2, r0
    bf24:	1e50      	subs	r0, r2, #1
    bf26:	4182      	sbcs	r2, r0
    bf28:	40d9      	lsrs	r1, r3
    bf2a:	4317      	orrs	r7, r2
    bf2c:	e6f5      	b.n	bd1a <__aeabi_dsub+0x1be>
    bf2e:	0026      	movs	r6, r4
    bf30:	4650      	mov	r0, sl
    bf32:	4306      	orrs	r6, r0
    bf34:	d005      	beq.n	bf42 <__aeabi_dsub+0x3e6>
    bf36:	43ed      	mvns	r5, r5
    bf38:	2d00      	cmp	r5, #0
    bf3a:	d0d3      	beq.n	bee4 <__aeabi_dsub+0x388>
    bf3c:	4e90      	ldr	r6, [pc, #576]	; (c180 <__aeabi_dsub+0x624>)
    bf3e:	45b4      	cmp	ip, r6
    bf40:	d1bd      	bne.n	bebe <__aeabi_dsub+0x362>
    bf42:	000c      	movs	r4, r1
    bf44:	0017      	movs	r7, r2
    bf46:	4666      	mov	r6, ip
    bf48:	4698      	mov	r8, r3
    bf4a:	e68d      	b.n	bc68 <__aeabi_dsub+0x10c>
    bf4c:	488c      	ldr	r0, [pc, #560]	; (c180 <__aeabi_dsub+0x624>)
    bf4e:	4283      	cmp	r3, r0
    bf50:	d00b      	beq.n	bf6a <__aeabi_dsub+0x40e>
    bf52:	4663      	mov	r3, ip
    bf54:	e6d9      	b.n	bd0a <__aeabi_dsub+0x1ae>
    bf56:	2d00      	cmp	r5, #0
    bf58:	d000      	beq.n	bf5c <__aeabi_dsub+0x400>
    bf5a:	e096      	b.n	c08a <__aeabi_dsub+0x52e>
    bf5c:	0008      	movs	r0, r1
    bf5e:	4310      	orrs	r0, r2
    bf60:	d100      	bne.n	bf64 <__aeabi_dsub+0x408>
    bf62:	e0e2      	b.n	c12a <__aeabi_dsub+0x5ce>
    bf64:	000c      	movs	r4, r1
    bf66:	0017      	movs	r7, r2
    bf68:	4698      	mov	r8, r3
    bf6a:	4e85      	ldr	r6, [pc, #532]	; (c180 <__aeabi_dsub+0x624>)
    bf6c:	e67c      	b.n	bc68 <__aeabi_dsub+0x10c>
    bf6e:	2500      	movs	r5, #0
    bf70:	e780      	b.n	be74 <__aeabi_dsub+0x318>
    bf72:	2100      	movs	r1, #0
    bf74:	e78e      	b.n	be94 <__aeabi_dsub+0x338>
    bf76:	0023      	movs	r3, r4
    bf78:	4650      	mov	r0, sl
    bf7a:	4303      	orrs	r3, r0
    bf7c:	2e00      	cmp	r6, #0
    bf7e:	d000      	beq.n	bf82 <__aeabi_dsub+0x426>
    bf80:	e0a8      	b.n	c0d4 <__aeabi_dsub+0x578>
    bf82:	2b00      	cmp	r3, #0
    bf84:	d100      	bne.n	bf88 <__aeabi_dsub+0x42c>
    bf86:	e0de      	b.n	c146 <__aeabi_dsub+0x5ea>
    bf88:	000b      	movs	r3, r1
    bf8a:	4313      	orrs	r3, r2
    bf8c:	d100      	bne.n	bf90 <__aeabi_dsub+0x434>
    bf8e:	e66b      	b.n	bc68 <__aeabi_dsub+0x10c>
    bf90:	4452      	add	r2, sl
    bf92:	4552      	cmp	r2, sl
    bf94:	4180      	sbcs	r0, r0
    bf96:	1864      	adds	r4, r4, r1
    bf98:	4240      	negs	r0, r0
    bf9a:	1824      	adds	r4, r4, r0
    bf9c:	0017      	movs	r7, r2
    bf9e:	0223      	lsls	r3, r4, #8
    bfa0:	d400      	bmi.n	bfa4 <__aeabi_dsub+0x448>
    bfa2:	e6fd      	b.n	bda0 <__aeabi_dsub+0x244>
    bfa4:	4b77      	ldr	r3, [pc, #476]	; (c184 <__aeabi_dsub+0x628>)
    bfa6:	4666      	mov	r6, ip
    bfa8:	401c      	ands	r4, r3
    bfaa:	e65d      	b.n	bc68 <__aeabi_dsub+0x10c>
    bfac:	0025      	movs	r5, r4
    bfae:	4650      	mov	r0, sl
    bfb0:	4305      	orrs	r5, r0
    bfb2:	2e00      	cmp	r6, #0
    bfb4:	d1cf      	bne.n	bf56 <__aeabi_dsub+0x3fa>
    bfb6:	2d00      	cmp	r5, #0
    bfb8:	d14f      	bne.n	c05a <__aeabi_dsub+0x4fe>
    bfba:	000c      	movs	r4, r1
    bfbc:	4314      	orrs	r4, r2
    bfbe:	d100      	bne.n	bfc2 <__aeabi_dsub+0x466>
    bfc0:	e0a0      	b.n	c104 <__aeabi_dsub+0x5a8>
    bfc2:	000c      	movs	r4, r1
    bfc4:	0017      	movs	r7, r2
    bfc6:	4698      	mov	r8, r3
    bfc8:	e64e      	b.n	bc68 <__aeabi_dsub+0x10c>
    bfca:	4666      	mov	r6, ip
    bfcc:	2400      	movs	r4, #0
    bfce:	2700      	movs	r7, #0
    bfd0:	e685      	b.n	bcde <__aeabi_dsub+0x182>
    bfd2:	001f      	movs	r7, r3
    bfd4:	0008      	movs	r0, r1
    bfd6:	3f20      	subs	r7, #32
    bfd8:	40f8      	lsrs	r0, r7
    bfda:	0007      	movs	r7, r0
    bfdc:	2b20      	cmp	r3, #32
    bfde:	d100      	bne.n	bfe2 <__aeabi_dsub+0x486>
    bfe0:	e08e      	b.n	c100 <__aeabi_dsub+0x5a4>
    bfe2:	2040      	movs	r0, #64	; 0x40
    bfe4:	1ac3      	subs	r3, r0, r3
    bfe6:	4099      	lsls	r1, r3
    bfe8:	430a      	orrs	r2, r1
    bfea:	1e51      	subs	r1, r2, #1
    bfec:	418a      	sbcs	r2, r1
    bfee:	2100      	movs	r1, #0
    bff0:	4317      	orrs	r7, r2
    bff2:	e692      	b.n	bd1a <__aeabi_dsub+0x1be>
    bff4:	2e00      	cmp	r6, #0
    bff6:	d114      	bne.n	c022 <__aeabi_dsub+0x4c6>
    bff8:	0026      	movs	r6, r4
    bffa:	4650      	mov	r0, sl
    bffc:	4306      	orrs	r6, r0
    bffe:	d062      	beq.n	c0c6 <__aeabi_dsub+0x56a>
    c000:	43db      	mvns	r3, r3
    c002:	2b00      	cmp	r3, #0
    c004:	d15c      	bne.n	c0c0 <__aeabi_dsub+0x564>
    c006:	1887      	adds	r7, r0, r2
    c008:	4297      	cmp	r7, r2
    c00a:	4192      	sbcs	r2, r2
    c00c:	1864      	adds	r4, r4, r1
    c00e:	4252      	negs	r2, r2
    c010:	18a4      	adds	r4, r4, r2
    c012:	4666      	mov	r6, ip
    c014:	e687      	b.n	bd26 <__aeabi_dsub+0x1ca>
    c016:	4650      	mov	r0, sl
    c018:	4320      	orrs	r0, r4
    c01a:	1e44      	subs	r4, r0, #1
    c01c:	41a0      	sbcs	r0, r4
    c01e:	2400      	movs	r4, #0
    c020:	e760      	b.n	bee4 <__aeabi_dsub+0x388>
    c022:	4e57      	ldr	r6, [pc, #348]	; (c180 <__aeabi_dsub+0x624>)
    c024:	45b4      	cmp	ip, r6
    c026:	d04e      	beq.n	c0c6 <__aeabi_dsub+0x56a>
    c028:	2680      	movs	r6, #128	; 0x80
    c02a:	0436      	lsls	r6, r6, #16
    c02c:	425b      	negs	r3, r3
    c02e:	4334      	orrs	r4, r6
    c030:	2b38      	cmp	r3, #56	; 0x38
    c032:	dd00      	ble.n	c036 <__aeabi_dsub+0x4da>
    c034:	e07f      	b.n	c136 <__aeabi_dsub+0x5da>
    c036:	2b1f      	cmp	r3, #31
    c038:	dd00      	ble.n	c03c <__aeabi_dsub+0x4e0>
    c03a:	e08b      	b.n	c154 <__aeabi_dsub+0x5f8>
    c03c:	2620      	movs	r6, #32
    c03e:	0027      	movs	r7, r4
    c040:	4650      	mov	r0, sl
    c042:	1af6      	subs	r6, r6, r3
    c044:	40b7      	lsls	r7, r6
    c046:	40d8      	lsrs	r0, r3
    c048:	4307      	orrs	r7, r0
    c04a:	4650      	mov	r0, sl
    c04c:	40b0      	lsls	r0, r6
    c04e:	1e46      	subs	r6, r0, #1
    c050:	41b0      	sbcs	r0, r6
    c052:	4307      	orrs	r7, r0
    c054:	40dc      	lsrs	r4, r3
    c056:	18bf      	adds	r7, r7, r2
    c058:	e7d6      	b.n	c008 <__aeabi_dsub+0x4ac>
    c05a:	000d      	movs	r5, r1
    c05c:	4315      	orrs	r5, r2
    c05e:	d100      	bne.n	c062 <__aeabi_dsub+0x506>
    c060:	e602      	b.n	bc68 <__aeabi_dsub+0x10c>
    c062:	4650      	mov	r0, sl
    c064:	1a80      	subs	r0, r0, r2
    c066:	4582      	cmp	sl, r0
    c068:	41bf      	sbcs	r7, r7
    c06a:	1a65      	subs	r5, r4, r1
    c06c:	427f      	negs	r7, r7
    c06e:	1bed      	subs	r5, r5, r7
    c070:	4684      	mov	ip, r0
    c072:	0228      	lsls	r0, r5, #8
    c074:	d400      	bmi.n	c078 <__aeabi_dsub+0x51c>
    c076:	e68d      	b.n	bd94 <__aeabi_dsub+0x238>
    c078:	4650      	mov	r0, sl
    c07a:	1a17      	subs	r7, r2, r0
    c07c:	42ba      	cmp	r2, r7
    c07e:	4192      	sbcs	r2, r2
    c080:	1b0c      	subs	r4, r1, r4
    c082:	4252      	negs	r2, r2
    c084:	1aa4      	subs	r4, r4, r2
    c086:	4698      	mov	r8, r3
    c088:	e5ee      	b.n	bc68 <__aeabi_dsub+0x10c>
    c08a:	000d      	movs	r5, r1
    c08c:	4315      	orrs	r5, r2
    c08e:	d100      	bne.n	c092 <__aeabi_dsub+0x536>
    c090:	e76b      	b.n	bf6a <__aeabi_dsub+0x40e>
    c092:	4650      	mov	r0, sl
    c094:	0767      	lsls	r7, r4, #29
    c096:	08c0      	lsrs	r0, r0, #3
    c098:	4307      	orrs	r7, r0
    c09a:	2080      	movs	r0, #128	; 0x80
    c09c:	08e4      	lsrs	r4, r4, #3
    c09e:	0300      	lsls	r0, r0, #12
    c0a0:	4204      	tst	r4, r0
    c0a2:	d007      	beq.n	c0b4 <__aeabi_dsub+0x558>
    c0a4:	08cd      	lsrs	r5, r1, #3
    c0a6:	4205      	tst	r5, r0
    c0a8:	d104      	bne.n	c0b4 <__aeabi_dsub+0x558>
    c0aa:	002c      	movs	r4, r5
    c0ac:	4698      	mov	r8, r3
    c0ae:	08d7      	lsrs	r7, r2, #3
    c0b0:	0749      	lsls	r1, r1, #29
    c0b2:	430f      	orrs	r7, r1
    c0b4:	0f7b      	lsrs	r3, r7, #29
    c0b6:	00e4      	lsls	r4, r4, #3
    c0b8:	431c      	orrs	r4, r3
    c0ba:	00ff      	lsls	r7, r7, #3
    c0bc:	4e30      	ldr	r6, [pc, #192]	; (c180 <__aeabi_dsub+0x624>)
    c0be:	e5d3      	b.n	bc68 <__aeabi_dsub+0x10c>
    c0c0:	4e2f      	ldr	r6, [pc, #188]	; (c180 <__aeabi_dsub+0x624>)
    c0c2:	45b4      	cmp	ip, r6
    c0c4:	d1b4      	bne.n	c030 <__aeabi_dsub+0x4d4>
    c0c6:	000c      	movs	r4, r1
    c0c8:	0017      	movs	r7, r2
    c0ca:	4666      	mov	r6, ip
    c0cc:	e5cc      	b.n	bc68 <__aeabi_dsub+0x10c>
    c0ce:	2700      	movs	r7, #0
    c0d0:	2400      	movs	r4, #0
    c0d2:	e5e8      	b.n	bca6 <__aeabi_dsub+0x14a>
    c0d4:	2b00      	cmp	r3, #0
    c0d6:	d039      	beq.n	c14c <__aeabi_dsub+0x5f0>
    c0d8:	000b      	movs	r3, r1
    c0da:	4313      	orrs	r3, r2
    c0dc:	d100      	bne.n	c0e0 <__aeabi_dsub+0x584>
    c0de:	e744      	b.n	bf6a <__aeabi_dsub+0x40e>
    c0e0:	08c0      	lsrs	r0, r0, #3
    c0e2:	0767      	lsls	r7, r4, #29
    c0e4:	4307      	orrs	r7, r0
    c0e6:	2080      	movs	r0, #128	; 0x80
    c0e8:	08e4      	lsrs	r4, r4, #3
    c0ea:	0300      	lsls	r0, r0, #12
    c0ec:	4204      	tst	r4, r0
    c0ee:	d0e1      	beq.n	c0b4 <__aeabi_dsub+0x558>
    c0f0:	08cb      	lsrs	r3, r1, #3
    c0f2:	4203      	tst	r3, r0
    c0f4:	d1de      	bne.n	c0b4 <__aeabi_dsub+0x558>
    c0f6:	08d7      	lsrs	r7, r2, #3
    c0f8:	0749      	lsls	r1, r1, #29
    c0fa:	430f      	orrs	r7, r1
    c0fc:	001c      	movs	r4, r3
    c0fe:	e7d9      	b.n	c0b4 <__aeabi_dsub+0x558>
    c100:	2100      	movs	r1, #0
    c102:	e771      	b.n	bfe8 <__aeabi_dsub+0x48c>
    c104:	2500      	movs	r5, #0
    c106:	2700      	movs	r7, #0
    c108:	e5e9      	b.n	bcde <__aeabi_dsub+0x182>
    c10a:	002e      	movs	r6, r5
    c10c:	0027      	movs	r7, r4
    c10e:	3e20      	subs	r6, #32
    c110:	40f7      	lsrs	r7, r6
    c112:	2d20      	cmp	r5, #32
    c114:	d02f      	beq.n	c176 <__aeabi_dsub+0x61a>
    c116:	2640      	movs	r6, #64	; 0x40
    c118:	1b75      	subs	r5, r6, r5
    c11a:	40ac      	lsls	r4, r5
    c11c:	4650      	mov	r0, sl
    c11e:	4320      	orrs	r0, r4
    c120:	1e44      	subs	r4, r0, #1
    c122:	41a0      	sbcs	r0, r4
    c124:	2400      	movs	r4, #0
    c126:	4338      	orrs	r0, r7
    c128:	e6dc      	b.n	bee4 <__aeabi_dsub+0x388>
    c12a:	2480      	movs	r4, #128	; 0x80
    c12c:	2500      	movs	r5, #0
    c12e:	0324      	lsls	r4, r4, #12
    c130:	4e13      	ldr	r6, [pc, #76]	; (c180 <__aeabi_dsub+0x624>)
    c132:	2700      	movs	r7, #0
    c134:	e5d3      	b.n	bcde <__aeabi_dsub+0x182>
    c136:	4650      	mov	r0, sl
    c138:	4320      	orrs	r0, r4
    c13a:	0007      	movs	r7, r0
    c13c:	1e78      	subs	r0, r7, #1
    c13e:	4187      	sbcs	r7, r0
    c140:	2400      	movs	r4, #0
    c142:	18bf      	adds	r7, r7, r2
    c144:	e760      	b.n	c008 <__aeabi_dsub+0x4ac>
    c146:	000c      	movs	r4, r1
    c148:	0017      	movs	r7, r2
    c14a:	e58d      	b.n	bc68 <__aeabi_dsub+0x10c>
    c14c:	000c      	movs	r4, r1
    c14e:	0017      	movs	r7, r2
    c150:	4e0b      	ldr	r6, [pc, #44]	; (c180 <__aeabi_dsub+0x624>)
    c152:	e589      	b.n	bc68 <__aeabi_dsub+0x10c>
    c154:	001e      	movs	r6, r3
    c156:	0027      	movs	r7, r4
    c158:	3e20      	subs	r6, #32
    c15a:	40f7      	lsrs	r7, r6
    c15c:	2b20      	cmp	r3, #32
    c15e:	d00c      	beq.n	c17a <__aeabi_dsub+0x61e>
    c160:	2640      	movs	r6, #64	; 0x40
    c162:	1af3      	subs	r3, r6, r3
    c164:	409c      	lsls	r4, r3
    c166:	4650      	mov	r0, sl
    c168:	4320      	orrs	r0, r4
    c16a:	1e44      	subs	r4, r0, #1
    c16c:	41a0      	sbcs	r0, r4
    c16e:	4307      	orrs	r7, r0
    c170:	2400      	movs	r4, #0
    c172:	18bf      	adds	r7, r7, r2
    c174:	e748      	b.n	c008 <__aeabi_dsub+0x4ac>
    c176:	2400      	movs	r4, #0
    c178:	e7d0      	b.n	c11c <__aeabi_dsub+0x5c0>
    c17a:	2400      	movs	r4, #0
    c17c:	e7f3      	b.n	c166 <__aeabi_dsub+0x60a>
    c17e:	46c0      	nop			; (mov r8, r8)
    c180:	000007ff 	.word	0x000007ff
    c184:	ff7fffff 	.word	0xff7fffff

0000c188 <__aeabi_d2iz>:
    c188:	b530      	push	{r4, r5, lr}
    c18a:	4d13      	ldr	r5, [pc, #76]	; (c1d8 <__aeabi_d2iz+0x50>)
    c18c:	030a      	lsls	r2, r1, #12
    c18e:	004b      	lsls	r3, r1, #1
    c190:	0b12      	lsrs	r2, r2, #12
    c192:	0d5b      	lsrs	r3, r3, #21
    c194:	0fc9      	lsrs	r1, r1, #31
    c196:	2400      	movs	r4, #0
    c198:	42ab      	cmp	r3, r5
    c19a:	dd10      	ble.n	c1be <__aeabi_d2iz+0x36>
    c19c:	4c0f      	ldr	r4, [pc, #60]	; (c1dc <__aeabi_d2iz+0x54>)
    c19e:	42a3      	cmp	r3, r4
    c1a0:	dc0f      	bgt.n	c1c2 <__aeabi_d2iz+0x3a>
    c1a2:	2480      	movs	r4, #128	; 0x80
    c1a4:	4d0e      	ldr	r5, [pc, #56]	; (c1e0 <__aeabi_d2iz+0x58>)
    c1a6:	0364      	lsls	r4, r4, #13
    c1a8:	4322      	orrs	r2, r4
    c1aa:	1aed      	subs	r5, r5, r3
    c1ac:	2d1f      	cmp	r5, #31
    c1ae:	dd0b      	ble.n	c1c8 <__aeabi_d2iz+0x40>
    c1b0:	480c      	ldr	r0, [pc, #48]	; (c1e4 <__aeabi_d2iz+0x5c>)
    c1b2:	1ac3      	subs	r3, r0, r3
    c1b4:	40da      	lsrs	r2, r3
    c1b6:	4254      	negs	r4, r2
    c1b8:	2900      	cmp	r1, #0
    c1ba:	d100      	bne.n	c1be <__aeabi_d2iz+0x36>
    c1bc:	0014      	movs	r4, r2
    c1be:	0020      	movs	r0, r4
    c1c0:	bd30      	pop	{r4, r5, pc}
    c1c2:	4b09      	ldr	r3, [pc, #36]	; (c1e8 <__aeabi_d2iz+0x60>)
    c1c4:	18cc      	adds	r4, r1, r3
    c1c6:	e7fa      	b.n	c1be <__aeabi_d2iz+0x36>
    c1c8:	4c08      	ldr	r4, [pc, #32]	; (c1ec <__aeabi_d2iz+0x64>)
    c1ca:	40e8      	lsrs	r0, r5
    c1cc:	46a4      	mov	ip, r4
    c1ce:	4463      	add	r3, ip
    c1d0:	409a      	lsls	r2, r3
    c1d2:	4302      	orrs	r2, r0
    c1d4:	e7ef      	b.n	c1b6 <__aeabi_d2iz+0x2e>
    c1d6:	46c0      	nop			; (mov r8, r8)
    c1d8:	000003fe 	.word	0x000003fe
    c1dc:	0000041d 	.word	0x0000041d
    c1e0:	00000433 	.word	0x00000433
    c1e4:	00000413 	.word	0x00000413
    c1e8:	7fffffff 	.word	0x7fffffff
    c1ec:	fffffbed 	.word	0xfffffbed

0000c1f0 <__aeabi_f2d>:
    c1f0:	0041      	lsls	r1, r0, #1
    c1f2:	0e09      	lsrs	r1, r1, #24
    c1f4:	1c4b      	adds	r3, r1, #1
    c1f6:	b570      	push	{r4, r5, r6, lr}
    c1f8:	b2db      	uxtb	r3, r3
    c1fa:	0246      	lsls	r6, r0, #9
    c1fc:	0a75      	lsrs	r5, r6, #9
    c1fe:	0fc4      	lsrs	r4, r0, #31
    c200:	2b01      	cmp	r3, #1
    c202:	dd14      	ble.n	c22e <__aeabi_f2d+0x3e>
    c204:	23e0      	movs	r3, #224	; 0xe0
    c206:	009b      	lsls	r3, r3, #2
    c208:	076d      	lsls	r5, r5, #29
    c20a:	0b36      	lsrs	r6, r6, #12
    c20c:	18cb      	adds	r3, r1, r3
    c20e:	2100      	movs	r1, #0
    c210:	0d0a      	lsrs	r2, r1, #20
    c212:	0028      	movs	r0, r5
    c214:	0512      	lsls	r2, r2, #20
    c216:	4d1c      	ldr	r5, [pc, #112]	; (c288 <__aeabi_f2d+0x98>)
    c218:	4332      	orrs	r2, r6
    c21a:	055b      	lsls	r3, r3, #21
    c21c:	402a      	ands	r2, r5
    c21e:	085b      	lsrs	r3, r3, #1
    c220:	4313      	orrs	r3, r2
    c222:	005b      	lsls	r3, r3, #1
    c224:	07e4      	lsls	r4, r4, #31
    c226:	085b      	lsrs	r3, r3, #1
    c228:	4323      	orrs	r3, r4
    c22a:	0019      	movs	r1, r3
    c22c:	bd70      	pop	{r4, r5, r6, pc}
    c22e:	2900      	cmp	r1, #0
    c230:	d114      	bne.n	c25c <__aeabi_f2d+0x6c>
    c232:	2d00      	cmp	r5, #0
    c234:	d01e      	beq.n	c274 <__aeabi_f2d+0x84>
    c236:	0028      	movs	r0, r5
    c238:	f000 f82c 	bl	c294 <__clzsi2>
    c23c:	280a      	cmp	r0, #10
    c23e:	dc1c      	bgt.n	c27a <__aeabi_f2d+0x8a>
    c240:	230b      	movs	r3, #11
    c242:	002a      	movs	r2, r5
    c244:	1a1b      	subs	r3, r3, r0
    c246:	40da      	lsrs	r2, r3
    c248:	0003      	movs	r3, r0
    c24a:	3315      	adds	r3, #21
    c24c:	409d      	lsls	r5, r3
    c24e:	4b0f      	ldr	r3, [pc, #60]	; (c28c <__aeabi_f2d+0x9c>)
    c250:	0312      	lsls	r2, r2, #12
    c252:	1a1b      	subs	r3, r3, r0
    c254:	055b      	lsls	r3, r3, #21
    c256:	0b16      	lsrs	r6, r2, #12
    c258:	0d5b      	lsrs	r3, r3, #21
    c25a:	e7d8      	b.n	c20e <__aeabi_f2d+0x1e>
    c25c:	2d00      	cmp	r5, #0
    c25e:	d006      	beq.n	c26e <__aeabi_f2d+0x7e>
    c260:	0b32      	lsrs	r2, r6, #12
    c262:	2680      	movs	r6, #128	; 0x80
    c264:	0336      	lsls	r6, r6, #12
    c266:	076d      	lsls	r5, r5, #29
    c268:	4316      	orrs	r6, r2
    c26a:	4b09      	ldr	r3, [pc, #36]	; (c290 <__aeabi_f2d+0xa0>)
    c26c:	e7cf      	b.n	c20e <__aeabi_f2d+0x1e>
    c26e:	4b08      	ldr	r3, [pc, #32]	; (c290 <__aeabi_f2d+0xa0>)
    c270:	2600      	movs	r6, #0
    c272:	e7cc      	b.n	c20e <__aeabi_f2d+0x1e>
    c274:	2300      	movs	r3, #0
    c276:	2600      	movs	r6, #0
    c278:	e7c9      	b.n	c20e <__aeabi_f2d+0x1e>
    c27a:	0003      	movs	r3, r0
    c27c:	002a      	movs	r2, r5
    c27e:	3b0b      	subs	r3, #11
    c280:	409a      	lsls	r2, r3
    c282:	2500      	movs	r5, #0
    c284:	e7e3      	b.n	c24e <__aeabi_f2d+0x5e>
    c286:	46c0      	nop			; (mov r8, r8)
    c288:	800fffff 	.word	0x800fffff
    c28c:	00000389 	.word	0x00000389
    c290:	000007ff 	.word	0x000007ff

0000c294 <__clzsi2>:
    c294:	211c      	movs	r1, #28
    c296:	2301      	movs	r3, #1
    c298:	041b      	lsls	r3, r3, #16
    c29a:	4298      	cmp	r0, r3
    c29c:	d301      	bcc.n	c2a2 <__clzsi2+0xe>
    c29e:	0c00      	lsrs	r0, r0, #16
    c2a0:	3910      	subs	r1, #16
    c2a2:	0a1b      	lsrs	r3, r3, #8
    c2a4:	4298      	cmp	r0, r3
    c2a6:	d301      	bcc.n	c2ac <__clzsi2+0x18>
    c2a8:	0a00      	lsrs	r0, r0, #8
    c2aa:	3908      	subs	r1, #8
    c2ac:	091b      	lsrs	r3, r3, #4
    c2ae:	4298      	cmp	r0, r3
    c2b0:	d301      	bcc.n	c2b6 <__clzsi2+0x22>
    c2b2:	0900      	lsrs	r0, r0, #4
    c2b4:	3904      	subs	r1, #4
    c2b6:	a202      	add	r2, pc, #8	; (adr r2, c2c0 <__clzsi2+0x2c>)
    c2b8:	5c10      	ldrb	r0, [r2, r0]
    c2ba:	1840      	adds	r0, r0, r1
    c2bc:	4770      	bx	lr
    c2be:	46c0      	nop			; (mov r8, r8)
    c2c0:	02020304 	.word	0x02020304
    c2c4:	01010101 	.word	0x01010101
	...

0000c2d0 <__clzdi2>:
    c2d0:	b510      	push	{r4, lr}
    c2d2:	2900      	cmp	r1, #0
    c2d4:	d103      	bne.n	c2de <__clzdi2+0xe>
    c2d6:	f7ff ffdd 	bl	c294 <__clzsi2>
    c2da:	3020      	adds	r0, #32
    c2dc:	e002      	b.n	c2e4 <__clzdi2+0x14>
    c2de:	1c08      	adds	r0, r1, #0
    c2e0:	f7ff ffd8 	bl	c294 <__clzsi2>
    c2e4:	bd10      	pop	{r4, pc}
    c2e6:	46c0      	nop			; (mov r8, r8)

0000c2e8 <atoi>:
    c2e8:	b510      	push	{r4, lr}
    c2ea:	220a      	movs	r2, #10
    c2ec:	2100      	movs	r1, #0
    c2ee:	f000 fad7 	bl	c8a0 <strtol>
    c2f2:	bd10      	pop	{r4, pc}

0000c2f4 <calloc>:
    c2f4:	b510      	push	{r4, lr}
    c2f6:	4b03      	ldr	r3, [pc, #12]	; (c304 <calloc+0x10>)
    c2f8:	000a      	movs	r2, r1
    c2fa:	0001      	movs	r1, r0
    c2fc:	6818      	ldr	r0, [r3, #0]
    c2fe:	f000 f882 	bl	c406 <_calloc_r>
    c302:	bd10      	pop	{r4, pc}
    c304:	2000002c 	.word	0x2000002c

0000c308 <__libc_init_array>:
    c308:	b570      	push	{r4, r5, r6, lr}
    c30a:	2600      	movs	r6, #0
    c30c:	4d0c      	ldr	r5, [pc, #48]	; (c340 <__libc_init_array+0x38>)
    c30e:	4c0d      	ldr	r4, [pc, #52]	; (c344 <__libc_init_array+0x3c>)
    c310:	1b64      	subs	r4, r4, r5
    c312:	10a4      	asrs	r4, r4, #2
    c314:	42a6      	cmp	r6, r4
    c316:	d109      	bne.n	c32c <__libc_init_array+0x24>
    c318:	2600      	movs	r6, #0
    c31a:	f001 fbf9 	bl	db10 <_init>
    c31e:	4d0a      	ldr	r5, [pc, #40]	; (c348 <__libc_init_array+0x40>)
    c320:	4c0a      	ldr	r4, [pc, #40]	; (c34c <__libc_init_array+0x44>)
    c322:	1b64      	subs	r4, r4, r5
    c324:	10a4      	asrs	r4, r4, #2
    c326:	42a6      	cmp	r6, r4
    c328:	d105      	bne.n	c336 <__libc_init_array+0x2e>
    c32a:	bd70      	pop	{r4, r5, r6, pc}
    c32c:	00b3      	lsls	r3, r6, #2
    c32e:	58eb      	ldr	r3, [r5, r3]
    c330:	4798      	blx	r3
    c332:	3601      	adds	r6, #1
    c334:	e7ee      	b.n	c314 <__libc_init_array+0xc>
    c336:	00b3      	lsls	r3, r6, #2
    c338:	58eb      	ldr	r3, [r5, r3]
    c33a:	4798      	blx	r3
    c33c:	3601      	adds	r6, #1
    c33e:	e7f2      	b.n	c326 <__libc_init_array+0x1e>
    c340:	0000db1c 	.word	0x0000db1c
    c344:	0000db1c 	.word	0x0000db1c
    c348:	0000db1c 	.word	0x0000db1c
    c34c:	0000db20 	.word	0x0000db20

0000c350 <__locale_ctype_ptr_l>:
    c350:	30ec      	adds	r0, #236	; 0xec
    c352:	6800      	ldr	r0, [r0, #0]
    c354:	4770      	bx	lr
	...

0000c358 <__locale_ctype_ptr>:
    c358:	4b04      	ldr	r3, [pc, #16]	; (c36c <__locale_ctype_ptr+0x14>)
    c35a:	681b      	ldr	r3, [r3, #0]
    c35c:	6a1b      	ldr	r3, [r3, #32]
    c35e:	2b00      	cmp	r3, #0
    c360:	d100      	bne.n	c364 <__locale_ctype_ptr+0xc>
    c362:	4b03      	ldr	r3, [pc, #12]	; (c370 <__locale_ctype_ptr+0x18>)
    c364:	33ec      	adds	r3, #236	; 0xec
    c366:	6818      	ldr	r0, [r3, #0]
    c368:	4770      	bx	lr
    c36a:	46c0      	nop			; (mov r8, r8)
    c36c:	2000002c 	.word	0x2000002c
    c370:	20000090 	.word	0x20000090

0000c374 <malloc>:
    c374:	b510      	push	{r4, lr}
    c376:	4b03      	ldr	r3, [pc, #12]	; (c384 <malloc+0x10>)
    c378:	0001      	movs	r1, r0
    c37a:	6818      	ldr	r0, [r3, #0]
    c37c:	f000 f89c 	bl	c4b8 <_malloc_r>
    c380:	bd10      	pop	{r4, pc}
    c382:	46c0      	nop			; (mov r8, r8)
    c384:	2000002c 	.word	0x2000002c

0000c388 <free>:
    c388:	b510      	push	{r4, lr}
    c38a:	4b03      	ldr	r3, [pc, #12]	; (c398 <free+0x10>)
    c38c:	0001      	movs	r1, r0
    c38e:	6818      	ldr	r0, [r3, #0]
    c390:	f000 f848 	bl	c424 <_free_r>
    c394:	bd10      	pop	{r4, pc}
    c396:	46c0      	nop			; (mov r8, r8)
    c398:	2000002c 	.word	0x2000002c

0000c39c <__ascii_mbtowc>:
    c39c:	b082      	sub	sp, #8
    c39e:	2900      	cmp	r1, #0
    c3a0:	d100      	bne.n	c3a4 <__ascii_mbtowc+0x8>
    c3a2:	a901      	add	r1, sp, #4
    c3a4:	1e10      	subs	r0, r2, #0
    c3a6:	d006      	beq.n	c3b6 <__ascii_mbtowc+0x1a>
    c3a8:	2b00      	cmp	r3, #0
    c3aa:	d006      	beq.n	c3ba <__ascii_mbtowc+0x1e>
    c3ac:	7813      	ldrb	r3, [r2, #0]
    c3ae:	600b      	str	r3, [r1, #0]
    c3b0:	7810      	ldrb	r0, [r2, #0]
    c3b2:	1e43      	subs	r3, r0, #1
    c3b4:	4198      	sbcs	r0, r3
    c3b6:	b002      	add	sp, #8
    c3b8:	4770      	bx	lr
    c3ba:	2002      	movs	r0, #2
    c3bc:	4240      	negs	r0, r0
    c3be:	e7fa      	b.n	c3b6 <__ascii_mbtowc+0x1a>

0000c3c0 <memcpy>:
    c3c0:	2300      	movs	r3, #0
    c3c2:	b510      	push	{r4, lr}
    c3c4:	429a      	cmp	r2, r3
    c3c6:	d100      	bne.n	c3ca <memcpy+0xa>
    c3c8:	bd10      	pop	{r4, pc}
    c3ca:	5ccc      	ldrb	r4, [r1, r3]
    c3cc:	54c4      	strb	r4, [r0, r3]
    c3ce:	3301      	adds	r3, #1
    c3d0:	e7f8      	b.n	c3c4 <memcpy+0x4>

0000c3d2 <memmove>:
    c3d2:	b510      	push	{r4, lr}
    c3d4:	4288      	cmp	r0, r1
    c3d6:	d902      	bls.n	c3de <memmove+0xc>
    c3d8:	188b      	adds	r3, r1, r2
    c3da:	4298      	cmp	r0, r3
    c3dc:	d308      	bcc.n	c3f0 <memmove+0x1e>
    c3de:	2300      	movs	r3, #0
    c3e0:	429a      	cmp	r2, r3
    c3e2:	d007      	beq.n	c3f4 <memmove+0x22>
    c3e4:	5ccc      	ldrb	r4, [r1, r3]
    c3e6:	54c4      	strb	r4, [r0, r3]
    c3e8:	3301      	adds	r3, #1
    c3ea:	e7f9      	b.n	c3e0 <memmove+0xe>
    c3ec:	5c8b      	ldrb	r3, [r1, r2]
    c3ee:	5483      	strb	r3, [r0, r2]
    c3f0:	3a01      	subs	r2, #1
    c3f2:	d2fb      	bcs.n	c3ec <memmove+0x1a>
    c3f4:	bd10      	pop	{r4, pc}

0000c3f6 <memset>:
    c3f6:	0003      	movs	r3, r0
    c3f8:	1882      	adds	r2, r0, r2
    c3fa:	4293      	cmp	r3, r2
    c3fc:	d100      	bne.n	c400 <memset+0xa>
    c3fe:	4770      	bx	lr
    c400:	7019      	strb	r1, [r3, #0]
    c402:	3301      	adds	r3, #1
    c404:	e7f9      	b.n	c3fa <memset+0x4>

0000c406 <_calloc_r>:
    c406:	434a      	muls	r2, r1
    c408:	b570      	push	{r4, r5, r6, lr}
    c40a:	0011      	movs	r1, r2
    c40c:	0014      	movs	r4, r2
    c40e:	f000 f853 	bl	c4b8 <_malloc_r>
    c412:	1e05      	subs	r5, r0, #0
    c414:	d003      	beq.n	c41e <_calloc_r+0x18>
    c416:	0022      	movs	r2, r4
    c418:	2100      	movs	r1, #0
    c41a:	f7ff ffec 	bl	c3f6 <memset>
    c41e:	0028      	movs	r0, r5
    c420:	bd70      	pop	{r4, r5, r6, pc}
	...

0000c424 <_free_r>:
    c424:	b570      	push	{r4, r5, r6, lr}
    c426:	0005      	movs	r5, r0
    c428:	2900      	cmp	r1, #0
    c42a:	d010      	beq.n	c44e <_free_r+0x2a>
    c42c:	1f0c      	subs	r4, r1, #4
    c42e:	6823      	ldr	r3, [r4, #0]
    c430:	2b00      	cmp	r3, #0
    c432:	da00      	bge.n	c436 <_free_r+0x12>
    c434:	18e4      	adds	r4, r4, r3
    c436:	0028      	movs	r0, r5
    c438:	f000 fab4 	bl	c9a4 <__malloc_lock>
    c43c:	4a1d      	ldr	r2, [pc, #116]	; (c4b4 <_free_r+0x90>)
    c43e:	6813      	ldr	r3, [r2, #0]
    c440:	2b00      	cmp	r3, #0
    c442:	d105      	bne.n	c450 <_free_r+0x2c>
    c444:	6063      	str	r3, [r4, #4]
    c446:	6014      	str	r4, [r2, #0]
    c448:	0028      	movs	r0, r5
    c44a:	f000 faac 	bl	c9a6 <__malloc_unlock>
    c44e:	bd70      	pop	{r4, r5, r6, pc}
    c450:	42a3      	cmp	r3, r4
    c452:	d909      	bls.n	c468 <_free_r+0x44>
    c454:	6821      	ldr	r1, [r4, #0]
    c456:	1860      	adds	r0, r4, r1
    c458:	4283      	cmp	r3, r0
    c45a:	d1f3      	bne.n	c444 <_free_r+0x20>
    c45c:	6818      	ldr	r0, [r3, #0]
    c45e:	685b      	ldr	r3, [r3, #4]
    c460:	1841      	adds	r1, r0, r1
    c462:	6021      	str	r1, [r4, #0]
    c464:	e7ee      	b.n	c444 <_free_r+0x20>
    c466:	0013      	movs	r3, r2
    c468:	685a      	ldr	r2, [r3, #4]
    c46a:	2a00      	cmp	r2, #0
    c46c:	d001      	beq.n	c472 <_free_r+0x4e>
    c46e:	42a2      	cmp	r2, r4
    c470:	d9f9      	bls.n	c466 <_free_r+0x42>
    c472:	6819      	ldr	r1, [r3, #0]
    c474:	1858      	adds	r0, r3, r1
    c476:	42a0      	cmp	r0, r4
    c478:	d10b      	bne.n	c492 <_free_r+0x6e>
    c47a:	6820      	ldr	r0, [r4, #0]
    c47c:	1809      	adds	r1, r1, r0
    c47e:	1858      	adds	r0, r3, r1
    c480:	6019      	str	r1, [r3, #0]
    c482:	4282      	cmp	r2, r0
    c484:	d1e0      	bne.n	c448 <_free_r+0x24>
    c486:	6810      	ldr	r0, [r2, #0]
    c488:	6852      	ldr	r2, [r2, #4]
    c48a:	1841      	adds	r1, r0, r1
    c48c:	6019      	str	r1, [r3, #0]
    c48e:	605a      	str	r2, [r3, #4]
    c490:	e7da      	b.n	c448 <_free_r+0x24>
    c492:	42a0      	cmp	r0, r4
    c494:	d902      	bls.n	c49c <_free_r+0x78>
    c496:	230c      	movs	r3, #12
    c498:	602b      	str	r3, [r5, #0]
    c49a:	e7d5      	b.n	c448 <_free_r+0x24>
    c49c:	6821      	ldr	r1, [r4, #0]
    c49e:	1860      	adds	r0, r4, r1
    c4a0:	4282      	cmp	r2, r0
    c4a2:	d103      	bne.n	c4ac <_free_r+0x88>
    c4a4:	6810      	ldr	r0, [r2, #0]
    c4a6:	6852      	ldr	r2, [r2, #4]
    c4a8:	1841      	adds	r1, r0, r1
    c4aa:	6021      	str	r1, [r4, #0]
    c4ac:	6062      	str	r2, [r4, #4]
    c4ae:	605c      	str	r4, [r3, #4]
    c4b0:	e7ca      	b.n	c448 <_free_r+0x24>
    c4b2:	46c0      	nop			; (mov r8, r8)
    c4b4:	20000500 	.word	0x20000500

0000c4b8 <_malloc_r>:
    c4b8:	2303      	movs	r3, #3
    c4ba:	b570      	push	{r4, r5, r6, lr}
    c4bc:	1ccd      	adds	r5, r1, #3
    c4be:	439d      	bics	r5, r3
    c4c0:	3508      	adds	r5, #8
    c4c2:	0006      	movs	r6, r0
    c4c4:	2d0c      	cmp	r5, #12
    c4c6:	d21e      	bcs.n	c506 <_malloc_r+0x4e>
    c4c8:	250c      	movs	r5, #12
    c4ca:	42a9      	cmp	r1, r5
    c4cc:	d81d      	bhi.n	c50a <_malloc_r+0x52>
    c4ce:	0030      	movs	r0, r6
    c4d0:	f000 fa68 	bl	c9a4 <__malloc_lock>
    c4d4:	4a25      	ldr	r2, [pc, #148]	; (c56c <_malloc_r+0xb4>)
    c4d6:	6814      	ldr	r4, [r2, #0]
    c4d8:	0021      	movs	r1, r4
    c4da:	2900      	cmp	r1, #0
    c4dc:	d119      	bne.n	c512 <_malloc_r+0x5a>
    c4de:	4c24      	ldr	r4, [pc, #144]	; (c570 <_malloc_r+0xb8>)
    c4e0:	6823      	ldr	r3, [r4, #0]
    c4e2:	2b00      	cmp	r3, #0
    c4e4:	d103      	bne.n	c4ee <_malloc_r+0x36>
    c4e6:	0030      	movs	r0, r6
    c4e8:	f000 f844 	bl	c574 <_sbrk_r>
    c4ec:	6020      	str	r0, [r4, #0]
    c4ee:	0029      	movs	r1, r5
    c4f0:	0030      	movs	r0, r6
    c4f2:	f000 f83f 	bl	c574 <_sbrk_r>
    c4f6:	1c43      	adds	r3, r0, #1
    c4f8:	d12c      	bne.n	c554 <_malloc_r+0x9c>
    c4fa:	230c      	movs	r3, #12
    c4fc:	0030      	movs	r0, r6
    c4fe:	6033      	str	r3, [r6, #0]
    c500:	f000 fa51 	bl	c9a6 <__malloc_unlock>
    c504:	e003      	b.n	c50e <_malloc_r+0x56>
    c506:	2d00      	cmp	r5, #0
    c508:	dadf      	bge.n	c4ca <_malloc_r+0x12>
    c50a:	230c      	movs	r3, #12
    c50c:	6033      	str	r3, [r6, #0]
    c50e:	2000      	movs	r0, #0
    c510:	bd70      	pop	{r4, r5, r6, pc}
    c512:	680b      	ldr	r3, [r1, #0]
    c514:	1b5b      	subs	r3, r3, r5
    c516:	d41a      	bmi.n	c54e <_malloc_r+0x96>
    c518:	2b0b      	cmp	r3, #11
    c51a:	d903      	bls.n	c524 <_malloc_r+0x6c>
    c51c:	600b      	str	r3, [r1, #0]
    c51e:	18cc      	adds	r4, r1, r3
    c520:	6025      	str	r5, [r4, #0]
    c522:	e003      	b.n	c52c <_malloc_r+0x74>
    c524:	428c      	cmp	r4, r1
    c526:	d10e      	bne.n	c546 <_malloc_r+0x8e>
    c528:	6863      	ldr	r3, [r4, #4]
    c52a:	6013      	str	r3, [r2, #0]
    c52c:	0030      	movs	r0, r6
    c52e:	f000 fa3a 	bl	c9a6 <__malloc_unlock>
    c532:	0020      	movs	r0, r4
    c534:	2207      	movs	r2, #7
    c536:	300b      	adds	r0, #11
    c538:	1d23      	adds	r3, r4, #4
    c53a:	4390      	bics	r0, r2
    c53c:	1ac3      	subs	r3, r0, r3
    c53e:	d0e7      	beq.n	c510 <_malloc_r+0x58>
    c540:	425a      	negs	r2, r3
    c542:	50e2      	str	r2, [r4, r3]
    c544:	e7e4      	b.n	c510 <_malloc_r+0x58>
    c546:	684b      	ldr	r3, [r1, #4]
    c548:	6063      	str	r3, [r4, #4]
    c54a:	000c      	movs	r4, r1
    c54c:	e7ee      	b.n	c52c <_malloc_r+0x74>
    c54e:	000c      	movs	r4, r1
    c550:	6849      	ldr	r1, [r1, #4]
    c552:	e7c2      	b.n	c4da <_malloc_r+0x22>
    c554:	2303      	movs	r3, #3
    c556:	1cc4      	adds	r4, r0, #3
    c558:	439c      	bics	r4, r3
    c55a:	42a0      	cmp	r0, r4
    c55c:	d0e0      	beq.n	c520 <_malloc_r+0x68>
    c55e:	1a21      	subs	r1, r4, r0
    c560:	0030      	movs	r0, r6
    c562:	f000 f807 	bl	c574 <_sbrk_r>
    c566:	1c43      	adds	r3, r0, #1
    c568:	d1da      	bne.n	c520 <_malloc_r+0x68>
    c56a:	e7c6      	b.n	c4fa <_malloc_r+0x42>
    c56c:	20000500 	.word	0x20000500
    c570:	20000504 	.word	0x20000504

0000c574 <_sbrk_r>:
    c574:	2300      	movs	r3, #0
    c576:	b570      	push	{r4, r5, r6, lr}
    c578:	4c06      	ldr	r4, [pc, #24]	; (c594 <_sbrk_r+0x20>)
    c57a:	0005      	movs	r5, r0
    c57c:	0008      	movs	r0, r1
    c57e:	6023      	str	r3, [r4, #0]
    c580:	f7fd fdc6 	bl	a110 <_sbrk>
    c584:	1c43      	adds	r3, r0, #1
    c586:	d103      	bne.n	c590 <_sbrk_r+0x1c>
    c588:	6823      	ldr	r3, [r4, #0]
    c58a:	2b00      	cmp	r3, #0
    c58c:	d000      	beq.n	c590 <_sbrk_r+0x1c>
    c58e:	602b      	str	r3, [r5, #0]
    c590:	bd70      	pop	{r4, r5, r6, pc}
    c592:	46c0      	nop			; (mov r8, r8)
    c594:	20000848 	.word	0x20000848

0000c598 <sniprintf>:
    c598:	b40c      	push	{r2, r3}
    c59a:	b530      	push	{r4, r5, lr}
    c59c:	4b16      	ldr	r3, [pc, #88]	; (c5f8 <sniprintf+0x60>)
    c59e:	b09d      	sub	sp, #116	; 0x74
    c5a0:	1e0c      	subs	r4, r1, #0
    c5a2:	681d      	ldr	r5, [r3, #0]
    c5a4:	da08      	bge.n	c5b8 <sniprintf+0x20>
    c5a6:	238b      	movs	r3, #139	; 0x8b
    c5a8:	2001      	movs	r0, #1
    c5aa:	602b      	str	r3, [r5, #0]
    c5ac:	4240      	negs	r0, r0
    c5ae:	b01d      	add	sp, #116	; 0x74
    c5b0:	bc30      	pop	{r4, r5}
    c5b2:	bc08      	pop	{r3}
    c5b4:	b002      	add	sp, #8
    c5b6:	4718      	bx	r3
    c5b8:	2382      	movs	r3, #130	; 0x82
    c5ba:	a902      	add	r1, sp, #8
    c5bc:	009b      	lsls	r3, r3, #2
    c5be:	818b      	strh	r3, [r1, #12]
    c5c0:	2300      	movs	r3, #0
    c5c2:	9002      	str	r0, [sp, #8]
    c5c4:	6108      	str	r0, [r1, #16]
    c5c6:	429c      	cmp	r4, r3
    c5c8:	d000      	beq.n	c5cc <sniprintf+0x34>
    c5ca:	1e63      	subs	r3, r4, #1
    c5cc:	608b      	str	r3, [r1, #8]
    c5ce:	614b      	str	r3, [r1, #20]
    c5d0:	2301      	movs	r3, #1
    c5d2:	425b      	negs	r3, r3
    c5d4:	81cb      	strh	r3, [r1, #14]
    c5d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
    c5d8:	ab21      	add	r3, sp, #132	; 0x84
    c5da:	0028      	movs	r0, r5
    c5dc:	9301      	str	r3, [sp, #4]
    c5de:	f000 fa45 	bl	ca6c <_svfiprintf_r>
    c5e2:	1c43      	adds	r3, r0, #1
    c5e4:	da01      	bge.n	c5ea <sniprintf+0x52>
    c5e6:	238b      	movs	r3, #139	; 0x8b
    c5e8:	602b      	str	r3, [r5, #0]
    c5ea:	2c00      	cmp	r4, #0
    c5ec:	d0df      	beq.n	c5ae <sniprintf+0x16>
    c5ee:	2300      	movs	r3, #0
    c5f0:	9a02      	ldr	r2, [sp, #8]
    c5f2:	7013      	strb	r3, [r2, #0]
    c5f4:	e7db      	b.n	c5ae <sniprintf+0x16>
    c5f6:	46c0      	nop			; (mov r8, r8)
    c5f8:	2000002c 	.word	0x2000002c

0000c5fc <siprintf>:
    c5fc:	b40e      	push	{r1, r2, r3}
    c5fe:	b510      	push	{r4, lr}
    c600:	b09d      	sub	sp, #116	; 0x74
    c602:	a902      	add	r1, sp, #8
    c604:	9002      	str	r0, [sp, #8]
    c606:	6108      	str	r0, [r1, #16]
    c608:	480b      	ldr	r0, [pc, #44]	; (c638 <siprintf+0x3c>)
    c60a:	2482      	movs	r4, #130	; 0x82
    c60c:	6088      	str	r0, [r1, #8]
    c60e:	6148      	str	r0, [r1, #20]
    c610:	2001      	movs	r0, #1
    c612:	4240      	negs	r0, r0
    c614:	ab1f      	add	r3, sp, #124	; 0x7c
    c616:	81c8      	strh	r0, [r1, #14]
    c618:	4808      	ldr	r0, [pc, #32]	; (c63c <siprintf+0x40>)
    c61a:	cb04      	ldmia	r3!, {r2}
    c61c:	00a4      	lsls	r4, r4, #2
    c61e:	6800      	ldr	r0, [r0, #0]
    c620:	9301      	str	r3, [sp, #4]
    c622:	818c      	strh	r4, [r1, #12]
    c624:	f000 fa22 	bl	ca6c <_svfiprintf_r>
    c628:	2300      	movs	r3, #0
    c62a:	9a02      	ldr	r2, [sp, #8]
    c62c:	7013      	strb	r3, [r2, #0]
    c62e:	b01d      	add	sp, #116	; 0x74
    c630:	bc10      	pop	{r4}
    c632:	bc08      	pop	{r3}
    c634:	b003      	add	sp, #12
    c636:	4718      	bx	r3
    c638:	7fffffff 	.word	0x7fffffff
    c63c:	2000002c 	.word	0x2000002c

0000c640 <strcat>:
    c640:	0002      	movs	r2, r0
    c642:	b510      	push	{r4, lr}
    c644:	7813      	ldrb	r3, [r2, #0]
    c646:	2b00      	cmp	r3, #0
    c648:	d105      	bne.n	c656 <strcat+0x16>
    c64a:	5ccc      	ldrb	r4, [r1, r3]
    c64c:	54d4      	strb	r4, [r2, r3]
    c64e:	3301      	adds	r3, #1
    c650:	2c00      	cmp	r4, #0
    c652:	d1fa      	bne.n	c64a <strcat+0xa>
    c654:	bd10      	pop	{r4, pc}
    c656:	3201      	adds	r2, #1
    c658:	e7f4      	b.n	c644 <strcat+0x4>

0000c65a <strchr>:
    c65a:	b2c9      	uxtb	r1, r1
    c65c:	7803      	ldrb	r3, [r0, #0]
    c65e:	2b00      	cmp	r3, #0
    c660:	d004      	beq.n	c66c <strchr+0x12>
    c662:	4299      	cmp	r1, r3
    c664:	d100      	bne.n	c668 <strchr+0xe>
    c666:	4770      	bx	lr
    c668:	3001      	adds	r0, #1
    c66a:	e7f7      	b.n	c65c <strchr+0x2>
    c66c:	424b      	negs	r3, r1
    c66e:	4159      	adcs	r1, r3
    c670:	4249      	negs	r1, r1
    c672:	4008      	ands	r0, r1
    c674:	e7f7      	b.n	c666 <strchr+0xc>

0000c676 <strcpy>:
    c676:	1c03      	adds	r3, r0, #0
    c678:	780a      	ldrb	r2, [r1, #0]
    c67a:	3101      	adds	r1, #1
    c67c:	701a      	strb	r2, [r3, #0]
    c67e:	3301      	adds	r3, #1
    c680:	2a00      	cmp	r2, #0
    c682:	d1f9      	bne.n	c678 <strcpy+0x2>
    c684:	4770      	bx	lr

0000c686 <strlen>:
    c686:	2300      	movs	r3, #0
    c688:	5cc2      	ldrb	r2, [r0, r3]
    c68a:	3301      	adds	r3, #1
    c68c:	2a00      	cmp	r2, #0
    c68e:	d1fb      	bne.n	c688 <strlen+0x2>
    c690:	1e58      	subs	r0, r3, #1
    c692:	4770      	bx	lr

0000c694 <strncmp>:
    c694:	2300      	movs	r3, #0
    c696:	b530      	push	{r4, r5, lr}
    c698:	429a      	cmp	r2, r3
    c69a:	d00a      	beq.n	c6b2 <strncmp+0x1e>
    c69c:	3a01      	subs	r2, #1
    c69e:	5cc4      	ldrb	r4, [r0, r3]
    c6a0:	5ccd      	ldrb	r5, [r1, r3]
    c6a2:	42ac      	cmp	r4, r5
    c6a4:	d104      	bne.n	c6b0 <strncmp+0x1c>
    c6a6:	429a      	cmp	r2, r3
    c6a8:	d002      	beq.n	c6b0 <strncmp+0x1c>
    c6aa:	3301      	adds	r3, #1
    c6ac:	2c00      	cmp	r4, #0
    c6ae:	d1f6      	bne.n	c69e <strncmp+0xa>
    c6b0:	1b63      	subs	r3, r4, r5
    c6b2:	0018      	movs	r0, r3
    c6b4:	bd30      	pop	{r4, r5, pc}

0000c6b6 <strstr>:
    c6b6:	b510      	push	{r4, lr}
    c6b8:	0002      	movs	r2, r0
    c6ba:	7800      	ldrb	r0, [r0, #0]
    c6bc:	2800      	cmp	r0, #0
    c6be:	d104      	bne.n	c6ca <strstr+0x14>
    c6c0:	7809      	ldrb	r1, [r1, #0]
    c6c2:	2900      	cmp	r1, #0
    c6c4:	d00d      	beq.n	c6e2 <strstr+0x2c>
    c6c6:	bd10      	pop	{r4, pc}
    c6c8:	3201      	adds	r2, #1
    c6ca:	7810      	ldrb	r0, [r2, #0]
    c6cc:	2800      	cmp	r0, #0
    c6ce:	d0fa      	beq.n	c6c6 <strstr+0x10>
    c6d0:	2300      	movs	r3, #0
    c6d2:	5cc8      	ldrb	r0, [r1, r3]
    c6d4:	2800      	cmp	r0, #0
    c6d6:	d004      	beq.n	c6e2 <strstr+0x2c>
    c6d8:	5cd4      	ldrb	r4, [r2, r3]
    c6da:	4284      	cmp	r4, r0
    c6dc:	d1f4      	bne.n	c6c8 <strstr+0x12>
    c6de:	3301      	adds	r3, #1
    c6e0:	e7f7      	b.n	c6d2 <strstr+0x1c>
    c6e2:	0010      	movs	r0, r2
    c6e4:	e7ef      	b.n	c6c6 <strstr+0x10>
	...

0000c6e8 <strtok>:
    c6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c6ea:	4b12      	ldr	r3, [pc, #72]	; (c734 <strtok+0x4c>)
    c6ec:	0006      	movs	r6, r0
    c6ee:	681d      	ldr	r5, [r3, #0]
    c6f0:	000f      	movs	r7, r1
    c6f2:	6dac      	ldr	r4, [r5, #88]	; 0x58
    c6f4:	2c00      	cmp	r4, #0
    c6f6:	d116      	bne.n	c726 <strtok+0x3e>
    c6f8:	2050      	movs	r0, #80	; 0x50
    c6fa:	f7ff fe3b 	bl	c374 <malloc>
    c6fe:	65a8      	str	r0, [r5, #88]	; 0x58
    c700:	6004      	str	r4, [r0, #0]
    c702:	6044      	str	r4, [r0, #4]
    c704:	6084      	str	r4, [r0, #8]
    c706:	60c4      	str	r4, [r0, #12]
    c708:	6104      	str	r4, [r0, #16]
    c70a:	6144      	str	r4, [r0, #20]
    c70c:	6184      	str	r4, [r0, #24]
    c70e:	6284      	str	r4, [r0, #40]	; 0x28
    c710:	62c4      	str	r4, [r0, #44]	; 0x2c
    c712:	6304      	str	r4, [r0, #48]	; 0x30
    c714:	6344      	str	r4, [r0, #52]	; 0x34
    c716:	6384      	str	r4, [r0, #56]	; 0x38
    c718:	63c4      	str	r4, [r0, #60]	; 0x3c
    c71a:	6404      	str	r4, [r0, #64]	; 0x40
    c71c:	6444      	str	r4, [r0, #68]	; 0x44
    c71e:	6484      	str	r4, [r0, #72]	; 0x48
    c720:	64c4      	str	r4, [r0, #76]	; 0x4c
    c722:	7704      	strb	r4, [r0, #28]
    c724:	6244      	str	r4, [r0, #36]	; 0x24
    c726:	6daa      	ldr	r2, [r5, #88]	; 0x58
    c728:	0039      	movs	r1, r7
    c72a:	0030      	movs	r0, r6
    c72c:	2301      	movs	r3, #1
    c72e:	f000 f803 	bl	c738 <__strtok_r>
    c732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c734:	2000002c 	.word	0x2000002c

0000c738 <__strtok_r>:
    c738:	b5f0      	push	{r4, r5, r6, r7, lr}
    c73a:	2800      	cmp	r0, #0
    c73c:	d104      	bne.n	c748 <__strtok_r+0x10>
    c73e:	6810      	ldr	r0, [r2, #0]
    c740:	2800      	cmp	r0, #0
    c742:	d101      	bne.n	c748 <__strtok_r+0x10>
    c744:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c746:	0020      	movs	r0, r4
    c748:	000e      	movs	r6, r1
    c74a:	7805      	ldrb	r5, [r0, #0]
    c74c:	1c44      	adds	r4, r0, #1
    c74e:	7837      	ldrb	r7, [r6, #0]
    c750:	2f00      	cmp	r7, #0
    c752:	d104      	bne.n	c75e <__strtok_r+0x26>
    c754:	2d00      	cmp	r5, #0
    c756:	d110      	bne.n	c77a <__strtok_r+0x42>
    c758:	6015      	str	r5, [r2, #0]
    c75a:	0028      	movs	r0, r5
    c75c:	e7f2      	b.n	c744 <__strtok_r+0xc>
    c75e:	3601      	adds	r6, #1
    c760:	42bd      	cmp	r5, r7
    c762:	d1f4      	bne.n	c74e <__strtok_r+0x16>
    c764:	2b00      	cmp	r3, #0
    c766:	d1ee      	bne.n	c746 <__strtok_r+0xe>
    c768:	6014      	str	r4, [r2, #0]
    c76a:	7003      	strb	r3, [r0, #0]
    c76c:	e7ea      	b.n	c744 <__strtok_r+0xc>
    c76e:	0033      	movs	r3, r6
    c770:	e00e      	b.n	c790 <__strtok_r+0x58>
    c772:	3501      	adds	r5, #1
    c774:	001c      	movs	r4, r3
    c776:	2f00      	cmp	r7, #0
    c778:	d102      	bne.n	c780 <__strtok_r+0x48>
    c77a:	000d      	movs	r5, r1
    c77c:	7826      	ldrb	r6, [r4, #0]
    c77e:	1c63      	adds	r3, r4, #1
    c780:	782f      	ldrb	r7, [r5, #0]
    c782:	42be      	cmp	r6, r7
    c784:	d1f5      	bne.n	c772 <__strtok_r+0x3a>
    c786:	2e00      	cmp	r6, #0
    c788:	d0f1      	beq.n	c76e <__strtok_r+0x36>
    c78a:	2400      	movs	r4, #0
    c78c:	1e59      	subs	r1, r3, #1
    c78e:	700c      	strb	r4, [r1, #0]
    c790:	6013      	str	r3, [r2, #0]
    c792:	e7d7      	b.n	c744 <__strtok_r+0xc>

0000c794 <_strtol_l.isra.0>:
    c794:	b5f0      	push	{r4, r5, r6, r7, lr}
    c796:	001f      	movs	r7, r3
    c798:	000e      	movs	r6, r1
    c79a:	b087      	sub	sp, #28
    c79c:	9005      	str	r0, [sp, #20]
    c79e:	9103      	str	r1, [sp, #12]
    c7a0:	9202      	str	r2, [sp, #8]
    c7a2:	980c      	ldr	r0, [sp, #48]	; 0x30
    c7a4:	7834      	ldrb	r4, [r6, #0]
    c7a6:	f7ff fdd3 	bl	c350 <__locale_ctype_ptr_l>
    c7aa:	2208      	movs	r2, #8
    c7ac:	1900      	adds	r0, r0, r4
    c7ae:	7843      	ldrb	r3, [r0, #1]
    c7b0:	1c75      	adds	r5, r6, #1
    c7b2:	4013      	ands	r3, r2
    c7b4:	d10c      	bne.n	c7d0 <_strtol_l.isra.0+0x3c>
    c7b6:	2c2d      	cmp	r4, #45	; 0x2d
    c7b8:	d10c      	bne.n	c7d4 <_strtol_l.isra.0+0x40>
    c7ba:	3301      	adds	r3, #1
    c7bc:	782c      	ldrb	r4, [r5, #0]
    c7be:	9301      	str	r3, [sp, #4]
    c7c0:	1cb5      	adds	r5, r6, #2
    c7c2:	2f00      	cmp	r7, #0
    c7c4:	d00c      	beq.n	c7e0 <_strtol_l.isra.0+0x4c>
    c7c6:	2f10      	cmp	r7, #16
    c7c8:	d114      	bne.n	c7f4 <_strtol_l.isra.0+0x60>
    c7ca:	2c30      	cmp	r4, #48	; 0x30
    c7cc:	d00a      	beq.n	c7e4 <_strtol_l.isra.0+0x50>
    c7ce:	e011      	b.n	c7f4 <_strtol_l.isra.0+0x60>
    c7d0:	002e      	movs	r6, r5
    c7d2:	e7e6      	b.n	c7a2 <_strtol_l.isra.0+0xe>
    c7d4:	9301      	str	r3, [sp, #4]
    c7d6:	2c2b      	cmp	r4, #43	; 0x2b
    c7d8:	d1f3      	bne.n	c7c2 <_strtol_l.isra.0+0x2e>
    c7da:	782c      	ldrb	r4, [r5, #0]
    c7dc:	1cb5      	adds	r5, r6, #2
    c7de:	e7f0      	b.n	c7c2 <_strtol_l.isra.0+0x2e>
    c7e0:	2c30      	cmp	r4, #48	; 0x30
    c7e2:	d12f      	bne.n	c844 <_strtol_l.isra.0+0xb0>
    c7e4:	2220      	movs	r2, #32
    c7e6:	782b      	ldrb	r3, [r5, #0]
    c7e8:	4393      	bics	r3, r2
    c7ea:	2b58      	cmp	r3, #88	; 0x58
    c7ec:	d151      	bne.n	c892 <_strtol_l.isra.0+0xfe>
    c7ee:	2710      	movs	r7, #16
    c7f0:	786c      	ldrb	r4, [r5, #1]
    c7f2:	3502      	adds	r5, #2
    c7f4:	9b01      	ldr	r3, [sp, #4]
    c7f6:	4a29      	ldr	r2, [pc, #164]	; (c89c <_strtol_l.isra.0+0x108>)
    c7f8:	0039      	movs	r1, r7
    c7fa:	189e      	adds	r6, r3, r2
    c7fc:	0030      	movs	r0, r6
    c7fe:	f7fd fde9 	bl	a3d4 <__aeabi_uidivmod>
    c802:	0030      	movs	r0, r6
    c804:	9104      	str	r1, [sp, #16]
    c806:	0039      	movs	r1, r7
    c808:	f7fd fd5e 	bl	a2c8 <__udivsi3>
    c80c:	2101      	movs	r1, #1
    c80e:	2300      	movs	r3, #0
    c810:	4249      	negs	r1, r1
    c812:	0002      	movs	r2, r0
    c814:	468c      	mov	ip, r1
    c816:	0018      	movs	r0, r3
    c818:	0021      	movs	r1, r4
    c81a:	3930      	subs	r1, #48	; 0x30
    c81c:	2909      	cmp	r1, #9
    c81e:	d813      	bhi.n	c848 <_strtol_l.isra.0+0xb4>
    c820:	000c      	movs	r4, r1
    c822:	42a7      	cmp	r7, r4
    c824:	dd1c      	ble.n	c860 <_strtol_l.isra.0+0xcc>
    c826:	1c59      	adds	r1, r3, #1
    c828:	d009      	beq.n	c83e <_strtol_l.isra.0+0xaa>
    c82a:	4663      	mov	r3, ip
    c82c:	4282      	cmp	r2, r0
    c82e:	d306      	bcc.n	c83e <_strtol_l.isra.0+0xaa>
    c830:	d102      	bne.n	c838 <_strtol_l.isra.0+0xa4>
    c832:	9904      	ldr	r1, [sp, #16]
    c834:	42a1      	cmp	r1, r4
    c836:	db02      	blt.n	c83e <_strtol_l.isra.0+0xaa>
    c838:	2301      	movs	r3, #1
    c83a:	4378      	muls	r0, r7
    c83c:	1820      	adds	r0, r4, r0
    c83e:	782c      	ldrb	r4, [r5, #0]
    c840:	3501      	adds	r5, #1
    c842:	e7e9      	b.n	c818 <_strtol_l.isra.0+0x84>
    c844:	270a      	movs	r7, #10
    c846:	e7d5      	b.n	c7f4 <_strtol_l.isra.0+0x60>
    c848:	0021      	movs	r1, r4
    c84a:	3941      	subs	r1, #65	; 0x41
    c84c:	2919      	cmp	r1, #25
    c84e:	d801      	bhi.n	c854 <_strtol_l.isra.0+0xc0>
    c850:	3c37      	subs	r4, #55	; 0x37
    c852:	e7e6      	b.n	c822 <_strtol_l.isra.0+0x8e>
    c854:	0021      	movs	r1, r4
    c856:	3961      	subs	r1, #97	; 0x61
    c858:	2919      	cmp	r1, #25
    c85a:	d801      	bhi.n	c860 <_strtol_l.isra.0+0xcc>
    c85c:	3c57      	subs	r4, #87	; 0x57
    c85e:	e7e0      	b.n	c822 <_strtol_l.isra.0+0x8e>
    c860:	1c5a      	adds	r2, r3, #1
    c862:	d108      	bne.n	c876 <_strtol_l.isra.0+0xe2>
    c864:	9a05      	ldr	r2, [sp, #20]
    c866:	3323      	adds	r3, #35	; 0x23
    c868:	6013      	str	r3, [r2, #0]
    c86a:	9b02      	ldr	r3, [sp, #8]
    c86c:	0030      	movs	r0, r6
    c86e:	2b00      	cmp	r3, #0
    c870:	d10b      	bne.n	c88a <_strtol_l.isra.0+0xf6>
    c872:	b007      	add	sp, #28
    c874:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c876:	9a01      	ldr	r2, [sp, #4]
    c878:	2a00      	cmp	r2, #0
    c87a:	d000      	beq.n	c87e <_strtol_l.isra.0+0xea>
    c87c:	4240      	negs	r0, r0
    c87e:	9a02      	ldr	r2, [sp, #8]
    c880:	2a00      	cmp	r2, #0
    c882:	d0f6      	beq.n	c872 <_strtol_l.isra.0+0xde>
    c884:	9a03      	ldr	r2, [sp, #12]
    c886:	2b00      	cmp	r3, #0
    c888:	d000      	beq.n	c88c <_strtol_l.isra.0+0xf8>
    c88a:	1e6a      	subs	r2, r5, #1
    c88c:	9b02      	ldr	r3, [sp, #8]
    c88e:	601a      	str	r2, [r3, #0]
    c890:	e7ef      	b.n	c872 <_strtol_l.isra.0+0xde>
    c892:	2430      	movs	r4, #48	; 0x30
    c894:	2f00      	cmp	r7, #0
    c896:	d1ad      	bne.n	c7f4 <_strtol_l.isra.0+0x60>
    c898:	3708      	adds	r7, #8
    c89a:	e7ab      	b.n	c7f4 <_strtol_l.isra.0+0x60>
    c89c:	7fffffff 	.word	0x7fffffff

0000c8a0 <strtol>:
    c8a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c8a2:	0013      	movs	r3, r2
    c8a4:	4a06      	ldr	r2, [pc, #24]	; (c8c0 <strtol+0x20>)
    c8a6:	0005      	movs	r5, r0
    c8a8:	6810      	ldr	r0, [r2, #0]
    c8aa:	6a04      	ldr	r4, [r0, #32]
    c8ac:	2c00      	cmp	r4, #0
    c8ae:	d100      	bne.n	c8b2 <strtol+0x12>
    c8b0:	4c04      	ldr	r4, [pc, #16]	; (c8c4 <strtol+0x24>)
    c8b2:	000a      	movs	r2, r1
    c8b4:	9400      	str	r4, [sp, #0]
    c8b6:	0029      	movs	r1, r5
    c8b8:	f7ff ff6c 	bl	c794 <_strtol_l.isra.0>
    c8bc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    c8be:	46c0      	nop			; (mov r8, r8)
    c8c0:	2000002c 	.word	0x2000002c
    c8c4:	20000090 	.word	0x20000090

0000c8c8 <__utoa>:
    c8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c8ca:	0017      	movs	r7, r2
    c8cc:	b08f      	sub	sp, #60	; 0x3c
    c8ce:	2225      	movs	r2, #37	; 0x25
    c8d0:	0006      	movs	r6, r0
    c8d2:	000d      	movs	r5, r1
    c8d4:	a804      	add	r0, sp, #16
    c8d6:	4918      	ldr	r1, [pc, #96]	; (c938 <__utoa+0x70>)
    c8d8:	f7ff fd72 	bl	c3c0 <memcpy>
    c8dc:	aa04      	add	r2, sp, #16
    c8de:	1ebb      	subs	r3, r7, #2
    c8e0:	2400      	movs	r4, #0
    c8e2:	9203      	str	r2, [sp, #12]
    c8e4:	2b22      	cmp	r3, #34	; 0x22
    c8e6:	d905      	bls.n	c8f4 <__utoa+0x2c>
    c8e8:	702c      	strb	r4, [r5, #0]
    c8ea:	0025      	movs	r5, r4
    c8ec:	0028      	movs	r0, r5
    c8ee:	b00f      	add	sp, #60	; 0x3c
    c8f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c8f2:	9c01      	ldr	r4, [sp, #4]
    c8f4:	1c63      	adds	r3, r4, #1
    c8f6:	9301      	str	r3, [sp, #4]
    c8f8:	18eb      	adds	r3, r5, r3
    c8fa:	9300      	str	r3, [sp, #0]
    c8fc:	0030      	movs	r0, r6
    c8fe:	3b01      	subs	r3, #1
    c900:	0039      	movs	r1, r7
    c902:	9302      	str	r3, [sp, #8]
    c904:	f7fd fd66 	bl	a3d4 <__aeabi_uidivmod>
    c908:	9b03      	ldr	r3, [sp, #12]
    c90a:	9a02      	ldr	r2, [sp, #8]
    c90c:	5c5b      	ldrb	r3, [r3, r1]
    c90e:	0030      	movs	r0, r6
    c910:	7013      	strb	r3, [r2, #0]
    c912:	0039      	movs	r1, r7
    c914:	f7fd fcd8 	bl	a2c8 <__udivsi3>
    c918:	1e06      	subs	r6, r0, #0
    c91a:	d1ea      	bne.n	c8f2 <__utoa+0x2a>
    c91c:	9b00      	ldr	r3, [sp, #0]
    c91e:	7018      	strb	r0, [r3, #0]
    c920:	002b      	movs	r3, r5
    c922:	1b5a      	subs	r2, r3, r5
    c924:	4294      	cmp	r4, r2
    c926:	dde1      	ble.n	c8ec <__utoa+0x24>
    c928:	781a      	ldrb	r2, [r3, #0]
    c92a:	5d29      	ldrb	r1, [r5, r4]
    c92c:	7019      	strb	r1, [r3, #0]
    c92e:	552a      	strb	r2, [r5, r4]
    c930:	3301      	adds	r3, #1
    c932:	3c01      	subs	r4, #1
    c934:	e7f5      	b.n	c922 <__utoa+0x5a>
    c936:	46c0      	nop			; (mov r8, r8)
    c938:	0000d9b6 	.word	0x0000d9b6

0000c93c <utoa>:
    c93c:	b510      	push	{r4, lr}
    c93e:	f7ff ffc3 	bl	c8c8 <__utoa>
    c942:	bd10      	pop	{r4, pc}

0000c944 <_vsiprintf_r>:
    c944:	b530      	push	{r4, r5, lr}
    c946:	b09b      	sub	sp, #108	; 0x6c
    c948:	9100      	str	r1, [sp, #0]
    c94a:	9104      	str	r1, [sp, #16]
    c94c:	4908      	ldr	r1, [pc, #32]	; (c970 <_vsiprintf_r+0x2c>)
    c94e:	466d      	mov	r5, sp
    c950:	9102      	str	r1, [sp, #8]
    c952:	9105      	str	r1, [sp, #20]
    c954:	2101      	movs	r1, #1
    c956:	2482      	movs	r4, #130	; 0x82
    c958:	4249      	negs	r1, r1
    c95a:	81e9      	strh	r1, [r5, #14]
    c95c:	00a4      	lsls	r4, r4, #2
    c95e:	4669      	mov	r1, sp
    c960:	81ac      	strh	r4, [r5, #12]
    c962:	f000 f883 	bl	ca6c <_svfiprintf_r>
    c966:	2300      	movs	r3, #0
    c968:	9a00      	ldr	r2, [sp, #0]
    c96a:	7013      	strb	r3, [r2, #0]
    c96c:	b01b      	add	sp, #108	; 0x6c
    c96e:	bd30      	pop	{r4, r5, pc}
    c970:	7fffffff 	.word	0x7fffffff

0000c974 <vsiprintf>:
    c974:	b510      	push	{r4, lr}
    c976:	0013      	movs	r3, r2
    c978:	000a      	movs	r2, r1
    c97a:	0001      	movs	r1, r0
    c97c:	4802      	ldr	r0, [pc, #8]	; (c988 <vsiprintf+0x14>)
    c97e:	6800      	ldr	r0, [r0, #0]
    c980:	f7ff ffe0 	bl	c944 <_vsiprintf_r>
    c984:	bd10      	pop	{r4, pc}
    c986:	46c0      	nop			; (mov r8, r8)
    c988:	2000002c 	.word	0x2000002c

0000c98c <__ascii_wctomb>:
    c98c:	1e0b      	subs	r3, r1, #0
    c98e:	d004      	beq.n	c99a <__ascii_wctomb+0xe>
    c990:	2aff      	cmp	r2, #255	; 0xff
    c992:	d904      	bls.n	c99e <__ascii_wctomb+0x12>
    c994:	238a      	movs	r3, #138	; 0x8a
    c996:	6003      	str	r3, [r0, #0]
    c998:	3b8b      	subs	r3, #139	; 0x8b
    c99a:	0018      	movs	r0, r3
    c99c:	4770      	bx	lr
    c99e:	700a      	strb	r2, [r1, #0]
    c9a0:	2301      	movs	r3, #1
    c9a2:	e7fa      	b.n	c99a <__ascii_wctomb+0xe>

0000c9a4 <__malloc_lock>:
    c9a4:	4770      	bx	lr

0000c9a6 <__malloc_unlock>:
    c9a6:	4770      	bx	lr

0000c9a8 <__ssputs_r>:
    c9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9aa:	688e      	ldr	r6, [r1, #8]
    c9ac:	b085      	sub	sp, #20
    c9ae:	0007      	movs	r7, r0
    c9b0:	000c      	movs	r4, r1
    c9b2:	9203      	str	r2, [sp, #12]
    c9b4:	9301      	str	r3, [sp, #4]
    c9b6:	429e      	cmp	r6, r3
    c9b8:	d839      	bhi.n	ca2e <__ssputs_r+0x86>
    c9ba:	2390      	movs	r3, #144	; 0x90
    c9bc:	898a      	ldrh	r2, [r1, #12]
    c9be:	00db      	lsls	r3, r3, #3
    c9c0:	421a      	tst	r2, r3
    c9c2:	d034      	beq.n	ca2e <__ssputs_r+0x86>
    c9c4:	2503      	movs	r5, #3
    c9c6:	6909      	ldr	r1, [r1, #16]
    c9c8:	6823      	ldr	r3, [r4, #0]
    c9ca:	1a5b      	subs	r3, r3, r1
    c9cc:	9302      	str	r3, [sp, #8]
    c9ce:	6963      	ldr	r3, [r4, #20]
    c9d0:	9802      	ldr	r0, [sp, #8]
    c9d2:	435d      	muls	r5, r3
    c9d4:	0feb      	lsrs	r3, r5, #31
    c9d6:	195d      	adds	r5, r3, r5
    c9d8:	9b01      	ldr	r3, [sp, #4]
    c9da:	106d      	asrs	r5, r5, #1
    c9dc:	3301      	adds	r3, #1
    c9de:	181b      	adds	r3, r3, r0
    c9e0:	42ab      	cmp	r3, r5
    c9e2:	d900      	bls.n	c9e6 <__ssputs_r+0x3e>
    c9e4:	001d      	movs	r5, r3
    c9e6:	0553      	lsls	r3, r2, #21
    c9e8:	d532      	bpl.n	ca50 <__ssputs_r+0xa8>
    c9ea:	0029      	movs	r1, r5
    c9ec:	0038      	movs	r0, r7
    c9ee:	f7ff fd63 	bl	c4b8 <_malloc_r>
    c9f2:	1e06      	subs	r6, r0, #0
    c9f4:	d109      	bne.n	ca0a <__ssputs_r+0x62>
    c9f6:	230c      	movs	r3, #12
    c9f8:	603b      	str	r3, [r7, #0]
    c9fa:	2340      	movs	r3, #64	; 0x40
    c9fc:	2001      	movs	r0, #1
    c9fe:	89a2      	ldrh	r2, [r4, #12]
    ca00:	4240      	negs	r0, r0
    ca02:	4313      	orrs	r3, r2
    ca04:	81a3      	strh	r3, [r4, #12]
    ca06:	b005      	add	sp, #20
    ca08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ca0a:	9a02      	ldr	r2, [sp, #8]
    ca0c:	6921      	ldr	r1, [r4, #16]
    ca0e:	f7ff fcd7 	bl	c3c0 <memcpy>
    ca12:	89a3      	ldrh	r3, [r4, #12]
    ca14:	4a14      	ldr	r2, [pc, #80]	; (ca68 <__ssputs_r+0xc0>)
    ca16:	401a      	ands	r2, r3
    ca18:	2380      	movs	r3, #128	; 0x80
    ca1a:	4313      	orrs	r3, r2
    ca1c:	81a3      	strh	r3, [r4, #12]
    ca1e:	9b02      	ldr	r3, [sp, #8]
    ca20:	6126      	str	r6, [r4, #16]
    ca22:	18f6      	adds	r6, r6, r3
    ca24:	6026      	str	r6, [r4, #0]
    ca26:	6165      	str	r5, [r4, #20]
    ca28:	9e01      	ldr	r6, [sp, #4]
    ca2a:	1aed      	subs	r5, r5, r3
    ca2c:	60a5      	str	r5, [r4, #8]
    ca2e:	9b01      	ldr	r3, [sp, #4]
    ca30:	42b3      	cmp	r3, r6
    ca32:	d200      	bcs.n	ca36 <__ssputs_r+0x8e>
    ca34:	001e      	movs	r6, r3
    ca36:	0032      	movs	r2, r6
    ca38:	9903      	ldr	r1, [sp, #12]
    ca3a:	6820      	ldr	r0, [r4, #0]
    ca3c:	f7ff fcc9 	bl	c3d2 <memmove>
    ca40:	68a3      	ldr	r3, [r4, #8]
    ca42:	2000      	movs	r0, #0
    ca44:	1b9b      	subs	r3, r3, r6
    ca46:	60a3      	str	r3, [r4, #8]
    ca48:	6823      	ldr	r3, [r4, #0]
    ca4a:	199e      	adds	r6, r3, r6
    ca4c:	6026      	str	r6, [r4, #0]
    ca4e:	e7da      	b.n	ca06 <__ssputs_r+0x5e>
    ca50:	002a      	movs	r2, r5
    ca52:	0038      	movs	r0, r7
    ca54:	f000 faa1 	bl	cf9a <_realloc_r>
    ca58:	1e06      	subs	r6, r0, #0
    ca5a:	d1e0      	bne.n	ca1e <__ssputs_r+0x76>
    ca5c:	6921      	ldr	r1, [r4, #16]
    ca5e:	0038      	movs	r0, r7
    ca60:	f7ff fce0 	bl	c424 <_free_r>
    ca64:	e7c7      	b.n	c9f6 <__ssputs_r+0x4e>
    ca66:	46c0      	nop			; (mov r8, r8)
    ca68:	fffffb7f 	.word	0xfffffb7f

0000ca6c <_svfiprintf_r>:
    ca6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca6e:	b09f      	sub	sp, #124	; 0x7c
    ca70:	9002      	str	r0, [sp, #8]
    ca72:	9305      	str	r3, [sp, #20]
    ca74:	898b      	ldrh	r3, [r1, #12]
    ca76:	000f      	movs	r7, r1
    ca78:	0016      	movs	r6, r2
    ca7a:	061b      	lsls	r3, r3, #24
    ca7c:	d511      	bpl.n	caa2 <_svfiprintf_r+0x36>
    ca7e:	690b      	ldr	r3, [r1, #16]
    ca80:	2b00      	cmp	r3, #0
    ca82:	d10e      	bne.n	caa2 <_svfiprintf_r+0x36>
    ca84:	2140      	movs	r1, #64	; 0x40
    ca86:	f7ff fd17 	bl	c4b8 <_malloc_r>
    ca8a:	6038      	str	r0, [r7, #0]
    ca8c:	6138      	str	r0, [r7, #16]
    ca8e:	2800      	cmp	r0, #0
    ca90:	d105      	bne.n	ca9e <_svfiprintf_r+0x32>
    ca92:	230c      	movs	r3, #12
    ca94:	9a02      	ldr	r2, [sp, #8]
    ca96:	3801      	subs	r0, #1
    ca98:	6013      	str	r3, [r2, #0]
    ca9a:	b01f      	add	sp, #124	; 0x7c
    ca9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ca9e:	2340      	movs	r3, #64	; 0x40
    caa0:	617b      	str	r3, [r7, #20]
    caa2:	2300      	movs	r3, #0
    caa4:	ad06      	add	r5, sp, #24
    caa6:	616b      	str	r3, [r5, #20]
    caa8:	3320      	adds	r3, #32
    caaa:	766b      	strb	r3, [r5, #25]
    caac:	3310      	adds	r3, #16
    caae:	76ab      	strb	r3, [r5, #26]
    cab0:	0034      	movs	r4, r6
    cab2:	7823      	ldrb	r3, [r4, #0]
    cab4:	2b00      	cmp	r3, #0
    cab6:	d147      	bne.n	cb48 <_svfiprintf_r+0xdc>
    cab8:	1ba3      	subs	r3, r4, r6
    caba:	9304      	str	r3, [sp, #16]
    cabc:	d00d      	beq.n	cada <_svfiprintf_r+0x6e>
    cabe:	1ba3      	subs	r3, r4, r6
    cac0:	0032      	movs	r2, r6
    cac2:	0039      	movs	r1, r7
    cac4:	9802      	ldr	r0, [sp, #8]
    cac6:	f7ff ff6f 	bl	c9a8 <__ssputs_r>
    caca:	1c43      	adds	r3, r0, #1
    cacc:	d100      	bne.n	cad0 <_svfiprintf_r+0x64>
    cace:	e0b5      	b.n	cc3c <_svfiprintf_r+0x1d0>
    cad0:	696a      	ldr	r2, [r5, #20]
    cad2:	9b04      	ldr	r3, [sp, #16]
    cad4:	4694      	mov	ip, r2
    cad6:	4463      	add	r3, ip
    cad8:	616b      	str	r3, [r5, #20]
    cada:	7823      	ldrb	r3, [r4, #0]
    cadc:	2b00      	cmp	r3, #0
    cade:	d100      	bne.n	cae2 <_svfiprintf_r+0x76>
    cae0:	e0ac      	b.n	cc3c <_svfiprintf_r+0x1d0>
    cae2:	2201      	movs	r2, #1
    cae4:	2300      	movs	r3, #0
    cae6:	4252      	negs	r2, r2
    cae8:	606a      	str	r2, [r5, #4]
    caea:	a902      	add	r1, sp, #8
    caec:	3254      	adds	r2, #84	; 0x54
    caee:	1852      	adds	r2, r2, r1
    caf0:	3401      	adds	r4, #1
    caf2:	602b      	str	r3, [r5, #0]
    caf4:	60eb      	str	r3, [r5, #12]
    caf6:	60ab      	str	r3, [r5, #8]
    caf8:	7013      	strb	r3, [r2, #0]
    cafa:	65ab      	str	r3, [r5, #88]	; 0x58
    cafc:	4e58      	ldr	r6, [pc, #352]	; (cc60 <_svfiprintf_r+0x1f4>)
    cafe:	2205      	movs	r2, #5
    cb00:	7821      	ldrb	r1, [r4, #0]
    cb02:	0030      	movs	r0, r6
    cb04:	f000 fa3e 	bl	cf84 <memchr>
    cb08:	1c62      	adds	r2, r4, #1
    cb0a:	2800      	cmp	r0, #0
    cb0c:	d120      	bne.n	cb50 <_svfiprintf_r+0xe4>
    cb0e:	6829      	ldr	r1, [r5, #0]
    cb10:	06cb      	lsls	r3, r1, #27
    cb12:	d504      	bpl.n	cb1e <_svfiprintf_r+0xb2>
    cb14:	2353      	movs	r3, #83	; 0x53
    cb16:	ae02      	add	r6, sp, #8
    cb18:	3020      	adds	r0, #32
    cb1a:	199b      	adds	r3, r3, r6
    cb1c:	7018      	strb	r0, [r3, #0]
    cb1e:	070b      	lsls	r3, r1, #28
    cb20:	d504      	bpl.n	cb2c <_svfiprintf_r+0xc0>
    cb22:	2353      	movs	r3, #83	; 0x53
    cb24:	202b      	movs	r0, #43	; 0x2b
    cb26:	ae02      	add	r6, sp, #8
    cb28:	199b      	adds	r3, r3, r6
    cb2a:	7018      	strb	r0, [r3, #0]
    cb2c:	7823      	ldrb	r3, [r4, #0]
    cb2e:	2b2a      	cmp	r3, #42	; 0x2a
    cb30:	d016      	beq.n	cb60 <_svfiprintf_r+0xf4>
    cb32:	2000      	movs	r0, #0
    cb34:	210a      	movs	r1, #10
    cb36:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb38:	7822      	ldrb	r2, [r4, #0]
    cb3a:	3a30      	subs	r2, #48	; 0x30
    cb3c:	2a09      	cmp	r2, #9
    cb3e:	d955      	bls.n	cbec <_svfiprintf_r+0x180>
    cb40:	2800      	cmp	r0, #0
    cb42:	d015      	beq.n	cb70 <_svfiprintf_r+0x104>
    cb44:	9309      	str	r3, [sp, #36]	; 0x24
    cb46:	e013      	b.n	cb70 <_svfiprintf_r+0x104>
    cb48:	2b25      	cmp	r3, #37	; 0x25
    cb4a:	d0b5      	beq.n	cab8 <_svfiprintf_r+0x4c>
    cb4c:	3401      	adds	r4, #1
    cb4e:	e7b0      	b.n	cab2 <_svfiprintf_r+0x46>
    cb50:	2301      	movs	r3, #1
    cb52:	1b80      	subs	r0, r0, r6
    cb54:	4083      	lsls	r3, r0
    cb56:	6829      	ldr	r1, [r5, #0]
    cb58:	0014      	movs	r4, r2
    cb5a:	430b      	orrs	r3, r1
    cb5c:	602b      	str	r3, [r5, #0]
    cb5e:	e7cd      	b.n	cafc <_svfiprintf_r+0x90>
    cb60:	9b05      	ldr	r3, [sp, #20]
    cb62:	1d18      	adds	r0, r3, #4
    cb64:	681b      	ldr	r3, [r3, #0]
    cb66:	9005      	str	r0, [sp, #20]
    cb68:	2b00      	cmp	r3, #0
    cb6a:	db39      	blt.n	cbe0 <_svfiprintf_r+0x174>
    cb6c:	9309      	str	r3, [sp, #36]	; 0x24
    cb6e:	0014      	movs	r4, r2
    cb70:	7823      	ldrb	r3, [r4, #0]
    cb72:	2b2e      	cmp	r3, #46	; 0x2e
    cb74:	d10b      	bne.n	cb8e <_svfiprintf_r+0x122>
    cb76:	7863      	ldrb	r3, [r4, #1]
    cb78:	1c62      	adds	r2, r4, #1
    cb7a:	2b2a      	cmp	r3, #42	; 0x2a
    cb7c:	d13e      	bne.n	cbfc <_svfiprintf_r+0x190>
    cb7e:	9b05      	ldr	r3, [sp, #20]
    cb80:	3402      	adds	r4, #2
    cb82:	1d1a      	adds	r2, r3, #4
    cb84:	681b      	ldr	r3, [r3, #0]
    cb86:	9205      	str	r2, [sp, #20]
    cb88:	2b00      	cmp	r3, #0
    cb8a:	db34      	blt.n	cbf6 <_svfiprintf_r+0x18a>
    cb8c:	9307      	str	r3, [sp, #28]
    cb8e:	4e35      	ldr	r6, [pc, #212]	; (cc64 <_svfiprintf_r+0x1f8>)
    cb90:	7821      	ldrb	r1, [r4, #0]
    cb92:	2203      	movs	r2, #3
    cb94:	0030      	movs	r0, r6
    cb96:	f000 f9f5 	bl	cf84 <memchr>
    cb9a:	2800      	cmp	r0, #0
    cb9c:	d006      	beq.n	cbac <_svfiprintf_r+0x140>
    cb9e:	2340      	movs	r3, #64	; 0x40
    cba0:	1b80      	subs	r0, r0, r6
    cba2:	4083      	lsls	r3, r0
    cba4:	682a      	ldr	r2, [r5, #0]
    cba6:	3401      	adds	r4, #1
    cba8:	4313      	orrs	r3, r2
    cbaa:	602b      	str	r3, [r5, #0]
    cbac:	7821      	ldrb	r1, [r4, #0]
    cbae:	2206      	movs	r2, #6
    cbb0:	482d      	ldr	r0, [pc, #180]	; (cc68 <_svfiprintf_r+0x1fc>)
    cbb2:	1c66      	adds	r6, r4, #1
    cbb4:	7629      	strb	r1, [r5, #24]
    cbb6:	f000 f9e5 	bl	cf84 <memchr>
    cbba:	2800      	cmp	r0, #0
    cbbc:	d046      	beq.n	cc4c <_svfiprintf_r+0x1e0>
    cbbe:	4b2b      	ldr	r3, [pc, #172]	; (cc6c <_svfiprintf_r+0x200>)
    cbc0:	2b00      	cmp	r3, #0
    cbc2:	d12f      	bne.n	cc24 <_svfiprintf_r+0x1b8>
    cbc4:	6829      	ldr	r1, [r5, #0]
    cbc6:	9b05      	ldr	r3, [sp, #20]
    cbc8:	2207      	movs	r2, #7
    cbca:	05c9      	lsls	r1, r1, #23
    cbcc:	d528      	bpl.n	cc20 <_svfiprintf_r+0x1b4>
    cbce:	189b      	adds	r3, r3, r2
    cbd0:	4393      	bics	r3, r2
    cbd2:	3308      	adds	r3, #8
    cbd4:	9305      	str	r3, [sp, #20]
    cbd6:	696b      	ldr	r3, [r5, #20]
    cbd8:	9a03      	ldr	r2, [sp, #12]
    cbda:	189b      	adds	r3, r3, r2
    cbdc:	616b      	str	r3, [r5, #20]
    cbde:	e767      	b.n	cab0 <_svfiprintf_r+0x44>
    cbe0:	425b      	negs	r3, r3
    cbe2:	60eb      	str	r3, [r5, #12]
    cbe4:	2302      	movs	r3, #2
    cbe6:	430b      	orrs	r3, r1
    cbe8:	602b      	str	r3, [r5, #0]
    cbea:	e7c0      	b.n	cb6e <_svfiprintf_r+0x102>
    cbec:	434b      	muls	r3, r1
    cbee:	3401      	adds	r4, #1
    cbf0:	189b      	adds	r3, r3, r2
    cbf2:	2001      	movs	r0, #1
    cbf4:	e7a0      	b.n	cb38 <_svfiprintf_r+0xcc>
    cbf6:	2301      	movs	r3, #1
    cbf8:	425b      	negs	r3, r3
    cbfa:	e7c7      	b.n	cb8c <_svfiprintf_r+0x120>
    cbfc:	2300      	movs	r3, #0
    cbfe:	0014      	movs	r4, r2
    cc00:	200a      	movs	r0, #10
    cc02:	001a      	movs	r2, r3
    cc04:	606b      	str	r3, [r5, #4]
    cc06:	7821      	ldrb	r1, [r4, #0]
    cc08:	3930      	subs	r1, #48	; 0x30
    cc0a:	2909      	cmp	r1, #9
    cc0c:	d903      	bls.n	cc16 <_svfiprintf_r+0x1aa>
    cc0e:	2b00      	cmp	r3, #0
    cc10:	d0bd      	beq.n	cb8e <_svfiprintf_r+0x122>
    cc12:	9207      	str	r2, [sp, #28]
    cc14:	e7bb      	b.n	cb8e <_svfiprintf_r+0x122>
    cc16:	4342      	muls	r2, r0
    cc18:	3401      	adds	r4, #1
    cc1a:	1852      	adds	r2, r2, r1
    cc1c:	2301      	movs	r3, #1
    cc1e:	e7f2      	b.n	cc06 <_svfiprintf_r+0x19a>
    cc20:	3307      	adds	r3, #7
    cc22:	e7d5      	b.n	cbd0 <_svfiprintf_r+0x164>
    cc24:	ab05      	add	r3, sp, #20
    cc26:	9300      	str	r3, [sp, #0]
    cc28:	003a      	movs	r2, r7
    cc2a:	4b11      	ldr	r3, [pc, #68]	; (cc70 <_svfiprintf_r+0x204>)
    cc2c:	0029      	movs	r1, r5
    cc2e:	9802      	ldr	r0, [sp, #8]
    cc30:	e000      	b.n	cc34 <_svfiprintf_r+0x1c8>
    cc32:	bf00      	nop
    cc34:	9003      	str	r0, [sp, #12]
    cc36:	9b03      	ldr	r3, [sp, #12]
    cc38:	3301      	adds	r3, #1
    cc3a:	d1cc      	bne.n	cbd6 <_svfiprintf_r+0x16a>
    cc3c:	89bb      	ldrh	r3, [r7, #12]
    cc3e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    cc40:	065b      	lsls	r3, r3, #25
    cc42:	d400      	bmi.n	cc46 <_svfiprintf_r+0x1da>
    cc44:	e729      	b.n	ca9a <_svfiprintf_r+0x2e>
    cc46:	2001      	movs	r0, #1
    cc48:	4240      	negs	r0, r0
    cc4a:	e726      	b.n	ca9a <_svfiprintf_r+0x2e>
    cc4c:	ab05      	add	r3, sp, #20
    cc4e:	9300      	str	r3, [sp, #0]
    cc50:	003a      	movs	r2, r7
    cc52:	4b07      	ldr	r3, [pc, #28]	; (cc70 <_svfiprintf_r+0x204>)
    cc54:	0029      	movs	r1, r5
    cc56:	9802      	ldr	r0, [sp, #8]
    cc58:	f000 f87a 	bl	cd50 <_printf_i>
    cc5c:	e7ea      	b.n	cc34 <_svfiprintf_r+0x1c8>
    cc5e:	46c0      	nop			; (mov r8, r8)
    cc60:	0000dadc 	.word	0x0000dadc
    cc64:	0000dae2 	.word	0x0000dae2
    cc68:	0000dae6 	.word	0x0000dae6
    cc6c:	00000000 	.word	0x00000000
    cc70:	0000c9a9 	.word	0x0000c9a9

0000cc74 <_printf_common>:
    cc74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cc76:	0015      	movs	r5, r2
    cc78:	9301      	str	r3, [sp, #4]
    cc7a:	688a      	ldr	r2, [r1, #8]
    cc7c:	690b      	ldr	r3, [r1, #16]
    cc7e:	9000      	str	r0, [sp, #0]
    cc80:	000c      	movs	r4, r1
    cc82:	4293      	cmp	r3, r2
    cc84:	da00      	bge.n	cc88 <_printf_common+0x14>
    cc86:	0013      	movs	r3, r2
    cc88:	0022      	movs	r2, r4
    cc8a:	602b      	str	r3, [r5, #0]
    cc8c:	3243      	adds	r2, #67	; 0x43
    cc8e:	7812      	ldrb	r2, [r2, #0]
    cc90:	2a00      	cmp	r2, #0
    cc92:	d001      	beq.n	cc98 <_printf_common+0x24>
    cc94:	3301      	adds	r3, #1
    cc96:	602b      	str	r3, [r5, #0]
    cc98:	6823      	ldr	r3, [r4, #0]
    cc9a:	069b      	lsls	r3, r3, #26
    cc9c:	d502      	bpl.n	cca4 <_printf_common+0x30>
    cc9e:	682b      	ldr	r3, [r5, #0]
    cca0:	3302      	adds	r3, #2
    cca2:	602b      	str	r3, [r5, #0]
    cca4:	2706      	movs	r7, #6
    cca6:	6823      	ldr	r3, [r4, #0]
    cca8:	401f      	ands	r7, r3
    ccaa:	d027      	beq.n	ccfc <_printf_common+0x88>
    ccac:	0023      	movs	r3, r4
    ccae:	3343      	adds	r3, #67	; 0x43
    ccb0:	781b      	ldrb	r3, [r3, #0]
    ccb2:	1e5a      	subs	r2, r3, #1
    ccb4:	4193      	sbcs	r3, r2
    ccb6:	6822      	ldr	r2, [r4, #0]
    ccb8:	0692      	lsls	r2, r2, #26
    ccba:	d430      	bmi.n	cd1e <_printf_common+0xaa>
    ccbc:	0022      	movs	r2, r4
    ccbe:	9901      	ldr	r1, [sp, #4]
    ccc0:	3243      	adds	r2, #67	; 0x43
    ccc2:	9800      	ldr	r0, [sp, #0]
    ccc4:	9e08      	ldr	r6, [sp, #32]
    ccc6:	47b0      	blx	r6
    ccc8:	1c43      	adds	r3, r0, #1
    ccca:	d025      	beq.n	cd18 <_printf_common+0xa4>
    cccc:	2306      	movs	r3, #6
    ccce:	6820      	ldr	r0, [r4, #0]
    ccd0:	682a      	ldr	r2, [r5, #0]
    ccd2:	68e1      	ldr	r1, [r4, #12]
    ccd4:	4003      	ands	r3, r0
    ccd6:	2500      	movs	r5, #0
    ccd8:	2b04      	cmp	r3, #4
    ccda:	d103      	bne.n	cce4 <_printf_common+0x70>
    ccdc:	1a8d      	subs	r5, r1, r2
    ccde:	43eb      	mvns	r3, r5
    cce0:	17db      	asrs	r3, r3, #31
    cce2:	401d      	ands	r5, r3
    cce4:	68a3      	ldr	r3, [r4, #8]
    cce6:	6922      	ldr	r2, [r4, #16]
    cce8:	4293      	cmp	r3, r2
    ccea:	dd01      	ble.n	ccf0 <_printf_common+0x7c>
    ccec:	1a9b      	subs	r3, r3, r2
    ccee:	18ed      	adds	r5, r5, r3
    ccf0:	2700      	movs	r7, #0
    ccf2:	42bd      	cmp	r5, r7
    ccf4:	d120      	bne.n	cd38 <_printf_common+0xc4>
    ccf6:	2000      	movs	r0, #0
    ccf8:	e010      	b.n	cd1c <_printf_common+0xa8>
    ccfa:	3701      	adds	r7, #1
    ccfc:	68e3      	ldr	r3, [r4, #12]
    ccfe:	682a      	ldr	r2, [r5, #0]
    cd00:	1a9b      	subs	r3, r3, r2
    cd02:	429f      	cmp	r7, r3
    cd04:	dad2      	bge.n	ccac <_printf_common+0x38>
    cd06:	0022      	movs	r2, r4
    cd08:	2301      	movs	r3, #1
    cd0a:	3219      	adds	r2, #25
    cd0c:	9901      	ldr	r1, [sp, #4]
    cd0e:	9800      	ldr	r0, [sp, #0]
    cd10:	9e08      	ldr	r6, [sp, #32]
    cd12:	47b0      	blx	r6
    cd14:	1c43      	adds	r3, r0, #1
    cd16:	d1f0      	bne.n	ccfa <_printf_common+0x86>
    cd18:	2001      	movs	r0, #1
    cd1a:	4240      	negs	r0, r0
    cd1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    cd1e:	2030      	movs	r0, #48	; 0x30
    cd20:	18e1      	adds	r1, r4, r3
    cd22:	3143      	adds	r1, #67	; 0x43
    cd24:	7008      	strb	r0, [r1, #0]
    cd26:	0021      	movs	r1, r4
    cd28:	1c5a      	adds	r2, r3, #1
    cd2a:	3145      	adds	r1, #69	; 0x45
    cd2c:	7809      	ldrb	r1, [r1, #0]
    cd2e:	18a2      	adds	r2, r4, r2
    cd30:	3243      	adds	r2, #67	; 0x43
    cd32:	3302      	adds	r3, #2
    cd34:	7011      	strb	r1, [r2, #0]
    cd36:	e7c1      	b.n	ccbc <_printf_common+0x48>
    cd38:	0022      	movs	r2, r4
    cd3a:	2301      	movs	r3, #1
    cd3c:	321a      	adds	r2, #26
    cd3e:	9901      	ldr	r1, [sp, #4]
    cd40:	9800      	ldr	r0, [sp, #0]
    cd42:	9e08      	ldr	r6, [sp, #32]
    cd44:	47b0      	blx	r6
    cd46:	1c43      	adds	r3, r0, #1
    cd48:	d0e6      	beq.n	cd18 <_printf_common+0xa4>
    cd4a:	3701      	adds	r7, #1
    cd4c:	e7d1      	b.n	ccf2 <_printf_common+0x7e>
	...

0000cd50 <_printf_i>:
    cd50:	b5f0      	push	{r4, r5, r6, r7, lr}
    cd52:	b08b      	sub	sp, #44	; 0x2c
    cd54:	9206      	str	r2, [sp, #24]
    cd56:	000a      	movs	r2, r1
    cd58:	3243      	adds	r2, #67	; 0x43
    cd5a:	9307      	str	r3, [sp, #28]
    cd5c:	9005      	str	r0, [sp, #20]
    cd5e:	9204      	str	r2, [sp, #16]
    cd60:	7e0a      	ldrb	r2, [r1, #24]
    cd62:	000c      	movs	r4, r1
    cd64:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cd66:	2a6e      	cmp	r2, #110	; 0x6e
    cd68:	d100      	bne.n	cd6c <_printf_i+0x1c>
    cd6a:	e08f      	b.n	ce8c <_printf_i+0x13c>
    cd6c:	d817      	bhi.n	cd9e <_printf_i+0x4e>
    cd6e:	2a63      	cmp	r2, #99	; 0x63
    cd70:	d02c      	beq.n	cdcc <_printf_i+0x7c>
    cd72:	d808      	bhi.n	cd86 <_printf_i+0x36>
    cd74:	2a00      	cmp	r2, #0
    cd76:	d100      	bne.n	cd7a <_printf_i+0x2a>
    cd78:	e099      	b.n	ceae <_printf_i+0x15e>
    cd7a:	2a58      	cmp	r2, #88	; 0x58
    cd7c:	d054      	beq.n	ce28 <_printf_i+0xd8>
    cd7e:	0026      	movs	r6, r4
    cd80:	3642      	adds	r6, #66	; 0x42
    cd82:	7032      	strb	r2, [r6, #0]
    cd84:	e029      	b.n	cdda <_printf_i+0x8a>
    cd86:	2a64      	cmp	r2, #100	; 0x64
    cd88:	d001      	beq.n	cd8e <_printf_i+0x3e>
    cd8a:	2a69      	cmp	r2, #105	; 0x69
    cd8c:	d1f7      	bne.n	cd7e <_printf_i+0x2e>
    cd8e:	6821      	ldr	r1, [r4, #0]
    cd90:	681a      	ldr	r2, [r3, #0]
    cd92:	0608      	lsls	r0, r1, #24
    cd94:	d523      	bpl.n	cdde <_printf_i+0x8e>
    cd96:	1d11      	adds	r1, r2, #4
    cd98:	6019      	str	r1, [r3, #0]
    cd9a:	6815      	ldr	r5, [r2, #0]
    cd9c:	e025      	b.n	cdea <_printf_i+0x9a>
    cd9e:	2a73      	cmp	r2, #115	; 0x73
    cda0:	d100      	bne.n	cda4 <_printf_i+0x54>
    cda2:	e088      	b.n	ceb6 <_printf_i+0x166>
    cda4:	d808      	bhi.n	cdb8 <_printf_i+0x68>
    cda6:	2a6f      	cmp	r2, #111	; 0x6f
    cda8:	d029      	beq.n	cdfe <_printf_i+0xae>
    cdaa:	2a70      	cmp	r2, #112	; 0x70
    cdac:	d1e7      	bne.n	cd7e <_printf_i+0x2e>
    cdae:	2220      	movs	r2, #32
    cdb0:	6809      	ldr	r1, [r1, #0]
    cdb2:	430a      	orrs	r2, r1
    cdb4:	6022      	str	r2, [r4, #0]
    cdb6:	e003      	b.n	cdc0 <_printf_i+0x70>
    cdb8:	2a75      	cmp	r2, #117	; 0x75
    cdba:	d020      	beq.n	cdfe <_printf_i+0xae>
    cdbc:	2a78      	cmp	r2, #120	; 0x78
    cdbe:	d1de      	bne.n	cd7e <_printf_i+0x2e>
    cdc0:	0022      	movs	r2, r4
    cdc2:	2178      	movs	r1, #120	; 0x78
    cdc4:	3245      	adds	r2, #69	; 0x45
    cdc6:	7011      	strb	r1, [r2, #0]
    cdc8:	4a6c      	ldr	r2, [pc, #432]	; (cf7c <_printf_i+0x22c>)
    cdca:	e030      	b.n	ce2e <_printf_i+0xde>
    cdcc:	000e      	movs	r6, r1
    cdce:	681a      	ldr	r2, [r3, #0]
    cdd0:	3642      	adds	r6, #66	; 0x42
    cdd2:	1d11      	adds	r1, r2, #4
    cdd4:	6019      	str	r1, [r3, #0]
    cdd6:	6813      	ldr	r3, [r2, #0]
    cdd8:	7033      	strb	r3, [r6, #0]
    cdda:	2301      	movs	r3, #1
    cddc:	e079      	b.n	ced2 <_printf_i+0x182>
    cdde:	0649      	lsls	r1, r1, #25
    cde0:	d5d9      	bpl.n	cd96 <_printf_i+0x46>
    cde2:	1d11      	adds	r1, r2, #4
    cde4:	6019      	str	r1, [r3, #0]
    cde6:	2300      	movs	r3, #0
    cde8:	5ed5      	ldrsh	r5, [r2, r3]
    cdea:	2d00      	cmp	r5, #0
    cdec:	da03      	bge.n	cdf6 <_printf_i+0xa6>
    cdee:	232d      	movs	r3, #45	; 0x2d
    cdf0:	9a04      	ldr	r2, [sp, #16]
    cdf2:	426d      	negs	r5, r5
    cdf4:	7013      	strb	r3, [r2, #0]
    cdf6:	4b62      	ldr	r3, [pc, #392]	; (cf80 <_printf_i+0x230>)
    cdf8:	270a      	movs	r7, #10
    cdfa:	9303      	str	r3, [sp, #12]
    cdfc:	e02f      	b.n	ce5e <_printf_i+0x10e>
    cdfe:	6820      	ldr	r0, [r4, #0]
    ce00:	6819      	ldr	r1, [r3, #0]
    ce02:	0605      	lsls	r5, r0, #24
    ce04:	d503      	bpl.n	ce0e <_printf_i+0xbe>
    ce06:	1d08      	adds	r0, r1, #4
    ce08:	6018      	str	r0, [r3, #0]
    ce0a:	680d      	ldr	r5, [r1, #0]
    ce0c:	e005      	b.n	ce1a <_printf_i+0xca>
    ce0e:	0640      	lsls	r0, r0, #25
    ce10:	d5f9      	bpl.n	ce06 <_printf_i+0xb6>
    ce12:	680d      	ldr	r5, [r1, #0]
    ce14:	1d08      	adds	r0, r1, #4
    ce16:	6018      	str	r0, [r3, #0]
    ce18:	b2ad      	uxth	r5, r5
    ce1a:	4b59      	ldr	r3, [pc, #356]	; (cf80 <_printf_i+0x230>)
    ce1c:	2708      	movs	r7, #8
    ce1e:	9303      	str	r3, [sp, #12]
    ce20:	2a6f      	cmp	r2, #111	; 0x6f
    ce22:	d018      	beq.n	ce56 <_printf_i+0x106>
    ce24:	270a      	movs	r7, #10
    ce26:	e016      	b.n	ce56 <_printf_i+0x106>
    ce28:	3145      	adds	r1, #69	; 0x45
    ce2a:	700a      	strb	r2, [r1, #0]
    ce2c:	4a54      	ldr	r2, [pc, #336]	; (cf80 <_printf_i+0x230>)
    ce2e:	9203      	str	r2, [sp, #12]
    ce30:	681a      	ldr	r2, [r3, #0]
    ce32:	6821      	ldr	r1, [r4, #0]
    ce34:	1d10      	adds	r0, r2, #4
    ce36:	6018      	str	r0, [r3, #0]
    ce38:	6815      	ldr	r5, [r2, #0]
    ce3a:	0608      	lsls	r0, r1, #24
    ce3c:	d522      	bpl.n	ce84 <_printf_i+0x134>
    ce3e:	07cb      	lsls	r3, r1, #31
    ce40:	d502      	bpl.n	ce48 <_printf_i+0xf8>
    ce42:	2320      	movs	r3, #32
    ce44:	4319      	orrs	r1, r3
    ce46:	6021      	str	r1, [r4, #0]
    ce48:	2710      	movs	r7, #16
    ce4a:	2d00      	cmp	r5, #0
    ce4c:	d103      	bne.n	ce56 <_printf_i+0x106>
    ce4e:	2320      	movs	r3, #32
    ce50:	6822      	ldr	r2, [r4, #0]
    ce52:	439a      	bics	r2, r3
    ce54:	6022      	str	r2, [r4, #0]
    ce56:	0023      	movs	r3, r4
    ce58:	2200      	movs	r2, #0
    ce5a:	3343      	adds	r3, #67	; 0x43
    ce5c:	701a      	strb	r2, [r3, #0]
    ce5e:	6863      	ldr	r3, [r4, #4]
    ce60:	60a3      	str	r3, [r4, #8]
    ce62:	2b00      	cmp	r3, #0
    ce64:	db5c      	blt.n	cf20 <_printf_i+0x1d0>
    ce66:	2204      	movs	r2, #4
    ce68:	6821      	ldr	r1, [r4, #0]
    ce6a:	4391      	bics	r1, r2
    ce6c:	6021      	str	r1, [r4, #0]
    ce6e:	2d00      	cmp	r5, #0
    ce70:	d158      	bne.n	cf24 <_printf_i+0x1d4>
    ce72:	9e04      	ldr	r6, [sp, #16]
    ce74:	2b00      	cmp	r3, #0
    ce76:	d064      	beq.n	cf42 <_printf_i+0x1f2>
    ce78:	0026      	movs	r6, r4
    ce7a:	9b03      	ldr	r3, [sp, #12]
    ce7c:	3642      	adds	r6, #66	; 0x42
    ce7e:	781b      	ldrb	r3, [r3, #0]
    ce80:	7033      	strb	r3, [r6, #0]
    ce82:	e05e      	b.n	cf42 <_printf_i+0x1f2>
    ce84:	0648      	lsls	r0, r1, #25
    ce86:	d5da      	bpl.n	ce3e <_printf_i+0xee>
    ce88:	b2ad      	uxth	r5, r5
    ce8a:	e7d8      	b.n	ce3e <_printf_i+0xee>
    ce8c:	6809      	ldr	r1, [r1, #0]
    ce8e:	681a      	ldr	r2, [r3, #0]
    ce90:	0608      	lsls	r0, r1, #24
    ce92:	d505      	bpl.n	cea0 <_printf_i+0x150>
    ce94:	1d11      	adds	r1, r2, #4
    ce96:	6019      	str	r1, [r3, #0]
    ce98:	6813      	ldr	r3, [r2, #0]
    ce9a:	6962      	ldr	r2, [r4, #20]
    ce9c:	601a      	str	r2, [r3, #0]
    ce9e:	e006      	b.n	ceae <_printf_i+0x15e>
    cea0:	0649      	lsls	r1, r1, #25
    cea2:	d5f7      	bpl.n	ce94 <_printf_i+0x144>
    cea4:	1d11      	adds	r1, r2, #4
    cea6:	6019      	str	r1, [r3, #0]
    cea8:	6813      	ldr	r3, [r2, #0]
    ceaa:	8aa2      	ldrh	r2, [r4, #20]
    ceac:	801a      	strh	r2, [r3, #0]
    ceae:	2300      	movs	r3, #0
    ceb0:	9e04      	ldr	r6, [sp, #16]
    ceb2:	6123      	str	r3, [r4, #16]
    ceb4:	e054      	b.n	cf60 <_printf_i+0x210>
    ceb6:	681a      	ldr	r2, [r3, #0]
    ceb8:	1d11      	adds	r1, r2, #4
    ceba:	6019      	str	r1, [r3, #0]
    cebc:	6816      	ldr	r6, [r2, #0]
    cebe:	2100      	movs	r1, #0
    cec0:	6862      	ldr	r2, [r4, #4]
    cec2:	0030      	movs	r0, r6
    cec4:	f000 f85e 	bl	cf84 <memchr>
    cec8:	2800      	cmp	r0, #0
    ceca:	d001      	beq.n	ced0 <_printf_i+0x180>
    cecc:	1b80      	subs	r0, r0, r6
    cece:	6060      	str	r0, [r4, #4]
    ced0:	6863      	ldr	r3, [r4, #4]
    ced2:	6123      	str	r3, [r4, #16]
    ced4:	2300      	movs	r3, #0
    ced6:	9a04      	ldr	r2, [sp, #16]
    ced8:	7013      	strb	r3, [r2, #0]
    ceda:	e041      	b.n	cf60 <_printf_i+0x210>
    cedc:	6923      	ldr	r3, [r4, #16]
    cede:	0032      	movs	r2, r6
    cee0:	9906      	ldr	r1, [sp, #24]
    cee2:	9805      	ldr	r0, [sp, #20]
    cee4:	9d07      	ldr	r5, [sp, #28]
    cee6:	47a8      	blx	r5
    cee8:	1c43      	adds	r3, r0, #1
    ceea:	d043      	beq.n	cf74 <_printf_i+0x224>
    ceec:	6823      	ldr	r3, [r4, #0]
    ceee:	2500      	movs	r5, #0
    cef0:	079b      	lsls	r3, r3, #30
    cef2:	d40f      	bmi.n	cf14 <_printf_i+0x1c4>
    cef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cef6:	68e0      	ldr	r0, [r4, #12]
    cef8:	4298      	cmp	r0, r3
    cefa:	da3d      	bge.n	cf78 <_printf_i+0x228>
    cefc:	0018      	movs	r0, r3
    cefe:	e03b      	b.n	cf78 <_printf_i+0x228>
    cf00:	0022      	movs	r2, r4
    cf02:	2301      	movs	r3, #1
    cf04:	3219      	adds	r2, #25
    cf06:	9906      	ldr	r1, [sp, #24]
    cf08:	9805      	ldr	r0, [sp, #20]
    cf0a:	9e07      	ldr	r6, [sp, #28]
    cf0c:	47b0      	blx	r6
    cf0e:	1c43      	adds	r3, r0, #1
    cf10:	d030      	beq.n	cf74 <_printf_i+0x224>
    cf12:	3501      	adds	r5, #1
    cf14:	68e3      	ldr	r3, [r4, #12]
    cf16:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cf18:	1a9b      	subs	r3, r3, r2
    cf1a:	429d      	cmp	r5, r3
    cf1c:	dbf0      	blt.n	cf00 <_printf_i+0x1b0>
    cf1e:	e7e9      	b.n	cef4 <_printf_i+0x1a4>
    cf20:	2d00      	cmp	r5, #0
    cf22:	d0a9      	beq.n	ce78 <_printf_i+0x128>
    cf24:	9e04      	ldr	r6, [sp, #16]
    cf26:	0028      	movs	r0, r5
    cf28:	0039      	movs	r1, r7
    cf2a:	f7fd fa53 	bl	a3d4 <__aeabi_uidivmod>
    cf2e:	9b03      	ldr	r3, [sp, #12]
    cf30:	3e01      	subs	r6, #1
    cf32:	5c5b      	ldrb	r3, [r3, r1]
    cf34:	0028      	movs	r0, r5
    cf36:	7033      	strb	r3, [r6, #0]
    cf38:	0039      	movs	r1, r7
    cf3a:	f7fd f9c5 	bl	a2c8 <__udivsi3>
    cf3e:	1e05      	subs	r5, r0, #0
    cf40:	d1f1      	bne.n	cf26 <_printf_i+0x1d6>
    cf42:	2f08      	cmp	r7, #8
    cf44:	d109      	bne.n	cf5a <_printf_i+0x20a>
    cf46:	6823      	ldr	r3, [r4, #0]
    cf48:	07db      	lsls	r3, r3, #31
    cf4a:	d506      	bpl.n	cf5a <_printf_i+0x20a>
    cf4c:	6863      	ldr	r3, [r4, #4]
    cf4e:	6922      	ldr	r2, [r4, #16]
    cf50:	4293      	cmp	r3, r2
    cf52:	dc02      	bgt.n	cf5a <_printf_i+0x20a>
    cf54:	2330      	movs	r3, #48	; 0x30
    cf56:	3e01      	subs	r6, #1
    cf58:	7033      	strb	r3, [r6, #0]
    cf5a:	9b04      	ldr	r3, [sp, #16]
    cf5c:	1b9b      	subs	r3, r3, r6
    cf5e:	6123      	str	r3, [r4, #16]
    cf60:	9b07      	ldr	r3, [sp, #28]
    cf62:	aa09      	add	r2, sp, #36	; 0x24
    cf64:	9300      	str	r3, [sp, #0]
    cf66:	0021      	movs	r1, r4
    cf68:	9b06      	ldr	r3, [sp, #24]
    cf6a:	9805      	ldr	r0, [sp, #20]
    cf6c:	f7ff fe82 	bl	cc74 <_printf_common>
    cf70:	1c43      	adds	r3, r0, #1
    cf72:	d1b3      	bne.n	cedc <_printf_i+0x18c>
    cf74:	2001      	movs	r0, #1
    cf76:	4240      	negs	r0, r0
    cf78:	b00b      	add	sp, #44	; 0x2c
    cf7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cf7c:	0000dafe 	.word	0x0000dafe
    cf80:	0000daed 	.word	0x0000daed

0000cf84 <memchr>:
    cf84:	b2c9      	uxtb	r1, r1
    cf86:	1882      	adds	r2, r0, r2
    cf88:	4290      	cmp	r0, r2
    cf8a:	d101      	bne.n	cf90 <memchr+0xc>
    cf8c:	2000      	movs	r0, #0
    cf8e:	4770      	bx	lr
    cf90:	7803      	ldrb	r3, [r0, #0]
    cf92:	428b      	cmp	r3, r1
    cf94:	d0fb      	beq.n	cf8e <memchr+0xa>
    cf96:	3001      	adds	r0, #1
    cf98:	e7f6      	b.n	cf88 <memchr+0x4>

0000cf9a <_realloc_r>:
    cf9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf9c:	0007      	movs	r7, r0
    cf9e:	000d      	movs	r5, r1
    cfa0:	0016      	movs	r6, r2
    cfa2:	2900      	cmp	r1, #0
    cfa4:	d105      	bne.n	cfb2 <_realloc_r+0x18>
    cfa6:	0011      	movs	r1, r2
    cfa8:	f7ff fa86 	bl	c4b8 <_malloc_r>
    cfac:	0004      	movs	r4, r0
    cfae:	0020      	movs	r0, r4
    cfb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cfb2:	2a00      	cmp	r2, #0
    cfb4:	d103      	bne.n	cfbe <_realloc_r+0x24>
    cfb6:	f7ff fa35 	bl	c424 <_free_r>
    cfba:	0034      	movs	r4, r6
    cfbc:	e7f7      	b.n	cfae <_realloc_r+0x14>
    cfbe:	f000 f812 	bl	cfe6 <_malloc_usable_size_r>
    cfc2:	002c      	movs	r4, r5
    cfc4:	4286      	cmp	r6, r0
    cfc6:	d9f2      	bls.n	cfae <_realloc_r+0x14>
    cfc8:	0031      	movs	r1, r6
    cfca:	0038      	movs	r0, r7
    cfcc:	f7ff fa74 	bl	c4b8 <_malloc_r>
    cfd0:	1e04      	subs	r4, r0, #0
    cfd2:	d0ec      	beq.n	cfae <_realloc_r+0x14>
    cfd4:	0029      	movs	r1, r5
    cfd6:	0032      	movs	r2, r6
    cfd8:	f7ff f9f2 	bl	c3c0 <memcpy>
    cfdc:	0029      	movs	r1, r5
    cfde:	0038      	movs	r0, r7
    cfe0:	f7ff fa20 	bl	c424 <_free_r>
    cfe4:	e7e3      	b.n	cfae <_realloc_r+0x14>

0000cfe6 <_malloc_usable_size_r>:
    cfe6:	1f0b      	subs	r3, r1, #4
    cfe8:	681b      	ldr	r3, [r3, #0]
    cfea:	1f18      	subs	r0, r3, #4
    cfec:	2b00      	cmp	r3, #0
    cfee:	da01      	bge.n	cff4 <_malloc_usable_size_r+0xe>
    cff0:	580b      	ldr	r3, [r1, r0]
    cff2:	18c0      	adds	r0, r0, r3
    cff4:	4770      	bx	lr
    cff6:	3a50      	.short	0x3a50
    cff8:	003a5300 	.word	0x003a5300
    cffc:	000a      	.short	0x000a
    cffe:	3037      	.short	0x3037
    d000:	39313134 	.word	0x39313134
    d004:	39353936 	.word	0x39353936
    d008:	39363700 	.word	0x39363700
    d00c:	39333438 	.word	0x39333438
    d010:	00313032 	.word	0x00313032
    d014:	33383337 	.word	0x33383337
    d018:	32343136 	.word	0x32343136
    d01c:	37003431 	.word	0x37003431
    d020:	36333833 	.word	0x36333833
    d024:	37363232 	.word	0x37363232
    d028:	31380038 	.word	0x31380038
    d02c:	30323034 	.word	0x30323034
    d030:	32353730 	.word	0x32353730
    d034:	30303000 	.word	0x30303000
    d038:	30303030 	.word	0x30303030
    d03c:	00303030 	.word	0x00303030
    d040:	0d415441 	.word	0x0d415441
    d044:	00          	.byte	0x00
    d045:	41          	.byte	0x41
    d046:	4454      	.short	0x4454
    d048:	0d3b7325 	.word	0x0d3b7325
    d04c:	00          	.byte	0x00
    d04d:	41          	.byte	0x41
    d04e:	2b54      	.short	0x2b54
    d050:	504c4f43 	.word	0x504c4f43
    d054:	2b000d3f 	.word	0x2b000d3f
    d058:	504c4f43 	.word	0x504c4f43
    d05c:	2c00      	.short	0x2c00
    d05e:	00          	.byte	0x00
    d05f:	41          	.byte	0x41
    d060:	0d54      	.short	0x0d54
    d062:	00          	.byte	0x00
    d063:	41          	.byte	0x41
    d064:	4d432b54 	.word	0x4d432b54
    d068:	3d414447 	.word	0x3d414447
    d06c:	4c454422 	.word	0x4c454422
    d070:	4c4c4120 	.word	0x4c4c4120
    d074:	0d22      	.short	0x0d22
    d076:	00          	.byte	0x00
    d077:	2b          	.byte	0x2b
    d078:	4e495043 	.word	0x4e495043
    d07c:	4552203a 	.word	0x4552203a
    d080:	00594441 	.word	0x00594441
    d084:	432b5441 	.word	0x432b5441
    d088:	3f4e4950 	.word	0x3f4e4950
    d08c:	000d      	.short	0x000d
    d08e:	5441      	.short	0x5441
    d090:	5743432b 	.word	0x5743432b
    d094:	2c303d41 	.word	0x2c303d41
    d098:	0d30      	.short	0x0d30
    d09a:	00          	.byte	0x00
    d09b:	41          	.byte	0x41
    d09c:	0d304554 	.word	0x0d304554
    d0a0:	00          	.byte	0x00
    d0a1:	41          	.byte	0x41
    d0a2:	2b54      	.short	0x2b54
    d0a4:	54454444 	.word	0x54454444
    d0a8:	000d313d 	.word	0x000d313d
    d0ac:	432b5441 	.word	0x432b5441
    d0b0:	3d50494c 	.word	0x3d50494c
    d0b4:	0d31      	.short	0x0d31
    d0b6:	00          	.byte	0x00
    d0b7:	41          	.byte	0x41
    d0b8:	4f432b54 	.word	0x4f432b54
    d0bc:	313d504c 	.word	0x313d504c
    d0c0:	000d      	.short	0x000d
    d0c2:	5441      	.short	0x5441
    d0c4:	434c432b 	.word	0x434c432b
    d0c8:	0d313d43 	.word	0x0d313d43
    d0cc:	00          	.byte	0x00
    d0cd:	41          	.byte	0x41
    d0ce:	2b54      	.short	0x2b54
    d0d0:	53544c43 	.word	0x53544c43
    d0d4:	000d313d 	.word	0x000d313d
    d0d8:	432b5441 	.word	0x432b5441
    d0dc:	3d494d4e 	.word	0x3d494d4e
    d0e0:	2c312c32 	.word	0x2c312c32
    d0e4:	2c302c30 	.word	0x2c302c30
    d0e8:	0d30      	.short	0x0d30
    d0ea:	00          	.byte	0x00
    d0eb:	41          	.byte	0x41
    d0ec:	0d462654 	.word	0x0d462654
    d0f0:	00          	.byte	0x00
    d0f1:	41          	.byte	0x41
    d0f2:	2b54      	.short	0x2b54
    d0f4:	4b4c4343 	.word	0x4b4c4343
    d0f8:	22000d3f 	.word	0x22000d3f
    d0fc:	2f00      	.short	0x2f00
    d0fe:	00          	.byte	0x00
    d0ff:	41          	.byte	0x41
    d100:	53432b54 	.word	0x53432b54
    d104:	39000d51 	.word	0x39000d51
    d108:	0039      	.short	0x0039
    d10a:	5441      	.short	0x5441
    d10c:	5548432b 	.word	0x5548432b
    d110:	0d50      	.short	0x0d50
    d112:	00          	.byte	0x00
    d113:	47          	.byte	0x47
    d114:	54204d53 	.word	0x54204d53
    d118:	6f656d69 	.word	0x6f656d69
    d11c:	7475      	.short	0x7475
    d11e:	00          	.byte	0x00
    d11f:	2b          	.byte	0x2b
    d120:	47455243 	.word	0x47455243
    d124:	2c30203a 	.word	0x2c30203a
    d128:	54410031 	.word	0x54410031
    d12c:	4552432b 	.word	0x4552432b
    d130:	000d3f47 	.word	0x000d3f47
    d134:	4552432b 	.word	0x4552432b
    d138:	30203a47 	.word	0x30203a47
    d13c:	352c      	.short	0x352c
    d13e:	00          	.byte	0x00
    d13f:	41          	.byte	0x41
    d140:	52432b54 	.word	0x52432b54
    d144:	343d4345 	.word	0x343d4345
    d148:	3a43222c 	.word	0x3a43222c
    d14c:	6573555c 	.word	0x6573555c
    d150:	63255c72 	.word	0x63255c72
    d154:	726d612e 	.word	0x726d612e
    d158:	2c302c22 	.word	0x2c302c22
    d15c:	252c3039 	.word	0x252c3039
    d160:	0d75      	.short	0x0d75
    d162:	00          	.byte	0x00
    d163:	41          	.byte	0x41
    d164:	4d432b54 	.word	0x4d432b54
    d168:	253d5247 	.word	0x253d5247
    d16c:	2b000d64 	.word	0x2b000d64
    d170:	52474d43 	.word	0x52474d43
    d174:	00          	.byte	0x00
    d175:	2b          	.byte	0x2b
    d176:	4c43      	.short	0x4c43
    d178:	5049      	.short	0x5049
    d17a:	00          	.byte	0x00
    d17b:	4e          	.byte	0x4e
    d17c:	4143204f 	.word	0x4143204f
    d180:	45495252 	.word	0x45495252
    d184:	55420052 	.word	0x55420052
    d188:	4e005953 	.word	0x4e005953
    d18c:	4e41204f 	.word	0x4e41204f
    d190:	52455753 	.word	0x52455753
    d194:	00          	.byte	0x00
    d195:	2b          	.byte	0x2b
    d196:	5444      	.short	0x5444
    d198:	003a464d 	.word	0x003a464d
    d19c:	544d432b 	.word	0x544d432b
    d1a0:	3a49      	.short	0x3a49
    d1a2:	00          	.byte	0x00
    d1a3:	52          	.byte	0x52
    d1a4:	00474e49 	.word	0x00474e49
    d1a8:	4552432b 	.word	0x4552432b
    d1ac:	30203a43 	.word	0x30203a43
    d1b0:	00          	.byte	0x00
    d1b1:	41          	.byte	0x41
    d1b2:	2b54      	.short	0x2b54
    d1b4:	46474d43 	.word	0x46474d43
    d1b8:	000d313d 	.word	0x000d313d
    d1bc:	562b5441 	.word	0x562b5441
    d1c0:	223d5354 	.word	0x223d5354
    d1c4:	0d227325 	.word	0x0d227325
    d1c8:	00          	.byte	0x00
    d1c9:	41          	.byte	0x41
    d1ca:	2b54      	.short	0x2b54
    d1cc:	53474d43 	.word	0x53474d43
    d1d0:	7325223d 	.word	0x7325223d
    d1d4:	3e000d22 	.word	0x3e000d22
    d1d8:	1a732500 	.word	0x1a732500
    d1dc:	000d      	.short	0x000d
    d1de:	5441      	.short	0x5441
    d1e0:	5250492b 	.word	0x5250492b
    d1e4:	0d64253d 	.word	0x0d64253d
    d1e8:	00          	.byte	0x00
    d1e9:	41          	.byte	0x41
    d1ea:	2b54      	.short	0x2b54
    d1ec:	504d5343 	.word	0x504d5343
    d1f0:	2c37313d 	.word	0x2c37313d
    d1f4:	2c373631 	.word	0x2c373631
    d1f8:	0d302c30 	.word	0x0d302c30
    d1fc:	00          	.byte	0x00
    d1fd:	41          	.byte	0x41
    d1fe:	2b54      	.short	0x2b54
    d200:	43455243 	.word	0x43455243
    d204:	000d353d 	.word	0x000d353d
    d208:	57265441 	.word	0x57265441
    d20c:	000d      	.short	0x000d
    d20e:	432b      	.short	0x432b
    d210:	3a43434c 	.word	0x3a43434c
    d214:	302c3120 	.word	0x302c3120
    d218:	2b00322c 	.word	0x2b00322c
    d21c:	43434c43 	.word	0x43434c43
    d220:	2c31203a 	.word	0x2c31203a
    d224:	00332c30 	.word	0x00332c30
    d228:	434c432b 	.word	0x434c432b
    d22c:	31203a43 	.word	0x31203a43
    d230:	302c302c 	.word	0x302c302c
    d234:	4c432b00 	.word	0x4c432b00
    d238:	203a4343 	.word	0x203a4343
    d23c:	2c302c31 	.word	0x2c302c31
    d240:	0036      	.short	0x0036
    d242:	2032      	.short	0x2032
    d244:	53414850 	.word	0x53414850
    d248:	59520045 	.word	0x59520045
    d24c:	2064253a 	.word	0x2064253a
    d250:	253a4259 	.word	0x253a4259
    d254:	52422064 	.word	0x52422064
    d258:	0a64253a 	.word	0x0a64253a
    d25c:	253a4341 	.word	0x253a4341
    d260:	65530a73 	.word	0x65530a73
    d264:	6e657571 	.word	0x6e657571
    d268:	253a6563 	.word	0x253a6563
    d26c:	6f4d0a73 	.word	0x6f4d0a73
    d270:	3a726f74 	.word	0x3a726f74
    d274:	430a4e4f 	.word	0x430a4e4f
    d278:	65727275 	.word	0x65727275
    d27c:	253a746e 	.word	0x253a746e
    d280:	4e0a4164 	.word	0x4e0a4164
    d284:	6f777465 	.word	0x6f777465
    d288:	253a6b72 	.word	0x253a6b72
    d28c:	0064      	.short	0x0064
    d28e:	4157      	.short	0x4157
    d290:	41005449 	.word	0x41005449
    d294:	004e4f4d 	.word	0x004e4f4d
    d298:	204d5347 	.word	0x204d5347
    d29c:	4c4c4143 	.word	0x4c4c4143
    d2a0:	49415720 	.word	0x49415720
    d2a4:	4e495454 	.word	0x4e495454
    d2a8:	49442047 	.word	0x49442047
    d2ac:	4c424153 	.word	0x4c424153
    d2b0:	203a2045 	.word	0x203a2045
    d2b4:	43435553 	.word	0x43435553
    d2b8:	00535345 	.word	0x00535345
    d2bc:	204d5347 	.word	0x204d5347
    d2c0:	4c4c4143 	.word	0x4c4c4143
    d2c4:	49415720 	.word	0x49415720
    d2c8:	4e495454 	.word	0x4e495454
    d2cc:	49442047 	.word	0x49442047
    d2d0:	4c424153 	.word	0x4c424153
    d2d4:	203a2045 	.word	0x203a2045
    d2d8:	4c494146 	.word	0x4c494146
    d2dc:	43004445 	.word	0x43004445
    d2e0:	5241454c 	.word	0x5241454c
    d2e4:	004c4c41 	.word	0x004c4c41
    d2e8:	204c4c41 	.word	0x204c4c41
    d2ec:	52455355 	.word	0x52455355
    d2f0:	4d554e20 	.word	0x4d554e20
    d2f4:	53524542 	.word	0x53524542
    d2f8:	454c4320 	.word	0x454c4320
    d2fc:	44455241 	.word	0x44455241
    d300:	4c4c4100 	.word	0x4c4c4100
    d304:	54455320 	.word	0x54455320
    d308:	474e4954 	.word	0x474e4954
    d30c:	52412053 	.word	0x52412053
    d310:	52412045 	.word	0x52412045
    d314:	4f4e2045 	.word	0x4f4e2045
    d318:	41462057 	.word	0x41462057
    d31c:	524f5443 	.word	0x524f5443
    d320:	45442059 	.word	0x45442059
    d324:	4c554146 	.word	0x4c554146
    d328:	554e0054 	.word	0x554e0054
    d32c:	6f4e004d 	.word	0x6f4e004d
    d330:	6d754e20 	.word	0x6d754e20
    d334:	73726562 	.word	0x73726562
    d338:	69784520 	.word	0x69784520
    d33c:	00737473 	.word	0x00737473
    d340:	45534552 	.word	0x45534552
    d344:	49440054 	.word	0x49440054
    d348:	55410044 	.word	0x55410044
    d34c:	4e4f4f54 	.word	0x4e4f4f54
    d350:	544f4d00 	.word	0x544f4d00
    d354:	4120524f 	.word	0x4120524f
    d358:	4f4f5455 	.word	0x4f4f5455
    d35c:	4e4f204e 	.word	0x4e4f204e
    d360:	54554100 	.word	0x54554100
    d364:	46464f4f 	.word	0x46464f4f
    d368:	59425700 	.word	0x59425700
    d36c:	004e4f50 	.word	0x004e4f50
    d370:	45544157 	.word	0x45544157
    d374:	59422052 	.word	0x59422052
    d378:	53534150 	.word	0x53534150
    d37c:	004e4f20 	.word	0x004e4f20
    d380:	50594257 	.word	0x50594257
    d384:	0046464f 	.word	0x0046464f
    d388:	45544157 	.word	0x45544157
    d38c:	59422052 	.word	0x59422052
    d390:	53534150 	.word	0x53534150
    d394:	46464f20 	.word	0x46464f20
    d398:	50505300 	.word	0x50505300
    d39c:	53004e4f 	.word	0x53004e4f
    d3a0:	4f205050 	.word	0x4f205050
    d3a4:	5053004e 	.word	0x5053004e
    d3a8:	46464f50 	.word	0x46464f50
    d3ac:	50505300 	.word	0x50505300
    d3b0:	46464f20 	.word	0x46464f20
    d3b4:	50505300 	.word	0x50505300
    d3b8:	50530056 	.word	0x50530056
    d3bc:	4f562050 	.word	0x4f562050
    d3c0:	5320544c 	.word	0x5320544c
    d3c4:	53005445 	.word	0x53005445
    d3c8:	4e4f5145 	.word	0x4e4f5145
    d3cc:	51455300 	.word	0x51455300
    d3d0:	4e4f2050 	.word	0x4e4f2050
    d3d4:	51455300 	.word	0x51455300
    d3d8:	0046464f 	.word	0x0046464f
    d3dc:	50514553 	.word	0x50514553
    d3e0:	46464f20 	.word	0x46464f20
    d3e4:	444e4400 	.word	0x444e4400
    d3e8:	444e4400 	.word	0x444e4400
    d3ec:	00203a20 	.word	0x00203a20
    d3f0:	20444e44 	.word	0x20444e44
    d3f4:	4f525245 	.word	0x4f525245
    d3f8:	45520052 	.word	0x45520052
    d3fc:	52005053 	.word	0x52005053
    d400:	20505345 	.word	0x20505345
    d404:	5200203a 	.word	0x5200203a
    d408:	20505345 	.word	0x20505345
    d40c:	4f525245 	.word	0x4f525245
    d410:	564f0052 	.word	0x564f0052
    d414:	564f0052 	.word	0x564f0052
    d418:	45532052 	.word	0x45532052
    d41c:	4b4f2054 	.word	0x4b4f2054
    d420:	444e5500 	.word	0x444e5500
    d424:	4e550052 	.word	0x4e550052
    d428:	53205244 	.word	0x53205244
    d42c:	4f205445 	.word	0x4f205445
    d430:	5341004b 	.word	0x5341004b
    d434:	00544154 	.word	0x00544154
    d438:	75253a43 	.word	0x75253a43
    d43c:	0a75252e 	.word	0x0a75252e
    d440:	75253a4e 	.word	0x75253a4e
    d444:	253a4f0a 	.word	0x253a4f0a
    d448:	3a550a75 	.word	0x3a550a75
    d44c:	4f0a7525 	.word	0x4f0a7525
    d450:	75253a50 	.word	0x75253a50
    d454:	3a50550a 	.word	0x3a50550a
    d458:	4f007525 	.word	0x4f007525
    d45c:	4e4f4656 	.word	0x4e4f4656
    d460:	45525000 	.word	0x45525000
    d464:	544e4556 	.word	0x544e4556
    d468:	45564f20 	.word	0x45564f20
    d46c:	4f4c4652 	.word	0x4f4c4652
    d470:	45532057 	.word	0x45532057
    d474:	4e495454 	.word	0x4e495454
    d478:	4e4f2047 	.word	0x4e4f2047
    d47c:	46564f00 	.word	0x46564f00
    d480:	0046464f 	.word	0x0046464f
    d484:	56455250 	.word	0x56455250
    d488:	20544e45 	.word	0x20544e45
    d48c:	5245564f 	.word	0x5245564f
    d490:	574f4c46 	.word	0x574f4c46
    d494:	54455320 	.word	0x54455320
    d498:	474e4954 	.word	0x474e4954
    d49c:	46464f20 	.word	0x46464f20
    d4a0:	4d324d00 	.word	0x4d324d00
    d4a4:	4d004e4f 	.word	0x4d004e4f
    d4a8:	464f4d32 	.word	0x464f4d32
    d4ac:	324d0046 	.word	0x324d0046
    d4b0:	4553204d 	.word	0x4553204d
    d4b4:	4e495454 	.word	0x4e495454
    d4b8:	464f2047 	.word	0x464f2047
    d4bc:	54530046 	.word	0x54530046
    d4c0:	53555441 	.word	0x53555441
    d4c4:	544c4100 	.word	0x544c4100
    d4c8:	414e5245 	.word	0x414e5245
    d4cc:	4e204554 	.word	0x4e204554
    d4d0:	45424d55 	.word	0x45424d55
    d4d4:	4e4f2052 	.word	0x4e4f2052
    d4d8:	4f4d4100 	.word	0x4f4d4100
    d4dc:	41004646 	.word	0x41004646
    d4e0:	5245544c 	.word	0x5245544c
    d4e4:	4554414e 	.word	0x4554414e
    d4e8:	424f4d20 	.word	0x424f4d20
    d4ec:	20454c49 	.word	0x20454c49
    d4f0:	424d554e 	.word	0x424d554e
    d4f4:	4f205245 	.word	0x4f205245
    d4f8:	4e004646 	.word	0x4e004646
    d4fc:	46464f43 	.word	0x46464f43
    d500:	204f4e00 	.word	0x204f4e00
    d504:	4c4c4143 	.word	0x4c4c4143
    d508:	54455320 	.word	0x54455320
    d50c:	474e4954 	.word	0x474e4954
    d510:	46464f20 	.word	0x46464f20
    d514:	54454700 	.word	0x54454700
    d518:	454d4954 	.word	0x454d4954
    d51c:	4d495400 	.word	0x4d495400
    d520:	203a2045 	.word	0x203a2045
    d524:	253a7525 	.word	0x253a7525
    d528:	45530075 	.word	0x45530075
    d52c:	4d495454 	.word	0x4d495454
    d530:	434e0045 	.word	0x434e0045
    d534:	454d4954 	.word	0x454d4954
    d538:	204f4e00 	.word	0x204f4e00
    d53c:	4c4c4143 	.word	0x4c4c4143
    d540:	4d495420 	.word	0x4d495420
    d544:	53474e49 	.word	0x53474e49
    d548:	54455320 	.word	0x54455320
    d54c:	41545300 	.word	0x41545300
    d550:	43004547 	.word	0x43004547
    d554:	204c4c41 	.word	0x204c4c41
    d558:	47415453 	.word	0x47415453
    d55c:	45532045 	.word	0x45532045
    d560:	4f542054 	.word	0x4f542054
    d564:	25203a20 	.word	0x25203a20
    d568:	54530064 	.word	0x54530064
    d56c:	49545241 	.word	0x49545241
    d570:	5300454d 	.word	0x5300454d
    d574:	54524154 	.word	0x54524154
    d578:	20454d49 	.word	0x20454d49
    d57c:	4100203a 	.word	0x4100203a
    d580:	544f5455 	.word	0x544f5455
    d584:	00454d49 	.word	0x00454d49
    d588:	4f545541 	.word	0x4f545541
    d58c:	454d4954 	.word	0x454d4954
    d590:	00203a20 	.word	0x00203a20
    d594:	004c4142 	.word	0x004c4142
    d598:	002b504d 	.word	0x002b504d
    d59c:	4f4e2050 	.word	0x4f4e2050
    d5a0:	44444120 	.word	0x44444120
    d5a4:	00444544 	.word	0x00444544
    d5a8:	002b534d 	.word	0x002b534d
    d5ac:	4f4e2053 	.word	0x4f4e2053
    d5b0:	44444120 	.word	0x44444120
    d5b4:	00444544 	.word	0x00444544
    d5b8:	49424f4d 	.word	0x49424f4d
    d5bc:	4e20454c 	.word	0x4e20454c
    d5c0:	41003a4f 	.word	0x41003a4f
    d5c4:	44454444 	.word	0x44454444
    d5c8:	43555320 	.word	0x43555320
    d5cc:	53534543 	.word	0x53534543
    d5d0:	4c4c5546 	.word	0x4c4c5546
    d5d4:	2d4d0059 	.word	0x2d4d0059
    d5d8:	4d455200 	.word	0x4d455200
    d5dc:	4445564f 	.word	0x4445564f
    d5e0:	43555320 	.word	0x43555320
    d5e4:	53534543 	.word	0x53534543
    d5e8:	4c4c5546 	.word	0x4c4c5546
    d5ec:	4d410059 	.word	0x4d410059
    d5f0:	4c41002b 	.word	0x4c41002b
    d5f4:	4e524554 	.word	0x4e524554
    d5f8:	20455441 	.word	0x20455441
    d5fc:	49424f4d 	.word	0x49424f4d
    d600:	4e20454c 	.word	0x4e20454c
    d604:	4441204f 	.word	0x4441204f
    d608:	55532044 	.word	0x55532044
    d60c:	53454343 	.word	0x53454343
    d610:	4c410053 	.word	0x4c410053
    d614:	4e524554 	.word	0x4e524554
    d618:	20455441 	.word	0x20455441
    d61c:	49424f4d 	.word	0x49424f4d
    d620:	4e20454c 	.word	0x4e20454c
    d624:	4441204f 	.word	0x4441204f
    d628:	41462044 	.word	0x41462044
    d62c:	44454c49 	.word	0x44454c49
    d630:	2b4d4d00 	.word	0x2b4d4d00
    d634:	4d324d00 	.word	0x4d324d00
    d638:	2e4f4e20 	.word	0x2e4f4e20
    d63c:	44444120 	.word	0x44444120
    d640:	4d004445 	.word	0x4d004445
    d644:	4d002b52 	.word	0x4d002b52
    d648:	52204d32 	.word	0x52204d32
    d64c:	544f4d45 	.word	0x544f4d45
    d650:	4f4e2045 	.word	0x4f4e2045
    d654:	4441202e 	.word	0x4441202e
    d658:	00444544 	.word	0x00444544
    d65c:	4f544f4d 	.word	0x4f544f4d
    d660:	2052      	.short	0x2052
    d662:	00          	.byte	0x00
    d663:	23          	.byte	0x23
    d664:	524d5600 	.word	0x524d5600
    d668:	4d003230 	.word	0x4d003230
    d66c:	54204d32 	.word	0x54204d32
    d670:	454e5255 	.word	0x454e5255
    d674:	4e4f2044 	.word	0x4e4f2044
    d678:	00          	.byte	0x00
    d679:	56          	.byte	0x56
    d67a:	4d4d      	.short	0x4d4d
    d67c:	3130      	.short	0x3130
    d67e:	00          	.byte	0x00
    d67f:	00          	.byte	0x00
    d680:	00000000 	.word	0x00000000
    d684:	001f1f00 	.word	0x001f1f00
    d688:	00000000 	.word	0x00000000
    d68c:	001f1f1f 	.word	0x001f1f1f
    d690:	1f000000 	.word	0x1f000000
    d694:	001f1f1f 	.word	0x001f1f1f
    d698:	1f1f1f00 	.word	0x1f1f1f00
    d69c:	1f1f1f1f 	.word	0x1f1f1f1f
    d6a0:	1f1f1f1f 	.word	0x1f1f1f1f
    d6a4:	1f1f      	.short	0x1f1f
    d6a6:	1f          	.byte	0x1f
    d6a7:	20          	.byte	0x20
    d6a8:	5349524b 	.word	0x5349524b
    d6ac:	20414e48 	.word	0x20414e48
    d6b0:	414d5320 	.word	0x414d5320
    d6b4:	00205452 	.word	0x00205452
    d6b8:	54202020 	.word	0x54202020
    d6bc:	4e484345 	.word	0x4e484345
    d6c0:	474f4c4f 	.word	0x474f4c4f
    d6c4:	20202059 	.word	0x20202059
    d6c8:	53202000 	.word	0x53202000
    d6cc:	5754464f 	.word	0x5754464f
    d6d0:	20455241 	.word	0x20455241
    d6d4:	20524556 	.word	0x20524556
    d6d8:	20200020 	.word	0x20200020
    d6dc:	2d343142 	.word	0x2d343142
    d6e0:	302d3830 	.word	0x302d3830
    d6e4:	39312d31 	.word	0x39312d31
    d6e8:	25002020 	.word	0x25002020
    d6ec:	52560073 	.word	0x52560073
    d6f0:	20202059 	.word	0x20202059
    d6f4:	20425956 	.word	0x20425956
    d6f8:	42562020 	.word	0x42562020
    d6fc:	25002052 	.word	0x25002052
    d700:	756c3330 	.word	0x756c3330
    d704:	00202020 	.word	0x00202020
    d708:	6c333025 	.word	0x6c333025
    d70c:	4d002075 	.word	0x4d002075
    d710:	524f544f 	.word	0x524f544f
    d714:	52554320 	.word	0x52554320
    d718:	544e4552 	.word	0x544e4552
    d71c:	0020203a 	.word	0x0020203a
    d720:	6c333025 	.word	0x6c333025
    d724:	30252e75 	.word	0x30252e75
    d728:	20756c32 	.word	0x20756c32
    d72c:	20202020 	.word	0x20202020
    d730:	20202020 	.word	0x20202020
    d734:	00202020 	.word	0x00202020
    d738:	48502033 	.word	0x48502033
    d73c:	20455341 	.word	0x20455341
    d740:	3a514553 	.word	0x3a514553
    d744:	4b4f2000 	.word	0x4b4f2000
    d748:	45200020 	.word	0x45200020
    d74c:	50005252 	.word	0x50005252
    d750:	45534148 	.word	0x45534148
    d754:	41545320 	.word	0x41545320
    d758:	003a4554 	.word	0x003a4554
    d75c:	48503320 	.word	0x48503320
    d760:	32200020 	.word	0x32200020
    d764:	00204850 	.word	0x00204850
    d768:	454c2d4f 	.word	0x454c2d4f
    d76c:	204c4556 	.word	0x204c4556
    d770:	4800203a 	.word	0x4800203a
    d774:	20484749 	.word	0x20484749
    d778:	494d0020 	.word	0x494d0020
    d77c:	20202044 	.word	0x20202044
    d780:	574f4c00 	.word	0x574f4c00
    d784:	00202020 	.word	0x00202020
    d788:	454c2d55 	.word	0x454c2d55
    d78c:	204c4556 	.word	0x204c4556
    d790:	4300203a 	.word	0x4300203a
    d794:	4c435452 	.word	0x4c435452
    d798:	61420020 	.word	0x61420020
    d79c:	72657474 	.word	0x72657474
    d7a0:	72655079 	.word	0x72655079
    d7a4:	7525203a 	.word	0x7525203a
    d7a8:	00202525 	.word	0x00202525
    d7ac:	4e474953 	.word	0x4e474953
    d7b0:	3a204c41 	.word	0x3a204c41
    d7b4:	00000020 	.word	0x00000020
    d7b8:	00000002 	.word	0x00000002
    d7bc:	00000003 	.word	0x00000003
    d7c0:	00000028 	.word	0x00000028
    d7c4:	00000029 	.word	0x00000029
    d7c8:	00000004 	.word	0x00000004
    d7cc:	00000005 	.word	0x00000005
    d7d0:	00000006 	.word	0x00000006
    d7d4:	00000007 	.word	0x00000007
    d7d8:	00000020 	.word	0x00000020
    d7dc:	00000021 	.word	0x00000021
    d7e0:	00000022 	.word	0x00000022
    d7e4:	00000023 	.word	0x00000023
    d7e8:	00000024 	.word	0x00000024
    d7ec:	00000025 	.word	0x00000025
    d7f0:	00000026 	.word	0x00000026
    d7f4:	00000027 	.word	0x00000027
    d7f8:	00000008 	.word	0x00000008
    d7fc:	00000009 	.word	0x00000009
    d800:	0000000a 	.word	0x0000000a
    d804:	0000000b 	.word	0x0000000b
    d808:	42000800 	.word	0x42000800
    d80c:	42000c00 	.word	0x42000c00
    d810:	42001000 	.word	0x42001000
    d814:	42001400 	.word	0x42001400
    d818:	42001800 	.word	0x42001800
    d81c:	42001c00 	.word	0x42001c00
    d820:	454c4449 	.word	0x454c4449
    d824:	00          	.byte	0x00
    d825:	54          	.byte	0x54
    d826:	726d      	.short	0x726d
    d828:	63765320 	.word	0x63765320
    d82c:	00000000 	.word	0x00000000

0000d830 <_tcc_intflag>:
    d830:	00000001 00000002 00000004 00000008     ................
    d840:	00001000 00002000 00004000 00008000     ..... ...@......
    d850:	00010000 00020000 00040000 00080000     ................
    d860:	41744545 50524f4d 456d752e 0000aa24     EEtAMORP.umE$...
    d870:	0000a9f4 0000aa06 0000a948 0000aa06     ........H.......
    d880:	0000a9ea 0000aa06 0000a948 0000a9f4     ........H.......
    d890:	0000a9f4 0000a9ea 0000a948 0000a950     ........H...P...
    d8a0:	0000a950 0000a950 0000aa0c 0000a9f4     P...P...........
    d8b0:	0000a9f4 0000a9c8 0000aaac 0000a9c8     ................
    d8c0:	0000a9ea 0000a9c8 0000aaac 0000a9f4     ................
    d8d0:	0000a9f4 0000a9ea 0000aaac 0000a950     ............P...
    d8e0:	0000a950 0000a950 0000aab6 0000ac54     P...P.......T...
    d8f0:	0000aba4 0000aba4 0000aba2 0000ac46     ............F...
    d900:	0000ac46 0000ac3c 0000aba2 0000ac46     F...<.......F...
    d910:	0000ac3c 0000ac46 0000aba2 0000ac4c     <...F.......L...
    d920:	0000ac4c 0000ac4c 0000acdc 0000afec     L...L...........
    d930:	0000afce 0000af88 0000aea6 0000af88     ................
    d940:	0000afc0 0000af88 0000aea6 0000afce     ................
    d950:	0000afce 0000afc0 0000aea6 0000ae9e     ................
    d960:	0000ae9e 0000ae9e 0000b204 0000b84c     ............L...
    d970:	0000b70c 0000b70c 0000b708 0000b824     ............$...
    d980:	0000b824 0000b816 0000b708 0000b824     $...........$...
    d990:	0000b816 0000b824 0000b708 0000b82c     ....$.......,...
    d9a0:	0000b82c 0000b82c 0000ba30 4f500043     ,...,...0...C.PO
    d9b0:	00584953 3130002e 35343332 39383736     SIX...0123456789
    d9c0:	64636261 68676665 6c6b6a69 706f6e6d     abcdefghijklmnop
    d9d0:	74737271 78777675 00007a79                       qrstuvwxyz.

0000d9db <_ctype_>:
    d9db:	20202000 20202020 28282020 20282828     .         ((((( 
    d9eb:	20202020 20202020 20202020 20202020                     
    d9fb:	10108820 10101010 10101010 10101010      ...............
    da0b:	04040410 04040404 10040404 10101010     ................
    da1b:	41411010 41414141 01010101 01010101     ..AAAAAA........
    da2b:	01010101 01010101 01010101 10101010     ................
    da3b:	42421010 42424242 02020202 02020202     ..BBBBBB........
    da4b:	02020202 02020202 02020202 10101010     ................
    da5b:	00000020 00000000 00000000 00000000      ...............
	...
    dadb:	302d2300 6800202b 65004c6c 46456766     .#-0+ .hlL.efgEF
    daeb:	31300047 35343332 39383736 44434241     G.0123456789ABCD
    dafb:	30004645 34333231 38373635 63626139     EF.0123456789abc
    db0b:	00666564 c0b5f800                                def..

0000db10 <_init>:
    db10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db12:	46c0      	nop			; (mov r8, r8)
    db14:	bcf8      	pop	{r3, r4, r5, r6, r7}
    db16:	bc08      	pop	{r3}
    db18:	469e      	mov	lr, r3
    db1a:	4770      	bx	lr

0000db1c <__init_array_start>:
    db1c:	000000dd 	.word	0x000000dd

0000db20 <_fini>:
    db20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    db22:	46c0      	nop			; (mov r8, r8)
    db24:	bcf8      	pop	{r3, r4, r5, r6, r7}
    db26:	bc08      	pop	{r3}
    db28:	469e      	mov	lr, r3
    db2a:	4770      	bx	lr

0000db2c <__fini_array_start>:
    db2c:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <ucharPhase_Seq_Check_Flag>:
2000000c:	0101                                             .

2000000d <ucharVoltage_Detect_Timer_Counter>:
2000000d:	0001 aa00                                        ...

20000010 <uxCriticalNesting>:
20000010:	aaaa aaaa                                   ....

20000014 <_events_inst>:
20000014:	0000 0000 000c 0000 0000 0000 0000 0000     ................
20000024:	0000 0000                                   ....

20000028 <g_interrupt_enabled>:
20000028:	0001 0000                                   ....

2000002c <_impure_ptr>:
2000002c:	0030 2000                                   0.. 

20000030 <impure_data>:
	...

20000090 <__global_locale>:
20000090:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f0:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000110:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000130:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000150:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000170:	c98d 0000 c39d 0000 0000 0000 d9db 0000     ................
20000180:	d9b4 0000 cffd 0000 cffd 0000 cffd 0000     ................
20000190:	cffd 0000 cffd 0000 cffd 0000 cffd 0000     ................
200001a0:	cffd 0000 cffd 0000 ffff ffff ffff ffff     ................
200001b0:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001d8:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
